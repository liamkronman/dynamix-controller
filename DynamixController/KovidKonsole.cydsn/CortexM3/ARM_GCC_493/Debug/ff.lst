ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ff.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.ld_word,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  22              		.type	ld_word, %function
  23              	ld_word:
  24              	.LFB0:
  25              		.file 1 ".\\ff.c"
   1:.\ff.c        **** /*----------------------------------------------------------------------------/
   2:.\ff.c        **** /  FatFs - Generic FAT Filesystem Module  R0.15 w/patch1                      /
   3:.\ff.c        **** /-----------------------------------------------------------------------------/
   4:.\ff.c        **** /
   5:.\ff.c        **** / Copyright (C) 2022, ChaN, all right reserved.
   6:.\ff.c        **** /
   7:.\ff.c        **** / FatFs module is an open source software. Redistribution and use of FatFs in
   8:.\ff.c        **** / source and binary forms, with or without modification, are permitted provided
   9:.\ff.c        **** / that the following condition is met:
  10:.\ff.c        **** /
  11:.\ff.c        **** / 1. Redistributions of source code must retain the above copyright notice,
  12:.\ff.c        **** /    this condition and the following disclaimer.
  13:.\ff.c        **** /
  14:.\ff.c        **** / This software is provided by the copyright holder and contributors "AS IS"
  15:.\ff.c        **** / and any warranties related to this software are DISCLAIMED.
  16:.\ff.c        **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  17:.\ff.c        **** / by use of this software.
  18:.\ff.c        **** /
  19:.\ff.c        **** /----------------------------------------------------------------------------*/
  20:.\ff.c        **** 
  21:.\ff.c        **** 
  22:.\ff.c        **** #include <string.h>
  23:.\ff.c        **** #include "ff.h"			/* Declarations of FatFs API */
  24:.\ff.c        **** #include "diskio.h"		/* Declarations of device I/O functions */
  25:.\ff.c        **** 
  26:.\ff.c        **** 
  27:.\ff.c        **** /*--------------------------------------------------------------------------
  28:.\ff.c        **** 
  29:.\ff.c        ****    Module Private Definitions
  30:.\ff.c        **** 
  31:.\ff.c        **** ---------------------------------------------------------------------------*/
  32:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 2


  33:.\ff.c        **** #if FF_DEFINED != 80286	/* Revision ID */
  34:.\ff.c        **** #error Wrong include file (ff.h).
  35:.\ff.c        **** #endif
  36:.\ff.c        **** 
  37:.\ff.c        **** 
  38:.\ff.c        **** /* Limits and boundaries */
  39:.\ff.c        **** #define MAX_DIR		0x200000		/* Max size of FAT directory */
  40:.\ff.c        **** #define MAX_DIR_EX	0x10000000		/* Max size of exFAT directory */
  41:.\ff.c        **** #define MAX_FAT12	0xFF5			/* Max FAT12 clusters (differs from specs, but right for real DOS/Windows
  42:.\ff.c        **** #define MAX_FAT16	0xFFF5			/* Max FAT16 clusters (differs from specs, but right for real DOS/Window
  43:.\ff.c        **** #define MAX_FAT32	0x0FFFFFF5		/* Max FAT32 clusters (not specified, practical limit) */
  44:.\ff.c        **** #define MAX_EXFAT	0x7FFFFFFD		/* Max exFAT clusters (differs from specs, implementation limit) */
  45:.\ff.c        **** 
  46:.\ff.c        **** 
  47:.\ff.c        **** /* Character code support macros */
  48:.\ff.c        **** #define IsUpper(c)		((c) >= 'A' && (c) <= 'Z')
  49:.\ff.c        **** #define IsLower(c)		((c) >= 'a' && (c) <= 'z')
  50:.\ff.c        **** #define IsDigit(c)		((c) >= '0' && (c) <= '9')
  51:.\ff.c        **** #define IsSeparator(c)	((c) == '/' || (c) == '\\')
  52:.\ff.c        **** #define IsTerminator(c)	((UINT)(c) < (FF_USE_LFN ? ' ' : '!'))
  53:.\ff.c        **** #define IsSurrogate(c)	((c) >= 0xD800 && (c) <= 0xDFFF)
  54:.\ff.c        **** #define IsSurrogateH(c)	((c) >= 0xD800 && (c) <= 0xDBFF)
  55:.\ff.c        **** #define IsSurrogateL(c)	((c) >= 0xDC00 && (c) <= 0xDFFF)
  56:.\ff.c        **** 
  57:.\ff.c        **** 
  58:.\ff.c        **** /* Additional file access control and file status flags for internal use */
  59:.\ff.c        **** #define FA_SEEKEND	0x20	/* Seek to end of the file on file open */
  60:.\ff.c        **** #define FA_MODIFIED	0x40	/* File has been modified */
  61:.\ff.c        **** #define FA_DIRTY	0x80	/* FIL.buf[] needs to be written-back */
  62:.\ff.c        **** 
  63:.\ff.c        **** 
  64:.\ff.c        **** /* Additional file attribute bits for internal use */
  65:.\ff.c        **** #define AM_VOL		0x08	/* Volume label */
  66:.\ff.c        **** #define AM_LFN		0x0F	/* LFN entry */
  67:.\ff.c        **** #define AM_MASK		0x3F	/* Mask of defined bits in FAT */
  68:.\ff.c        **** #define AM_MASKX	0x37	/* Mask of defined bits in exFAT */
  69:.\ff.c        **** 
  70:.\ff.c        **** 
  71:.\ff.c        **** /* Name status flags in fn[11] */
  72:.\ff.c        **** #define NSFLAG		11		/* Index of the name status byte */
  73:.\ff.c        **** #define NS_LOSS		0x01	/* Out of 8.3 format */
  74:.\ff.c        **** #define NS_LFN		0x02	/* Force to create LFN entry */
  75:.\ff.c        **** #define NS_LAST		0x04	/* Last segment */
  76:.\ff.c        **** #define NS_BODY		0x08	/* Lower case flag (body) */
  77:.\ff.c        **** #define NS_EXT		0x10	/* Lower case flag (ext) */
  78:.\ff.c        **** #define NS_DOT		0x20	/* Dot entry */
  79:.\ff.c        **** #define NS_NOLFN	0x40	/* Do not find LFN */
  80:.\ff.c        **** #define NS_NONAME	0x80	/* Not followed */
  81:.\ff.c        **** 
  82:.\ff.c        **** 
  83:.\ff.c        **** /* exFAT directory entry types */
  84:.\ff.c        **** #define	ET_BITMAP	0x81	/* Allocation bitmap */
  85:.\ff.c        **** #define	ET_UPCASE	0x82	/* Up-case table */
  86:.\ff.c        **** #define	ET_VLABEL	0x83	/* Volume label */
  87:.\ff.c        **** #define	ET_FILEDIR	0x85	/* File and directory */
  88:.\ff.c        **** #define	ET_STREAM	0xC0	/* Stream extension */
  89:.\ff.c        **** #define	ET_FILENAME	0xC1	/* Name extension */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 3


  90:.\ff.c        **** 
  91:.\ff.c        **** 
  92:.\ff.c        **** /* FatFs refers the FAT structure as simple byte array instead of structure member
  93:.\ff.c        **** / because the C structure is not binary compatible between different platforms */
  94:.\ff.c        **** 
  95:.\ff.c        **** #define BS_JmpBoot			0		/* x86 jump instruction (3-byte) */
  96:.\ff.c        **** #define BS_OEMName			3		/* OEM name (8-byte) */
  97:.\ff.c        **** #define BPB_BytsPerSec		11		/* Sector size [byte] (WORD) */
  98:.\ff.c        **** #define BPB_SecPerClus		13		/* Cluster size [sector] (BYTE) */
  99:.\ff.c        **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (WORD) */
 100:.\ff.c        **** #define BPB_NumFATs			16		/* Number of FATs (BYTE) */
 101:.\ff.c        **** #define BPB_RootEntCnt		17		/* Size of root directory area for FAT [entry] (WORD) */
 102:.\ff.c        **** #define BPB_TotSec16		19		/* Volume size (16-bit) [sector] (WORD) */
 103:.\ff.c        **** #define BPB_Media			21		/* Media descriptor byte (BYTE) */
 104:.\ff.c        **** #define BPB_FATSz16			22		/* FAT size (16-bit) [sector] (WORD) */
 105:.\ff.c        **** #define BPB_SecPerTrk		24		/* Number of sectors per track for int13h [sector] (WORD) */
 106:.\ff.c        **** #define BPB_NumHeads		26		/* Number of heads for int13h (WORD) */
 107:.\ff.c        **** #define BPB_HiddSec			28		/* Volume offset from top of the drive (DWORD) */
 108:.\ff.c        **** #define BPB_TotSec32		32		/* Volume size (32-bit) [sector] (DWORD) */
 109:.\ff.c        **** #define BS_DrvNum			36		/* Physical drive number for int13h (BYTE) */
 110:.\ff.c        **** #define BS_NTres			37		/* WindowsNT error flag (BYTE) */
 111:.\ff.c        **** #define BS_BootSig			38		/* Extended boot signature (BYTE) */
 112:.\ff.c        **** #define BS_VolID			39		/* Volume serial number (DWORD) */
 113:.\ff.c        **** #define BS_VolLab			43		/* Volume label string (8-byte) */
 114:.\ff.c        **** #define BS_FilSysType		54		/* Filesystem type string (8-byte) */
 115:.\ff.c        **** #define BS_BootCode			62		/* Boot code (448-byte) */
 116:.\ff.c        **** #define BS_55AA				510		/* Signature word (WORD) */
 117:.\ff.c        **** 
 118:.\ff.c        **** #define BPB_FATSz32			36		/* FAT32: FAT size [sector] (DWORD) */
 119:.\ff.c        **** #define BPB_ExtFlags32		40		/* FAT32: Extended flags (WORD) */
 120:.\ff.c        **** #define BPB_FSVer32			42		/* FAT32: Filesystem version (WORD) */
 121:.\ff.c        **** #define BPB_RootClus32		44		/* FAT32: Root directory cluster (DWORD) */
 122:.\ff.c        **** #define BPB_FSInfo32		48		/* FAT32: Offset of FSINFO sector (WORD) */
 123:.\ff.c        **** #define BPB_BkBootSec32		50		/* FAT32: Offset of backup boot sector (WORD) */
 124:.\ff.c        **** #define BS_DrvNum32			64		/* FAT32: Physical drive number for int13h (BYTE) */
 125:.\ff.c        **** #define BS_NTres32			65		/* FAT32: Error flag (BYTE) */
 126:.\ff.c        **** #define BS_BootSig32		66		/* FAT32: Extended boot signature (BYTE) */
 127:.\ff.c        **** #define BS_VolID32			67		/* FAT32: Volume serial number (DWORD) */
 128:.\ff.c        **** #define BS_VolLab32			71		/* FAT32: Volume label string (8-byte) */
 129:.\ff.c        **** #define BS_FilSysType32		82		/* FAT32: Filesystem type string (8-byte) */
 130:.\ff.c        **** #define BS_BootCode32		90		/* FAT32: Boot code (420-byte) */
 131:.\ff.c        **** 
 132:.\ff.c        **** #define BPB_ZeroedEx		11		/* exFAT: MBZ field (53-byte) */
 133:.\ff.c        **** #define BPB_VolOfsEx		64		/* exFAT: Volume offset from top of the drive [sector] (QWORD) */
 134:.\ff.c        **** #define BPB_TotSecEx		72		/* exFAT: Volume size [sector] (QWORD) */
 135:.\ff.c        **** #define BPB_FatOfsEx		80		/* exFAT: FAT offset from top of the volume [sector] (DWORD) */
 136:.\ff.c        **** #define BPB_FatSzEx			84		/* exFAT: FAT size [sector] (DWORD) */
 137:.\ff.c        **** #define BPB_DataOfsEx		88		/* exFAT: Data offset from top of the volume [sector] (DWORD) */
 138:.\ff.c        **** #define BPB_NumClusEx		92		/* exFAT: Number of clusters (DWORD) */
 139:.\ff.c        **** #define BPB_RootClusEx		96		/* exFAT: Root directory start cluster (DWORD) */
 140:.\ff.c        **** #define BPB_VolIDEx			100		/* exFAT: Volume serial number (DWORD) */
 141:.\ff.c        **** #define BPB_FSVerEx			104		/* exFAT: Filesystem version (WORD) */
 142:.\ff.c        **** #define BPB_VolFlagEx		106		/* exFAT: Volume flags (WORD) */
 143:.\ff.c        **** #define BPB_BytsPerSecEx	108		/* exFAT: Log2 of sector size in unit of byte (BYTE) */
 144:.\ff.c        **** #define BPB_SecPerClusEx	109		/* exFAT: Log2 of cluster size in unit of sector (BYTE) */
 145:.\ff.c        **** #define BPB_NumFATsEx		110		/* exFAT: Number of FATs (BYTE) */
 146:.\ff.c        **** #define BPB_DrvNumEx		111		/* exFAT: Physical drive number for int13h (BYTE) */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 4


 147:.\ff.c        **** #define BPB_PercInUseEx		112		/* exFAT: Percent in use (BYTE) */
 148:.\ff.c        **** #define BPB_RsvdEx			113		/* exFAT: Reserved (7-byte) */
 149:.\ff.c        **** #define BS_BootCodeEx		120		/* exFAT: Boot code (390-byte) */
 150:.\ff.c        **** 
 151:.\ff.c        **** #define DIR_Name			0		/* Short file name (11-byte) */
 152:.\ff.c        **** #define DIR_Attr			11		/* Attribute (BYTE) */
 153:.\ff.c        **** #define DIR_NTres			12		/* Lower case flag (BYTE) */
 154:.\ff.c        **** #define DIR_CrtTime10		13		/* Created time sub-second (BYTE) */
 155:.\ff.c        **** #define DIR_CrtTime			14		/* Created time (DWORD) */
 156:.\ff.c        **** #define DIR_LstAccDate		18		/* Last accessed date (WORD) */
 157:.\ff.c        **** #define DIR_FstClusHI		20		/* Higher 16-bit of first cluster (WORD) */
 158:.\ff.c        **** #define DIR_ModTime			22		/* Modified time (DWORD) */
 159:.\ff.c        **** #define DIR_FstClusLO		26		/* Lower 16-bit of first cluster (WORD) */
 160:.\ff.c        **** #define DIR_FileSize		28		/* File size (DWORD) */
 161:.\ff.c        **** #define LDIR_Ord			0		/* LFN: LFN order and LLE flag (BYTE) */
 162:.\ff.c        **** #define LDIR_Attr			11		/* LFN: LFN attribute (BYTE) */
 163:.\ff.c        **** #define LDIR_Type			12		/* LFN: Entry type (BYTE) */
 164:.\ff.c        **** #define LDIR_Chksum			13		/* LFN: Checksum of the SFN (BYTE) */
 165:.\ff.c        **** #define LDIR_FstClusLO		26		/* LFN: MBZ field (WORD) */
 166:.\ff.c        **** #define XDIR_Type			0		/* exFAT: Type of exFAT directory entry (BYTE) */
 167:.\ff.c        **** #define XDIR_NumLabel		1		/* exFAT: Number of volume label characters (BYTE) */
 168:.\ff.c        **** #define XDIR_Label			2		/* exFAT: Volume label (11-WORD) */
 169:.\ff.c        **** #define XDIR_CaseSum		4		/* exFAT: Sum of case conversion table (DWORD) */
 170:.\ff.c        **** #define XDIR_NumSec			1		/* exFAT: Number of secondary entries (BYTE) */
 171:.\ff.c        **** #define XDIR_SetSum			2		/* exFAT: Sum of the set of directory entries (WORD) */
 172:.\ff.c        **** #define XDIR_Attr			4		/* exFAT: File attribute (WORD) */
 173:.\ff.c        **** #define XDIR_CrtTime		8		/* exFAT: Created time (DWORD) */
 174:.\ff.c        **** #define XDIR_ModTime		12		/* exFAT: Modified time (DWORD) */
 175:.\ff.c        **** #define XDIR_AccTime		16		/* exFAT: Last accessed time (DWORD) */
 176:.\ff.c        **** #define XDIR_CrtTime10		20		/* exFAT: Created time subsecond (BYTE) */
 177:.\ff.c        **** #define XDIR_ModTime10		21		/* exFAT: Modified time subsecond (BYTE) */
 178:.\ff.c        **** #define XDIR_CrtTZ			22		/* exFAT: Created timezone (BYTE) */
 179:.\ff.c        **** #define XDIR_ModTZ			23		/* exFAT: Modified timezone (BYTE) */
 180:.\ff.c        **** #define XDIR_AccTZ			24		/* exFAT: Last accessed timezone (BYTE) */
 181:.\ff.c        **** #define XDIR_GenFlags		33		/* exFAT: General secondary flags (BYTE) */
 182:.\ff.c        **** #define XDIR_NumName		35		/* exFAT: Number of file name characters (BYTE) */
 183:.\ff.c        **** #define XDIR_NameHash		36		/* exFAT: Hash of file name (WORD) */
 184:.\ff.c        **** #define XDIR_ValidFileSize	40		/* exFAT: Valid file size (QWORD) */
 185:.\ff.c        **** #define XDIR_FstClus		52		/* exFAT: First cluster of the file data (DWORD) */
 186:.\ff.c        **** #define XDIR_FileSize		56		/* exFAT: File/Directory size (QWORD) */
 187:.\ff.c        **** 
 188:.\ff.c        **** #define SZDIRE				32		/* Size of a directory entry */
 189:.\ff.c        **** #define DDEM				0xE5	/* Deleted directory entry mark set to DIR_Name[0] */
 190:.\ff.c        **** #define RDDEM				0x05	/* Replacement of the character collides with DDEM */
 191:.\ff.c        **** #define LLEF				0x40	/* Last long entry flag in LDIR_Ord */
 192:.\ff.c        **** 
 193:.\ff.c        **** #define FSI_LeadSig			0		/* FAT32 FSI: Leading signature (DWORD) */
 194:.\ff.c        **** #define FSI_StrucSig		484		/* FAT32 FSI: Structure signature (DWORD) */
 195:.\ff.c        **** #define FSI_Free_Count		488		/* FAT32 FSI: Number of free clusters (DWORD) */
 196:.\ff.c        **** #define FSI_Nxt_Free		492		/* FAT32 FSI: Last allocated cluster (DWORD) */
 197:.\ff.c        **** 
 198:.\ff.c        **** #define MBR_Table			446		/* MBR: Offset of partition table in the MBR */
 199:.\ff.c        **** #define SZ_PTE				16		/* MBR: Size of a partition table entry */
 200:.\ff.c        **** #define PTE_Boot			0		/* MBR PTE: Boot indicator */
 201:.\ff.c        **** #define PTE_StHead			1		/* MBR PTE: Start head */
 202:.\ff.c        **** #define PTE_StSec			2		/* MBR PTE: Start sector */
 203:.\ff.c        **** #define PTE_StCyl			3		/* MBR PTE: Start cylinder */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 5


 204:.\ff.c        **** #define PTE_System			4		/* MBR PTE: System ID */
 205:.\ff.c        **** #define PTE_EdHead			5		/* MBR PTE: End head */
 206:.\ff.c        **** #define PTE_EdSec			6		/* MBR PTE: End sector */
 207:.\ff.c        **** #define PTE_EdCyl			7		/* MBR PTE: End cylinder */
 208:.\ff.c        **** #define PTE_StLba			8		/* MBR PTE: Start in LBA */
 209:.\ff.c        **** #define PTE_SizLba			12		/* MBR PTE: Size in LBA */
 210:.\ff.c        **** 
 211:.\ff.c        **** #define GPTH_Sign			0		/* GPT HDR: Signature (8-byte) */
 212:.\ff.c        **** #define GPTH_Rev			8		/* GPT HDR: Revision (DWORD) */
 213:.\ff.c        **** #define GPTH_Size			12		/* GPT HDR: Header size (DWORD) */
 214:.\ff.c        **** #define GPTH_Bcc			16		/* GPT HDR: Header BCC (DWORD) */
 215:.\ff.c        **** #define GPTH_CurLba			24		/* GPT HDR: This header LBA (QWORD) */
 216:.\ff.c        **** #define GPTH_BakLba			32		/* GPT HDR: Another header LBA (QWORD) */
 217:.\ff.c        **** #define GPTH_FstLba			40		/* GPT HDR: First LBA for partition data (QWORD) */
 218:.\ff.c        **** #define GPTH_LstLba			48		/* GPT HDR: Last LBA for partition data (QWORD) */
 219:.\ff.c        **** #define GPTH_DskGuid		56		/* GPT HDR: Disk GUID (16-byte) */
 220:.\ff.c        **** #define GPTH_PtOfs			72		/* GPT HDR: Partition table LBA (QWORD) */
 221:.\ff.c        **** #define GPTH_PtNum			80		/* GPT HDR: Number of table entries (DWORD) */
 222:.\ff.c        **** #define GPTH_PteSize		84		/* GPT HDR: Size of table entry (DWORD) */
 223:.\ff.c        **** #define GPTH_PtBcc			88		/* GPT HDR: Partition table BCC (DWORD) */
 224:.\ff.c        **** #define SZ_GPTE				128		/* GPT PTE: Size of partition table entry */
 225:.\ff.c        **** #define GPTE_PtGuid			0		/* GPT PTE: Partition type GUID (16-byte) */
 226:.\ff.c        **** #define GPTE_UpGuid			16		/* GPT PTE: Partition unique GUID (16-byte) */
 227:.\ff.c        **** #define GPTE_FstLba			32		/* GPT PTE: First LBA of partition (QWORD) */
 228:.\ff.c        **** #define GPTE_LstLba			40		/* GPT PTE: Last LBA of partition (QWORD) */
 229:.\ff.c        **** #define GPTE_Flags			48		/* GPT PTE: Partition flags (QWORD) */
 230:.\ff.c        **** #define GPTE_Name			56		/* GPT PTE: Partition name */
 231:.\ff.c        **** 
 232:.\ff.c        **** 
 233:.\ff.c        **** /* Post process on fatal error in the file operations */
 234:.\ff.c        **** #define ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 235:.\ff.c        **** 
 236:.\ff.c        **** 
 237:.\ff.c        **** /* Re-entrancy related */
 238:.\ff.c        **** #if FF_FS_REENTRANT
 239:.\ff.c        **** #if FF_USE_LFN == 1
 240:.\ff.c        **** #error Static LFN work area cannot be used in thread-safe configuration
 241:.\ff.c        **** #endif
 242:.\ff.c        **** #define LEAVE_FF(fs, res)	{ unlock_volume(fs, res); return res; }
 243:.\ff.c        **** #else
 244:.\ff.c        **** #define LEAVE_FF(fs, res)	return res
 245:.\ff.c        **** #endif
 246:.\ff.c        **** 
 247:.\ff.c        **** 
 248:.\ff.c        **** /* Definitions of logical drive - physical location conversion */
 249:.\ff.c        **** #if FF_MULTI_PARTITION
 250:.\ff.c        **** #define LD2PD(vol) VolToPart[vol].pd	/* Get physical drive number */
 251:.\ff.c        **** #define LD2PT(vol) VolToPart[vol].pt	/* Get partition number (0:auto search, 1..:forced partition n
 252:.\ff.c        **** #else
 253:.\ff.c        **** #define LD2PD(vol) (BYTE)(vol)	/* Each logical drive is associated with the same physical drive num
 254:.\ff.c        **** #define LD2PT(vol) 0			/* Auto partition search */
 255:.\ff.c        **** #endif
 256:.\ff.c        **** 
 257:.\ff.c        **** 
 258:.\ff.c        **** /* Definitions of sector size */
 259:.\ff.c        **** #if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_SS != 512 && FF_MAX_SS != 1024 && FF_MAX_SS != 2048 && FF_MA
 260:.\ff.c        **** #error Wrong sector size configuration
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 6


 261:.\ff.c        **** #endif
 262:.\ff.c        **** #if FF_MAX_SS == FF_MIN_SS
 263:.\ff.c        **** #define SS(fs)	((UINT)FF_MAX_SS)	/* Fixed sector size */
 264:.\ff.c        **** #else
 265:.\ff.c        **** #define SS(fs)	((fs)->ssize)	/* Variable sector size */
 266:.\ff.c        **** #endif
 267:.\ff.c        **** 
 268:.\ff.c        **** 
 269:.\ff.c        **** /* Timestamp */
 270:.\ff.c        **** #if FF_FS_NORTC == 1
 271:.\ff.c        **** #if FF_NORTC_YEAR < 1980 || FF_NORTC_YEAR > 2107 || FF_NORTC_MON < 1 || FF_NORTC_MON > 12 || FF_NOR
 272:.\ff.c        **** #error Invalid FF_FS_NORTC settings
 273:.\ff.c        **** #endif
 274:.\ff.c        **** #define GET_FATTIME()	((DWORD)(FF_NORTC_YEAR - 1980) << 25 | (DWORD)FF_NORTC_MON << 21 | (DWORD)FF_
 275:.\ff.c        **** #else
 276:.\ff.c        **** #define GET_FATTIME()	get_fattime()
 277:.\ff.c        **** #endif
 278:.\ff.c        **** 
 279:.\ff.c        **** 
 280:.\ff.c        **** /* File lock controls */
 281:.\ff.c        **** #if FF_FS_LOCK
 282:.\ff.c        **** #if FF_FS_READONLY
 283:.\ff.c        **** #error FF_FS_LOCK must be 0 at read-only configuration
 284:.\ff.c        **** #endif
 285:.\ff.c        **** typedef struct {
 286:.\ff.c        **** 	FATFS* fs;		/* Object ID 1, volume (NULL:blank entry) */
 287:.\ff.c        **** 	DWORD clu;		/* Object ID 2, containing directory (0:root) */
 288:.\ff.c        **** 	DWORD ofs;		/* Object ID 3, offset in the directory */
 289:.\ff.c        **** 	UINT ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
 290:.\ff.c        **** } FILESEM;
 291:.\ff.c        **** #endif
 292:.\ff.c        **** 
 293:.\ff.c        **** 
 294:.\ff.c        **** /* SBCS up-case tables (\x80-\xFF) */
 295:.\ff.c        **** #define TBL_CT437  {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 296:.\ff.c        **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 297:.\ff.c        **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 298:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 299:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 300:.\ff.c        **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 301:.\ff.c        **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 302:.\ff.c        **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 303:.\ff.c        **** #define TBL_CT720  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 304:.\ff.c        **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 305:.\ff.c        **** 					0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 306:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 307:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 308:.\ff.c        **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 309:.\ff.c        **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 310:.\ff.c        **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 311:.\ff.c        **** #define TBL_CT737  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 312:.\ff.c        **** 					0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
 313:.\ff.c        **** 					0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96, \
 314:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 315:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 316:.\ff.c        **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 317:.\ff.c        **** 					0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 7


 318:.\ff.c        **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 319:.\ff.c        **** #define TBL_CT771  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 320:.\ff.c        **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 321:.\ff.c        **** 					0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 322:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 323:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 324:.\ff.c        **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0xDE, \
 325:.\ff.c        **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 326:.\ff.c        **** 					0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0xFF}
 327:.\ff.c        **** #define TBL_CT775  {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F
 328:.\ff.c        **** 					0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 329:.\ff.c        **** 					0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 330:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 331:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 332:.\ff.c        **** 					0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 333:.\ff.c        **** 					0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF, \
 334:.\ff.c        **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 335:.\ff.c        **** #define TBL_CT850  {0x43,0x55,0x45,0x41,0x41,0x41,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41
 336:.\ff.c        **** 					0x45,0x92,0x92,0x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0x9F, \
 337:.\ff.c        **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 338:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 339:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 340:.\ff.c        **** 					0xD1,0xD1,0x45,0x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0xDF, \
 341:.\ff.c        **** 					0x4F,0xE1,0x4F,0x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0xEF, \
 342:.\ff.c        **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 343:.\ff.c        **** #define TBL_CT852  {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F
 344:.\ff.c        **** 					0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0xAC, \
 345:.\ff.c        **** 					0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF, \
 346:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
 347:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 348:.\ff.c        **** 					0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 349:.\ff.c        **** 					0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF, \
 350:.\ff.c        **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
 351:.\ff.c        **** #define TBL_CT855  {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F
 352:.\ff.c        **** 					0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
 353:.\ff.c        **** 					0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF, \
 354:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
 355:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 356:.\ff.c        **** 					0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
 357:.\ff.c        **** 					0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF, \
 358:.\ff.c        **** 					0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
 359:.\ff.c        **** #define TBL_CT857  {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F
 360:.\ff.c        **** 					0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
 361:.\ff.c        **** 					0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 362:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 363:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 364:.\ff.c        **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 365:.\ff.c        **** 					0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0xEF, \
 366:.\ff.c        **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 367:.\ff.c        **** #define TBL_CT860  {0x80,0x9A,0x90,0x8F,0x8E,0x91,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F
 368:.\ff.c        **** 					0x90,0x91,0x92,0x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 369:.\ff.c        **** 					0x86,0x8B,0x9F,0x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 370:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 371:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 372:.\ff.c        **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 373:.\ff.c        **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 374:.\ff.c        **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 8


 375:.\ff.c        **** #define TBL_CT861  {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F
 376:.\ff.c        **** 					0x90,0x92,0x92,0x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 377:.\ff.c        **** 					0xA4,0xA5,0xA6,0xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 378:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 379:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 380:.\ff.c        **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 381:.\ff.c        **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 382:.\ff.c        **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 383:.\ff.c        **** #define TBL_CT862  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 384:.\ff.c        **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 385:.\ff.c        **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 386:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 387:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 388:.\ff.c        **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 389:.\ff.c        **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 390:.\ff.c        **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 391:.\ff.c        **** #define TBL_CT863  {0x43,0x55,0x45,0x41,0x41,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F
 392:.\ff.c        **** 					0x45,0x45,0x45,0x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0x9F, \
 393:.\ff.c        **** 					0xA0,0xA1,0x4F,0x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 394:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 395:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 396:.\ff.c        **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 397:.\ff.c        **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 398:.\ff.c        **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 399:.\ff.c        **** #define TBL_CT864  {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 400:.\ff.c        **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 401:.\ff.c        **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 402:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 403:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 404:.\ff.c        **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 405:.\ff.c        **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 406:.\ff.c        **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 407:.\ff.c        **** #define TBL_CT865  {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 408:.\ff.c        **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 409:.\ff.c        **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 410:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 411:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 412:.\ff.c        **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 413:.\ff.c        **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 414:.\ff.c        **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 415:.\ff.c        **** #define TBL_CT866  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 416:.\ff.c        **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 417:.\ff.c        **** 					0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 418:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 419:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 420:.\ff.c        **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 421:.\ff.c        **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 422:.\ff.c        **** 					0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 423:.\ff.c        **** #define TBL_CT869  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 424:.\ff.c        **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0x90, \
 425:.\ff.c        **** 					0x91,0x90,0x92,0x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 426:.\ff.c        **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 427:.\ff.c        **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 428:.\ff.c        **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0xDF, \
 429:.\ff.c        **** 					0xA9,0xAA,0xAC,0xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0xEF, \
 430:.\ff.c        **** 					0xF0,0xF1,0xD1,0xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0xFF}
 431:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 9


 432:.\ff.c        **** 
 433:.\ff.c        **** /* DBCS code range |----- 1st byte -----|  |----------- 2nd byte -----------| */
 434:.\ff.c        **** /*                  <------>    <------>    <------>    <------>    <------>  */
 435:.\ff.c        **** #define TBL_DC932 {0x81, 0x9F, 0xE0, 0xFC, 0x40, 0x7E, 0x80, 0xFC, 0x00, 0x00}
 436:.\ff.c        **** #define TBL_DC936 {0x81, 0xFE, 0x00, 0x00, 0x40, 0x7E, 0x80, 0xFE, 0x00, 0x00}
 437:.\ff.c        **** #define TBL_DC949 {0x81, 0xFE, 0x00, 0x00, 0x41, 0x5A, 0x61, 0x7A, 0x81, 0xFE}
 438:.\ff.c        **** #define TBL_DC950 {0x81, 0xFE, 0x00, 0x00, 0x40, 0x7E, 0xA1, 0xFE, 0x00, 0x00}
 439:.\ff.c        **** 
 440:.\ff.c        **** 
 441:.\ff.c        **** /* Macros for table definitions */
 442:.\ff.c        **** #define MERGE_2STR(a, b) a ## b
 443:.\ff.c        **** #define MKCVTBL(hd, cp) MERGE_2STR(hd, cp)
 444:.\ff.c        **** 
 445:.\ff.c        **** 
 446:.\ff.c        **** 
 447:.\ff.c        **** 
 448:.\ff.c        **** /*--------------------------------------------------------------------------
 449:.\ff.c        **** 
 450:.\ff.c        ****    Module Private Work Area
 451:.\ff.c        **** 
 452:.\ff.c        **** ---------------------------------------------------------------------------*/
 453:.\ff.c        **** /* Remark: Variables defined here without initial value shall be guaranteed
 454:.\ff.c        **** /  zero/null at start-up. If not, the linker option or start-up routine is
 455:.\ff.c        **** /  not compliance with C standard. */
 456:.\ff.c        **** 
 457:.\ff.c        **** /*--------------------------------*/
 458:.\ff.c        **** /* File/Volume controls           */
 459:.\ff.c        **** /*--------------------------------*/
 460:.\ff.c        **** 
 461:.\ff.c        **** #if FF_VOLUMES < 1 || FF_VOLUMES > 10
 462:.\ff.c        **** #error Wrong FF_VOLUMES setting
 463:.\ff.c        **** #endif
 464:.\ff.c        **** static FATFS *FatFs[FF_VOLUMES];	/* Pointer to the filesystem objects (logical drives) */
 465:.\ff.c        **** static WORD Fsid;					/* Filesystem mount ID */
 466:.\ff.c        **** 
 467:.\ff.c        **** #if FF_FS_RPATH != 0
 468:.\ff.c        **** static BYTE CurrVol;				/* Current drive set by f_chdrive() */
 469:.\ff.c        **** #endif
 470:.\ff.c        **** 
 471:.\ff.c        **** #if FF_FS_LOCK != 0
 472:.\ff.c        **** static FILESEM Files[FF_FS_LOCK];	/* Open object lock semaphores */
 473:.\ff.c        **** #if FF_FS_REENTRANT
 474:.\ff.c        **** static BYTE SysLock;				/* System lock flag (0:no mutex, 1:unlocked, 2:locked) */
 475:.\ff.c        **** #endif
 476:.\ff.c        **** #endif
 477:.\ff.c        **** 
 478:.\ff.c        **** #if FF_STR_VOLUME_ID
 479:.\ff.c        **** #ifdef FF_VOLUME_STRS
 480:.\ff.c        **** static const char *const VolumeStr[FF_VOLUMES] = {FF_VOLUME_STRS};	/* Pre-defined volume ID */
 481:.\ff.c        **** #endif
 482:.\ff.c        **** #endif
 483:.\ff.c        **** 
 484:.\ff.c        **** #if FF_LBA64
 485:.\ff.c        **** #if FF_MIN_GPT > 0x100000000
 486:.\ff.c        **** #error Wrong FF_MIN_GPT setting
 487:.\ff.c        **** #endif
 488:.\ff.c        **** static const BYTE GUID_MS_Basic[16] = {0xA2,0xA0,0xD0,0xEB,0xE5,0xB9,0x33,0x44,0x87,0xC0,0x68,0xB6,
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 10


 489:.\ff.c        **** #endif
 490:.\ff.c        **** 
 491:.\ff.c        **** 
 492:.\ff.c        **** 
 493:.\ff.c        **** /*--------------------------------*/
 494:.\ff.c        **** /* LFN/Directory working buffer   */
 495:.\ff.c        **** /*--------------------------------*/
 496:.\ff.c        **** 
 497:.\ff.c        **** #if FF_USE_LFN == 0		/* Non-LFN configuration */
 498:.\ff.c        **** #if FF_FS_EXFAT
 499:.\ff.c        **** #error LFN must be enabled when enable exFAT
 500:.\ff.c        **** #endif
 501:.\ff.c        **** #define DEF_NAMBUF
 502:.\ff.c        **** #define INIT_NAMBUF(fs)
 503:.\ff.c        **** #define FREE_NAMBUF()
 504:.\ff.c        **** #define LEAVE_MKFS(res)	return res
 505:.\ff.c        **** 
 506:.\ff.c        **** #else					/* LFN configurations */
 507:.\ff.c        **** #if FF_MAX_LFN < 12 || FF_MAX_LFN > 255
 508:.\ff.c        **** #error Wrong setting of FF_MAX_LFN
 509:.\ff.c        **** #endif
 510:.\ff.c        **** #if FF_LFN_BUF < FF_SFN_BUF || FF_SFN_BUF < 12
 511:.\ff.c        **** #error Wrong setting of FF_LFN_BUF or FF_SFN_BUF
 512:.\ff.c        **** #endif
 513:.\ff.c        **** #if FF_LFN_UNICODE < 0 || FF_LFN_UNICODE > 3
 514:.\ff.c        **** #error Wrong setting of FF_LFN_UNICODE
 515:.\ff.c        **** #endif
 516:.\ff.c        **** static const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* FAT: Offset of LFN characters 
 517:.\ff.c        **** #define MAXDIRB(nc)	((nc + 44U) / 15 * SZDIRE)	/* exFAT: Size of directory entry block scratchpad b
 518:.\ff.c        **** 
 519:.\ff.c        **** #if FF_USE_LFN == 1		/* LFN enabled with static working buffer */
 520:.\ff.c        **** #if FF_FS_EXFAT
 521:.\ff.c        **** static BYTE	DirBuf[MAXDIRB(FF_MAX_LFN)];	/* Directory entry block scratchpad buffer */
 522:.\ff.c        **** #endif
 523:.\ff.c        **** static WCHAR LfnBuf[FF_MAX_LFN + 1];		/* LFN working buffer */
 524:.\ff.c        **** #define DEF_NAMBUF
 525:.\ff.c        **** #define INIT_NAMBUF(fs)
 526:.\ff.c        **** #define FREE_NAMBUF()
 527:.\ff.c        **** #define LEAVE_MKFS(res)	return res
 528:.\ff.c        **** 
 529:.\ff.c        **** #elif FF_USE_LFN == 2 	/* LFN enabled with dynamic working buffer on the stack */
 530:.\ff.c        **** #if FF_FS_EXFAT
 531:.\ff.c        **** #define DEF_NAMBUF		WCHAR lbuf[FF_MAX_LFN+1]; BYTE dbuf[MAXDIRB(FF_MAX_LFN)];	/* LFN working buffer
 532:.\ff.c        **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (fs)->dirbuf = dbuf; }
 533:.\ff.c        **** #define FREE_NAMBUF()
 534:.\ff.c        **** #else
 535:.\ff.c        **** #define DEF_NAMBUF		WCHAR lbuf[FF_MAX_LFN+1];	/* LFN working buffer */
 536:.\ff.c        **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
 537:.\ff.c        **** #define FREE_NAMBUF()
 538:.\ff.c        **** #endif
 539:.\ff.c        **** #define LEAVE_MKFS(res)	return res
 540:.\ff.c        **** 
 541:.\ff.c        **** #elif FF_USE_LFN == 3 	/* LFN enabled with dynamic working buffer on the heap */
 542:.\ff.c        **** #if FF_FS_EXFAT
 543:.\ff.c        **** #define DEF_NAMBUF		WCHAR *lfn;	/* Pointer to LFN working buffer and directory entry block scratchp
 544:.\ff.c        **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_MAX_LFN+1)*2 + MAXDIRB(FF_MAX_LFN)); if (!lfn) LEAV
 545:.\ff.c        **** #define FREE_NAMBUF()	ff_memfree(lfn)
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 11


 546:.\ff.c        **** #else
 547:.\ff.c        **** #define DEF_NAMBUF		WCHAR *lfn;	/* Pointer to LFN working buffer */
 548:.\ff.c        **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH
 549:.\ff.c        **** #define FREE_NAMBUF()	ff_memfree(lfn)
 550:.\ff.c        **** #endif
 551:.\ff.c        **** #define LEAVE_MKFS(res)	{ if (!work) ff_memfree(buf); return res; }
 552:.\ff.c        **** #define MAX_MALLOC	0x8000	/* Must be >=FF_MAX_SS */
 553:.\ff.c        **** 
 554:.\ff.c        **** #else
 555:.\ff.c        **** #error Wrong setting of FF_USE_LFN
 556:.\ff.c        **** 
 557:.\ff.c        **** #endif	/* FF_USE_LFN == 1 */
 558:.\ff.c        **** #endif	/* FF_USE_LFN == 0 */
 559:.\ff.c        **** 
 560:.\ff.c        **** 
 561:.\ff.c        **** 
 562:.\ff.c        **** /*--------------------------------*/
 563:.\ff.c        **** /* Code conversion tables         */
 564:.\ff.c        **** /*--------------------------------*/
 565:.\ff.c        **** 
 566:.\ff.c        **** #if FF_CODE_PAGE == 0	/* Run-time code page configuration */
 567:.\ff.c        **** #define CODEPAGE CodePage
 568:.\ff.c        **** static WORD CodePage;	/* Current code page */
 569:.\ff.c        **** static const BYTE* ExCvt;	/* Ptr to SBCS up-case table Ct???[] (null:not used) */
 570:.\ff.c        **** static const BYTE* DbcTbl;	/* Ptr to DBCS code range table Dc???[] (null:not used) */
 571:.\ff.c        **** 
 572:.\ff.c        **** static const BYTE Ct437[] = TBL_CT437;
 573:.\ff.c        **** static const BYTE Ct720[] = TBL_CT720;
 574:.\ff.c        **** static const BYTE Ct737[] = TBL_CT737;
 575:.\ff.c        **** static const BYTE Ct771[] = TBL_CT771;
 576:.\ff.c        **** static const BYTE Ct775[] = TBL_CT775;
 577:.\ff.c        **** static const BYTE Ct850[] = TBL_CT850;
 578:.\ff.c        **** static const BYTE Ct852[] = TBL_CT852;
 579:.\ff.c        **** static const BYTE Ct855[] = TBL_CT855;
 580:.\ff.c        **** static const BYTE Ct857[] = TBL_CT857;
 581:.\ff.c        **** static const BYTE Ct860[] = TBL_CT860;
 582:.\ff.c        **** static const BYTE Ct861[] = TBL_CT861;
 583:.\ff.c        **** static const BYTE Ct862[] = TBL_CT862;
 584:.\ff.c        **** static const BYTE Ct863[] = TBL_CT863;
 585:.\ff.c        **** static const BYTE Ct864[] = TBL_CT864;
 586:.\ff.c        **** static const BYTE Ct865[] = TBL_CT865;
 587:.\ff.c        **** static const BYTE Ct866[] = TBL_CT866;
 588:.\ff.c        **** static const BYTE Ct869[] = TBL_CT869;
 589:.\ff.c        **** static const BYTE Dc932[] = TBL_DC932;
 590:.\ff.c        **** static const BYTE Dc936[] = TBL_DC936;
 591:.\ff.c        **** static const BYTE Dc949[] = TBL_DC949;
 592:.\ff.c        **** static const BYTE Dc950[] = TBL_DC950;
 593:.\ff.c        **** 
 594:.\ff.c        **** #elif FF_CODE_PAGE < 900	/* Static code page configuration (SBCS) */
 595:.\ff.c        **** #define CODEPAGE FF_CODE_PAGE
 596:.\ff.c        **** static const BYTE ExCvt[] = MKCVTBL(TBL_CT, FF_CODE_PAGE);
 597:.\ff.c        **** 
 598:.\ff.c        **** #else					/* Static code page configuration (DBCS) */
 599:.\ff.c        **** #define CODEPAGE FF_CODE_PAGE
 600:.\ff.c        **** static const BYTE DbcTbl[] = MKCVTBL(TBL_DC, FF_CODE_PAGE);
 601:.\ff.c        **** 
 602:.\ff.c        **** #endif
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 12


 603:.\ff.c        **** 
 604:.\ff.c        **** 
 605:.\ff.c        **** 
 606:.\ff.c        **** 
 607:.\ff.c        **** /*--------------------------------------------------------------------------
 608:.\ff.c        **** 
 609:.\ff.c        ****    Module Private Functions
 610:.\ff.c        **** 
 611:.\ff.c        **** ---------------------------------------------------------------------------*/
 612:.\ff.c        **** 
 613:.\ff.c        **** 
 614:.\ff.c        **** /*-----------------------------------------------------------------------*/
 615:.\ff.c        **** /* Load/Store multi-byte word in the FAT structure                       */
 616:.\ff.c        **** /*-----------------------------------------------------------------------*/
 617:.\ff.c        **** 
 618:.\ff.c        **** static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
 619:.\ff.c        **** {
  26              		.loc 1 619 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 620:.\ff.c        **** 	WORD rv;
 621:.\ff.c        **** 
 622:.\ff.c        **** 	rv = ptr[1];
  32              		.loc 1 622 0
  33 0000 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
  34              	.LVL1:
 623:.\ff.c        **** 	rv = rv << 8 | ptr[0];
  35              		.loc 1 623 0
  36 0002 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  37              	.LVL2:
 624:.\ff.c        **** 	return rv;
 625:.\ff.c        **** }
  38              		.loc 1 625 0
  39 0004 40EA0220 		orr	r0, r0, r2, lsl #8
  40              	.LVL3:
  41 0008 7047     		bx	lr
  42              		.cfi_endproc
  43              	.LFE0:
  44              		.size	ld_word, .-ld_word
  45 000a 00BF     		.section	.text.ld_dword,"ax",%progbits
  46              		.align	2
  47              		.thumb
  48              		.thumb_func
  49              		.type	ld_dword, %function
  50              	ld_dword:
  51              	.LFB1:
 626:.\ff.c        **** 
 627:.\ff.c        **** static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
 628:.\ff.c        **** {
  52              		.loc 1 628 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 13


  57              	.LVL4:
 629:.\ff.c        **** 	DWORD rv;
 630:.\ff.c        **** 
 631:.\ff.c        **** 	rv = ptr[3];
  58              		.loc 1 631 0
  59 0000 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
  60              	.LVL5:
 632:.\ff.c        **** 	rv = rv << 8 | ptr[2];
  61              		.loc 1 632 0
  62 0002 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
  63 0004 43EA0222 		orr	r2, r3, r2, lsl #8
  64              	.LVL6:
 633:.\ff.c        **** 	rv = rv << 8 | ptr[1];
  65              		.loc 1 633 0
  66 0008 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
  67 000a 43EA0223 		orr	r3, r3, r2, lsl #8
  68              	.LVL7:
 634:.\ff.c        **** 	rv = rv << 8 | ptr[0];
  69              		.loc 1 634 0
  70 000e 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  71              	.LVL8:
 635:.\ff.c        **** 	return rv;
 636:.\ff.c        **** }
  72              		.loc 1 636 0
  73 0010 40EA0320 		orr	r0, r0, r3, lsl #8
  74              	.LVL9:
  75 0014 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE1:
  78              		.size	ld_dword, .-ld_dword
  79 0016 00BF     		.section	.text.st_word,"ax",%progbits
  80              		.align	2
  81              		.thumb
  82              		.thumb_func
  83              		.type	st_word, %function
  84              	st_word:
  85              	.LFB2:
 637:.\ff.c        **** 
 638:.\ff.c        **** #if FF_FS_EXFAT
 639:.\ff.c        **** static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
 640:.\ff.c        **** {
 641:.\ff.c        **** 	QWORD rv;
 642:.\ff.c        **** 
 643:.\ff.c        **** 	rv = ptr[7];
 644:.\ff.c        **** 	rv = rv << 8 | ptr[6];
 645:.\ff.c        **** 	rv = rv << 8 | ptr[5];
 646:.\ff.c        **** 	rv = rv << 8 | ptr[4];
 647:.\ff.c        **** 	rv = rv << 8 | ptr[3];
 648:.\ff.c        **** 	rv = rv << 8 | ptr[2];
 649:.\ff.c        **** 	rv = rv << 8 | ptr[1];
 650:.\ff.c        **** 	rv = rv << 8 | ptr[0];
 651:.\ff.c        **** 	return rv;
 652:.\ff.c        **** }
 653:.\ff.c        **** #endif
 654:.\ff.c        **** 
 655:.\ff.c        **** #if !FF_FS_READONLY
 656:.\ff.c        **** static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 14


 657:.\ff.c        **** {
  86              		.loc 1 657 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91              	.LVL10:
 658:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
  92              		.loc 1 658 0
  93 0000 0170     		strb	r1, [r0]
  94              	.LVL11:
 659:.\ff.c        **** 	*ptr++ = (BYTE)val;
  95              		.loc 1 659 0
  96 0002 090A     		lsrs	r1, r1, #8
  97              	.LVL12:
  98 0004 4170     		strb	r1, [r0, #1]
  99 0006 7047     		bx	lr
 100              		.cfi_endproc
 101              	.LFE2:
 102              		.size	st_word, .-st_word
 103              		.section	.text.st_dword,"ax",%progbits
 104              		.align	2
 105              		.thumb
 106              		.thumb_func
 107              		.type	st_dword, %function
 108              	st_dword:
 109              	.LFB3:
 660:.\ff.c        **** }
 661:.\ff.c        **** 
 662:.\ff.c        **** static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
 663:.\ff.c        **** {
 110              		.loc 1 663 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115              	.LVL13:
 664:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 116              		.loc 1 664 0
 117 0000 0170     		strb	r1, [r0]
 118              	.LVL14:
 665:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 119              		.loc 1 665 0
 120 0002 C1F30723 		ubfx	r3, r1, #8, #8
 121 0006 4370     		strb	r3, [r0, #1]
 122              	.LVL15:
 666:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 123              		.loc 1 666 0
 124 0008 C1F30743 		ubfx	r3, r1, #16, #8
 125 000c 8370     		strb	r3, [r0, #2]
 126              	.LVL16:
 667:.\ff.c        **** 	*ptr++ = (BYTE)val;
 127              		.loc 1 667 0
 128 000e 090E     		lsrs	r1, r1, #24
 129              	.LVL17:
 130 0010 C170     		strb	r1, [r0, #3]
 131 0012 7047     		bx	lr
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 15


 132              		.cfi_endproc
 133              	.LFE3:
 134              		.size	st_dword, .-st_dword
 135              		.section	.text.dbc_1st,"ax",%progbits
 136              		.align	2
 137              		.thumb
 138              		.thumb_func
 139              		.type	dbc_1st, %function
 140              	dbc_1st:
 141              	.LFB4:
 668:.\ff.c        **** }
 669:.\ff.c        **** 
 670:.\ff.c        **** #if FF_FS_EXFAT
 671:.\ff.c        **** static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
 672:.\ff.c        **** {
 673:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 674:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 675:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 676:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 677:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 678:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 679:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 680:.\ff.c        **** 	*ptr++ = (BYTE)val;
 681:.\ff.c        **** }
 682:.\ff.c        **** #endif
 683:.\ff.c        **** #endif	/* !FF_FS_READONLY */
 684:.\ff.c        **** 
 685:.\ff.c        **** 
 686:.\ff.c        **** 
 687:.\ff.c        **** /*-----------------------------------------------------------------------*/
 688:.\ff.c        **** /* String functions                                                      */
 689:.\ff.c        **** /*-----------------------------------------------------------------------*/
 690:.\ff.c        **** 
 691:.\ff.c        **** /* Test if the byte is DBC 1st byte */
 692:.\ff.c        **** static int dbc_1st (BYTE c)
 693:.\ff.c        **** {
 142              		.loc 1 693 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 147              	.LVL18:
 694:.\ff.c        **** #if FF_CODE_PAGE == 0		/* Variable code page */
 695:.\ff.c        **** 	if (DbcTbl && c >= DbcTbl[0]) {
 696:.\ff.c        **** 		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
 697:.\ff.c        **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
 698:.\ff.c        **** 	}
 699:.\ff.c        **** #elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
 700:.\ff.c        **** 	if (c >= DbcTbl[0]) {
 148              		.loc 1 700 0
 149 0000 8028     		cmp	r0, #128
 150 0002 07D9     		bls	.L7
 701:.\ff.c        **** 		if (c <= DbcTbl[1]) return 1;
 151              		.loc 1 701 0
 152 0004 9F28     		cmp	r0, #159
 153 0006 07D9     		bls	.L8
 702:.\ff.c        **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 16


 154              		.loc 1 702 0
 155 0008 DF28     		cmp	r0, #223
 156 000a 07D9     		bls	.L9
 157              		.loc 1 702 0 is_stmt 0 discriminator 1
 158 000c FC28     		cmp	r0, #252
 159 000e 07D9     		bls	.L10
 703:.\ff.c        **** 	}
 704:.\ff.c        **** #else						/* SBCS fixed code page */
 705:.\ff.c        **** 	if (c != 0) return 0;	/* Always false */
 706:.\ff.c        **** #endif
 707:.\ff.c        **** 	return 0;
 160              		.loc 1 707 0 is_stmt 1
 161 0010 0020     		movs	r0, #0
 162              	.LVL19:
 163 0012 7047     		bx	lr
 164              	.LVL20:
 165              	.L7:
 166 0014 0020     		movs	r0, #0
 167              	.LVL21:
 168 0016 7047     		bx	lr
 169              	.LVL22:
 170              	.L8:
 701:.\ff.c        **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 171              		.loc 1 701 0
 172 0018 0120     		movs	r0, #1
 173              	.LVL23:
 174 001a 7047     		bx	lr
 175              	.LVL24:
 176              	.L9:
 177              		.loc 1 707 0
 178 001c 0020     		movs	r0, #0
 179              	.LVL25:
 180 001e 7047     		bx	lr
 181              	.LVL26:
 182              	.L10:
 702:.\ff.c        **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 183              		.loc 1 702 0
 184 0020 0120     		movs	r0, #1
 185              	.LVL27:
 708:.\ff.c        **** }
 186              		.loc 1 708 0
 187 0022 7047     		bx	lr
 188              		.cfi_endproc
 189              	.LFE4:
 190              		.size	dbc_1st, .-dbc_1st
 191              		.section	.text.dbc_2nd,"ax",%progbits
 192              		.align	2
 193              		.thumb
 194              		.thumb_func
 195              		.type	dbc_2nd, %function
 196              	dbc_2nd:
 197              	.LFB5:
 709:.\ff.c        **** 
 710:.\ff.c        **** 
 711:.\ff.c        **** /* Test if the byte is DBC 2nd byte */
 712:.\ff.c        **** static int dbc_2nd (BYTE c)
 713:.\ff.c        **** {
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 17


 198              		.loc 1 713 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202              		@ link register save eliminated.
 203              	.LVL28:
 714:.\ff.c        **** #if FF_CODE_PAGE == 0		/* Variable code page */
 715:.\ff.c        **** 	if (DbcTbl && c >= DbcTbl[4]) {
 716:.\ff.c        **** 		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
 717:.\ff.c        **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
 718:.\ff.c        **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
 719:.\ff.c        **** 	}
 720:.\ff.c        **** #elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
 721:.\ff.c        **** 	if (c >= DbcTbl[4]) {
 204              		.loc 1 721 0
 205 0000 3F28     		cmp	r0, #63
 206 0002 08D9     		bls	.L14
 722:.\ff.c        **** 		if (c <= DbcTbl[5]) return 1;
 207              		.loc 1 722 0
 208 0004 7E28     		cmp	r0, #126
 209 0006 08D9     		bls	.L15
 723:.\ff.c        **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 210              		.loc 1 723 0
 211 0008 8028     		cmp	r0, #128
 212 000a 01D3     		bcc	.L13
 213              		.loc 1 723 0 is_stmt 0 discriminator 1
 214 000c FC28     		cmp	r0, #252
 215 000e 06D9     		bls	.L16
 216              	.L13:
 724:.\ff.c        **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 217              		.loc 1 724 0 is_stmt 1 discriminator 1
 218 0010 38B1     		cbz	r0, .L17
 725:.\ff.c        **** 	}
 726:.\ff.c        **** #else						/* SBCS fixed code page */
 727:.\ff.c        **** 	if (c != 0) return 0;	/* Always false */
 728:.\ff.c        **** #endif
 729:.\ff.c        **** 	return 0;
 219              		.loc 1 729 0
 220 0012 0020     		movs	r0, #0
 221              	.LVL29:
 222 0014 7047     		bx	lr
 223              	.LVL30:
 224              	.L14:
 225 0016 0020     		movs	r0, #0
 226              	.LVL31:
 227 0018 7047     		bx	lr
 228              	.LVL32:
 229              	.L15:
 722:.\ff.c        **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 230              		.loc 1 722 0
 231 001a 0120     		movs	r0, #1
 232              	.LVL33:
 233 001c 7047     		bx	lr
 234              	.LVL34:
 235              	.L16:
 723:.\ff.c        **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 236              		.loc 1 723 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 18


 237 001e 0120     		movs	r0, #1
 238              	.LVL35:
 239 0020 7047     		bx	lr
 240              	.LVL36:
 241              	.L17:
 724:.\ff.c        **** 	}
 242              		.loc 1 724 0
 243 0022 0120     		movs	r0, #1
 244              	.LVL37:
 730:.\ff.c        **** }
 245              		.loc 1 730 0
 246 0024 7047     		bx	lr
 247              		.cfi_endproc
 248              	.LFE5:
 249              		.size	dbc_2nd, .-dbc_2nd
 250 0026 00BF     		.section	.text.clst2sect,"ax",%progbits
 251              		.align	2
 252              		.thumb
 253              		.thumb_func
 254              		.type	clst2sect, %function
 255              	clst2sect:
 256              	.LFB9:
 731:.\ff.c        **** 
 732:.\ff.c        **** 
 733:.\ff.c        **** #if FF_USE_LFN
 734:.\ff.c        **** 
 735:.\ff.c        **** /* Get a Unicode code point from the TCHAR string in defined API encodeing */
 736:.\ff.c        **** static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0x
 737:.\ff.c        **** 	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
 738:.\ff.c        **** )
 739:.\ff.c        **** {
 740:.\ff.c        **** 	DWORD uc;
 741:.\ff.c        **** 	const TCHAR *p = *str;
 742:.\ff.c        **** 
 743:.\ff.c        **** #if FF_LFN_UNICODE == 1		/* UTF-16 input */
 744:.\ff.c        **** 	WCHAR wc;
 745:.\ff.c        **** 
 746:.\ff.c        **** 	uc = *p++;	/* Get a unit */
 747:.\ff.c        **** 	if (IsSurrogate(uc)) {	/* Surrogate? */
 748:.\ff.c        **** 		wc = *p++;		/* Get low surrogate */
 749:.\ff.c        **** 		if (!IsSurrogateH(uc) || !IsSurrogateL(wc)) return 0xFFFFFFFF;	/* Wrong surrogate? */
 750:.\ff.c        **** 		uc = uc << 16 | wc;
 751:.\ff.c        **** 	}
 752:.\ff.c        **** 
 753:.\ff.c        **** #elif FF_LFN_UNICODE == 2	/* UTF-8 input */
 754:.\ff.c        **** 	BYTE b;
 755:.\ff.c        **** 	int nf;
 756:.\ff.c        **** 
 757:.\ff.c        **** 	uc = (BYTE)*p++;	/* Get an encoding unit */
 758:.\ff.c        **** 	if (uc & 0x80) {	/* Multiple byte code? */
 759:.\ff.c        **** 		if        ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
 760:.\ff.c        **** 			uc &= 0x1F; nf = 1;
 761:.\ff.c        **** 		} else if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
 762:.\ff.c        **** 			uc &= 0x0F; nf = 2;
 763:.\ff.c        **** 		} else if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
 764:.\ff.c        **** 			uc &= 0x07; nf = 3;
 765:.\ff.c        **** 		} else {							/* Wrong sequence */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 19


 766:.\ff.c        **** 			return 0xFFFFFFFF;
 767:.\ff.c        **** 		}
 768:.\ff.c        **** 		do {	/* Get trailing bytes */
 769:.\ff.c        **** 			b = (BYTE)*p++;
 770:.\ff.c        **** 			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
 771:.\ff.c        **** 			uc = uc << 6 | (b & 0x3F);
 772:.\ff.c        **** 		} while (--nf != 0);
 773:.\ff.c        **** 		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
 774:.\ff.c        **** 		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a
 775:.\ff.c        **** 	}
 776:.\ff.c        **** 
 777:.\ff.c        **** #elif FF_LFN_UNICODE == 3	/* UTF-32 input */
 778:.\ff.c        **** 	uc = (TCHAR)*p++;	/* Get a unit */
 779:.\ff.c        **** 	if (uc >= 0x110000 || IsSurrogate(uc)) return 0xFFFFFFFF;	/* Wrong code? */
 780:.\ff.c        **** 	if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a 
 781:.\ff.c        **** 
 782:.\ff.c        **** #else		/* ANSI/OEM input */
 783:.\ff.c        **** 	BYTE b;
 784:.\ff.c        **** 	WCHAR wc;
 785:.\ff.c        **** 
 786:.\ff.c        **** 	wc = (BYTE)*p++;			/* Get a byte */
 787:.\ff.c        **** 	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 788:.\ff.c        **** 		b = (BYTE)*p++;			/* Get 2nd byte */
 789:.\ff.c        **** 		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 790:.\ff.c        **** 		wc = (wc << 8) + b;		/* Make a DBC */
 791:.\ff.c        **** 	}
 792:.\ff.c        **** 	if (wc != 0) {
 793:.\ff.c        **** 		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 794:.\ff.c        **** 		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 795:.\ff.c        **** 	}
 796:.\ff.c        **** 	uc = wc;
 797:.\ff.c        **** 
 798:.\ff.c        **** #endif
 799:.\ff.c        **** 	*str = p;	/* Next read pointer */
 800:.\ff.c        **** 	return uc;
 801:.\ff.c        **** }
 802:.\ff.c        **** 
 803:.\ff.c        **** 
 804:.\ff.c        **** /* Store a Unicode char in defined API encoding */
 805:.\ff.c        **** static UINT put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encod
 806:.\ff.c        **** 	DWORD chr,	/* UTF-16 encoded character (Surrogate pair if >=0x10000) */
 807:.\ff.c        **** 	TCHAR* buf,	/* Output buffer */
 808:.\ff.c        **** 	UINT szb	/* Size of the buffer */
 809:.\ff.c        **** )
 810:.\ff.c        **** {
 811:.\ff.c        **** #if FF_LFN_UNICODE == 1	/* UTF-16 output */
 812:.\ff.c        **** 	WCHAR hs, wc;
 813:.\ff.c        **** 
 814:.\ff.c        **** 	hs = (WCHAR)(chr >> 16);
 815:.\ff.c        **** 	wc = (WCHAR)chr;
 816:.\ff.c        **** 	if (hs == 0) {	/* Single encoding unit? */
 817:.\ff.c        **** 		if (szb < 1 || IsSurrogate(wc)) return 0;	/* Buffer overflow or wrong code? */
 818:.\ff.c        **** 		*buf = wc;
 819:.\ff.c        **** 		return 1;
 820:.\ff.c        **** 	}
 821:.\ff.c        **** 	if (szb < 2 || !IsSurrogateH(hs) || !IsSurrogateL(wc)) return 0;	/* Buffer overflow or wrong surro
 822:.\ff.c        **** 	*buf++ = hs;
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 20


 823:.\ff.c        **** 	*buf++ = wc;
 824:.\ff.c        **** 	return 2;
 825:.\ff.c        **** 
 826:.\ff.c        **** #elif FF_LFN_UNICODE == 2	/* UTF-8 output */
 827:.\ff.c        **** 	DWORD hc;
 828:.\ff.c        **** 
 829:.\ff.c        **** 	if (chr < 0x80) {	/* Single byte code? */
 830:.\ff.c        **** 		if (szb < 1) return 0;	/* Buffer overflow? */
 831:.\ff.c        **** 		*buf = (TCHAR)chr;
 832:.\ff.c        **** 		return 1;
 833:.\ff.c        **** 	}
 834:.\ff.c        **** 	if (chr < 0x800) {	/* 2-byte sequence? */
 835:.\ff.c        **** 		if (szb < 2) return 0;	/* Buffer overflow? */
 836:.\ff.c        **** 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
 837:.\ff.c        **** 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 838:.\ff.c        **** 		return 2;
 839:.\ff.c        **** 	}
 840:.\ff.c        **** 	if (chr < 0x10000) {	/* 3-byte sequence? */
 841:.\ff.c        **** 		if (szb < 3 || IsSurrogate(chr)) return 0;	/* Buffer overflow or wrong code? */
 842:.\ff.c        **** 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
 843:.\ff.c        **** 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 844:.\ff.c        **** 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 845:.\ff.c        **** 		return 3;
 846:.\ff.c        **** 	}
 847:.\ff.c        **** 	/* 4-byte sequence */
 848:.\ff.c        **** 	if (szb < 4) return 0;	/* Buffer overflow? */
 849:.\ff.c        **** 	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
 850:.\ff.c        **** 	chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
 851:.\ff.c        **** 	if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
 852:.\ff.c        **** 	chr = (hc | chr) + 0x10000;
 853:.\ff.c        **** 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
 854:.\ff.c        **** 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
 855:.\ff.c        **** 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 856:.\ff.c        **** 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 857:.\ff.c        **** 	return 4;
 858:.\ff.c        **** 
 859:.\ff.c        **** #elif FF_LFN_UNICODE == 3	/* UTF-32 output */
 860:.\ff.c        **** 	DWORD hc;
 861:.\ff.c        **** 
 862:.\ff.c        **** 	if (szb < 1) return 0;	/* Buffer overflow? */
 863:.\ff.c        **** 	if (chr >= 0x10000) {	/* Out of BMP? */
 864:.\ff.c        **** 		hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
 865:.\ff.c        **** 		chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
 866:.\ff.c        **** 		if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
 867:.\ff.c        **** 		chr = (hc | chr) + 0x10000;
 868:.\ff.c        **** 	}
 869:.\ff.c        **** 	*buf++ = (TCHAR)chr;
 870:.\ff.c        **** 	return 1;
 871:.\ff.c        **** 
 872:.\ff.c        **** #else						/* ANSI/OEM output */
 873:.\ff.c        **** 	WCHAR wc;
 874:.\ff.c        **** 
 875:.\ff.c        **** 	wc = ff_uni2oem(chr, CODEPAGE);
 876:.\ff.c        **** 	if (wc >= 0x100) {	/* Is this a DBC? */
 877:.\ff.c        **** 		if (szb < 2) return 0;
 878:.\ff.c        **** 		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 879:.\ff.c        **** 		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 21


 880:.\ff.c        **** 		return 2;
 881:.\ff.c        **** 	}
 882:.\ff.c        **** 	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 883:.\ff.c        **** 	*buf++ = (TCHAR)wc;					/* Store the character */
 884:.\ff.c        **** 	return 1;
 885:.\ff.c        **** #endif
 886:.\ff.c        **** }
 887:.\ff.c        **** #endif	/* FF_USE_LFN */
 888:.\ff.c        **** 
 889:.\ff.c        **** 
 890:.\ff.c        **** #if FF_FS_REENTRANT
 891:.\ff.c        **** /*-----------------------------------------------------------------------*/
 892:.\ff.c        **** /* Request/Release grant to access the volume                            */
 893:.\ff.c        **** /*-----------------------------------------------------------------------*/
 894:.\ff.c        **** 
 895:.\ff.c        **** static int lock_volume (	/* 1:Ok, 0:timeout */
 896:.\ff.c        **** 	FATFS* fs,				/* Filesystem object to lock */
 897:.\ff.c        **** 	int syslock				/* System lock required */
 898:.\ff.c        **** )
 899:.\ff.c        **** {
 900:.\ff.c        **** 	int rv;
 901:.\ff.c        **** 
 902:.\ff.c        **** 
 903:.\ff.c        **** #if FF_FS_LOCK
 904:.\ff.c        **** 	rv = ff_mutex_take(fs->ldrv);	/* Lock the volume */
 905:.\ff.c        **** 	if (rv && syslock) {			/* System lock reqiered? */
 906:.\ff.c        **** 		rv = ff_mutex_take(FF_VOLUMES);	/* Lock the system */
 907:.\ff.c        **** 		if (rv) {
 908:.\ff.c        **** 			SysLock = 2;				/* System lock succeeded */
 909:.\ff.c        **** 		} else {
 910:.\ff.c        **** 			ff_mutex_give(fs->ldrv);	/* Failed system lock */
 911:.\ff.c        **** 		}
 912:.\ff.c        **** 	}
 913:.\ff.c        **** #else
 914:.\ff.c        **** 	rv = syslock ? ff_mutex_take(fs->ldrv) : ff_mutex_take(fs->ldrv);	/* Lock the volume (this is to p
 915:.\ff.c        **** #endif
 916:.\ff.c        **** 	return rv;
 917:.\ff.c        **** }
 918:.\ff.c        **** 
 919:.\ff.c        **** 
 920:.\ff.c        **** static void unlock_volume (
 921:.\ff.c        **** 	FATFS* fs,		/* Filesystem object */
 922:.\ff.c        **** 	FRESULT res		/* Result code to be returned */
 923:.\ff.c        **** )
 924:.\ff.c        **** {
 925:.\ff.c        **** 	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 926:.\ff.c        **** #if FF_FS_LOCK
 927:.\ff.c        **** 		if (SysLock == 2) {	/* Is the system locked? */
 928:.\ff.c        **** 			SysLock = 1;
 929:.\ff.c        **** 			ff_mutex_give(FF_VOLUMES);
 930:.\ff.c        **** 		}
 931:.\ff.c        **** #endif
 932:.\ff.c        **** 		ff_mutex_give(fs->ldrv);	/* Unlock the volume */
 933:.\ff.c        **** 	}
 934:.\ff.c        **** }
 935:.\ff.c        **** 
 936:.\ff.c        **** #endif
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 22


 937:.\ff.c        **** 
 938:.\ff.c        **** 
 939:.\ff.c        **** 
 940:.\ff.c        **** #if FF_FS_LOCK
 941:.\ff.c        **** /*-----------------------------------------------------------------------*/
 942:.\ff.c        **** /* File shareing control functions                                       */
 943:.\ff.c        **** /*-----------------------------------------------------------------------*/
 944:.\ff.c        **** 
 945:.\ff.c        **** static FRESULT chk_share (	/* Check if the file can be accessed */
 946:.\ff.c        **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 947:.\ff.c        **** 	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
 948:.\ff.c        **** )
 949:.\ff.c        **** {
 950:.\ff.c        **** 	UINT i, be;
 951:.\ff.c        **** 
 952:.\ff.c        **** 	/* Search open object table for the object */
 953:.\ff.c        **** 	be = 0;
 954:.\ff.c        **** 	for (i = 0; i < FF_FS_LOCK; i++) {
 955:.\ff.c        **** 		if (Files[i].fs) {	/* Existing entry */
 956:.\ff.c        **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 957:.\ff.c        **** 				Files[i].clu == dp->obj.sclust &&
 958:.\ff.c        **** 				Files[i].ofs == dp->dptr) break;
 959:.\ff.c        **** 		} else {			/* Blank entry */
 960:.\ff.c        **** 			be = 1;
 961:.\ff.c        **** 		}
 962:.\ff.c        **** 	}
 963:.\ff.c        **** 	if (i == FF_FS_LOCK) {	/* The object has not been opened */
 964:.\ff.c        **** 		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new obje
 965:.\ff.c        **** 	}
 966:.\ff.c        **** 
 967:.\ff.c        **** 	/* The object was opened. Reject any open against writing file and all write mode open */
 968:.\ff.c        **** 	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 969:.\ff.c        **** }
 970:.\ff.c        **** 
 971:.\ff.c        **** 
 972:.\ff.c        **** static int enq_share (void)	/* Check if an entry is available for a new object */
 973:.\ff.c        **** {
 974:.\ff.c        **** 	UINT i;
 975:.\ff.c        **** 
 976:.\ff.c        **** 	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 977:.\ff.c        **** 	return (i == FF_FS_LOCK) ? 0 : 1;
 978:.\ff.c        **** }
 979:.\ff.c        **** 
 980:.\ff.c        **** 
 981:.\ff.c        **** static UINT inc_share (	/* Increment object open counter and returns its index (0:Internal error) *
 982:.\ff.c        **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
 983:.\ff.c        **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 984:.\ff.c        **** )
 985:.\ff.c        **** {
 986:.\ff.c        **** 	UINT i;
 987:.\ff.c        **** 
 988:.\ff.c        **** 
 989:.\ff.c        **** 	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 990:.\ff.c        **** 		if (Files[i].fs == dp->obj.fs
 991:.\ff.c        **** 		 && Files[i].clu == dp->obj.sclust
 992:.\ff.c        **** 		 && Files[i].ofs == dp->dptr) break;
 993:.\ff.c        **** 	}
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 23


 994:.\ff.c        **** 
 995:.\ff.c        **** 	if (i == FF_FS_LOCK) {			/* Not opened. Register it as new. */
 996:.\ff.c        **** 		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 997:.\ff.c        **** 		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 998:.\ff.c        **** 		Files[i].fs = dp->obj.fs;
 999:.\ff.c        **** 		Files[i].clu = dp->obj.sclust;
1000:.\ff.c        **** 		Files[i].ofs = dp->dptr;
1001:.\ff.c        **** 		Files[i].ctr = 0;
1002:.\ff.c        **** 	}
1003:.\ff.c        **** 
1004:.\ff.c        **** 	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
1005:.\ff.c        **** 
1006:.\ff.c        **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
1007:.\ff.c        **** 
1008:.\ff.c        **** 	return i + 1;	/* Index number origin from 1 */
1009:.\ff.c        **** }
1010:.\ff.c        **** 
1011:.\ff.c        **** 
1012:.\ff.c        **** static FRESULT dec_share (	/* Decrement object open counter */
1013:.\ff.c        **** 	UINT i			/* Semaphore index (1..) */
1014:.\ff.c        **** )
1015:.\ff.c        **** {
1016:.\ff.c        **** 	UINT n;
1017:.\ff.c        **** 	FRESULT res;
1018:.\ff.c        **** 
1019:.\ff.c        **** 
1020:.\ff.c        **** 	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
1021:.\ff.c        **** 		n = Files[i].ctr;
1022:.\ff.c        **** 		if (n == 0x100) n = 0;	/* If write mode open, delete the object semaphore */
1023:.\ff.c        **** 		if (n > 0) n--;			/* Decrement read mode open count */
1024:.\ff.c        **** 		Files[i].ctr = n;
1025:.\ff.c        **** 		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
1026:.\ff.c        **** 			Files[i].fs = 0;	/* Free the entry <<<If this memory write operation is not in atomic, FF_FS_REE
1027:.\ff.c        **** 		}
1028:.\ff.c        **** 		res = FR_OK;
1029:.\ff.c        **** 	} else {
1030:.\ff.c        **** 		res = FR_INT_ERR;		/* Invalid index number */
1031:.\ff.c        **** 	}
1032:.\ff.c        **** 	return res;
1033:.\ff.c        **** }
1034:.\ff.c        **** 
1035:.\ff.c        **** 
1036:.\ff.c        **** static void clear_share (	/* Clear all lock entries of the volume */
1037:.\ff.c        **** 	FATFS* fs
1038:.\ff.c        **** )
1039:.\ff.c        **** {
1040:.\ff.c        **** 	UINT i;
1041:.\ff.c        **** 
1042:.\ff.c        **** 	for (i = 0; i < FF_FS_LOCK; i++) {
1043:.\ff.c        **** 		if (Files[i].fs == fs) Files[i].fs = 0;
1044:.\ff.c        **** 	}
1045:.\ff.c        **** }
1046:.\ff.c        **** 
1047:.\ff.c        **** #endif	/* FF_FS_LOCK */
1048:.\ff.c        **** 
1049:.\ff.c        **** 
1050:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 24


1051:.\ff.c        **** /*-----------------------------------------------------------------------*/
1052:.\ff.c        **** /* Move/Flush disk access window in the filesystem object                */
1053:.\ff.c        **** /*-----------------------------------------------------------------------*/
1054:.\ff.c        **** #if !FF_FS_READONLY
1055:.\ff.c        **** static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
1056:.\ff.c        **** 	FATFS* fs			/* Filesystem object */
1057:.\ff.c        **** )
1058:.\ff.c        **** {
1059:.\ff.c        **** 	FRESULT res = FR_OK;
1060:.\ff.c        **** 
1061:.\ff.c        **** 
1062:.\ff.c        **** 	if (fs->wflag) {	/* Is the disk access window dirty? */
1063:.\ff.c        **** 		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume *
1064:.\ff.c        **** 			fs->wflag = 0;	/* Clear window dirty flag */
1065:.\ff.c        **** 			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
1066:.\ff.c        **** 				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it t
1067:.\ff.c        **** 			}
1068:.\ff.c        **** 		} else {
1069:.\ff.c        **** 			res = FR_DISK_ERR;
1070:.\ff.c        **** 		}
1071:.\ff.c        **** 	}
1072:.\ff.c        **** 	return res;
1073:.\ff.c        **** }
1074:.\ff.c        **** #endif
1075:.\ff.c        **** 
1076:.\ff.c        **** 
1077:.\ff.c        **** static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
1078:.\ff.c        **** 	FATFS* fs,		/* Filesystem object */
1079:.\ff.c        **** 	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
1080:.\ff.c        **** )
1081:.\ff.c        **** {
1082:.\ff.c        **** 	FRESULT res = FR_OK;
1083:.\ff.c        **** 
1084:.\ff.c        **** 
1085:.\ff.c        **** 	if (sect != fs->winsect) {	/* Window offset changed? */
1086:.\ff.c        **** #if !FF_FS_READONLY
1087:.\ff.c        **** 		res = sync_window(fs);		/* Flush the window */
1088:.\ff.c        **** #endif
1089:.\ff.c        **** 		if (res == FR_OK) {			/* Fill sector window with new data */
1090:.\ff.c        **** 			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
1091:.\ff.c        **** 				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
1092:.\ff.c        **** 				res = FR_DISK_ERR;
1093:.\ff.c        **** 			}
1094:.\ff.c        **** 			fs->winsect = sect;
1095:.\ff.c        **** 		}
1096:.\ff.c        **** 	}
1097:.\ff.c        **** 	return res;
1098:.\ff.c        **** }
1099:.\ff.c        **** 
1100:.\ff.c        **** 
1101:.\ff.c        **** 
1102:.\ff.c        **** 
1103:.\ff.c        **** #if !FF_FS_READONLY
1104:.\ff.c        **** /*-----------------------------------------------------------------------*/
1105:.\ff.c        **** /* Synchronize filesystem and data on the storage                        */
1106:.\ff.c        **** /*-----------------------------------------------------------------------*/
1107:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 25


1108:.\ff.c        **** static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
1109:.\ff.c        **** 	FATFS* fs		/* Filesystem object */
1110:.\ff.c        **** )
1111:.\ff.c        **** {
1112:.\ff.c        **** 	FRESULT res;
1113:.\ff.c        **** 
1114:.\ff.c        **** 
1115:.\ff.c        **** 	res = sync_window(fs);
1116:.\ff.c        **** 	if (res == FR_OK) {
1117:.\ff.c        **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1118:.\ff.c        **** 			/* Create FSInfo structure */
1119:.\ff.c        **** 			memset(fs->win, 0, sizeof fs->win);
1120:.\ff.c        **** 			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
1121:.\ff.c        **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
1122:.\ff.c        **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
1123:.\ff.c        **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
1124:.\ff.c        **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
1125:.\ff.c        **** 			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
1126:.\ff.c        **** 			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
1127:.\ff.c        **** 			fs->fsi_flag = 0;
1128:.\ff.c        **** 		}
1129:.\ff.c        **** 		/* Make sure that no pending write process in the lower layer */
1130:.\ff.c        **** 		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
1131:.\ff.c        **** 	}
1132:.\ff.c        **** 
1133:.\ff.c        **** 	return res;
1134:.\ff.c        **** }
1135:.\ff.c        **** 
1136:.\ff.c        **** #endif
1137:.\ff.c        **** 
1138:.\ff.c        **** 
1139:.\ff.c        **** 
1140:.\ff.c        **** /*-----------------------------------------------------------------------*/
1141:.\ff.c        **** /* Get physical sector number from cluster number                        */
1142:.\ff.c        **** /*-----------------------------------------------------------------------*/
1143:.\ff.c        **** 
1144:.\ff.c        **** static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
1145:.\ff.c        **** 	FATFS* fs,		/* Filesystem object */
1146:.\ff.c        **** 	DWORD clst		/* Cluster# to be converted */
1147:.\ff.c        **** )
1148:.\ff.c        **** {
 257              		.loc 1 1148 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 262              	.LVL38:
1149:.\ff.c        **** 	clst -= 2;		/* Cluster number is origin from 2 */
 263              		.loc 1 1149 0
 264 0000 0239     		subs	r1, r1, #2
 265              	.LVL39:
1150:.\ff.c        **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 266              		.loc 1 1150 0
 267 0002 4369     		ldr	r3, [r0, #20]
 268 0004 023B     		subs	r3, r3, #2
 269 0006 8B42     		cmp	r3, r1
 270 0008 04D9     		bls	.L20
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 26


1151:.\ff.c        **** 	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 271              		.loc 1 1151 0
 272 000a 826A     		ldr	r2, [r0, #40]
 273 000c 4389     		ldrh	r3, [r0, #10]
 274 000e 01FB0320 		mla	r0, r1, r3, r2
 275              	.LVL40:
 276 0012 7047     		bx	lr
 277              	.LVL41:
 278              	.L20:
1150:.\ff.c        **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 279              		.loc 1 1150 0
 280 0014 0020     		movs	r0, #0
 281              	.LVL42:
1152:.\ff.c        **** }
 282              		.loc 1 1152 0
 283 0016 7047     		bx	lr
 284              		.cfi_endproc
 285              	.LFE9:
 286              		.size	clst2sect, .-clst2sect
 287              		.section	.text.ld_clust,"ax",%progbits
 288              		.align	2
 289              		.thumb
 290              		.thumb_func
 291              		.type	ld_clust, %function
 292              	ld_clust:
 293              	.LFB18:
1153:.\ff.c        **** 
1154:.\ff.c        **** 
1155:.\ff.c        **** 
1156:.\ff.c        **** 
1157:.\ff.c        **** /*-----------------------------------------------------------------------*/
1158:.\ff.c        **** /* FAT access - Read value of an FAT entry                               */
1159:.\ff.c        **** /*-----------------------------------------------------------------------*/
1160:.\ff.c        **** 
1161:.\ff.c        **** static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
1162:.\ff.c        **** 	FFOBJID* obj,	/* Corresponding object */
1163:.\ff.c        **** 	DWORD clst		/* Cluster number to get the value */
1164:.\ff.c        **** )
1165:.\ff.c        **** {
1166:.\ff.c        **** 	UINT wc, bc;
1167:.\ff.c        **** 	DWORD val;
1168:.\ff.c        **** 	FATFS *fs = obj->fs;
1169:.\ff.c        **** 
1170:.\ff.c        **** 
1171:.\ff.c        **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1172:.\ff.c        **** 		val = 1;	/* Internal error */
1173:.\ff.c        **** 
1174:.\ff.c        **** 	} else {
1175:.\ff.c        **** 		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1176:.\ff.c        **** 
1177:.\ff.c        **** 		switch (fs->fs_type) {
1178:.\ff.c        **** 		case FS_FAT12 :
1179:.\ff.c        **** 			bc = (UINT)clst; bc += bc / 2;
1180:.\ff.c        **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1181:.\ff.c        **** 			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
1182:.\ff.c        **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1183:.\ff.c        **** 			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 27


1184:.\ff.c        **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
1185:.\ff.c        **** 			break;
1186:.\ff.c        **** 
1187:.\ff.c        **** 		case FS_FAT16 :
1188:.\ff.c        **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1189:.\ff.c        **** 			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
1190:.\ff.c        **** 			break;
1191:.\ff.c        **** 
1192:.\ff.c        **** 		case FS_FAT32 :
1193:.\ff.c        **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1194:.\ff.c        **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upp
1195:.\ff.c        **** 			break;
1196:.\ff.c        **** #if FF_FS_EXFAT
1197:.\ff.c        **** 		case FS_EXFAT :
1198:.\ff.c        **** 			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must 
1199:.\ff.c        **** 				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1200:.\ff.c        **** 				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters -
1201:.\ff.c        **** 
1202:.\ff.c        **** 				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1203:.\ff.c        **** 					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1204:.\ff.c        **** 					break;
1205:.\ff.c        **** 				}
1206:.\ff.c        **** 				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1207:.\ff.c        **** 					val = clst + 1; 	/* Generate the value */
1208:.\ff.c        **** 					break;
1209:.\ff.c        **** 				}
1210:.\ff.c        **** 				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1211:.\ff.c        **** 					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1212:.\ff.c        **** 						val = 0x7FFFFFFF;	/* Generate EOC */
1213:.\ff.c        **** 					} else {
1214:.\ff.c        **** 						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1215:.\ff.c        **** 						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1216:.\ff.c        **** 					}
1217:.\ff.c        **** 					break;
1218:.\ff.c        **** 				}
1219:.\ff.c        **** 			}
1220:.\ff.c        **** 			val = 1;	/* Internal error */
1221:.\ff.c        **** 			break;
1222:.\ff.c        **** #endif
1223:.\ff.c        **** 		default:
1224:.\ff.c        **** 			val = 1;	/* Internal error */
1225:.\ff.c        **** 		}
1226:.\ff.c        **** 	}
1227:.\ff.c        **** 
1228:.\ff.c        **** 	return val;
1229:.\ff.c        **** }
1230:.\ff.c        **** 
1231:.\ff.c        **** 
1232:.\ff.c        **** 
1233:.\ff.c        **** 
1234:.\ff.c        **** #if !FF_FS_READONLY
1235:.\ff.c        **** /*-----------------------------------------------------------------------*/
1236:.\ff.c        **** /* FAT access - Change value of an FAT entry                             */
1237:.\ff.c        **** /*-----------------------------------------------------------------------*/
1238:.\ff.c        **** 
1239:.\ff.c        **** static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
1240:.\ff.c        **** 	FATFS* fs,		/* Corresponding filesystem object */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 28


1241:.\ff.c        **** 	DWORD clst,		/* FAT index number (cluster number) to be changed */
1242:.\ff.c        **** 	DWORD val		/* New value to be set to the entry */
1243:.\ff.c        **** )
1244:.\ff.c        **** {
1245:.\ff.c        **** 	UINT bc;
1246:.\ff.c        **** 	BYTE *p;
1247:.\ff.c        **** 	FRESULT res = FR_INT_ERR;
1248:.\ff.c        **** 
1249:.\ff.c        **** 
1250:.\ff.c        **** 	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1251:.\ff.c        **** 		switch (fs->fs_type) {
1252:.\ff.c        **** 		case FS_FAT12:
1253:.\ff.c        **** 			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
1254:.\ff.c        **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1255:.\ff.c        **** 			if (res != FR_OK) break;
1256:.\ff.c        **** 			p = fs->win + bc++ % SS(fs);
1257:.\ff.c        **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
1258:.\ff.c        **** 			fs->wflag = 1;
1259:.\ff.c        **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1260:.\ff.c        **** 			if (res != FR_OK) break;
1261:.\ff.c        **** 			p = fs->win + bc % SS(fs);
1262:.\ff.c        **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd by
1263:.\ff.c        **** 			fs->wflag = 1;
1264:.\ff.c        **** 			break;
1265:.\ff.c        **** 
1266:.\ff.c        **** 		case FS_FAT16:
1267:.\ff.c        **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1268:.\ff.c        **** 			if (res != FR_OK) break;
1269:.\ff.c        **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
1270:.\ff.c        **** 			fs->wflag = 1;
1271:.\ff.c        **** 			break;
1272:.\ff.c        **** 
1273:.\ff.c        **** 		case FS_FAT32:
1274:.\ff.c        **** #if FF_FS_EXFAT
1275:.\ff.c        **** 		case FS_EXFAT:
1276:.\ff.c        **** #endif
1277:.\ff.c        **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1278:.\ff.c        **** 			if (res != FR_OK) break;
1279:.\ff.c        **** 			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1280:.\ff.c        **** 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1281:.\ff.c        **** 			}
1282:.\ff.c        **** 			st_dword(fs->win + clst * 4 % SS(fs), val);
1283:.\ff.c        **** 			fs->wflag = 1;
1284:.\ff.c        **** 			break;
1285:.\ff.c        **** 		}
1286:.\ff.c        **** 	}
1287:.\ff.c        **** 	return res;
1288:.\ff.c        **** }
1289:.\ff.c        **** 
1290:.\ff.c        **** #endif /* !FF_FS_READONLY */
1291:.\ff.c        **** 
1292:.\ff.c        **** 
1293:.\ff.c        **** 
1294:.\ff.c        **** 
1295:.\ff.c        **** #if FF_FS_EXFAT && !FF_FS_READONLY
1296:.\ff.c        **** /*-----------------------------------------------------------------------*/
1297:.\ff.c        **** /* exFAT: Accessing FAT and Allocation Bitmap                            */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 29


1298:.\ff.c        **** /*-----------------------------------------------------------------------*/
1299:.\ff.c        **** 
1300:.\ff.c        **** /*--------------------------------------*/
1301:.\ff.c        **** /* Find a contiguous free cluster block */
1302:.\ff.c        **** /*--------------------------------------*/
1303:.\ff.c        **** 
1304:.\ff.c        **** static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
1305:.\ff.c        **** 	FATFS* fs,	/* Filesystem object */
1306:.\ff.c        **** 	DWORD clst,	/* Cluster number to scan from */
1307:.\ff.c        **** 	DWORD ncl	/* Number of contiguous clusters to find (1..) */
1308:.\ff.c        **** )
1309:.\ff.c        **** {
1310:.\ff.c        **** 	BYTE bm, bv;
1311:.\ff.c        **** 	UINT i;
1312:.\ff.c        **** 	DWORD val, scl, ctr;
1313:.\ff.c        **** 
1314:.\ff.c        **** 
1315:.\ff.c        **** 	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1316:.\ff.c        **** 	if (clst >= fs->n_fatent - 2) clst = 0;
1317:.\ff.c        **** 	scl = val = clst; ctr = 0;
1318:.\ff.c        **** 	for (;;) {
1319:.\ff.c        **** 		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
1320:.\ff.c        **** 		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1321:.\ff.c        **** 		do {
1322:.\ff.c        **** 			do {
1323:.\ff.c        **** 				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1324:.\ff.c        **** 				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1325:.\ff.c        **** 					val = 0; bm = 0; i = SS(fs);
1326:.\ff.c        **** 				}
1327:.\ff.c        **** 				if (bv == 0) {	/* Is it a free cluster? */
1328:.\ff.c        **** 					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1329:.\ff.c        **** 				} else {
1330:.\ff.c        **** 					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1331:.\ff.c        **** 				}
1332:.\ff.c        **** 				if (val == clst) return 0;	/* All cluster scanned? */
1333:.\ff.c        **** 			} while (bm != 0);
1334:.\ff.c        **** 			bm = 1;
1335:.\ff.c        **** 		} while (++i < SS(fs));
1336:.\ff.c        **** 	}
1337:.\ff.c        **** }
1338:.\ff.c        **** 
1339:.\ff.c        **** 
1340:.\ff.c        **** /*----------------------------------------*/
1341:.\ff.c        **** /* Set/Clear a block of allocation bitmap */
1342:.\ff.c        **** /*----------------------------------------*/
1343:.\ff.c        **** 
1344:.\ff.c        **** static FRESULT change_bitmap (
1345:.\ff.c        **** 	FATFS* fs,	/* Filesystem object */
1346:.\ff.c        **** 	DWORD clst,	/* Cluster number to change from */
1347:.\ff.c        **** 	DWORD ncl,	/* Number of clusters to be changed */
1348:.\ff.c        **** 	int bv		/* bit value to be set (0 or 1) */
1349:.\ff.c        **** )
1350:.\ff.c        **** {
1351:.\ff.c        **** 	BYTE bm;
1352:.\ff.c        **** 	UINT i;
1353:.\ff.c        **** 	LBA_t sect;
1354:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 30


1355:.\ff.c        **** 
1356:.\ff.c        **** 	clst -= 2;	/* The first bit corresponds to cluster #2 */
1357:.\ff.c        **** 	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
1358:.\ff.c        **** 	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
1359:.\ff.c        **** 	bm = 1 << (clst % 8);					/* Bit mask in the byte */
1360:.\ff.c        **** 	for (;;) {
1361:.\ff.c        **** 		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1362:.\ff.c        **** 		do {
1363:.\ff.c        **** 			do {
1364:.\ff.c        **** 				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1365:.\ff.c        **** 				fs->win[i] ^= bm;	/* Flip the bit */
1366:.\ff.c        **** 				fs->wflag = 1;
1367:.\ff.c        **** 				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1368:.\ff.c        **** 			} while (bm <<= 1);		/* Next bit */
1369:.\ff.c        **** 			bm = 1;
1370:.\ff.c        **** 		} while (++i < SS(fs));		/* Next byte */
1371:.\ff.c        **** 		i = 0;
1372:.\ff.c        **** 	}
1373:.\ff.c        **** }
1374:.\ff.c        **** 
1375:.\ff.c        **** 
1376:.\ff.c        **** /*---------------------------------------------*/
1377:.\ff.c        **** /* Fill the first fragment of the FAT chain    */
1378:.\ff.c        **** /*---------------------------------------------*/
1379:.\ff.c        **** 
1380:.\ff.c        **** static FRESULT fill_first_frag (
1381:.\ff.c        **** 	FFOBJID* obj	/* Pointer to the corresponding object */
1382:.\ff.c        **** )
1383:.\ff.c        **** {
1384:.\ff.c        **** 	FRESULT res;
1385:.\ff.c        **** 	DWORD cl, n;
1386:.\ff.c        **** 
1387:.\ff.c        **** 
1388:.\ff.c        **** 	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
1389:.\ff.c        **** 		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1390:.\ff.c        **** 			res = put_fat(obj->fs, cl, cl + 1);
1391:.\ff.c        **** 			if (res != FR_OK) return res;
1392:.\ff.c        **** 		}
1393:.\ff.c        **** 		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1394:.\ff.c        **** 	}
1395:.\ff.c        **** 	return FR_OK;
1396:.\ff.c        **** }
1397:.\ff.c        **** 
1398:.\ff.c        **** 
1399:.\ff.c        **** /*---------------------------------------------*/
1400:.\ff.c        **** /* Fill the last fragment of the FAT chain     */
1401:.\ff.c        **** /*---------------------------------------------*/
1402:.\ff.c        **** 
1403:.\ff.c        **** static FRESULT fill_last_frag (
1404:.\ff.c        **** 	FFOBJID* obj,	/* Pointer to the corresponding object */
1405:.\ff.c        **** 	DWORD lcl,		/* Last cluster of the fragment */
1406:.\ff.c        **** 	DWORD term		/* Value to set the last FAT entry */
1407:.\ff.c        **** )
1408:.\ff.c        **** {
1409:.\ff.c        **** 	FRESULT res;
1410:.\ff.c        **** 
1411:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 31


1412:.\ff.c        **** 	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1413:.\ff.c        **** 		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1414:.\ff.c        **** 		if (res != FR_OK) return res;
1415:.\ff.c        **** 		obj->n_frag--;
1416:.\ff.c        **** 	}
1417:.\ff.c        **** 	return FR_OK;
1418:.\ff.c        **** }
1419:.\ff.c        **** 
1420:.\ff.c        **** #endif	/* FF_FS_EXFAT && !FF_FS_READONLY */
1421:.\ff.c        **** 
1422:.\ff.c        **** 
1423:.\ff.c        **** 
1424:.\ff.c        **** #if !FF_FS_READONLY
1425:.\ff.c        **** /*-----------------------------------------------------------------------*/
1426:.\ff.c        **** /* FAT handling - Remove a cluster chain                                 */
1427:.\ff.c        **** /*-----------------------------------------------------------------------*/
1428:.\ff.c        **** 
1429:.\ff.c        **** static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
1430:.\ff.c        **** 	FFOBJID* obj,		/* Corresponding object */
1431:.\ff.c        **** 	DWORD clst,			/* Cluster to remove a chain from */
1432:.\ff.c        **** 	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
1433:.\ff.c        **** )
1434:.\ff.c        **** {
1435:.\ff.c        **** 	FRESULT res = FR_OK;
1436:.\ff.c        **** 	DWORD nxt;
1437:.\ff.c        **** 	FATFS *fs = obj->fs;
1438:.\ff.c        **** #if FF_FS_EXFAT || FF_USE_TRIM
1439:.\ff.c        **** 	DWORD scl = clst, ecl = clst;
1440:.\ff.c        **** #endif
1441:.\ff.c        **** #if FF_USE_TRIM
1442:.\ff.c        **** 	LBA_t rt[2];
1443:.\ff.c        **** #endif
1444:.\ff.c        **** 
1445:.\ff.c        **** 	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1446:.\ff.c        **** 
1447:.\ff.c        **** 	/* Mark the previous cluster 'EOC' on the FAT if it exists */
1448:.\ff.c        **** 	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1449:.\ff.c        **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
1450:.\ff.c        **** 		if (res != FR_OK) return res;
1451:.\ff.c        **** 	}
1452:.\ff.c        **** 
1453:.\ff.c        **** 	/* Remove the chain */
1454:.\ff.c        **** 	do {
1455:.\ff.c        **** 		nxt = get_fat(obj, clst);			/* Get cluster status */
1456:.\ff.c        **** 		if (nxt == 0) break;				/* Empty cluster? */
1457:.\ff.c        **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1458:.\ff.c        **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1459:.\ff.c        **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1460:.\ff.c        **** 			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1461:.\ff.c        **** 			if (res != FR_OK) return res;
1462:.\ff.c        **** 		}
1463:.\ff.c        **** 		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
1464:.\ff.c        **** 			fs->free_clst++;
1465:.\ff.c        **** 			fs->fsi_flag |= 1;
1466:.\ff.c        **** 		}
1467:.\ff.c        **** #if FF_FS_EXFAT || FF_USE_TRIM
1468:.\ff.c        **** 		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 32


1469:.\ff.c        **** 			ecl = nxt;
1470:.\ff.c        **** 		} else {				/* End of contiguous cluster block */
1471:.\ff.c        **** #if FF_FS_EXFAT
1472:.\ff.c        **** 			if (fs->fs_type == FS_EXFAT) {
1473:.\ff.c        **** 				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap 
1474:.\ff.c        **** 				if (res != FR_OK) return res;
1475:.\ff.c        **** 			}
1476:.\ff.c        **** #endif
1477:.\ff.c        **** #if FF_USE_TRIM
1478:.\ff.c        **** 			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
1479:.\ff.c        **** 			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
1480:.\ff.c        **** 			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be
1481:.\ff.c        **** #endif
1482:.\ff.c        **** 			scl = ecl = nxt;
1483:.\ff.c        **** 		}
1484:.\ff.c        **** #endif
1485:.\ff.c        **** 		clst = nxt;					/* Next cluster */
1486:.\ff.c        **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1487:.\ff.c        **** 
1488:.\ff.c        **** #if FF_FS_EXFAT
1489:.\ff.c        **** 	/* Some post processes for chain status */
1490:.\ff.c        **** 	if (fs->fs_type == FS_EXFAT) {
1491:.\ff.c        **** 		if (pclst == 0) {	/* Has the entire chain been removed? */
1492:.\ff.c        **** 			obj->stat = 0;		/* Change the chain status 'initial' */
1493:.\ff.c        **** 		} else {
1494:.\ff.c        **** 			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
1495:.\ff.c        **** 				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
1496:.\ff.c        **** 				while (clst != pclst) {
1497:.\ff.c        **** 					nxt = get_fat(obj, clst);
1498:.\ff.c        **** 					if (nxt < 2) return FR_INT_ERR;
1499:.\ff.c        **** 					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1500:.\ff.c        **** 					if (nxt != clst + 1) break;	/* Not contiguous? */
1501:.\ff.c        **** 					clst++;
1502:.\ff.c        **** 				}
1503:.\ff.c        **** 				if (clst == pclst) {	/* Has the chain got contiguous again? */
1504:.\ff.c        **** 					obj->stat = 2;		/* Change the chain status 'contiguous' */
1505:.\ff.c        **** 				}
1506:.\ff.c        **** 			} else {
1507:.\ff.c        **** 				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the 
1508:.\ff.c        **** 					obj->stat = 2;	/* Change the chain status 'contiguous' */
1509:.\ff.c        **** 				}
1510:.\ff.c        **** 			}
1511:.\ff.c        **** 		}
1512:.\ff.c        **** 	}
1513:.\ff.c        **** #endif
1514:.\ff.c        **** 	return FR_OK;
1515:.\ff.c        **** }
1516:.\ff.c        **** 
1517:.\ff.c        **** 
1518:.\ff.c        **** 
1519:.\ff.c        **** 
1520:.\ff.c        **** /*-----------------------------------------------------------------------*/
1521:.\ff.c        **** /* FAT handling - Stretch a chain or Create a new chain                  */
1522:.\ff.c        **** /*-----------------------------------------------------------------------*/
1523:.\ff.c        **** 
1524:.\ff.c        **** static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New 
1525:.\ff.c        **** 	FFOBJID* obj,		/* Corresponding object */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 33


1526:.\ff.c        **** 	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
1527:.\ff.c        **** )
1528:.\ff.c        **** {
1529:.\ff.c        **** 	DWORD cs, ncl, scl;
1530:.\ff.c        **** 	FRESULT res;
1531:.\ff.c        **** 	FATFS *fs = obj->fs;
1532:.\ff.c        **** 
1533:.\ff.c        **** 
1534:.\ff.c        **** 	if (clst == 0) {	/* Create a new chain */
1535:.\ff.c        **** 		scl = fs->last_clst;				/* Suggested cluster to start to find */
1536:.\ff.c        **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1537:.\ff.c        **** 	}
1538:.\ff.c        **** 	else {				/* Stretch a chain */
1539:.\ff.c        **** 		cs = get_fat(obj, clst);			/* Check the cluster status */
1540:.\ff.c        **** 		if (cs < 2) return 1;				/* Test for insanity */
1541:.\ff.c        **** 		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
1542:.\ff.c        **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1543:.\ff.c        **** 		scl = clst;							/* Cluster to start to find */
1544:.\ff.c        **** 	}
1545:.\ff.c        **** 	if (fs->free_clst == 0) return 0;		/* No free cluster */
1546:.\ff.c        **** 
1547:.\ff.c        **** #if FF_FS_EXFAT
1548:.\ff.c        **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1549:.\ff.c        **** 		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1550:.\ff.c        **** 		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1551:.\ff.c        **** 		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1552:.\ff.c        **** 		if (res == FR_INT_ERR) return 1;
1553:.\ff.c        **** 		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1554:.\ff.c        **** 		if (clst == 0) {							/* Is it a new chain? */
1555:.\ff.c        **** 			obj->stat = 2;							/* Set status 'contiguous' */
1556:.\ff.c        **** 		} else {									/* It is a stretched chain */
1557:.\ff.c        **** 			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1558:.\ff.c        **** 				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1559:.\ff.c        **** 				obj->stat = 3;						/* Change status 'just fragmented' */
1560:.\ff.c        **** 			}
1561:.\ff.c        **** 		}
1562:.\ff.c        **** 		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1563:.\ff.c        **** 			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1564:.\ff.c        **** 				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1565:.\ff.c        **** 			} else {				/* New fragment */
1566:.\ff.c        **** 				if (obj->n_frag == 0) obj->n_frag = 1;
1567:.\ff.c        **** 				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one *
1568:.\ff.c        **** 				if (res == FR_OK) obj->n_frag = 1;
1569:.\ff.c        **** 			}
1570:.\ff.c        **** 		}
1571:.\ff.c        **** 	} else
1572:.\ff.c        **** #endif
1573:.\ff.c        **** 	{	/* On the FAT/FAT32 volume */
1574:.\ff.c        **** 		ncl = 0;
1575:.\ff.c        **** 		if (scl == clst) {						/* Stretching an existing chain? */
1576:.\ff.c        **** 			ncl = scl + 1;						/* Test if next cluster is free */
1577:.\ff.c        **** 			if (ncl >= fs->n_fatent) ncl = 2;
1578:.\ff.c        **** 			cs = get_fat(obj, ncl);				/* Get next cluster status */
1579:.\ff.c        **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1580:.\ff.c        **** 			if (cs != 0) {						/* Not free? */
1581:.\ff.c        **** 				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
1582:.\ff.c        **** 				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 34


1583:.\ff.c        **** 				ncl = 0;
1584:.\ff.c        **** 			}
1585:.\ff.c        **** 		}
1586:.\ff.c        **** 		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
1587:.\ff.c        **** 			ncl = scl;	/* Start cluster */
1588:.\ff.c        **** 			for (;;) {
1589:.\ff.c        **** 				ncl++;							/* Next cluster */
1590:.\ff.c        **** 				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1591:.\ff.c        **** 					ncl = 2;
1592:.\ff.c        **** 					if (ncl > scl) return 0;	/* No free cluster found? */
1593:.\ff.c        **** 				}
1594:.\ff.c        **** 				cs = get_fat(obj, ncl);			/* Get the cluster status */
1595:.\ff.c        **** 				if (cs == 0) break;				/* Found a free cluster? */
1596:.\ff.c        **** 				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1597:.\ff.c        **** 				if (ncl == scl) return 0;		/* No free cluster found? */
1598:.\ff.c        **** 			}
1599:.\ff.c        **** 		}
1600:.\ff.c        **** 		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
1601:.\ff.c        **** 		if (res == FR_OK && clst != 0) {
1602:.\ff.c        **** 			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
1603:.\ff.c        **** 		}
1604:.\ff.c        **** 	}
1605:.\ff.c        **** 
1606:.\ff.c        **** 	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1607:.\ff.c        **** 		fs->last_clst = ncl;
1608:.\ff.c        **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
1609:.\ff.c        **** 		fs->fsi_flag |= 1;
1610:.\ff.c        **** 	} else {
1611:.\ff.c        **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
1612:.\ff.c        **** 	}
1613:.\ff.c        **** 
1614:.\ff.c        **** 	return ncl;		/* Return new cluster number or error status */
1615:.\ff.c        **** }
1616:.\ff.c        **** 
1617:.\ff.c        **** #endif /* !FF_FS_READONLY */
1618:.\ff.c        **** 
1619:.\ff.c        **** 
1620:.\ff.c        **** 
1621:.\ff.c        **** 
1622:.\ff.c        **** #if FF_USE_FASTSEEK
1623:.\ff.c        **** /*-----------------------------------------------------------------------*/
1624:.\ff.c        **** /* FAT handling - Convert offset into cluster with link map table        */
1625:.\ff.c        **** /*-----------------------------------------------------------------------*/
1626:.\ff.c        **** 
1627:.\ff.c        **** static DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1628:.\ff.c        **** 	FIL* fp,		/* Pointer to the file object */
1629:.\ff.c        **** 	FSIZE_t ofs		/* File offset to be converted to cluster# */
1630:.\ff.c        **** )
1631:.\ff.c        **** {
1632:.\ff.c        **** 	DWORD cl, ncl;
1633:.\ff.c        **** 	DWORD *tbl;
1634:.\ff.c        **** 	FATFS *fs = fp->obj.fs;
1635:.\ff.c        **** 
1636:.\ff.c        **** 
1637:.\ff.c        **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1638:.\ff.c        **** 	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
1639:.\ff.c        **** 	for (;;) {
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 35


1640:.\ff.c        **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1641:.\ff.c        **** 		if (ncl == 0) return 0;	/* End of table? (error) */
1642:.\ff.c        **** 		if (cl < ncl) break;	/* In this fragment? */
1643:.\ff.c        **** 		cl -= ncl; tbl++;		/* Next fragment */
1644:.\ff.c        **** 	}
1645:.\ff.c        **** 	return cl + *tbl;	/* Return the cluster number */
1646:.\ff.c        **** }
1647:.\ff.c        **** 
1648:.\ff.c        **** #endif	/* FF_USE_FASTSEEK */
1649:.\ff.c        **** 
1650:.\ff.c        **** 
1651:.\ff.c        **** 
1652:.\ff.c        **** 
1653:.\ff.c        **** /*-----------------------------------------------------------------------*/
1654:.\ff.c        **** /* Directory handling - Fill a cluster with zeros                        */
1655:.\ff.c        **** /*-----------------------------------------------------------------------*/
1656:.\ff.c        **** 
1657:.\ff.c        **** #if !FF_FS_READONLY
1658:.\ff.c        **** static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
1659:.\ff.c        **** 	FATFS *fs,		/* Filesystem object */
1660:.\ff.c        **** 	DWORD clst		/* Directory table to clear */
1661:.\ff.c        **** )
1662:.\ff.c        **** {
1663:.\ff.c        **** 	LBA_t sect;
1664:.\ff.c        **** 	UINT n, szb;
1665:.\ff.c        **** 	BYTE *ibuf;
1666:.\ff.c        **** 
1667:.\ff.c        **** 
1668:.\ff.c        **** 	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1669:.\ff.c        **** 	sect = clst2sect(fs, clst);		/* Top of the cluster */
1670:.\ff.c        **** 	fs->winsect = sect;				/* Set window to top of the cluster */
1671:.\ff.c        **** 	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
1672:.\ff.c        **** #if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
1673:.\ff.c        **** 	/* Allocate a temporary buffer */
1674:.\ff.c        **** 	for (szb = ((DWORD)fs->csize * SS(fs) >= MAX_MALLOC) ? MAX_MALLOC : fs->csize * SS(fs), ibuf = 0; 
1675:.\ff.c        **** 	if (szb > SS(fs)) {		/* Buffer allocated? */
1676:.\ff.c        **** 		memset(ibuf, 0, szb);
1677:.\ff.c        **** 		szb /= SS(fs);		/* Bytes -> Sectors */
1678:.\ff.c        **** 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* 
1679:.\ff.c        **** 		ff_memfree(ibuf);
1680:.\ff.c        **** 	} else
1681:.\ff.c        **** #endif
1682:.\ff.c        **** 	{
1683:.\ff.c        **** 		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
1684:.\ff.c        **** 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* 
1685:.\ff.c        **** 	}
1686:.\ff.c        **** 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1687:.\ff.c        **** }
1688:.\ff.c        **** #endif	/* !FF_FS_READONLY */
1689:.\ff.c        **** 
1690:.\ff.c        **** 
1691:.\ff.c        **** 
1692:.\ff.c        **** 
1693:.\ff.c        **** /*-----------------------------------------------------------------------*/
1694:.\ff.c        **** /* Directory handling - Set directory index                              */
1695:.\ff.c        **** /*-----------------------------------------------------------------------*/
1696:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 36


1697:.\ff.c        **** static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
1698:.\ff.c        **** 	DIR* dp,		/* Pointer to directory object */
1699:.\ff.c        **** 	DWORD ofs		/* Offset of directory table */
1700:.\ff.c        **** )
1701:.\ff.c        **** {
1702:.\ff.c        **** 	DWORD csz, clst;
1703:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
1704:.\ff.c        **** 
1705:.\ff.c        **** 
1706:.\ff.c        **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIR
1707:.\ff.c        **** 		return FR_INT_ERR;
1708:.\ff.c        **** 	}
1709:.\ff.c        **** 	dp->dptr = ofs;				/* Set current offset */
1710:.\ff.c        **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1711:.\ff.c        **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1712:.\ff.c        **** 		clst = (DWORD)fs->dirbase;
1713:.\ff.c        **** 		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1714:.\ff.c        **** 	}
1715:.\ff.c        **** 
1716:.\ff.c        **** 	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
1717:.\ff.c        **** 		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1718:.\ff.c        **** 		dp->sect = fs->dirbase;
1719:.\ff.c        **** 
1720:.\ff.c        **** 	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
1721:.\ff.c        **** 		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1722:.\ff.c        **** 		while (ofs >= csz) {				/* Follow cluster chain */
1723:.\ff.c        **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1724:.\ff.c        **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1725:.\ff.c        **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
1726:.\ff.c        **** 			ofs -= csz;
1727:.\ff.c        **** 		}
1728:.\ff.c        **** 		dp->sect = clst2sect(fs, clst);
1729:.\ff.c        **** 	}
1730:.\ff.c        **** 	dp->clust = clst;					/* Current cluster# */
1731:.\ff.c        **** 	if (dp->sect == 0) return FR_INT_ERR;
1732:.\ff.c        **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1733:.\ff.c        **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1734:.\ff.c        **** 
1735:.\ff.c        **** 	return FR_OK;
1736:.\ff.c        **** }
1737:.\ff.c        **** 
1738:.\ff.c        **** 
1739:.\ff.c        **** 
1740:.\ff.c        **** 
1741:.\ff.c        **** /*-----------------------------------------------------------------------*/
1742:.\ff.c        **** /* Directory handling - Move directory table index next                  */
1743:.\ff.c        **** /*-----------------------------------------------------------------------*/
1744:.\ff.c        **** 
1745:.\ff.c        **** static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stret
1746:.\ff.c        **** 	DIR* dp,				/* Pointer to the directory object */
1747:.\ff.c        **** 	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
1748:.\ff.c        **** )
1749:.\ff.c        **** {
1750:.\ff.c        **** 	DWORD ofs, clst;
1751:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
1752:.\ff.c        **** 
1753:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 37


1754:.\ff.c        **** 	ofs = dp->dptr + SZDIRE;	/* Next entry */
1755:.\ff.c        **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;
1756:.\ff.c        **** 	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
1757:.\ff.c        **** 
1758:.\ff.c        **** 	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1759:.\ff.c        **** 		dp->sect++;				/* Next sector */
1760:.\ff.c        **** 
1761:.\ff.c        **** 		if (dp->clust == 0) {	/* Static table */
1762:.\ff.c        **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1763:.\ff.c        **** 				dp->sect = 0; return FR_NO_FILE;
1764:.\ff.c        **** 			}
1765:.\ff.c        **** 		}
1766:.\ff.c        **** 		else {					/* Dynamic table */
1767:.\ff.c        **** 			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
1768:.\ff.c        **** 				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
1769:.\ff.c        **** 				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1770:.\ff.c        **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1771:.\ff.c        **** 				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
1772:.\ff.c        **** #if !FF_FS_READONLY
1773:.\ff.c        **** 					if (!stretch) {								/* If no stretch, report EOT */
1774:.\ff.c        **** 						dp->sect = 0; return FR_NO_FILE;
1775:.\ff.c        **** 					}
1776:.\ff.c        **** 					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1777:.\ff.c        **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1778:.\ff.c        **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1779:.\ff.c        **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1780:.\ff.c        **** 					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1781:.\ff.c        **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
1782:.\ff.c        **** #else
1783:.\ff.c        **** 					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
1784:.\ff.c        **** 					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
1785:.\ff.c        **** #endif
1786:.\ff.c        **** 				}
1787:.\ff.c        **** 				dp->clust = clst;		/* Initialize data for new cluster */
1788:.\ff.c        **** 				dp->sect = clst2sect(fs, clst);
1789:.\ff.c        **** 			}
1790:.\ff.c        **** 		}
1791:.\ff.c        **** 	}
1792:.\ff.c        **** 	dp->dptr = ofs;						/* Current entry */
1793:.\ff.c        **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1794:.\ff.c        **** 
1795:.\ff.c        **** 	return FR_OK;
1796:.\ff.c        **** }
1797:.\ff.c        **** 
1798:.\ff.c        **** 
1799:.\ff.c        **** 
1800:.\ff.c        **** 
1801:.\ff.c        **** #if !FF_FS_READONLY
1802:.\ff.c        **** /*-----------------------------------------------------------------------*/
1803:.\ff.c        **** /* Directory handling - Reserve a block of directory entries             */
1804:.\ff.c        **** /*-----------------------------------------------------------------------*/
1805:.\ff.c        **** 
1806:.\ff.c        **** static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
1807:.\ff.c        **** 	DIR* dp,				/* Pointer to the directory object */
1808:.\ff.c        **** 	UINT n_ent				/* Number of contiguous entries to allocate */
1809:.\ff.c        **** )
1810:.\ff.c        **** {
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 38


1811:.\ff.c        **** 	FRESULT res;
1812:.\ff.c        **** 	UINT n;
1813:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
1814:.\ff.c        **** 
1815:.\ff.c        **** 
1816:.\ff.c        **** 	res = dir_sdi(dp, 0);
1817:.\ff.c        **** 	if (res == FR_OK) {
1818:.\ff.c        **** 		n = 0;
1819:.\ff.c        **** 		do {
1820:.\ff.c        **** 			res = move_window(fs, dp->sect);
1821:.\ff.c        **** 			if (res != FR_OK) break;
1822:.\ff.c        **** #if FF_FS_EXFAT
1823:.\ff.c        **** 			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name
1824:.\ff.c        **** #else
1825:.\ff.c        **** 			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
1826:.\ff.c        **** #endif
1827:.\ff.c        **** 				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
1828:.\ff.c        **** 			} else {
1829:.\ff.c        **** 				n = 0;				/* Not a free entry, restart to search */
1830:.\ff.c        **** 			}
1831:.\ff.c        **** 			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
1832:.\ff.c        **** 		} while (res == FR_OK);
1833:.\ff.c        **** 	}
1834:.\ff.c        **** 
1835:.\ff.c        **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1836:.\ff.c        **** 	return res;
1837:.\ff.c        **** }
1838:.\ff.c        **** 
1839:.\ff.c        **** #endif	/* !FF_FS_READONLY */
1840:.\ff.c        **** 
1841:.\ff.c        **** 
1842:.\ff.c        **** 
1843:.\ff.c        **** 
1844:.\ff.c        **** /*-----------------------------------------------------------------------*/
1845:.\ff.c        **** /* FAT: Directory handling - Load/Store start cluster number             */
1846:.\ff.c        **** /*-----------------------------------------------------------------------*/
1847:.\ff.c        **** 
1848:.\ff.c        **** static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
1849:.\ff.c        **** 	FATFS* fs,			/* Pointer to the fs object */
1850:.\ff.c        **** 	const BYTE* dir		/* Pointer to the key entry */
1851:.\ff.c        **** )
1852:.\ff.c        **** {
 294              		.loc 1 1852 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298              	.LVL43:
 299 0000 70B5     		push	{r4, r5, r6, lr}
 300              		.cfi_def_cfa_offset 16
 301              		.cfi_offset 4, -16
 302              		.cfi_offset 5, -12
 303              		.cfi_offset 6, -8
 304              		.cfi_offset 14, -4
 305 0002 0646     		mov	r6, r0
 306 0004 0D46     		mov	r5, r1
1853:.\ff.c        **** 	DWORD cl;
1854:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 39


1855:.\ff.c        **** 	cl = ld_word(dir + DIR_FstClusLO);
 307              		.loc 1 1855 0
 308 0006 01F11A00 		add	r0, r1, #26
 309              	.LVL44:
 310 000a FFF7FEFF 		bl	ld_word
 311              	.LVL45:
 312 000e 0446     		mov	r4, r0
 313              	.LVL46:
1856:.\ff.c        **** 	if (fs->fs_type == FS_FAT32) {
 314              		.loc 1 1856 0
 315 0010 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 316 0012 032B     		cmp	r3, #3
 317 0014 05D1     		bne	.L22
1857:.\ff.c        **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 318              		.loc 1 1857 0
 319 0016 05F11400 		add	r0, r5, #20
 320              	.LVL47:
 321 001a FFF7FEFF 		bl	ld_word
 322              	.LVL48:
 323 001e 44EA0040 		orr	r0, r4, r0, lsl #16
 324              	.LVL49:
 325              	.L22:
1858:.\ff.c        **** 	}
1859:.\ff.c        **** 
1860:.\ff.c        **** 	return cl;
1861:.\ff.c        **** }
 326              		.loc 1 1861 0
 327 0022 70BD     		pop	{r4, r5, r6, pc}
 328              		.cfi_endproc
 329              	.LFE18:
 330              		.size	ld_clust, .-ld_clust
 331              		.section	.text.st_clust,"ax",%progbits
 332              		.align	2
 333              		.thumb
 334              		.thumb_func
 335              		.type	st_clust, %function
 336              	st_clust:
 337              	.LFB19:
1862:.\ff.c        **** 
1863:.\ff.c        **** 
1864:.\ff.c        **** #if !FF_FS_READONLY
1865:.\ff.c        **** static void st_clust (
1866:.\ff.c        **** 	FATFS* fs,	/* Pointer to the fs object */
1867:.\ff.c        **** 	BYTE* dir,	/* Pointer to the key entry */
1868:.\ff.c        **** 	DWORD cl	/* Value to be set */
1869:.\ff.c        **** )
1870:.\ff.c        **** {
 338              		.loc 1 1870 0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
 342              	.LVL50:
 343 0000 70B5     		push	{r4, r5, r6, lr}
 344              		.cfi_def_cfa_offset 16
 345              		.cfi_offset 4, -16
 346              		.cfi_offset 5, -12
 347              		.cfi_offset 6, -8
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 40


 348              		.cfi_offset 14, -4
 349 0002 0646     		mov	r6, r0
 350 0004 0D46     		mov	r5, r1
 351 0006 1446     		mov	r4, r2
1871:.\ff.c        **** 	st_word(dir + DIR_FstClusLO, (WORD)cl);
 352              		.loc 1 1871 0
 353 0008 01F11A00 		add	r0, r1, #26
 354              	.LVL51:
 355 000c 91B2     		uxth	r1, r2
 356              	.LVL52:
 357 000e FFF7FEFF 		bl	st_word
 358              	.LVL53:
1872:.\ff.c        **** 	if (fs->fs_type == FS_FAT32) {
 359              		.loc 1 1872 0
 360 0012 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 361 0014 032B     		cmp	r3, #3
 362 0016 04D1     		bne	.L24
1873:.\ff.c        **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 363              		.loc 1 1873 0
 364 0018 05F11400 		add	r0, r5, #20
 365 001c 210C     		lsrs	r1, r4, #16
 366 001e FFF7FEFF 		bl	st_word
 367              	.LVL54:
 368              	.L24:
 369 0022 70BD     		pop	{r4, r5, r6, pc}
 370              		.cfi_endproc
 371              	.LFE19:
 372              		.size	st_clust, .-st_clust
 373              		.section	.text.get_fileinfo,"ax",%progbits
 374              		.align	2
 375              		.thumb
 376              		.thumb_func
 377              		.type	get_fileinfo, %function
 378              	get_fileinfo:
 379              	.LFB24:
1874:.\ff.c        **** 	}
1875:.\ff.c        **** }
1876:.\ff.c        **** #endif
1877:.\ff.c        **** 
1878:.\ff.c        **** 
1879:.\ff.c        **** 
1880:.\ff.c        **** #if FF_USE_LFN
1881:.\ff.c        **** /*--------------------------------------------------------*/
1882:.\ff.c        **** /* FAT-LFN: Compare a part of file name with an LFN entry */
1883:.\ff.c        **** /*--------------------------------------------------------*/
1884:.\ff.c        **** 
1885:.\ff.c        **** static int cmp_lfn (		/* 1:matched, 0:not matched */
1886:.\ff.c        **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
1887:.\ff.c        **** 	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
1888:.\ff.c        **** )
1889:.\ff.c        **** {
1890:.\ff.c        **** 	UINT i, s;
1891:.\ff.c        **** 	WCHAR wc, uc;
1892:.\ff.c        **** 
1893:.\ff.c        **** 
1894:.\ff.c        **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1895:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 41


1896:.\ff.c        **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1897:.\ff.c        **** 
1898:.\ff.c        **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1899:.\ff.c        **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1900:.\ff.c        **** 		if (wc != 0) {
1901:.\ff.c        **** 			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1902:.\ff.c        **** 				return 0;					/* Not matched */
1903:.\ff.c        **** 			}
1904:.\ff.c        **** 			wc = uc;
1905:.\ff.c        **** 		} else {
1906:.\ff.c        **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1907:.\ff.c        **** 		}
1908:.\ff.c        **** 	}
1909:.\ff.c        **** 
1910:.\ff.c        **** 	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different len
1911:.\ff.c        **** 
1912:.\ff.c        **** 	return 1;		/* The part of LFN matched */
1913:.\ff.c        **** }
1914:.\ff.c        **** 
1915:.\ff.c        **** 
1916:.\ff.c        **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF_USE_LABEL || FF_FS_EXFAT
1917:.\ff.c        **** /*-----------------------------------------------------*/
1918:.\ff.c        **** /* FAT-LFN: Pick a part of file name from an LFN entry */
1919:.\ff.c        **** /*-----------------------------------------------------*/
1920:.\ff.c        **** 
1921:.\ff.c        **** static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
1922:.\ff.c        **** 	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
1923:.\ff.c        **** 	BYTE* dir			/* Pointer to the LFN entry */
1924:.\ff.c        **** )
1925:.\ff.c        **** {
1926:.\ff.c        **** 	UINT i, s;
1927:.\ff.c        **** 	WCHAR wc, uc;
1928:.\ff.c        **** 
1929:.\ff.c        **** 
1930:.\ff.c        **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1931:.\ff.c        **** 
1932:.\ff.c        **** 	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
1933:.\ff.c        **** 
1934:.\ff.c        **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1935:.\ff.c        **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1936:.\ff.c        **** 		if (wc != 0) {
1937:.\ff.c        **** 			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
1938:.\ff.c        **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1939:.\ff.c        **** 		} else {
1940:.\ff.c        **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1941:.\ff.c        **** 		}
1942:.\ff.c        **** 	}
1943:.\ff.c        **** 
1944:.\ff.c        **** 	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not termin
1945:.\ff.c        **** 		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
1946:.\ff.c        **** 		lfnbuf[i] = 0;
1947:.\ff.c        **** 	}
1948:.\ff.c        **** 
1949:.\ff.c        **** 	return 1;		/* The part of LFN is valid */
1950:.\ff.c        **** }
1951:.\ff.c        **** #endif
1952:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 42


1953:.\ff.c        **** 
1954:.\ff.c        **** #if !FF_FS_READONLY
1955:.\ff.c        **** /*-----------------------------------------*/
1956:.\ff.c        **** /* FAT-LFN: Create an entry of LFN entries */
1957:.\ff.c        **** /*-----------------------------------------*/
1958:.\ff.c        **** 
1959:.\ff.c        **** static void put_lfn (
1960:.\ff.c        **** 	const WCHAR* lfn,	/* Pointer to the LFN */
1961:.\ff.c        **** 	BYTE* dir,			/* Pointer to the LFN entry to be created */
1962:.\ff.c        **** 	BYTE ord,			/* LFN order (1-20) */
1963:.\ff.c        **** 	BYTE sum			/* Checksum of the corresponding SFN */
1964:.\ff.c        **** )
1965:.\ff.c        **** {
1966:.\ff.c        **** 	UINT i, s;
1967:.\ff.c        **** 	WCHAR wc;
1968:.\ff.c        **** 
1969:.\ff.c        **** 
1970:.\ff.c        **** 	dir[LDIR_Chksum] = sum;			/* Set checksum */
1971:.\ff.c        **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1972:.\ff.c        **** 	dir[LDIR_Type] = 0;
1973:.\ff.c        **** 	st_word(dir + LDIR_FstClusLO, 0);
1974:.\ff.c        **** 
1975:.\ff.c        **** 	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1976:.\ff.c        **** 	s = wc = 0;
1977:.\ff.c        **** 	do {
1978:.\ff.c        **** 		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1979:.\ff.c        **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
1980:.\ff.c        **** 		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
1981:.\ff.c        **** 	} while (++s < 13);
1982:.\ff.c        **** 	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1983:.\ff.c        **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1984:.\ff.c        **** }
1985:.\ff.c        **** 
1986:.\ff.c        **** #endif	/* !FF_FS_READONLY */
1987:.\ff.c        **** #endif	/* FF_USE_LFN */
1988:.\ff.c        **** 
1989:.\ff.c        **** 
1990:.\ff.c        **** 
1991:.\ff.c        **** #if FF_USE_LFN && !FF_FS_READONLY
1992:.\ff.c        **** /*-----------------------------------------------------------------------*/
1993:.\ff.c        **** /* FAT-LFN: Create a Numbered SFN                                        */
1994:.\ff.c        **** /*-----------------------------------------------------------------------*/
1995:.\ff.c        **** 
1996:.\ff.c        **** static void gen_numname (
1997:.\ff.c        **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
1998:.\ff.c        **** 	const BYTE* src,	/* Pointer to SFN in directory form */
1999:.\ff.c        **** 	const WCHAR* lfn,	/* Pointer to LFN */
2000:.\ff.c        **** 	UINT seq			/* Sequence number */
2001:.\ff.c        **** )
2002:.\ff.c        **** {
2003:.\ff.c        **** 	BYTE ns[8], c;
2004:.\ff.c        **** 	UINT i, j;
2005:.\ff.c        **** 	WCHAR wc;
2006:.\ff.c        **** 	DWORD sreg;
2007:.\ff.c        **** 
2008:.\ff.c        **** 
2009:.\ff.c        **** 	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 43


2010:.\ff.c        **** 
2011:.\ff.c        **** 	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number 
2012:.\ff.c        **** 		sreg = seq;
2013:.\ff.c        **** 		while (*lfn) {	/* Create a CRC as hash value */
2014:.\ff.c        **** 			wc = *lfn++;
2015:.\ff.c        **** 			for (i = 0; i < 16; i++) {
2016:.\ff.c        **** 				sreg = (sreg << 1) + (wc & 1);
2017:.\ff.c        **** 				wc >>= 1;
2018:.\ff.c        **** 				if (sreg & 0x10000) sreg ^= 0x11021;
2019:.\ff.c        **** 			}
2020:.\ff.c        **** 		}
2021:.\ff.c        **** 		seq = (UINT)sreg;
2022:.\ff.c        **** 	}
2023:.\ff.c        **** 
2024:.\ff.c        **** 	/* Make suffix (~ + hexadecimal) */
2025:.\ff.c        **** 	i = 7;
2026:.\ff.c        **** 	do {
2027:.\ff.c        **** 		c = (BYTE)((seq % 16) + '0'); seq /= 16;
2028:.\ff.c        **** 		if (c > '9') c += 7;
2029:.\ff.c        **** 		ns[i--] = c;
2030:.\ff.c        **** 	} while (i && seq);
2031:.\ff.c        **** 	ns[i] = '~';
2032:.\ff.c        **** 
2033:.\ff.c        **** 	/* Append the suffix to the SFN body */
2034:.\ff.c        **** 	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
2035:.\ff.c        **** 		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
2036:.\ff.c        **** 			if (j == i - 1) break;
2037:.\ff.c        **** 			j++;
2038:.\ff.c        **** 		}
2039:.\ff.c        **** 	}
2040:.\ff.c        **** 	do {	/* Append the suffix */
2041:.\ff.c        **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
2042:.\ff.c        **** 	} while (j < 8);
2043:.\ff.c        **** }
2044:.\ff.c        **** #endif	/* FF_USE_LFN && !FF_FS_READONLY */
2045:.\ff.c        **** 
2046:.\ff.c        **** 
2047:.\ff.c        **** 
2048:.\ff.c        **** #if FF_USE_LFN
2049:.\ff.c        **** /*-----------------------------------------------------------------------*/
2050:.\ff.c        **** /* FAT-LFN: Calculate checksum of an SFN entry                           */
2051:.\ff.c        **** /*-----------------------------------------------------------------------*/
2052:.\ff.c        **** 
2053:.\ff.c        **** static BYTE sum_sfn (
2054:.\ff.c        **** 	const BYTE* dir		/* Pointer to the SFN entry */
2055:.\ff.c        **** )
2056:.\ff.c        **** {
2057:.\ff.c        **** 	BYTE sum = 0;
2058:.\ff.c        **** 	UINT n = 11;
2059:.\ff.c        **** 
2060:.\ff.c        **** 	do {
2061:.\ff.c        **** 		sum = (sum >> 1) + (sum << 7) + *dir++;
2062:.\ff.c        **** 	} while (--n);
2063:.\ff.c        **** 	return sum;
2064:.\ff.c        **** }
2065:.\ff.c        **** 
2066:.\ff.c        **** #endif	/* FF_USE_LFN */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 44


2067:.\ff.c        **** 
2068:.\ff.c        **** 
2069:.\ff.c        **** 
2070:.\ff.c        **** #if FF_FS_EXFAT
2071:.\ff.c        **** /*-----------------------------------------------------------------------*/
2072:.\ff.c        **** /* exFAT: Checksum                                                       */
2073:.\ff.c        **** /*-----------------------------------------------------------------------*/
2074:.\ff.c        **** 
2075:.\ff.c        **** static WORD xdir_sum (	/* Get checksum of the directoly entry block */
2076:.\ff.c        **** 	const BYTE* dir		/* Directory entry block to be calculated */
2077:.\ff.c        **** )
2078:.\ff.c        **** {
2079:.\ff.c        **** 	UINT i, szblk;
2080:.\ff.c        **** 	WORD sum;
2081:.\ff.c        **** 
2082:.\ff.c        **** 
2083:.\ff.c        **** 	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
2084:.\ff.c        **** 	for (i = sum = 0; i < szblk; i++) {
2085:.\ff.c        **** 		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
2086:.\ff.c        **** 			i++;
2087:.\ff.c        **** 		} else {
2088:.\ff.c        **** 			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
2089:.\ff.c        **** 		}
2090:.\ff.c        **** 	}
2091:.\ff.c        **** 	return sum;
2092:.\ff.c        **** }
2093:.\ff.c        **** 
2094:.\ff.c        **** 
2095:.\ff.c        **** 
2096:.\ff.c        **** static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
2097:.\ff.c        **** 	const WCHAR* name	/* File name to be calculated */
2098:.\ff.c        **** )
2099:.\ff.c        **** {
2100:.\ff.c        **** 	WCHAR chr;
2101:.\ff.c        **** 	WORD sum = 0;
2102:.\ff.c        **** 
2103:.\ff.c        **** 
2104:.\ff.c        **** 	while ((chr = *name++) != 0) {
2105:.\ff.c        **** 		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
2106:.\ff.c        **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
2107:.\ff.c        **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
2108:.\ff.c        **** 	}
2109:.\ff.c        **** 	return sum;
2110:.\ff.c        **** }
2111:.\ff.c        **** 
2112:.\ff.c        **** 
2113:.\ff.c        **** #if !FF_FS_READONLY && FF_USE_MKFS
2114:.\ff.c        **** static DWORD xsum32 (	/* Returns 32-bit checksum */
2115:.\ff.c        **** 	BYTE  dat,			/* Byte to be calculated (byte-by-byte processing) */
2116:.\ff.c        **** 	DWORD sum			/* Previous sum value */
2117:.\ff.c        **** )
2118:.\ff.c        **** {
2119:.\ff.c        **** 	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
2120:.\ff.c        **** 	return sum;
2121:.\ff.c        **** }
2122:.\ff.c        **** #endif
2123:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 45


2124:.\ff.c        **** 
2125:.\ff.c        **** 
2126:.\ff.c        **** /*------------------------------------*/
2127:.\ff.c        **** /* exFAT: Get a directory entry block */
2128:.\ff.c        **** /*------------------------------------*/
2129:.\ff.c        **** 
2130:.\ff.c        **** static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
2131:.\ff.c        **** 	DIR* dp					/* Reading directory object pointing top of the entry block to load */
2132:.\ff.c        **** )
2133:.\ff.c        **** {
2134:.\ff.c        **** 	FRESULT res;
2135:.\ff.c        **** 	UINT i, sz_ent;
2136:.\ff.c        **** 	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
2137:.\ff.c        **** 
2138:.\ff.c        **** 
2139:.\ff.c        **** 	/* Load file directory entry */
2140:.\ff.c        **** 	res = move_window(dp->obj.fs, dp->sect);
2141:.\ff.c        **** 	if (res != FR_OK) return res;
2142:.\ff.c        **** 	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
2143:.\ff.c        **** 	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
2144:.\ff.c        **** 	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
2145:.\ff.c        **** 	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
2146:.\ff.c        **** 
2147:.\ff.c        **** 	/* Load stream extension entry */
2148:.\ff.c        **** 	res = dir_next(dp, 0);
2149:.\ff.c        **** 	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
2150:.\ff.c        **** 	if (res != FR_OK) return res;
2151:.\ff.c        **** 	res = move_window(dp->obj.fs, dp->sect);
2152:.\ff.c        **** 	if (res != FR_OK) return res;
2153:.\ff.c        **** 	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
2154:.\ff.c        **** 	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
2155:.\ff.c        **** 	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
2156:.\ff.c        **** 
2157:.\ff.c        **** 	/* Load file name entries */
2158:.\ff.c        **** 	i = 2 * SZDIRE;	/* Name offset to load */
2159:.\ff.c        **** 	do {
2160:.\ff.c        **** 		res = dir_next(dp, 0);
2161:.\ff.c        **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
2162:.\ff.c        **** 		if (res != FR_OK) return res;
2163:.\ff.c        **** 		res = move_window(dp->obj.fs, dp->sect);
2164:.\ff.c        **** 		if (res != FR_OK) return res;
2165:.\ff.c        **** 		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
2166:.\ff.c        **** 		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);
2167:.\ff.c        **** 	} while ((i += SZDIRE) < sz_ent);
2168:.\ff.c        **** 
2169:.\ff.c        **** 	/* Sanity check (do it for only accessible object) */
2170:.\ff.c        **** 	if (i <= MAXDIRB(FF_MAX_LFN)) {
2171:.\ff.c        **** 		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
2172:.\ff.c        **** 	}
2173:.\ff.c        **** 	return FR_OK;
2174:.\ff.c        **** }
2175:.\ff.c        **** 
2176:.\ff.c        **** 
2177:.\ff.c        **** /*------------------------------------------------------------------*/
2178:.\ff.c        **** /* exFAT: Initialize object allocation info with loaded entry block */
2179:.\ff.c        **** /*------------------------------------------------------------------*/
2180:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 46


2181:.\ff.c        **** static void init_alloc_info (
2182:.\ff.c        **** 	FATFS* fs,		/* Filesystem object */
2183:.\ff.c        **** 	FFOBJID* obj	/* Object allocation information to be initialized */
2184:.\ff.c        **** )
2185:.\ff.c        **** {
2186:.\ff.c        **** 	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
2187:.\ff.c        **** 	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
2188:.\ff.c        **** 	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
2189:.\ff.c        **** 	obj->n_frag = 0;										/* No last fragment info */
2190:.\ff.c        **** }
2191:.\ff.c        **** 
2192:.\ff.c        **** 
2193:.\ff.c        **** 
2194:.\ff.c        **** #if !FF_FS_READONLY || FF_FS_RPATH != 0
2195:.\ff.c        **** /*------------------------------------------------*/
2196:.\ff.c        **** /* exFAT: Load the object's directory entry block */
2197:.\ff.c        **** /*------------------------------------------------*/
2198:.\ff.c        **** 
2199:.\ff.c        **** static FRESULT load_obj_xdir (
2200:.\ff.c        **** 	DIR* dp,			/* Blank directory object to be used to access containing directory */
2201:.\ff.c        **** 	const FFOBJID* obj	/* Object with its containing directory information */
2202:.\ff.c        **** )
2203:.\ff.c        **** {
2204:.\ff.c        **** 	FRESULT res;
2205:.\ff.c        **** 
2206:.\ff.c        **** 	/* Open object containing directory */
2207:.\ff.c        **** 	dp->obj.fs = obj->fs;
2208:.\ff.c        **** 	dp->obj.sclust = obj->c_scl;
2209:.\ff.c        **** 	dp->obj.stat = (BYTE)obj->c_size;
2210:.\ff.c        **** 	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
2211:.\ff.c        **** 	dp->obj.n_frag = 0;
2212:.\ff.c        **** 	dp->blk_ofs = obj->c_ofs;
2213:.\ff.c        **** 
2214:.\ff.c        **** 	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
2215:.\ff.c        **** 	if (res == FR_OK) {
2216:.\ff.c        **** 		res = load_xdir(dp);		/* Load the object's entry block */
2217:.\ff.c        **** 	}
2218:.\ff.c        **** 	return res;
2219:.\ff.c        **** }
2220:.\ff.c        **** #endif
2221:.\ff.c        **** 
2222:.\ff.c        **** 
2223:.\ff.c        **** #if !FF_FS_READONLY
2224:.\ff.c        **** /*----------------------------------------*/
2225:.\ff.c        **** /* exFAT: Store the directory entry block */
2226:.\ff.c        **** /*----------------------------------------*/
2227:.\ff.c        **** 
2228:.\ff.c        **** static FRESULT store_xdir (
2229:.\ff.c        **** 	DIR* dp				/* Pointer to the directory object */
2230:.\ff.c        **** )
2231:.\ff.c        **** {
2232:.\ff.c        **** 	FRESULT res;
2233:.\ff.c        **** 	UINT nent;
2234:.\ff.c        **** 	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the directory entry block 85+C0+C1s */
2235:.\ff.c        **** 
2236:.\ff.c        **** 	/* Create set sum */
2237:.\ff.c        **** 	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 47


2238:.\ff.c        **** 	nent = dirb[XDIR_NumSec] + 1;
2239:.\ff.c        **** 
2240:.\ff.c        **** 	/* Store the directory entry block to the directory */
2241:.\ff.c        **** 	res = dir_sdi(dp, dp->blk_ofs);
2242:.\ff.c        **** 	while (res == FR_OK) {
2243:.\ff.c        **** 		res = move_window(dp->obj.fs, dp->sect);
2244:.\ff.c        **** 		if (res != FR_OK) break;
2245:.\ff.c        **** 		memcpy(dp->dir, dirb, SZDIRE);
2246:.\ff.c        **** 		dp->obj.fs->wflag = 1;
2247:.\ff.c        **** 		if (--nent == 0) break;
2248:.\ff.c        **** 		dirb += SZDIRE;
2249:.\ff.c        **** 		res = dir_next(dp, 0);
2250:.\ff.c        **** 	}
2251:.\ff.c        **** 	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
2252:.\ff.c        **** }
2253:.\ff.c        **** 
2254:.\ff.c        **** 
2255:.\ff.c        **** 
2256:.\ff.c        **** /*-------------------------------------------*/
2257:.\ff.c        **** /* exFAT: Create a new directory entry block */
2258:.\ff.c        **** /*-------------------------------------------*/
2259:.\ff.c        **** 
2260:.\ff.c        **** static void create_xdir (
2261:.\ff.c        **** 	BYTE* dirb,			/* Pointer to the directory entry block buffer */
2262:.\ff.c        **** 	const WCHAR* lfn	/* Pointer to the object name */
2263:.\ff.c        **** )
2264:.\ff.c        **** {
2265:.\ff.c        **** 	UINT i;
2266:.\ff.c        **** 	BYTE nc1, nlen;
2267:.\ff.c        **** 	WCHAR wc;
2268:.\ff.c        **** 
2269:.\ff.c        **** 
2270:.\ff.c        **** 	/* Create file-directory and stream-extension entry */
2271:.\ff.c        **** 	memset(dirb, 0, 2 * SZDIRE);
2272:.\ff.c        **** 	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
2273:.\ff.c        **** 	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
2274:.\ff.c        **** 
2275:.\ff.c        **** 	/* Create file-name entries */
2276:.\ff.c        **** 	i = SZDIRE * 2;	/* Top of file_name entries */
2277:.\ff.c        **** 	nlen = nc1 = 0; wc = 1;
2278:.\ff.c        **** 	do {
2279:.\ff.c        **** 		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
2280:.\ff.c        **** 		do {	/* Fill name field */
2281:.\ff.c        **** 			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
2282:.\ff.c        **** 			st_word(dirb + i, wc); 	/* Store it */
2283:.\ff.c        **** 			i += 2;
2284:.\ff.c        **** 		} while (i % SZDIRE != 0);
2285:.\ff.c        **** 		nc1++;
2286:.\ff.c        **** 	} while (lfn[nlen]);	/* Fill next entry if any char follows */
2287:.\ff.c        **** 
2288:.\ff.c        **** 	dirb[XDIR_NumName] = nlen;		/* Set name length */
2289:.\ff.c        **** 	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
2290:.\ff.c        **** 	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
2291:.\ff.c        **** }
2292:.\ff.c        **** 
2293:.\ff.c        **** #endif	/* !FF_FS_READONLY */
2294:.\ff.c        **** #endif	/* FF_FS_EXFAT */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 48


2295:.\ff.c        **** 
2296:.\ff.c        **** 
2297:.\ff.c        **** 
2298:.\ff.c        **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF_USE_LABEL || FF_FS_EXFAT
2299:.\ff.c        **** /*-----------------------------------------------------------------------*/
2300:.\ff.c        **** /* Read an object from the directory                                     */
2301:.\ff.c        **** /*-----------------------------------------------------------------------*/
2302:.\ff.c        **** 
2303:.\ff.c        **** #define DIR_READ_FILE(dp) dir_read(dp, 0)
2304:.\ff.c        **** #define DIR_READ_LABEL(dp) dir_read(dp, 1)
2305:.\ff.c        **** 
2306:.\ff.c        **** static FRESULT dir_read (
2307:.\ff.c        **** 	DIR* dp,		/* Pointer to the directory object */
2308:.\ff.c        **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
2309:.\ff.c        **** )
2310:.\ff.c        **** {
2311:.\ff.c        **** 	FRESULT res = FR_NO_FILE;
2312:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
2313:.\ff.c        **** 	BYTE attr, b;
2314:.\ff.c        **** #if FF_USE_LFN
2315:.\ff.c        **** 	BYTE ord = 0xFF, sum = 0xFF;
2316:.\ff.c        **** #endif
2317:.\ff.c        **** 
2318:.\ff.c        **** 	while (dp->sect) {
2319:.\ff.c        **** 		res = move_window(fs, dp->sect);
2320:.\ff.c        **** 		if (res != FR_OK) break;
2321:.\ff.c        **** 		b = dp->dir[DIR_Name];	/* Test for the entry type */
2322:.\ff.c        **** 		if (b == 0) {
2323:.\ff.c        **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
2324:.\ff.c        **** 		}
2325:.\ff.c        **** #if FF_FS_EXFAT
2326:.\ff.c        **** 		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2327:.\ff.c        **** 			if (FF_USE_LABEL && vol) {
2328:.\ff.c        **** 				if (b == ET_VLABEL) break;	/* Volume label entry? */
2329:.\ff.c        **** 			} else {
2330:.\ff.c        **** 				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
2331:.\ff.c        **** 					dp->blk_ofs = dp->dptr;	/* Get location of the block */
2332:.\ff.c        **** 					res = load_xdir(dp);	/* Load the entry block */
2333:.\ff.c        **** 					if (res == FR_OK) {
2334:.\ff.c        **** 						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
2335:.\ff.c        **** 					}
2336:.\ff.c        **** 					break;
2337:.\ff.c        **** 				}
2338:.\ff.c        **** 			}
2339:.\ff.c        **** 		} else
2340:.\ff.c        **** #endif
2341:.\ff.c        **** 		{	/* On the FAT/FAT32 volume */
2342:.\ff.c        **** 			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2343:.\ff.c        **** #if FF_USE_LFN		/* LFN configuration */
2344:.\ff.c        **** 			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without val
2345:.\ff.c        **** 				ord = 0xFF;
2346:.\ff.c        **** 			} else {
2347:.\ff.c        **** 				if (attr == AM_LFN) {	/* An LFN entry is found */
2348:.\ff.c        **** 					if (b & LLEF) {		/* Is it start of an LFN sequence? */
2349:.\ff.c        **** 						sum = dp->dir[LDIR_Chksum];
2350:.\ff.c        **** 						b &= (BYTE)~LLEF; ord = b;
2351:.\ff.c        **** 						dp->blk_ofs = dp->dptr;
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 49


2352:.\ff.c        **** 					}
2353:.\ff.c        **** 					/* Check LFN validity and capture it */
2354:.\ff.c        **** 					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0
2355:.\ff.c        **** 				} else {				/* An SFN entry is found */
2356:.\ff.c        **** 					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2357:.\ff.c        **** 						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
2358:.\ff.c        **** 					}
2359:.\ff.c        **** 					break;
2360:.\ff.c        **** 				}
2361:.\ff.c        **** 			}
2362:.\ff.c        **** #else		/* Non LFN configuration */
2363:.\ff.c        **** 			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is
2364:.\ff.c        **** 				break;
2365:.\ff.c        **** 			}
2366:.\ff.c        **** #endif
2367:.\ff.c        **** 		}
2368:.\ff.c        **** 		res = dir_next(dp, 0);		/* Next entry */
2369:.\ff.c        **** 		if (res != FR_OK) break;
2370:.\ff.c        **** 	}
2371:.\ff.c        **** 
2372:.\ff.c        **** 	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2373:.\ff.c        **** 	return res;
2374:.\ff.c        **** }
2375:.\ff.c        **** 
2376:.\ff.c        **** #endif	/* FF_FS_MINIMIZE <= 1 || FF_USE_LABEL || FF_FS_RPATH >= 2 */
2377:.\ff.c        **** 
2378:.\ff.c        **** 
2379:.\ff.c        **** 
2380:.\ff.c        **** /*-----------------------------------------------------------------------*/
2381:.\ff.c        **** /* Directory handling - Find an object in the directory                  */
2382:.\ff.c        **** /*-----------------------------------------------------------------------*/
2383:.\ff.c        **** 
2384:.\ff.c        **** static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
2385:.\ff.c        **** 	DIR* dp					/* Pointer to the directory object with the file name */
2386:.\ff.c        **** )
2387:.\ff.c        **** {
2388:.\ff.c        **** 	FRESULT res;
2389:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
2390:.\ff.c        **** 	BYTE c;
2391:.\ff.c        **** #if FF_USE_LFN
2392:.\ff.c        **** 	BYTE a, ord, sum;
2393:.\ff.c        **** #endif
2394:.\ff.c        **** 
2395:.\ff.c        **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
2396:.\ff.c        **** 	if (res != FR_OK) return res;
2397:.\ff.c        **** #if FF_FS_EXFAT
2398:.\ff.c        **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2399:.\ff.c        **** 		BYTE nc;
2400:.\ff.c        **** 		UINT di, ni;
2401:.\ff.c        **** 		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
2402:.\ff.c        **** 
2403:.\ff.c        **** 		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
2404:.\ff.c        **** #if FF_MAX_LFN < 255
2405:.\ff.c        **** 			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;		/* Skip comparison if inaccessible object 
2406:.\ff.c        **** #endif
2407:.\ff.c        **** 			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched
2408:.\ff.c        **** 			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compa
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 50


2409:.\ff.c        **** 				if ((di % SZDIRE) == 0) di += 2;
2410:.\ff.c        **** 				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
2411:.\ff.c        **** 			}
2412:.\ff.c        **** 			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
2413:.\ff.c        **** 		}
2414:.\ff.c        **** 		return res;
2415:.\ff.c        **** 	}
2416:.\ff.c        **** #endif
2417:.\ff.c        **** 	/* On the FAT/FAT32 volume */
2418:.\ff.c        **** #if FF_USE_LFN
2419:.\ff.c        **** 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2420:.\ff.c        **** #endif
2421:.\ff.c        **** 	do {
2422:.\ff.c        **** 		res = move_window(fs, dp->sect);
2423:.\ff.c        **** 		if (res != FR_OK) break;
2424:.\ff.c        **** 		c = dp->dir[DIR_Name];
2425:.\ff.c        **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2426:.\ff.c        **** #if FF_USE_LFN		/* LFN configuration */
2427:.\ff.c        **** 		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2428:.\ff.c        **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2429:.\ff.c        **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2430:.\ff.c        **** 		} else {
2431:.\ff.c        **** 			if (a == AM_LFN) {			/* An LFN entry is found */
2432:.\ff.c        **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2433:.\ff.c        **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
2434:.\ff.c        **** 						sum = dp->dir[LDIR_Chksum];
2435:.\ff.c        **** 						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2436:.\ff.c        **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2437:.\ff.c        **** 					}
2438:.\ff.c        **** 					/* Check validity of the LFN entry and compare it with given name */
2439:.\ff.c        **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0x
2440:.\ff.c        **** 				}
2441:.\ff.c        **** 			} else {					/* An SFN entry is found */
2442:.\ff.c        **** 				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2443:.\ff.c        **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2444:.\ff.c        **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2445:.\ff.c        **** 			}
2446:.\ff.c        **** 		}
2447:.\ff.c        **** #else		/* Non LFN configuration */
2448:.\ff.c        **** 		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
2449:.\ff.c        **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry?
2450:.\ff.c        **** #endif
2451:.\ff.c        **** 		res = dir_next(dp, 0);	/* Next entry */
2452:.\ff.c        **** 	} while (res == FR_OK);
2453:.\ff.c        **** 
2454:.\ff.c        **** 	return res;
2455:.\ff.c        **** }
2456:.\ff.c        **** 
2457:.\ff.c        **** 
2458:.\ff.c        **** 
2459:.\ff.c        **** 
2460:.\ff.c        **** #if !FF_FS_READONLY
2461:.\ff.c        **** /*-----------------------------------------------------------------------*/
2462:.\ff.c        **** /* Register an object to the directory                                   */
2463:.\ff.c        **** /*-----------------------------------------------------------------------*/
2464:.\ff.c        **** 
2465:.\ff.c        **** static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 51


2466:.\ff.c        **** 	DIR* dp						/* Target directory with object name to be created */
2467:.\ff.c        **** )
2468:.\ff.c        **** {
2469:.\ff.c        **** 	FRESULT res;
2470:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
2471:.\ff.c        **** #if FF_USE_LFN		/* LFN configuration */
2472:.\ff.c        **** 	UINT n, len, n_ent;
2473:.\ff.c        **** 	BYTE sn[12], sum;
2474:.\ff.c        **** 
2475:.\ff.c        **** 
2476:.\ff.c        **** 	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2477:.\ff.c        **** 	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
2478:.\ff.c        **** 
2479:.\ff.c        **** #if FF_FS_EXFAT
2480:.\ff.c        **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2481:.\ff.c        **** 		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
2482:.\ff.c        **** 		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
2483:.\ff.c        **** 		if (res != FR_OK) return res;
2484:.\ff.c        **** 		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
2485:.\ff.c        **** 
2486:.\ff.c        **** 		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
2487:.\ff.c        **** 			dp->obj.stat &= ~4;
2488:.\ff.c        **** 			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
2489:.\ff.c        **** 			if (res != FR_OK) return res;
2490:.\ff.c        **** 			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if n
2491:.\ff.c        **** 			if (res != FR_OK) return res;
2492:.\ff.c        **** 			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
2493:.\ff.c        **** 				DIR dj;
2494:.\ff.c        **** 
2495:.\ff.c        **** 				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
2496:.\ff.c        **** 				if (res != FR_OK) return res;
2497:.\ff.c        **** 				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size *
2498:.\ff.c        **** 				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
2499:.\ff.c        **** 				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
2500:.\ff.c        **** 				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
2501:.\ff.c        **** 				res = store_xdir(&dj);				/* Store the object status */
2502:.\ff.c        **** 				if (res != FR_OK) return res;
2503:.\ff.c        **** 			}
2504:.\ff.c        **** 		}
2505:.\ff.c        **** 
2506:.\ff.c        **** 		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
2507:.\ff.c        **** 		return FR_OK;
2508:.\ff.c        **** 	}
2509:.\ff.c        **** #endif
2510:.\ff.c        **** 	/* On the FAT/FAT32 volume */
2511:.\ff.c        **** 	memcpy(sn, dp->fn, 12);
2512:.\ff.c        **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2513:.\ff.c        **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2514:.\ff.c        **** 		for (n = 1; n < 100; n++) {
2515:.\ff.c        **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2516:.\ff.c        **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2517:.\ff.c        **** 			if (res != FR_OK) break;
2518:.\ff.c        **** 		}
2519:.\ff.c        **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2520:.\ff.c        **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2521:.\ff.c        **** 		dp->fn[NSFLAG] = sn[NSFLAG];
2522:.\ff.c        **** 	}
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 52


2523:.\ff.c        **** 
2524:.\ff.c        **** 	/* Create an SFN with/without LFNs. */
2525:.\ff.c        **** 	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2526:.\ff.c        **** 	res = dir_alloc(dp, n_ent);		/* Allocate entries */
2527:.\ff.c        **** 	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
2528:.\ff.c        **** 		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
2529:.\ff.c        **** 		if (res == FR_OK) {
2530:.\ff.c        **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
2531:.\ff.c        **** 			do {					/* Store LFN entries in bottom first */
2532:.\ff.c        **** 				res = move_window(fs, dp->sect);
2533:.\ff.c        **** 				if (res != FR_OK) break;
2534:.\ff.c        **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
2535:.\ff.c        **** 				fs->wflag = 1;
2536:.\ff.c        **** 				res = dir_next(dp, 0);	/* Next entry */
2537:.\ff.c        **** 			} while (res == FR_OK && --n_ent);
2538:.\ff.c        **** 		}
2539:.\ff.c        **** 	}
2540:.\ff.c        **** 
2541:.\ff.c        **** #else	/* Non LFN configuration */
2542:.\ff.c        **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
2543:.\ff.c        **** 
2544:.\ff.c        **** #endif
2545:.\ff.c        **** 
2546:.\ff.c        **** 	/* Set SFN entry */
2547:.\ff.c        **** 	if (res == FR_OK) {
2548:.\ff.c        **** 		res = move_window(fs, dp->sect);
2549:.\ff.c        **** 		if (res == FR_OK) {
2550:.\ff.c        **** 			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
2551:.\ff.c        **** 			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2552:.\ff.c        **** #if FF_USE_LFN
2553:.\ff.c        **** 			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2554:.\ff.c        **** #endif
2555:.\ff.c        **** 			fs->wflag = 1;
2556:.\ff.c        **** 		}
2557:.\ff.c        **** 	}
2558:.\ff.c        **** 
2559:.\ff.c        **** 	return res;
2560:.\ff.c        **** }
2561:.\ff.c        **** 
2562:.\ff.c        **** #endif /* !FF_FS_READONLY */
2563:.\ff.c        **** 
2564:.\ff.c        **** 
2565:.\ff.c        **** 
2566:.\ff.c        **** #if !FF_FS_READONLY && FF_FS_MINIMIZE == 0
2567:.\ff.c        **** /*-----------------------------------------------------------------------*/
2568:.\ff.c        **** /* Remove an object from the directory                                   */
2569:.\ff.c        **** /*-----------------------------------------------------------------------*/
2570:.\ff.c        **** 
2571:.\ff.c        **** static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
2572:.\ff.c        **** 	DIR* dp					/* Directory object pointing the entry to be removed */
2573:.\ff.c        **** )
2574:.\ff.c        **** {
2575:.\ff.c        **** 	FRESULT res;
2576:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
2577:.\ff.c        **** #if FF_USE_LFN		/* LFN configuration */
2578:.\ff.c        **** 	DWORD last = dp->dptr;
2579:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 53


2580:.\ff.c        **** 	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry blo
2581:.\ff.c        **** 	if (res == FR_OK) {
2582:.\ff.c        **** 		do {
2583:.\ff.c        **** 			res = move_window(fs, dp->sect);
2584:.\ff.c        **** 			if (res != FR_OK) break;
2585:.\ff.c        **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2586:.\ff.c        **** 				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
2587:.\ff.c        **** 			} else {										/* On the FAT/FAT32 volume */
2588:.\ff.c        **** 				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
2589:.\ff.c        **** 			}
2590:.\ff.c        **** 			fs->wflag = 1;
2591:.\ff.c        **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
2592:.\ff.c        **** 			res = dir_next(dp, 0);	/* Next entry */
2593:.\ff.c        **** 		} while (res == FR_OK);
2594:.\ff.c        **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
2595:.\ff.c        **** 	}
2596:.\ff.c        **** #else			/* Non LFN configuration */
2597:.\ff.c        **** 
2598:.\ff.c        **** 	res = move_window(fs, dp->sect);
2599:.\ff.c        **** 	if (res == FR_OK) {
2600:.\ff.c        **** 		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
2601:.\ff.c        **** 		fs->wflag = 1;
2602:.\ff.c        **** 	}
2603:.\ff.c        **** #endif
2604:.\ff.c        **** 
2605:.\ff.c        **** 	return res;
2606:.\ff.c        **** }
2607:.\ff.c        **** 
2608:.\ff.c        **** #endif /* !FF_FS_READONLY && FF_FS_MINIMIZE == 0 */
2609:.\ff.c        **** 
2610:.\ff.c        **** 
2611:.\ff.c        **** 
2612:.\ff.c        **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
2613:.\ff.c        **** /*-----------------------------------------------------------------------*/
2614:.\ff.c        **** /* Get file information from directory entry                             */
2615:.\ff.c        **** /*-----------------------------------------------------------------------*/
2616:.\ff.c        **** 
2617:.\ff.c        **** static void get_fileinfo (
2618:.\ff.c        **** 	DIR* dp,			/* Pointer to the directory object */
2619:.\ff.c        **** 	FILINFO* fno		/* Pointer to the file information to be filled */
2620:.\ff.c        **** )
2621:.\ff.c        **** {
 380              		.loc 1 2621 0
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 0
 383              		@ frame_needed = 0, uses_anonymous_args = 0
 384              	.LVL55:
2622:.\ff.c        **** 	UINT si, di;
2623:.\ff.c        **** #if FF_USE_LFN
2624:.\ff.c        **** 	BYTE lcf;
2625:.\ff.c        **** 	WCHAR wc, hs;
2626:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
2627:.\ff.c        **** 	UINT nw;
2628:.\ff.c        **** #else
2629:.\ff.c        **** 	TCHAR c;
2630:.\ff.c        **** #endif
2631:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 54


2632:.\ff.c        **** 
2633:.\ff.c        **** 	fno->fname[0] = 0;			/* Invaidate file info */
 385              		.loc 1 2633 0
 386 0000 0023     		movs	r3, #0
 387 0002 4B72     		strb	r3, [r1, #9]
2634:.\ff.c        **** 	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 388              		.loc 1 2634 0
 389 0004 8369     		ldr	r3, [r0, #24]
 390 0006 8BB3     		cbz	r3, .L36
2621:.\ff.c        **** 	UINT si, di;
 391              		.loc 1 2621 0
 392 0008 70B5     		push	{r4, r5, r6, lr}
 393              		.cfi_def_cfa_offset 16
 394              		.cfi_offset 4, -16
 395              		.cfi_offset 5, -12
 396              		.cfi_offset 6, -8
 397              		.cfi_offset 14, -4
 398 000a 0024     		movs	r4, #0
 399 000c 2346     		mov	r3, r4
 400 000e 11E0     		b	.L29
 401              	.LVL56:
 402              	.L33:
2635:.\ff.c        **** 
2636:.\ff.c        **** #if FF_USE_LFN		/* LFN configuration */
2637:.\ff.c        **** #if FF_FS_EXFAT
2638:.\ff.c        **** 	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
2639:.\ff.c        **** 		UINT nc = 0;
2640:.\ff.c        **** 
2641:.\ff.c        **** 		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
2642:.\ff.c        **** 		hs = 0;
2643:.\ff.c        **** 		while (nc < fs->dirbuf[XDIR_NumName]) {
2644:.\ff.c        **** 			if (si >= MAXDIRB(FF_MAX_LFN)) {	/* Truncated directory block? */
2645:.\ff.c        **** 				di = 0; break;
2646:.\ff.c        **** 			}
2647:.\ff.c        **** 			if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
2648:.\ff.c        **** 			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
2649:.\ff.c        **** 			if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
2650:.\ff.c        **** 				hs = wc; continue;				/* Get low surrogate */
2651:.\ff.c        **** 			}
2652:.\ff.c        **** 			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encodin
2653:.\ff.c        **** 			if (nw == 0) {						/* Buffer overflow or wrong char? */
2654:.\ff.c        **** 				di = 0; break;
2655:.\ff.c        **** 			}
2656:.\ff.c        **** 			di += nw;
2657:.\ff.c        **** 			hs = 0;
2658:.\ff.c        **** 		}
2659:.\ff.c        **** 		if (hs != 0) di = 0;					/* Broken surrogate pair? */
2660:.\ff.c        **** 		if (di == 0) fno->fname[di++] = '\?';	/* Inaccessible object name? */
2661:.\ff.c        **** 		fno->fname[di] = 0;						/* Terminate the name */
2662:.\ff.c        **** 		fno->altname[0] = 0;					/* exFAT does not support SFN */
2663:.\ff.c        **** 
2664:.\ff.c        **** 		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
2665:.\ff.c        **** 		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
2666:.\ff.c        **** 		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
2667:.\ff.c        **** 		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
2668:.\ff.c        **** 		return;
2669:.\ff.c        **** 	} else
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 55


2670:.\ff.c        **** #endif
2671:.\ff.c        **** 	{	/* FAT/FAT32 volume */
2672:.\ff.c        **** 		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2673:.\ff.c        **** 			si = di = 0;
2674:.\ff.c        **** 			hs = 0;
2675:.\ff.c        **** 			while (fs->lfnbuf[si] != 0) {
2676:.\ff.c        **** 				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
2677:.\ff.c        **** 				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
2678:.\ff.c        **** 					hs = wc; continue;		/* Get low surrogate */
2679:.\ff.c        **** 				}
2680:.\ff.c        **** 				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encodi
2681:.\ff.c        **** 				if (nw == 0) {				/* Buffer overflow or wrong char? */
2682:.\ff.c        **** 					di = 0; break;
2683:.\ff.c        **** 				}
2684:.\ff.c        **** 				di += nw;
2685:.\ff.c        **** 				hs = 0;
2686:.\ff.c        **** 			}
2687:.\ff.c        **** 			if (hs != 0) di = 0;	/* Broken surrogate pair? */
2688:.\ff.c        **** 			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
2689:.\ff.c        **** 		}
2690:.\ff.c        **** 	}
2691:.\ff.c        **** 
2692:.\ff.c        **** 	si = di = 0;
2693:.\ff.c        **** 	while (si < 11) {		/* Get SFN from SFN entry */
2694:.\ff.c        **** 		wc = dp->dir[si++];			/* Get a char */
2695:.\ff.c        **** 		if (wc == ' ') continue;	/* Skip padding spaces */
2696:.\ff.c        **** 		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
2697:.\ff.c        **** 		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
2698:.\ff.c        **** #if FF_LFN_UNICODE >= 1	/* Unicode output */
2699:.\ff.c        **** 		if (dbc_1st((BYTE)wc) && si != 8 && si != 11 && dbc_2nd(dp->dir[si])) {	/* Make a DBC if needed *
2700:.\ff.c        **** 			wc = wc << 8 | dp->dir[si++];
2701:.\ff.c        **** 		}
2702:.\ff.c        **** 		wc = ff_oem2uni(wc, CODEPAGE);		/* ANSI/OEM -> Unicode */
2703:.\ff.c        **** 		if (wc == 0) {				/* Wrong char in the current code page? */
2704:.\ff.c        **** 			di = 0; break;
2705:.\ff.c        **** 		}
2706:.\ff.c        **** 		nw = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in API encoding */
2707:.\ff.c        **** 		if (nw == 0) {				/* Buffer overflow? */
2708:.\ff.c        **** 			di = 0; break;
2709:.\ff.c        **** 		}
2710:.\ff.c        **** 		di += nw;
2711:.\ff.c        **** #else					/* ANSI/OEM output */
2712:.\ff.c        **** 		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
2713:.\ff.c        **** #endif
2714:.\ff.c        **** 	}
2715:.\ff.c        **** 	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
2716:.\ff.c        **** 
2717:.\ff.c        **** 	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
2718:.\ff.c        **** 		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccessible */
2719:.\ff.c        **** 			fno->fname[di++] = '\?';
2720:.\ff.c        **** 		} else {
2721:.\ff.c        **** 			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] wi
2722:.\ff.c        **** 				wc = (WCHAR)fno->altname[si];
2723:.\ff.c        **** 				if (wc == '.') lcf = NS_EXT;
2724:.\ff.c        **** 				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
2725:.\ff.c        **** 				fno->fname[di] = (TCHAR)wc;
2726:.\ff.c        **** 			}
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 56


2727:.\ff.c        **** 		}
2728:.\ff.c        **** 		fno->fname[di] = 0;	/* Terminate the LFN */
2729:.\ff.c        **** 		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case in
2730:.\ff.c        **** 	}
2731:.\ff.c        **** 
2732:.\ff.c        **** #else	/* Non-LFN configuration */
2733:.\ff.c        **** 	si = di = 0;
2734:.\ff.c        **** 	while (si < 11) {		/* Copy name body and extension */
2735:.\ff.c        **** 		c = (TCHAR)dp->dir[si++];
 403              		.loc 1 2735 0
 404 0010 C569     		ldr	r5, [r0, #28]
 405 0012 5A1C     		adds	r2, r3, #1
 406              	.LVL57:
 407 0014 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 408              	.LVL58:
2736:.\ff.c        **** 		if (c == ' ') continue;		/* Skip padding spaces */
 409              		.loc 1 2736 0
 410 0016 202B     		cmp	r3, #32
 411 0018 0BD0     		beq	.L30
2737:.\ff.c        **** 		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 412              		.loc 1 2737 0
 413 001a 052B     		cmp	r3, #5
 414 001c 00D1     		bne	.L31
 415 001e E523     		movs	r3, #229
 416              	.LVL59:
 417              	.L31:
2738:.\ff.c        **** 		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 418              		.loc 1 2738 0
 419 0020 092A     		cmp	r2, #9
 420 0022 03D1     		bne	.L32
 421              	.LVL60:
 422              		.loc 1 2738 0 is_stmt 0 discriminator 1
 423 0024 0D19     		adds	r5, r1, r4
 424 0026 2E26     		movs	r6, #46
 425 0028 6E72     		strb	r6, [r5, #9]
 426 002a 0134     		adds	r4, r4, #1
 427              	.LVL61:
 428              	.L32:
2739:.\ff.c        **** 		fno->fname[di++] = c;
 429              		.loc 1 2739 0 is_stmt 1
 430 002c 0D19     		adds	r5, r1, r4
 431 002e 6B72     		strb	r3, [r5, #9]
 432 0030 0134     		adds	r4, r4, #1
 433              	.LVL62:
 434              	.L30:
 435 0032 1346     		mov	r3, r2
 436              	.LVL63:
 437              	.L29:
2734:.\ff.c        **** 		c = (TCHAR)dp->dir[si++];
 438              		.loc 1 2734 0
 439 0034 0A2B     		cmp	r3, #10
 440 0036 EBD9     		bls	.L33
 441 0038 0E46     		mov	r6, r1
 442 003a 0546     		mov	r5, r0
2740:.\ff.c        **** 	}
2741:.\ff.c        **** 	fno->fname[di] = 0;		/* Terminate the SFN */
 443              		.loc 1 2741 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 57


 444 003c 0C44     		add	r4, r4, r1
 445              	.LVL64:
 446 003e 0023     		movs	r3, #0
 447              	.LVL65:
 448 0040 6372     		strb	r3, [r4, #9]
2742:.\ff.c        **** #endif
2743:.\ff.c        **** 
2744:.\ff.c        **** 	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 449              		.loc 1 2744 0
 450 0042 C369     		ldr	r3, [r0, #28]
 451 0044 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 452 0046 03F03F03 		and	r3, r3, #63
 453 004a 0B72     		strb	r3, [r1, #8]
2745:.\ff.c        **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 454              		.loc 1 2745 0
 455 004c C069     		ldr	r0, [r0, #28]
 456              	.LVL66:
 457 004e 1C30     		adds	r0, r0, #28
 458 0050 FFF7FEFF 		bl	ld_dword
 459              	.LVL67:
 460 0054 3060     		str	r0, [r6]
2746:.\ff.c        **** 	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 461              		.loc 1 2746 0
 462 0056 E869     		ldr	r0, [r5, #28]
 463 0058 1630     		adds	r0, r0, #22
 464 005a FFF7FEFF 		bl	ld_word
 465              	.LVL68:
 466 005e F080     		strh	r0, [r6, #6]	@ movhi
2747:.\ff.c        **** 	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 467              		.loc 1 2747 0
 468 0060 E869     		ldr	r0, [r5, #28]
 469 0062 1830     		adds	r0, r0, #24
 470 0064 FFF7FEFF 		bl	ld_word
 471              	.LVL69:
 472 0068 B080     		strh	r0, [r6, #4]	@ movhi
 473 006a 70BD     		pop	{r4, r5, r6, pc}
 474              	.LVL70:
 475              	.L36:
 476              		.cfi_def_cfa_offset 0
 477              		.cfi_restore 4
 478              		.cfi_restore 5
 479              		.cfi_restore 6
 480              		.cfi_restore 14
 481 006c 7047     		bx	lr
 482              		.cfi_endproc
 483              	.LFE24:
 484              		.size	get_fileinfo, .-get_fileinfo
 485              		.section	.text.get_ldnumber,"ax",%progbits
 486              		.align	2
 487              		.thumb
 488              		.thumb_func
 489              		.type	get_ldnumber, %function
 490              	get_ldnumber:
 491              	.LFB27:
2748:.\ff.c        **** }
2749:.\ff.c        **** 
2750:.\ff.c        **** #endif /* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 58


2751:.\ff.c        **** 
2752:.\ff.c        **** 
2753:.\ff.c        **** 
2754:.\ff.c        **** #if FF_USE_FIND && FF_FS_MINIMIZE <= 1
2755:.\ff.c        **** /*-----------------------------------------------------------------------*/
2756:.\ff.c        **** /* Pattern matching                                                      */
2757:.\ff.c        **** /*-----------------------------------------------------------------------*/
2758:.\ff.c        **** 
2759:.\ff.c        **** #define FIND_RECURS	4	/* Maximum number of wildcard terms in the pattern to limit recursion */
2760:.\ff.c        **** 
2761:.\ff.c        **** 
2762:.\ff.c        **** static DWORD get_achar (	/* Get a character and advance ptr */
2763:.\ff.c        **** 	const TCHAR** ptr		/* Pointer to pointer to the ANSI/OEM or Unicode string */
2764:.\ff.c        **** )
2765:.\ff.c        **** {
2766:.\ff.c        **** 	DWORD chr;
2767:.\ff.c        **** 
2768:.\ff.c        **** 
2769:.\ff.c        **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1	/* Unicode input */
2770:.\ff.c        **** 	chr = tchar2uni(ptr);
2771:.\ff.c        **** 	if (chr == 0xFFFFFFFF) chr = 0;		/* Wrong UTF encoding is recognized as end of the string */
2772:.\ff.c        **** 	chr = ff_wtoupper(chr);
2773:.\ff.c        **** 
2774:.\ff.c        **** #else									/* ANSI/OEM input */
2775:.\ff.c        **** 	chr = (BYTE)*(*ptr)++;				/* Get a byte */
2776:.\ff.c        **** 	if (IsLower(chr)) chr -= 0x20;		/* To upper ASCII char */
2777:.\ff.c        **** #if FF_CODE_PAGE == 0
2778:.\ff.c        **** 	if (ExCvt && chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2779:.\ff.c        **** #elif FF_CODE_PAGE < 900
2780:.\ff.c        **** 	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2781:.\ff.c        **** #endif
2782:.\ff.c        **** #if FF_CODE_PAGE == 0 || FF_CODE_PAGE >= 900
2783:.\ff.c        **** 	if (dbc_1st((BYTE)chr)) {	/* Get DBC 2nd byte if needed */
2784:.\ff.c        **** 		chr = dbc_2nd((BYTE)**ptr) ? chr << 8 | (BYTE)*(*ptr)++ : 0;
2785:.\ff.c        **** 	}
2786:.\ff.c        **** #endif
2787:.\ff.c        **** 
2788:.\ff.c        **** #endif
2789:.\ff.c        **** 	return chr;
2790:.\ff.c        **** }
2791:.\ff.c        **** 
2792:.\ff.c        **** 
2793:.\ff.c        **** static int pattern_match (	/* 0:mismatched, 1:matched */
2794:.\ff.c        **** 	const TCHAR* pat,	/* Matching pattern */
2795:.\ff.c        **** 	const TCHAR* nam,	/* String to be tested */
2796:.\ff.c        **** 	UINT skip,			/* Number of pre-skip chars (number of ?s, b8:infinite (* specified)) */
2797:.\ff.c        **** 	UINT recur			/* Recursion count */
2798:.\ff.c        **** )
2799:.\ff.c        **** {
2800:.\ff.c        **** 	const TCHAR *pptr;
2801:.\ff.c        **** 	const TCHAR *nptr;
2802:.\ff.c        **** 	DWORD pchr, nchr;
2803:.\ff.c        **** 	UINT sk;
2804:.\ff.c        **** 
2805:.\ff.c        **** 
2806:.\ff.c        **** 	while ((skip & 0xFF) != 0) {		/* Pre-skip name chars */
2807:.\ff.c        **** 		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 59


2808:.\ff.c        **** 		skip--;
2809:.\ff.c        **** 	}
2810:.\ff.c        **** 	if (*pat == 0 && skip) return 1;	/* Matched? (short circuit) */
2811:.\ff.c        **** 
2812:.\ff.c        **** 	do {
2813:.\ff.c        **** 		pptr = pat; nptr = nam;			/* Top of pattern and name to match */
2814:.\ff.c        **** 		for (;;) {
2815:.\ff.c        **** 			if (*pptr == '\?' || *pptr == '*') {	/* Wildcard term? */
2816:.\ff.c        **** 				if (recur == 0) return 0;	/* Too many wildcard terms? */
2817:.\ff.c        **** 				sk = 0;
2818:.\ff.c        **** 				do {	/* Analyze the wildcard term */
2819:.\ff.c        **** 					if (*pptr++ == '\?') {
2820:.\ff.c        **** 						sk++;
2821:.\ff.c        **** 					} else {
2822:.\ff.c        **** 						sk |= 0x100;
2823:.\ff.c        **** 					}
2824:.\ff.c        **** 				} while (*pptr == '\?' || *pptr == '*');
2825:.\ff.c        **** 				if (pattern_match(pptr, nptr, sk, recur - 1)) return 1;	/* Test new branch (recursive call) */
2826:.\ff.c        **** 				nchr = *nptr; break;	/* Branch mismatched */
2827:.\ff.c        **** 			}
2828:.\ff.c        **** 			pchr = get_achar(&pptr);	/* Get a pattern char */
2829:.\ff.c        **** 			nchr = get_achar(&nptr);	/* Get a name char */
2830:.\ff.c        **** 			if (pchr != nchr) break;	/* Branch mismatched? */
2831:.\ff.c        **** 			if (pchr == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2832:.\ff.c        **** 		}
2833:.\ff.c        **** 		get_achar(&nam);			/* nam++ */
2834:.\ff.c        **** 	} while (skip && nchr);		/* Retry until end of name if infinite search is specified */
2835:.\ff.c        **** 
2836:.\ff.c        **** 	return 0;
2837:.\ff.c        **** }
2838:.\ff.c        **** 
2839:.\ff.c        **** #endif /* FF_USE_FIND && FF_FS_MINIMIZE <= 1 */
2840:.\ff.c        **** 
2841:.\ff.c        **** 
2842:.\ff.c        **** 
2843:.\ff.c        **** /*-----------------------------------------------------------------------*/
2844:.\ff.c        **** /* Pick a top segment and create the object name in directory form       */
2845:.\ff.c        **** /*-----------------------------------------------------------------------*/
2846:.\ff.c        **** 
2847:.\ff.c        **** static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
2848:.\ff.c        **** 	DIR* dp,					/* Pointer to the directory object */
2849:.\ff.c        **** 	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
2850:.\ff.c        **** )
2851:.\ff.c        **** {
2852:.\ff.c        **** #if FF_USE_LFN		/* LFN configuration */
2853:.\ff.c        **** 	BYTE b, cf;
2854:.\ff.c        **** 	WCHAR wc;
2855:.\ff.c        **** 	WCHAR *lfn;
2856:.\ff.c        **** 	const TCHAR* p;
2857:.\ff.c        **** 	DWORD uc;
2858:.\ff.c        **** 	UINT i, ni, si, di;
2859:.\ff.c        **** 
2860:.\ff.c        **** 
2861:.\ff.c        **** 	/* Create LFN into LFN working buffer */
2862:.\ff.c        **** 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2863:.\ff.c        **** 	for (;;) {
2864:.\ff.c        **** 		uc = tchar2uni(&p);			/* Get a character */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 60


2865:.\ff.c        **** 		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
2866:.\ff.c        **** 		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
2867:.\ff.c        **** 		wc = (WCHAR)uc;
2868:.\ff.c        **** 		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
2869:.\ff.c        **** 		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal char
2870:.\ff.c        **** 		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2871:.\ff.c        **** 		lfn[di++] = wc;				/* Store the Unicode character */
2872:.\ff.c        **** 	}
2873:.\ff.c        **** 	if (wc < ' ') {				/* Stopped at end of the path? */
2874:.\ff.c        **** 		cf = NS_LAST;			/* Last segment */
2875:.\ff.c        **** 	} else {					/* Stopped at a separator */
2876:.\ff.c        **** 		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
2877:.\ff.c        **** 		cf = 0;					/* Next segment may follow */
2878:.\ff.c        **** 		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
2879:.\ff.c        **** 	}
2880:.\ff.c        **** 	*path = p;					/* Return pointer to the next segment */
2881:.\ff.c        **** 
2882:.\ff.c        **** #if FF_FS_RPATH != 0
2883:.\ff.c        **** 	if ((di == 1 && lfn[di - 1] == '.') ||
2884:.\ff.c        **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
2885:.\ff.c        **** 		lfn[di] = 0;
2886:.\ff.c        **** 		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
2887:.\ff.c        **** 			dp->fn[i] = (i < di) ? '.' : ' ';
2888:.\ff.c        **** 		}
2889:.\ff.c        **** 		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
2890:.\ff.c        **** 		return FR_OK;
2891:.\ff.c        **** 	}
2892:.\ff.c        **** #endif
2893:.\ff.c        **** 	while (di) {					/* Snip off trailing spaces and dots if exist */
2894:.\ff.c        **** 		wc = lfn[di - 1];
2895:.\ff.c        **** 		if (wc != ' ' && wc != '.') break;
2896:.\ff.c        **** 		di--;
2897:.\ff.c        **** 	}
2898:.\ff.c        **** 	lfn[di] = 0;							/* LFN is created into the working buffer */
2899:.\ff.c        **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
2900:.\ff.c        **** 
2901:.\ff.c        **** 	/* Create SFN in directory form */
2902:.\ff.c        **** 	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
2903:.\ff.c        **** 	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
2904:.\ff.c        **** 	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
2905:.\ff.c        **** 
2906:.\ff.c        **** 	memset(dp->fn, ' ', 11);
2907:.\ff.c        **** 	i = b = 0; ni = 8;
2908:.\ff.c        **** 	for (;;) {
2909:.\ff.c        **** 		wc = lfn[si++];					/* Get an LFN character */
2910:.\ff.c        **** 		if (wc == 0) break;				/* Break on end of the LFN */
2911:.\ff.c        **** 		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
2912:.\ff.c        **** 			cf |= NS_LOSS | NS_LFN;
2913:.\ff.c        **** 			continue;
2914:.\ff.c        **** 		}
2915:.\ff.c        **** 
2916:.\ff.c        **** 		if (i >= ni || si == di) {		/* End of field? */
2917:.\ff.c        **** 			if (ni == 11) {				/* Name extension overflow? */
2918:.\ff.c        **** 				cf |= NS_LOSS | NS_LFN;
2919:.\ff.c        **** 				break;
2920:.\ff.c        **** 			}
2921:.\ff.c        **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 61


2922:.\ff.c        **** 			if (si > di) break;						/* No name extension? */
2923:.\ff.c        **** 			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
2924:.\ff.c        **** 			continue;
2925:.\ff.c        **** 		}
2926:.\ff.c        **** 
2927:.\ff.c        **** 		if (wc >= 0x80) {	/* Is this an extended character? */
2928:.\ff.c        **** 			cf |= NS_LFN;	/* LFN entry needs to be created */
2929:.\ff.c        **** #if FF_CODE_PAGE == 0
2930:.\ff.c        **** 			if (ExCvt) {	/* In SBCS cfg */
2931:.\ff.c        **** 				wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
2932:.\ff.c        **** 				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
2933:.\ff.c        **** 			} else {		/* In DBCS cfg */
2934:.\ff.c        **** 				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
2935:.\ff.c        **** 			}
2936:.\ff.c        **** #elif FF_CODE_PAGE < 900	/* In SBCS cfg */
2937:.\ff.c        **** 			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
2938:.\ff.c        **** 			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
2939:.\ff.c        **** #else						/* In DBCS cfg */
2940:.\ff.c        **** 			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
2941:.\ff.c        **** #endif
2942:.\ff.c        **** 		}
2943:.\ff.c        **** 
2944:.\ff.c        **** 		if (wc >= 0x100) {				/* Is this a DBC? */
2945:.\ff.c        **** 			if (i >= ni - 1) {			/* Field overflow? */
2946:.\ff.c        **** 				cf |= NS_LOSS | NS_LFN;
2947:.\ff.c        **** 				i = ni; continue;		/* Next field */
2948:.\ff.c        **** 			}
2949:.\ff.c        **** 			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
2950:.\ff.c        **** 		} else {						/* SBC */
2951:.\ff.c        **** 			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
2952:.\ff.c        **** 				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2953:.\ff.c        **** 			} else {
2954:.\ff.c        **** 				if (IsUpper(wc)) {		/* ASCII upper case? */
2955:.\ff.c        **** 					b |= 2;
2956:.\ff.c        **** 				}
2957:.\ff.c        **** 				if (IsLower(wc)) {		/* ASCII lower case? */
2958:.\ff.c        **** 					b |= 1; wc -= 0x20;
2959:.\ff.c        **** 				}
2960:.\ff.c        **** 			}
2961:.\ff.c        **** 		}
2962:.\ff.c        **** 		dp->fn[i++] = (BYTE)wc;
2963:.\ff.c        **** 	}
2964:.\ff.c        **** 
2965:.\ff.c        **** 	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it
2966:.\ff.c        **** 
2967:.\ff.c        **** 	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
2968:.\ff.c        **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if co
2969:.\ff.c        **** 	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are cre
2970:.\ff.c        **** 		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
2971:.\ff.c        **** 		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
2972:.\ff.c        **** 	}
2973:.\ff.c        **** 
2974:.\ff.c        **** 	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
2975:.\ff.c        **** 
2976:.\ff.c        **** 	return FR_OK;
2977:.\ff.c        **** 
2978:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 62


2979:.\ff.c        **** #else	/* FF_USE_LFN : Non-LFN configuration */
2980:.\ff.c        **** 	BYTE c, d;
2981:.\ff.c        **** 	BYTE *sfn;
2982:.\ff.c        **** 	UINT ni, si, i;
2983:.\ff.c        **** 	const char *p;
2984:.\ff.c        **** 
2985:.\ff.c        **** 	/* Create file name in directory form */
2986:.\ff.c        **** 	p = *path; sfn = dp->fn;
2987:.\ff.c        **** 	memset(sfn, ' ', 11);
2988:.\ff.c        **** 	si = i = 0; ni = 8;
2989:.\ff.c        **** #if FF_FS_RPATH != 0
2990:.\ff.c        **** 	if (p[si] == '.') { /* Is this a dot entry? */
2991:.\ff.c        **** 		for (;;) {
2992:.\ff.c        **** 			c = (BYTE)p[si++];
2993:.\ff.c        **** 			if (c != '.' || si >= 3) break;
2994:.\ff.c        **** 			sfn[i++] = c;
2995:.\ff.c        **** 		}
2996:.\ff.c        **** 		if (!IsSeparator(c) && c > ' ') return FR_INVALID_NAME;
2997:.\ff.c        **** 		*path = p + si;					/* Return pointer to the next segment */
2998:.\ff.c        **** 		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path
2999:.\ff.c        **** 		return FR_OK;
3000:.\ff.c        **** 	}
3001:.\ff.c        **** #endif
3002:.\ff.c        **** 	for (;;) {
3003:.\ff.c        **** 		c = (BYTE)p[si++];				/* Get a byte */
3004:.\ff.c        **** 		if (c <= ' ') break; 			/* Break if end of the path name */
3005:.\ff.c        **** 		if (IsSeparator(c)) {			/* Break if a separator is found */
3006:.\ff.c        **** 			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
3007:.\ff.c        **** 			break;
3008:.\ff.c        **** 		}
3009:.\ff.c        **** 		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
3010:.\ff.c        **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
3011:.\ff.c        **** 			i = 8; ni = 11;				/* Enter file extension field */
3012:.\ff.c        **** 			continue;
3013:.\ff.c        **** 		}
3014:.\ff.c        **** #if FF_CODE_PAGE == 0
3015:.\ff.c        **** 		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
3016:.\ff.c        **** 			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
3017:.\ff.c        **** 		}
3018:.\ff.c        **** #elif FF_CODE_PAGE < 900
3019:.\ff.c        **** 		if (c >= 0x80) {				/* Is SBC extended character? */
3020:.\ff.c        **** 			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
3021:.\ff.c        **** 		}
3022:.\ff.c        **** #endif
3023:.\ff.c        **** 		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
3024:.\ff.c        **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
3025:.\ff.c        **** 			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
3026:.\ff.c        **** 			sfn[i++] = c;
3027:.\ff.c        **** 			sfn[i++] = d;
3028:.\ff.c        **** 		} else {						/* SBC */
3029:.\ff.c        **** 			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SF
3030:.\ff.c        **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
3031:.\ff.c        **** 			sfn[i++] = c;
3032:.\ff.c        **** 		}
3033:.\ff.c        **** 	}
3034:.\ff.c        **** 	*path = &p[si];						/* Return pointer to the next segment */
3035:.\ff.c        **** 	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 63


3036:.\ff.c        **** 
3037:.\ff.c        **** 	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with 
3038:.\ff.c        **** 	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the pat
3039:.\ff.c        **** 
3040:.\ff.c        **** 	return FR_OK;
3041:.\ff.c        **** #endif /* FF_USE_LFN */
3042:.\ff.c        **** }
3043:.\ff.c        **** 
3044:.\ff.c        **** 
3045:.\ff.c        **** 
3046:.\ff.c        **** 
3047:.\ff.c        **** /*-----------------------------------------------------------------------*/
3048:.\ff.c        **** /* Follow a file path                                                    */
3049:.\ff.c        **** /*-----------------------------------------------------------------------*/
3050:.\ff.c        **** 
3051:.\ff.c        **** static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
3052:.\ff.c        **** 	DIR* dp,					/* Directory object to return last directory and found object */
3053:.\ff.c        **** 	const TCHAR* path			/* Full-path string to find a file or directory */
3054:.\ff.c        **** )
3055:.\ff.c        **** {
3056:.\ff.c        **** 	FRESULT res;
3057:.\ff.c        **** 	BYTE ns;
3058:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
3059:.\ff.c        **** 
3060:.\ff.c        **** 
3061:.\ff.c        **** #if FF_FS_RPATH != 0
3062:.\ff.c        **** 	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading s
3063:.\ff.c        **** 		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
3064:.\ff.c        **** 	} else
3065:.\ff.c        **** #endif
3066:.\ff.c        **** 	{										/* With heading separator */
3067:.\ff.c        **** 		while (IsSeparator(*path)) path++;	/* Strip separators */
3068:.\ff.c        **** 		dp->obj.sclust = 0;					/* Start from the root directory */
3069:.\ff.c        **** 	}
3070:.\ff.c        **** #if FF_FS_EXFAT
3071:.\ff.c        **** 	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
3072:.\ff.c        **** #if FF_FS_RPATH != 0
3073:.\ff.c        **** 	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
3074:.\ff.c        **** 		DIR dj;
3075:.\ff.c        **** 
3076:.\ff.c        **** 		dp->obj.c_scl = fs->cdc_scl;
3077:.\ff.c        **** 		dp->obj.c_size = fs->cdc_size;
3078:.\ff.c        **** 		dp->obj.c_ofs = fs->cdc_ofs;
3079:.\ff.c        **** 		res = load_obj_xdir(&dj, &dp->obj);
3080:.\ff.c        **** 		if (res != FR_OK) return res;
3081:.\ff.c        **** 		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
3082:.\ff.c        **** 		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3083:.\ff.c        **** 	}
3084:.\ff.c        **** #endif
3085:.\ff.c        **** #endif
3086:.\ff.c        **** 
3087:.\ff.c        **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
3088:.\ff.c        **** 		dp->fn[NSFLAG] = NS_NONAME;
3089:.\ff.c        **** 		res = dir_sdi(dp, 0);
3090:.\ff.c        **** 
3091:.\ff.c        **** 	} else {								/* Follow path */
3092:.\ff.c        **** 		for (;;) {
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 64


3093:.\ff.c        **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
3094:.\ff.c        **** 			if (res != FR_OK) break;
3095:.\ff.c        **** 			res = dir_find(dp);				/* Find an object with the segment name */
3096:.\ff.c        **** 			ns = dp->fn[NSFLAG];
3097:.\ff.c        **** 			if (res != FR_OK) {				/* Failed to find the object */
3098:.\ff.c        **** 				if (res == FR_NO_FILE) {	/* Object is not found */
3099:.\ff.c        **** 					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
3100:.\ff.c        **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
3101:.\ff.c        **** 						dp->fn[NSFLAG] = NS_NONAME;
3102:.\ff.c        **** 						res = FR_OK;
3103:.\ff.c        **** 					} else {							/* Could not find the object */
3104:.\ff.c        **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
3105:.\ff.c        **** 					}
3106:.\ff.c        **** 				}
3107:.\ff.c        **** 				break;
3108:.\ff.c        **** 			}
3109:.\ff.c        **** 			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
3110:.\ff.c        **** 			/* Get into the sub-directory */
3111:.\ff.c        **** 			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
3112:.\ff.c        **** 				res = FR_NO_PATH; break;
3113:.\ff.c        **** 			}
3114:.\ff.c        **** #if FF_FS_EXFAT
3115:.\ff.c        **** 			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
3116:.\ff.c        **** 				dp->obj.c_scl = dp->obj.sclust;
3117:.\ff.c        **** 				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
3118:.\ff.c        **** 				dp->obj.c_ofs = dp->blk_ofs;
3119:.\ff.c        **** 				init_alloc_info(fs, &dp->obj);	/* Open next directory */
3120:.\ff.c        **** 			} else
3121:.\ff.c        **** #endif
3122:.\ff.c        **** 			{
3123:.\ff.c        **** 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
3124:.\ff.c        **** 			}
3125:.\ff.c        **** 		}
3126:.\ff.c        **** 	}
3127:.\ff.c        **** 
3128:.\ff.c        **** 	return res;
3129:.\ff.c        **** }
3130:.\ff.c        **** 
3131:.\ff.c        **** 
3132:.\ff.c        **** 
3133:.\ff.c        **** 
3134:.\ff.c        **** /*-----------------------------------------------------------------------*/
3135:.\ff.c        **** /* Get logical drive number from path name                               */
3136:.\ff.c        **** /*-----------------------------------------------------------------------*/
3137:.\ff.c        **** 
3138:.\ff.c        **** static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer)
3139:.\ff.c        **** 	const TCHAR** path		/* Pointer to pointer to the path name */
3140:.\ff.c        **** )
3141:.\ff.c        **** {
 492              		.loc 1 3141 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 0
 495              		@ frame_needed = 0, uses_anonymous_args = 0
 496              		@ link register save eliminated.
 497              	.LVL71:
 498 0000 10B4     		push	{r4}
 499              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 65


 500              		.cfi_offset 4, -4
 501              	.LVL72:
3142:.\ff.c        **** 	const TCHAR *tp;
3143:.\ff.c        **** 	const TCHAR *tt;
3144:.\ff.c        **** 	TCHAR tc;
3145:.\ff.c        **** 	int i;
3146:.\ff.c        **** 	int vol = -1;
3147:.\ff.c        **** #if FF_STR_VOLUME_ID		/* Find string volume ID */
3148:.\ff.c        **** 	const char *sp;
3149:.\ff.c        **** 	char c;
3150:.\ff.c        **** #endif
3151:.\ff.c        **** 
3152:.\ff.c        **** 	tt = tp = *path;
 502              		.loc 1 3152 0
 503 0002 0468     		ldr	r4, [r0]
 504              	.LVL73:
3153:.\ff.c        **** 	if (!tp) return vol;	/* Invalid path name? */
 505              		.loc 1 3153 0
 506 0004 FCB1     		cbz	r4, .L43
 507 0006 2246     		mov	r2, r4
 508              	.LVL74:
 509              	.L40:
3154:.\ff.c        **** 	do {					/* Find a colon in the path */
3155:.\ff.c        **** 		tc = *tt++;
 510              		.loc 1 3155 0 discriminator 2
 511 0008 511C     		adds	r1, r2, #1
 512              	.LVL75:
 513 000a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 514              	.LVL76:
3156:.\ff.c        **** 	} while (!IsTerminator(tc) && tc != ':');
 515              		.loc 1 3156 0 discriminator 2
 516 000c 202B     		cmp	r3, #32
 517 000e 02D9     		bls	.L39
3155:.\ff.c        **** 	} while (!IsTerminator(tc) && tc != ':');
 518              		.loc 1 3155 0 discriminator 1
 519 0010 0A46     		mov	r2, r1
 520              		.loc 1 3156 0 discriminator 1
 521 0012 3A2B     		cmp	r3, #58
 522 0014 F8D1     		bne	.L40
 523              	.L39:
3157:.\ff.c        **** 
3158:.\ff.c        **** 	if (tc == ':') {	/* DOS/Windows style volume ID? */
 524              		.loc 1 3158 0
 525 0016 3A2B     		cmp	r3, #58
 526 0018 18D1     		bne	.L44
 527              	.LVL77:
3159:.\ff.c        **** 		i = FF_VOLUMES;
3160:.\ff.c        **** 		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 528              		.loc 1 3160 0
 529 001a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 530              	.LVL78:
 531 001c A3F13002 		sub	r2, r3, #48
 532 0020 D2B2     		uxtb	r2, r2
 533 0022 092A     		cmp	r2, #9
 534 0024 04D8     		bhi	.L45
 535              		.loc 1 3160 0 is_stmt 0 discriminator 1
 536 0026 0234     		adds	r4, r4, #2
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 66


 537              	.LVL79:
 538 0028 8C42     		cmp	r4, r1
 539 002a 03D1     		bne	.L46
3161:.\ff.c        **** 			i = (int)*tp - '0';	/* Get the LD number */
 540              		.loc 1 3161 0 is_stmt 1
 541 002c 303B     		subs	r3, r3, #48
 542              	.LVL80:
 543 002e 02E0     		b	.L41
 544              	.LVL81:
 545              	.L45:
3159:.\ff.c        **** 		i = FF_VOLUMES;
 546              		.loc 1 3159 0
 547 0030 0123     		movs	r3, #1
 548 0032 00E0     		b	.L41
 549              	.LVL82:
 550              	.L46:
 551 0034 0123     		movs	r3, #1
 552              	.LVL83:
 553              	.L41:
3162:.\ff.c        **** 		}
3163:.\ff.c        **** #if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
3164:.\ff.c        **** 		else {
3165:.\ff.c        **** 			i = 0;
3166:.\ff.c        **** 			do {
3167:.\ff.c        **** 				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
3168:.\ff.c        **** 				do {	/* Compare the volume ID with path name */
3169:.\ff.c        **** 					c = *sp++; tc = *tp++;
3170:.\ff.c        **** 					if (IsLower(c)) c -= 0x20;
3171:.\ff.c        **** 					if (IsLower(tc)) tc -= 0x20;
3172:.\ff.c        **** 				} while (c && (TCHAR)c == tc);
3173:.\ff.c        **** 			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
3174:.\ff.c        **** 		}
3175:.\ff.c        **** #endif
3176:.\ff.c        **** 		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 554              		.loc 1 3176 0
 555 0036 002B     		cmp	r3, #0
 556 0038 01DC     		bgt	.L47
 557              	.LVL84:
3177:.\ff.c        **** 			vol = i;		/* Drive number */
3178:.\ff.c        **** 			*path = tt;		/* Snip the drive prefix off */
 558              		.loc 1 3178 0
 559 003a 0160     		str	r1, [r0]
 560              	.LVL85:
 561 003c 01E0     		b	.L42
 562              	.LVL86:
 563              	.L47:
3146:.\ff.c        **** #if FF_STR_VOLUME_ID		/* Find string volume ID */
 564              		.loc 1 3146 0
 565 003e 4FF0FF33 		mov	r3, #-1
 566              	.LVL87:
 567              	.L42:
3179:.\ff.c        **** 		}
3180:.\ff.c        **** 		return vol;
 568              		.loc 1 3180 0
 569 0042 1846     		mov	r0, r3
 570              	.LVL88:
 571 0044 03E0     		b	.L38
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 67


 572              	.LVL89:
 573              	.L43:
3153:.\ff.c        **** 	do {					/* Find a colon in the path */
 574              		.loc 1 3153 0
 575 0046 4FF0FF30 		mov	r0, #-1
 576              	.LVL90:
 577 004a 00E0     		b	.L38
 578              	.LVL91:
 579              	.L44:
3181:.\ff.c        **** 	}
3182:.\ff.c        **** #if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
3183:.\ff.c        **** 	if (*tp == '/') {			/* Is there a volume ID? */
3184:.\ff.c        **** 		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
3185:.\ff.c        **** 		i = 0;
3186:.\ff.c        **** 		do {
3187:.\ff.c        **** 			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
3188:.\ff.c        **** 			do {	/* Compare the volume ID with path name */
3189:.\ff.c        **** 				c = *sp++; tc = *(++tt);
3190:.\ff.c        **** 				if (IsLower(c)) c -= 0x20;
3191:.\ff.c        **** 				if (IsLower(tc)) tc -= 0x20;
3192:.\ff.c        **** 			} while (c && (TCHAR)c == tc);
3193:.\ff.c        **** 		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID unti
3194:.\ff.c        **** 		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
3195:.\ff.c        **** 			vol = i;		/* Drive number */
3196:.\ff.c        **** 			*path = tt;		/* Snip the drive prefix off */
3197:.\ff.c        **** 		}
3198:.\ff.c        **** 		return vol;
3199:.\ff.c        **** 	}
3200:.\ff.c        **** #endif
3201:.\ff.c        **** 	/* No drive prefix is found */
3202:.\ff.c        **** #if FF_FS_RPATH != 0
3203:.\ff.c        **** 	vol = CurrVol;	/* Default drive is current drive */
3204:.\ff.c        **** #else
3205:.\ff.c        **** 	vol = 0;		/* Default drive is 0 */
3206:.\ff.c        **** #endif
3207:.\ff.c        **** 	return vol;		/* Return the default drive */
 580              		.loc 1 3207 0
 581 004c 0020     		movs	r0, #0
 582              	.LVL92:
 583              	.L38:
3208:.\ff.c        **** }
 584              		.loc 1 3208 0
 585 004e 5DF8044B 		ldr	r4, [sp], #4
 586              		.cfi_restore 4
 587              		.cfi_def_cfa_offset 0
 588 0052 7047     		bx	lr
 589              		.cfi_endproc
 590              	.LFE27:
 591              		.size	get_ldnumber, .-get_ldnumber
 592              		.section	.text.validate,"ax",%progbits
 593              		.align	2
 594              		.thumb
 595              		.thumb_func
 596              		.type	validate, %function
 597              	validate:
 598              	.LFB31:
3209:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 68


3210:.\ff.c        **** 
3211:.\ff.c        **** 
3212:.\ff.c        **** 
3213:.\ff.c        **** /*-----------------------------------------------------------------------*/
3214:.\ff.c        **** /* GPT support functions                                                 */
3215:.\ff.c        **** /*-----------------------------------------------------------------------*/
3216:.\ff.c        **** 
3217:.\ff.c        **** #if FF_LBA64
3218:.\ff.c        **** 
3219:.\ff.c        **** /* Calculate CRC32 in byte-by-byte */
3220:.\ff.c        **** 
3221:.\ff.c        **** static DWORD crc32 (	/* Returns next CRC value */
3222:.\ff.c        **** 	DWORD crc,			/* Current CRC value */
3223:.\ff.c        **** 	BYTE d				/* A byte to be processed */
3224:.\ff.c        **** )
3225:.\ff.c        **** {
3226:.\ff.c        **** 	BYTE b;
3227:.\ff.c        **** 
3228:.\ff.c        **** 
3229:.\ff.c        **** 	for (b = 1; b; b <<= 1) {
3230:.\ff.c        **** 		crc ^= (d & b) ? 1 : 0;
3231:.\ff.c        **** 		crc = (crc & 1) ? crc >> 1 ^ 0xEDB88320 : crc >> 1;
3232:.\ff.c        **** 	}
3233:.\ff.c        **** 	return crc;
3234:.\ff.c        **** }
3235:.\ff.c        **** 
3236:.\ff.c        **** 
3237:.\ff.c        **** /* Check validity of GPT header */
3238:.\ff.c        **** 
3239:.\ff.c        **** static int test_gpt_header (	/* 0:Invalid, 1:Valid */
3240:.\ff.c        **** 	const BYTE* gpth			/* Pointer to the GPT header */
3241:.\ff.c        **** )
3242:.\ff.c        **** {
3243:.\ff.c        **** 	UINT i;
3244:.\ff.c        **** 	DWORD bcc, hlen;
3245:.\ff.c        **** 
3246:.\ff.c        **** 
3247:.\ff.c        **** 	if (memcmp(gpth + GPTH_Sign, "EFI PART" "\0\0\1", 12)) return 0;	/* Check signature and version (1
3248:.\ff.c        **** 	hlen = ld_dword(gpth + GPTH_Size);						/* Check header size */
3249:.\ff.c        **** 	if (hlen < 92 || hlen > FF_MIN_SS) return 0;
3250:.\ff.c        **** 	for (i = 0, bcc = 0xFFFFFFFF; i < hlen; i++) {			/* Check header BCC */
3251:.\ff.c        **** 		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : gpth[i]);
3252:.\ff.c        **** 	}
3253:.\ff.c        **** 	if (~bcc != ld_dword(gpth + GPTH_Bcc)) return 0;
3254:.\ff.c        **** 	if (ld_dword(gpth + GPTH_PteSize) != SZ_GPTE) return 0;	/* Table entry size (must be SZ_GPTE bytes
3255:.\ff.c        **** 	if (ld_dword(gpth + GPTH_PtNum) > 128) return 0;		/* Table size (must be 128 entries or less) */
3256:.\ff.c        **** 
3257:.\ff.c        **** 	return 1;
3258:.\ff.c        **** }
3259:.\ff.c        **** 
3260:.\ff.c        **** #if !FF_FS_READONLY && FF_USE_MKFS
3261:.\ff.c        **** 
3262:.\ff.c        **** /* Generate random value */
3263:.\ff.c        **** static DWORD make_rand (
3264:.\ff.c        **** 	DWORD seed,		/* Seed value */
3265:.\ff.c        **** 	BYTE *buff,		/* Output buffer */
3266:.\ff.c        **** 	UINT n			/* Data length */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 69


3267:.\ff.c        **** )
3268:.\ff.c        **** {
3269:.\ff.c        **** 	UINT r;
3270:.\ff.c        **** 
3271:.\ff.c        **** 
3272:.\ff.c        **** 	if (seed == 0) seed = 1;
3273:.\ff.c        **** 	do {
3274:.\ff.c        **** 		for (r = 0; r < 8; r++) seed = seed & 1 ? seed >> 1 ^ 0xA3000000 : seed >> 1;	/* Shift 8 bits the
3275:.\ff.c        **** 		*buff++ = (BYTE)seed;
3276:.\ff.c        **** 	} while (--n);
3277:.\ff.c        **** 	return seed;
3278:.\ff.c        **** }
3279:.\ff.c        **** 
3280:.\ff.c        **** #endif
3281:.\ff.c        **** #endif
3282:.\ff.c        **** 
3283:.\ff.c        **** 
3284:.\ff.c        **** 
3285:.\ff.c        **** /*-----------------------------------------------------------------------*/
3286:.\ff.c        **** /* Load a sector and check if it is an FAT VBR                           */
3287:.\ff.c        **** /*-----------------------------------------------------------------------*/
3288:.\ff.c        **** 
3289:.\ff.c        **** /* Check what the sector is */
3290:.\ff.c        **** 
3291:.\ff.c        **** static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and inval
3292:.\ff.c        **** 	FATFS* fs,			/* Filesystem object */
3293:.\ff.c        **** 	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
3294:.\ff.c        **** )
3295:.\ff.c        **** {
3296:.\ff.c        **** 	WORD w, sign;
3297:.\ff.c        **** 	BYTE b;
3298:.\ff.c        **** 
3299:.\ff.c        **** 
3300:.\ff.c        **** 	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
3301:.\ff.c        **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
3302:.\ff.c        **** 	sign = ld_word(fs->win + BS_55AA);
3303:.\ff.c        **** #if FF_FS_EXFAT
3304:.\ff.c        **** 	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* I
3305:.\ff.c        **** #endif
3306:.\ff.c        **** 	b = fs->win[BS_JmpBoot];
3307:.\ff.c        **** 	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near 
3308:.\ff.c        **** 		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
3309:.\ff.c        **** 			return 0;	/* It is an FAT32 VBR */
3310:.\ff.c        **** 		}
3311:.\ff.c        **** 		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be
3312:.\ff.c        **** 		w = ld_word(fs->win + BPB_BytsPerSec);
3313:.\ff.c        **** 		b = fs->win[BPB_SecPerClus];
3314:.\ff.c        **** 		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096
3315:.\ff.c        **** 			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
3316:.\ff.c        **** 			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
3317:.\ff.c        **** 			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
3318:.\ff.c        **** 			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
3319:.\ff.c        **** 			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Pr
3320:.\ff.c        **** 			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
3321:.\ff.c        **** 				return 0;	/* It can be presumed an FAT VBR */
3322:.\ff.c        **** 		}
3323:.\ff.c        **** 	}
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 70


3324:.\ff.c        **** 	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
3325:.\ff.c        **** }
3326:.\ff.c        **** 
3327:.\ff.c        **** 
3328:.\ff.c        **** /* Find an FAT volume */
3329:.\ff.c        **** /* (It supports only generic partitioning rules, MBR, GPT and SFD) */
3330:.\ff.c        **** 
3331:.\ff.c        **** static UINT find_volume (	/* Returns BS status found in the hosting drive */
3332:.\ff.c        **** 	FATFS* fs,		/* Filesystem object */
3333:.\ff.c        **** 	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
3334:.\ff.c        **** )
3335:.\ff.c        **** {
3336:.\ff.c        **** 	UINT fmt, i;
3337:.\ff.c        **** 	DWORD mbr_pt[4];
3338:.\ff.c        **** 
3339:.\ff.c        **** 
3340:.\ff.c        **** 	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
3341:.\ff.c        **** 	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, 
3342:.\ff.c        **** 
3343:.\ff.c        **** 	/* Sector 0 is not an FAT VBR or forced partition number wants a partition */
3344:.\ff.c        **** 
3345:.\ff.c        **** #if FF_LBA64
3346:.\ff.c        **** 	if (fs->win[MBR_Table + PTE_System] == 0xEE) {	/* GPT protective MBR? */
3347:.\ff.c        **** 		DWORD n_ent, v_ent, ofs;
3348:.\ff.c        **** 		QWORD pt_lba;
3349:.\ff.c        **** 
3350:.\ff.c        **** 		if (move_window(fs, 1) != FR_OK) return 4;	/* Load GPT header sector (next to MBR) */
3351:.\ff.c        **** 		if (!test_gpt_header(fs->win)) return 3;	/* Check if GPT header is valid */
3352:.\ff.c        **** 		n_ent = ld_dword(fs->win + GPTH_PtNum);		/* Number of entries */
3353:.\ff.c        **** 		pt_lba = ld_qword(fs->win + GPTH_PtOfs);	/* Table location */
3354:.\ff.c        **** 		for (v_ent = i = 0; i < n_ent; i++) {		/* Find FAT partition */
3355:.\ff.c        **** 			if (move_window(fs, pt_lba + i * SZ_GPTE / SS(fs)) != FR_OK) return 4;	/* PT sector */
3356:.\ff.c        **** 			ofs = i * SZ_GPTE % SS(fs);												/* Offset in the sector */
3357:.\ff.c        **** 			if (!memcmp(fs->win + ofs + GPTE_PtGuid, GUID_MS_Basic, 16)) {	/* MS basic data partition? */
3358:.\ff.c        **** 				v_ent++;
3359:.\ff.c        **** 				fmt = check_fs(fs, ld_qword(fs->win + ofs + GPTE_FstLba));	/* Load VBR and check status */
3360:.\ff.c        **** 				if (part == 0 && fmt <= 1) return fmt;			/* Auto search (valid FAT volume found first) */
3361:.\ff.c        **** 				if (part != 0 && v_ent == part) return fmt;		/* Forced partition order (regardless of it is val
3362:.\ff.c        **** 			}
3363:.\ff.c        **** 		}
3364:.\ff.c        **** 		return 3;	/* Not found */
3365:.\ff.c        **** 	}
3366:.\ff.c        **** #endif
3367:.\ff.c        **** 	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
3368:.\ff.c        **** 	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
3369:.\ff.c        **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
3370:.\ff.c        **** 	}
3371:.\ff.c        **** 	i = part ? part - 1 : 0;		/* Table index to find first */
3372:.\ff.c        **** 	do {							/* Find an FAT volume */
3373:.\ff.c        **** 		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
3374:.\ff.c        **** 	} while (part == 0 && fmt >= 2 && ++i < 4);
3375:.\ff.c        **** 	return fmt;
3376:.\ff.c        **** }
3377:.\ff.c        **** 
3378:.\ff.c        **** 
3379:.\ff.c        **** 
3380:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 71


3381:.\ff.c        **** /*-----------------------------------------------------------------------*/
3382:.\ff.c        **** /* Determine logical drive number and mount the volume if needed         */
3383:.\ff.c        **** /*-----------------------------------------------------------------------*/
3384:.\ff.c        **** 
3385:.\ff.c        **** static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
3386:.\ff.c        **** 	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
3387:.\ff.c        **** 	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
3388:.\ff.c        **** 	BYTE mode					/* Desiered access mode to check write protection */
3389:.\ff.c        **** )
3390:.\ff.c        **** {
3391:.\ff.c        **** 	int vol;
3392:.\ff.c        **** 	FATFS *fs;
3393:.\ff.c        **** 	DSTATUS stat;
3394:.\ff.c        **** 	LBA_t bsect;
3395:.\ff.c        **** 	DWORD tsect, sysect, fasize, nclst, szbfat;
3396:.\ff.c        **** 	WORD nrsv;
3397:.\ff.c        **** 	UINT fmt;
3398:.\ff.c        **** 
3399:.\ff.c        **** 
3400:.\ff.c        **** 	/* Get logical drive number */
3401:.\ff.c        **** 	*rfs = 0;
3402:.\ff.c        **** 	vol = get_ldnumber(path);
3403:.\ff.c        **** 	if (vol < 0) return FR_INVALID_DRIVE;
3404:.\ff.c        **** 
3405:.\ff.c        **** 	/* Check if the filesystem object is valid or not */
3406:.\ff.c        **** 	fs = FatFs[vol];					/* Get pointer to the filesystem object */
3407:.\ff.c        **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
3408:.\ff.c        **** #if FF_FS_REENTRANT
3409:.\ff.c        **** 	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
3410:.\ff.c        **** #endif
3411:.\ff.c        **** 	*rfs = fs;							/* Return pointer to the filesystem object */
3412:.\ff.c        **** 
3413:.\ff.c        **** 	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
3414:.\ff.c        **** 	if (fs->fs_type != 0) {				/* If the volume has been mounted */
3415:.\ff.c        **** 		stat = disk_status(fs->pdrv);
3416:.\ff.c        **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
3417:.\ff.c        **** 			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
3418:.\ff.c        **** 				return FR_WRITE_PROTECTED;
3419:.\ff.c        **** 			}
3420:.\ff.c        **** 			return FR_OK;				/* The filesystem object is already valid */
3421:.\ff.c        **** 		}
3422:.\ff.c        **** 	}
3423:.\ff.c        **** 
3424:.\ff.c        **** 	/* The filesystem object is not valid. */
3425:.\ff.c        **** 	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initializ
3426:.\ff.c        **** 
3427:.\ff.c        **** 	fs->fs_type = 0;					/* Invalidate the filesystem object */
3428:.\ff.c        **** 	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
3429:.\ff.c        **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
3430:.\ff.c        **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
3431:.\ff.c        **** 	}
3432:.\ff.c        **** 	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
3433:.\ff.c        **** 		return FR_WRITE_PROTECTED;
3434:.\ff.c        **** 	}
3435:.\ff.c        **** #if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
3436:.\ff.c        **** 	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
3437:.\ff.c        **** 	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 72


3438:.\ff.c        **** #endif
3439:.\ff.c        **** 
3440:.\ff.c        **** 	/* Find an FAT volume on the hosting drive */
3441:.\ff.c        **** 	fmt = find_volume(fs, LD2PT(vol));
3442:.\ff.c        **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
3443:.\ff.c        **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
3444:.\ff.c        **** 	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
3445:.\ff.c        **** 
3446:.\ff.c        **** 	/* An FAT volume is found (bsect). Following code initializes the filesystem object */
3447:.\ff.c        **** 
3448:.\ff.c        **** #if FF_FS_EXFAT
3449:.\ff.c        **** 	if (fmt == 1) {
3450:.\ff.c        **** 		QWORD maxlba;
3451:.\ff.c        **** 		DWORD so, cv, bcl, i;
3452:.\ff.c        **** 
3453:.\ff.c        **** 		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
3454:.\ff.c        **** 		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
3455:.\ff.c        **** 
3456:.\ff.c        **** 		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (mus
3457:.\ff.c        **** 
3458:.\ff.c        **** 		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physica
3459:.\ff.c        **** 			return FR_NO_FILESYSTEM;
3460:.\ff.c        **** 		}
3461:.\ff.c        **** 
3462:.\ff.c        **** 		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
3463:.\ff.c        **** 		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-
3464:.\ff.c        **** 
3465:.\ff.c        **** 		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
3466:.\ff.c        **** 
3467:.\ff.c        **** 		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
3468:.\ff.c        **** 		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
3469:.\ff.c        **** 
3470:.\ff.c        **** 		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
3471:.\ff.c        **** 		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
3472:.\ff.c        **** 
3473:.\ff.c        **** 		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
3474:.\ff.c        **** 		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
3475:.\ff.c        **** 		fs->n_fatent = nclst + 2;
3476:.\ff.c        **** 
3477:.\ff.c        **** 		/* Boundaries and Limits */
3478:.\ff.c        **** 		fs->volbase = bsect;
3479:.\ff.c        **** 		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
3480:.\ff.c        **** 		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
3481:.\ff.c        **** 		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size mu
3482:.\ff.c        **** 		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
3483:.\ff.c        **** 
3484:.\ff.c        **** 		/* Get bitmap location and check if it is contiguous (implementation assumption) */
3485:.\ff.c        **** 		so = i = 0;
3486:.\ff.c        **** 		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
3487:.\ff.c        **** 			if (i == 0) {
3488:.\ff.c        **** 				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
3489:.\ff.c        **** 				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
3490:.\ff.c        **** 				so++;
3491:.\ff.c        **** 			}
3492:.\ff.c        **** 			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
3493:.\ff.c        **** 			i = (i + SZDIRE) % SS(fs);	/* Next entry */
3494:.\ff.c        **** 		}
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 73


3495:.\ff.c        **** 		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
3496:.\ff.c        **** 		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
3497:.\ff.c        **** 		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
3498:.\ff.c        **** 		for (;;) {	/* Check if bitmap is contiguous */
3499:.\ff.c        **** 			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
3500:.\ff.c        **** 			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
3501:.\ff.c        **** 			if (cv == 0xFFFFFFFF) break;				/* Last link? */
3502:.\ff.c        **** 			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
3503:.\ff.c        **** 		}
3504:.\ff.c        **** 
3505:.\ff.c        **** #if !FF_FS_READONLY
3506:.\ff.c        **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3507:.\ff.c        **** #endif
3508:.\ff.c        **** 		fmt = FS_EXFAT;			/* FAT sub-type */
3509:.\ff.c        **** 	} else
3510:.\ff.c        **** #endif	/* FF_FS_EXFAT */
3511:.\ff.c        **** 	{
3512:.\ff.c        **** 		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must
3513:.\ff.c        **** 
3514:.\ff.c        **** 		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
3515:.\ff.c        **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
3516:.\ff.c        **** 		fs->fsize = fasize;
3517:.\ff.c        **** 
3518:.\ff.c        **** 		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
3519:.\ff.c        **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
3520:.\ff.c        **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
3521:.\ff.c        **** 
3522:.\ff.c        **** 		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
3523:.\ff.c        **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
3524:.\ff.c        **** 
3525:.\ff.c        **** 		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
3526:.\ff.c        **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
3527:.\ff.c        **** 
3528:.\ff.c        **** 		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
3529:.\ff.c        **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
3530:.\ff.c        **** 
3531:.\ff.c        **** 		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
3532:.\ff.c        **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
3533:.\ff.c        **** 
3534:.\ff.c        **** 		/* Determine the FAT sub type */
3535:.\ff.c        **** 		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
3536:.\ff.c        **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
3537:.\ff.c        **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
3538:.\ff.c        **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
3539:.\ff.c        **** 		fmt = 0;
3540:.\ff.c        **** 		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
3541:.\ff.c        **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
3542:.\ff.c        **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
3543:.\ff.c        **** 		if (fmt == 0) return FR_NO_FILESYSTEM;
3544:.\ff.c        **** 
3545:.\ff.c        **** 		/* Boundaries and Limits */
3546:.\ff.c        **** 		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
3547:.\ff.c        **** 		fs->volbase = bsect;							/* Volume start sector */
3548:.\ff.c        **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
3549:.\ff.c        **** 		fs->database = bsect + sysect;					/* Data start sector */
3550:.\ff.c        **** 		if (fmt == FS_FAT32) {
3551:.\ff.c        **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 74


3552:.\ff.c        **** 			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
3553:.\ff.c        **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
3554:.\ff.c        **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
3555:.\ff.c        **** 		} else {
3556:.\ff.c        **** 			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
3557:.\ff.c        **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
3558:.\ff.c        **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
3559:.\ff.c        **** 				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
3560:.\ff.c        **** 		}
3561:.\ff.c        **** 		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not
3562:.\ff.c        **** 
3563:.\ff.c        **** #if !FF_FS_READONLY
3564:.\ff.c        **** 		/* Get FSInfo if available */
3565:.\ff.c        **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3566:.\ff.c        **** 		fs->fsi_flag = 0x80;
3567:.\ff.c        **** #if (FF_FS_NOFSINFO & 3) != 3
3568:.\ff.c        **** 		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
3569:.\ff.c        **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
3570:.\ff.c        **** 			&& move_window(fs, bsect + 1) == FR_OK)
3571:.\ff.c        **** 		{
3572:.\ff.c        **** 			fs->fsi_flag = 0;
3573:.\ff.c        **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
3574:.\ff.c        **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
3575:.\ff.c        **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
3576:.\ff.c        **** 			{
3577:.\ff.c        **** #if (FF_FS_NOFSINFO & 1) == 0
3578:.\ff.c        **** 				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
3579:.\ff.c        **** #endif
3580:.\ff.c        **** #if (FF_FS_NOFSINFO & 2) == 0
3581:.\ff.c        **** 				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
3582:.\ff.c        **** #endif
3583:.\ff.c        **** 			}
3584:.\ff.c        **** 		}
3585:.\ff.c        **** #endif	/* (FF_FS_NOFSINFO & 3) != 3 */
3586:.\ff.c        **** #endif	/* !FF_FS_READONLY */
3587:.\ff.c        **** 	}
3588:.\ff.c        **** 
3589:.\ff.c        **** 	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
3590:.\ff.c        **** 	fs->id = ++Fsid;		/* Volume mount ID */
3591:.\ff.c        **** #if FF_USE_LFN == 1
3592:.\ff.c        **** 	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
3593:.\ff.c        **** #if FF_FS_EXFAT
3594:.\ff.c        **** 	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
3595:.\ff.c        **** #endif
3596:.\ff.c        **** #endif
3597:.\ff.c        **** #if FF_FS_RPATH != 0
3598:.\ff.c        **** 	fs->cdir = 0;			/* Initialize current directory */
3599:.\ff.c        **** #endif
3600:.\ff.c        **** #if FF_FS_LOCK				/* Clear file lock semaphores */
3601:.\ff.c        **** 	clear_share(fs);
3602:.\ff.c        **** #endif
3603:.\ff.c        **** 	return FR_OK;
3604:.\ff.c        **** }
3605:.\ff.c        **** 
3606:.\ff.c        **** 
3607:.\ff.c        **** 
3608:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 75


3609:.\ff.c        **** /*-----------------------------------------------------------------------*/
3610:.\ff.c        **** /* Check if the file/directory object is valid or not                    */
3611:.\ff.c        **** /*-----------------------------------------------------------------------*/
3612:.\ff.c        **** 
3613:.\ff.c        **** static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
3614:.\ff.c        **** 	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check valid
3615:.\ff.c        **** 	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
3616:.\ff.c        **** )
3617:.\ff.c        **** {
 599              		.loc 1 3617 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603              	.LVL93:
 604 0000 38B5     		push	{r3, r4, r5, lr}
 605              		.cfi_def_cfa_offset 16
 606              		.cfi_offset 3, -16
 607              		.cfi_offset 4, -12
 608              		.cfi_offset 5, -8
 609              		.cfi_offset 14, -4
 610 0002 0D46     		mov	r5, r1
 611              	.LVL94:
3618:.\ff.c        **** 	FRESULT res = FR_INVALID_OBJECT;
3619:.\ff.c        **** 
3620:.\ff.c        **** 
3621:.\ff.c        **** 	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid
 612              		.loc 1 3621 0
 613 0004 0446     		mov	r4, r0
 614 0006 78B1     		cbz	r0, .L52
 615              		.loc 1 3621 0 is_stmt 0 discriminator 1
 616 0008 0368     		ldr	r3, [r0]
 617 000a 7BB1     		cbz	r3, .L53
 618              		.loc 1 3621 0 discriminator 2
 619 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 620 000e 7AB1     		cbz	r2, .L54
 621              		.loc 1 3621 0 discriminator 3
 622 0010 8188     		ldrh	r1, [r0, #4]
 623              	.LVL95:
 624 0012 DA88     		ldrh	r2, [r3, #6]
 625 0014 9142     		cmp	r1, r2
 626 0016 0DD1     		bne	.L55
3622:.\ff.c        **** #if FF_FS_REENTRANT
3623:.\ff.c        **** 		if (lock_volume(obj->fs, 0)) {	/* Take a grant to access the volume */
3624:.\ff.c        **** 			if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept i
3625:.\ff.c        **** 				res = FR_OK;
3626:.\ff.c        **** 			} else {
3627:.\ff.c        **** 				unlock_volume(obj->fs, FR_OK);	/* Invalidated volume, abort to access */
3628:.\ff.c        **** 			}
3629:.\ff.c        **** 		} else {	/* Could not take */
3630:.\ff.c        **** 			res = FR_TIMEOUT;
3631:.\ff.c        **** 		}
3632:.\ff.c        **** #else
3633:.\ff.c        **** 		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept in
 627              		.loc 1 3633 0 is_stmt 1
 628 0018 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 629              	.LVL96:
 630 001a FFF7FEFF 		bl	disk_status
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 76


 631              	.LVL97:
 632 001e 10F0010F 		tst	r0, #1
 633 0022 09D0     		beq	.L56
3618:.\ff.c        **** 	FRESULT res = FR_INVALID_OBJECT;
 634              		.loc 1 3618 0
 635 0024 0920     		movs	r0, #9
 636 0026 08E0     		b	.L50
 637              	.LVL98:
 638              	.L52:
 639 0028 0920     		movs	r0, #9
 640              	.LVL99:
 641 002a 06E0     		b	.L50
 642              	.LVL100:
 643              	.L53:
 644 002c 0920     		movs	r0, #9
 645              	.LVL101:
 646 002e 04E0     		b	.L50
 647              	.LVL102:
 648              	.L54:
 649 0030 0920     		movs	r0, #9
 650              	.LVL103:
 651 0032 02E0     		b	.L50
 652              	.LVL104:
 653              	.L55:
 654 0034 0920     		movs	r0, #9
 655              	.LVL105:
 656 0036 00E0     		b	.L50
 657              	.L56:
3634:.\ff.c        **** 			res = FR_OK;
 658              		.loc 1 3634 0
 659 0038 0020     		movs	r0, #0
 660              	.L50:
 661              	.LVL106:
3635:.\ff.c        **** 		}
3636:.\ff.c        **** #endif
3637:.\ff.c        **** 	}
3638:.\ff.c        **** 	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 662              		.loc 1 3638 0
 663 003a 08B9     		cbnz	r0, .L57
 664              		.loc 1 3638 0 is_stmt 0 discriminator 1
 665 003c 2368     		ldr	r3, [r4]
 666 003e 00E0     		b	.L51
 667              	.L57:
 668              		.loc 1 3638 0
 669 0040 0023     		movs	r3, #0
 670              	.L51:
 671              		.loc 1 3638 0 discriminator 4
 672 0042 2B60     		str	r3, [r5]
3639:.\ff.c        **** 	return res;
3640:.\ff.c        **** }
 673              		.loc 1 3640 0 is_stmt 1 discriminator 4
 674 0044 38BD     		pop	{r3, r4, r5, pc}
 675              		.cfi_endproc
 676              	.LFE31:
 677              		.size	validate, .-validate
 678 0046 00BF     		.section	.text.sync_window,"ax",%progbits
 679              		.align	2
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 77


 680              		.thumb
 681              		.thumb_func
 682              		.type	sync_window, %function
 683              	sync_window:
 684              	.LFB6:
1058:.\ff.c        **** 	FRESULT res = FR_OK;
 685              		.loc 1 1058 0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 0
 688              		@ frame_needed = 0, uses_anonymous_args = 0
 689              	.LVL107:
1062:.\ff.c        **** 		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume *
 690              		.loc 1 1062 0
 691 0000 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 692 0002 EBB1     		cbz	r3, .L61
1058:.\ff.c        **** 	FRESULT res = FR_OK;
 693              		.loc 1 1058 0
 694 0004 70B5     		push	{r4, r5, r6, lr}
 695              		.cfi_def_cfa_offset 16
 696              		.cfi_offset 4, -16
 697              		.cfi_offset 5, -12
 698              		.cfi_offset 6, -8
 699              		.cfi_offset 14, -4
 700 0006 0446     		mov	r4, r0
1063:.\ff.c        **** 			fs->wflag = 0;	/* Clear window dirty flag */
 701              		.loc 1 1063 0
 702 0008 00F13005 		add	r5, r0, #48
 703 000c 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 704              	.LVL108:
 705 000e 2946     		mov	r1, r5
 706 0010 E26A     		ldr	r2, [r4, #44]
 707 0012 0123     		movs	r3, #1
 708 0014 FFF7FEFF 		bl	disk_write
 709              	.LVL109:
 710 0018 A0B9     		cbnz	r0, .L62
1064:.\ff.c        **** 			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 711              		.loc 1 1064 0
 712 001a 0023     		movs	r3, #0
 713 001c 2371     		strb	r3, [r4, #4]
1065:.\ff.c        **** 				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it t
 714              		.loc 1 1065 0
 715 001e E66A     		ldr	r6, [r4, #44]
 716 0020 236A     		ldr	r3, [r4, #32]
 717 0022 F31A     		subs	r3, r6, r3
 718 0024 A269     		ldr	r2, [r4, #24]
 719 0026 9342     		cmp	r3, r2
 720 0028 0ED2     		bcs	.L63
1066:.\ff.c        **** 			}
 721              		.loc 1 1066 0
 722 002a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 723 002c 022B     		cmp	r3, #2
 724 002e 0DD1     		bne	.L64
1066:.\ff.c        **** 			}
 725              		.loc 1 1066 0 is_stmt 0 discriminator 1
 726 0030 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 727 0032 2946     		mov	r1, r5
 728 0034 3244     		add	r2, r2, r6
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 78


 729 0036 0123     		movs	r3, #1
 730 0038 FFF7FEFF 		bl	disk_write
 731              	.LVL110:
1059:.\ff.c        **** 
 732              		.loc 1 1059 0 is_stmt 1 discriminator 1
 733 003c 0020     		movs	r0, #0
 734 003e 70BD     		pop	{r4, r5, r6, pc}
 735              	.LVL111:
 736              	.L61:
 737              		.cfi_def_cfa_offset 0
 738              		.cfi_restore 4
 739              		.cfi_restore 5
 740              		.cfi_restore 6
 741              		.cfi_restore 14
1059:.\ff.c        **** 
 742              		.loc 1 1059 0 is_stmt 0
 743 0040 0020     		movs	r0, #0
 744              	.LVL112:
1073:.\ff.c        **** #endif
 745              		.loc 1 1073 0 is_stmt 1
 746 0042 7047     		bx	lr
 747              	.LVL113:
 748              	.L62:
 749              		.cfi_def_cfa_offset 16
 750              		.cfi_offset 4, -16
 751              		.cfi_offset 5, -12
 752              		.cfi_offset 6, -8
 753              		.cfi_offset 14, -4
1069:.\ff.c        **** 		}
 754              		.loc 1 1069 0
 755 0044 0120     		movs	r0, #1
 756 0046 70BD     		pop	{r4, r5, r6, pc}
 757              	.LVL114:
 758              	.L63:
1059:.\ff.c        **** 
 759              		.loc 1 1059 0
 760 0048 0020     		movs	r0, #0
 761 004a 70BD     		pop	{r4, r5, r6, pc}
 762              	.LVL115:
 763              	.L64:
 764 004c 0020     		movs	r0, #0
 765              	.LVL116:
1073:.\ff.c        **** #endif
 766              		.loc 1 1073 0
 767 004e 70BD     		pop	{r4, r5, r6, pc}
 768              		.cfi_endproc
 769              	.LFE6:
 770              		.size	sync_window, .-sync_window
 771              		.section	.text.move_window,"ax",%progbits
 772              		.align	2
 773              		.thumb
 774              		.thumb_func
 775              		.type	move_window, %function
 776              	move_window:
 777              	.LFB7:
1081:.\ff.c        **** 	FRESULT res = FR_OK;
 778              		.loc 1 1081 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 79


 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 0
 781              		@ frame_needed = 0, uses_anonymous_args = 0
 782              	.LVL117:
 783 0000 70B5     		push	{r4, r5, r6, lr}
 784              		.cfi_def_cfa_offset 16
 785              		.cfi_offset 4, -16
 786              		.cfi_offset 5, -12
 787              		.cfi_offset 6, -8
 788              		.cfi_offset 14, -4
 789 0002 0446     		mov	r4, r0
 790 0004 0D46     		mov	r5, r1
 791              	.LVL118:
1085:.\ff.c        **** #if !FF_FS_READONLY
 792              		.loc 1 1085 0
 793 0006 C36A     		ldr	r3, [r0, #44]
 794 0008 8B42     		cmp	r3, r1
 795 000a 10D0     		beq	.L69
1087:.\ff.c        **** #endif
 796              		.loc 1 1087 0
 797 000c FFF7FEFF 		bl	sync_window
 798              	.LVL119:
1089:.\ff.c        **** 			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 799              		.loc 1 1089 0
 800 0010 0646     		mov	r6, r0
 801 0012 68B9     		cbnz	r0, .L67
1090:.\ff.c        **** 				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 802              		.loc 1 1090 0
 803 0014 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 804              	.LVL120:
 805 0016 04F13001 		add	r1, r4, #48
 806 001a 2A46     		mov	r2, r5
 807 001c 0123     		movs	r3, #1
 808 001e FFF7FEFF 		bl	disk_read
 809              	.LVL121:
 810 0022 10B1     		cbz	r0, .L68
1092:.\ff.c        **** 			}
 811              		.loc 1 1092 0
 812 0024 0126     		movs	r6, #1
1091:.\ff.c        **** 				res = FR_DISK_ERR;
 813              		.loc 1 1091 0
 814 0026 4FF0FF35 		mov	r5, #-1
 815              	.LVL122:
 816              	.L68:
1094:.\ff.c        **** 		}
 817              		.loc 1 1094 0
 818 002a E562     		str	r5, [r4, #44]
 819 002c 00E0     		b	.L67
 820              	.LVL123:
 821              	.L69:
1082:.\ff.c        **** 
 822              		.loc 1 1082 0
 823 002e 0026     		movs	r6, #0
 824              	.LVL124:
 825              	.L67:
1098:.\ff.c        **** 
 826              		.loc 1 1098 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 80


 827 0030 3046     		mov	r0, r6
 828 0032 70BD     		pop	{r4, r5, r6, pc}
 829              		.cfi_endproc
 830              	.LFE7:
 831              		.size	move_window, .-move_window
 832              		.section	.text.check_fs,"ax",%progbits
 833              		.align	2
 834              		.thumb
 835              		.thumb_func
 836              		.type	check_fs, %function
 837              	check_fs:
 838              	.LFB28:
3295:.\ff.c        **** 	WORD w, sign;
 839              		.loc 1 3295 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 0
 842              		@ frame_needed = 0, uses_anonymous_args = 0
 843              	.LVL125:
 844 0000 38B5     		push	{r3, r4, r5, lr}
 845              		.cfi_def_cfa_offset 16
 846              		.cfi_offset 3, -16
 847              		.cfi_offset 4, -12
 848              		.cfi_offset 5, -8
 849              		.cfi_offset 14, -4
 850 0002 0446     		mov	r4, r0
3300:.\ff.c        **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 851              		.loc 1 3300 0
 852 0004 0023     		movs	r3, #0
 853 0006 0371     		strb	r3, [r0, #4]
 854 0008 4FF0FF33 		mov	r3, #-1
 855 000c C362     		str	r3, [r0, #44]
3301:.\ff.c        **** 	sign = ld_word(fs->win + BS_55AA);
 856              		.loc 1 3301 0
 857 000e FFF7FEFF 		bl	move_window
 858              	.LVL126:
 859 0012 0028     		cmp	r0, #0
 860 0014 52D1     		bne	.L79
3302:.\ff.c        **** #if FF_FS_EXFAT
 861              		.loc 1 3302 0
 862 0016 04F22E20 		addw	r0, r4, #558
 863 001a FFF7FEFF 		bl	ld_word
 864              	.LVL127:
 865 001e 0546     		mov	r5, r0
 866              	.LVL128:
3306:.\ff.c        **** 	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near 
 867              		.loc 1 3306 0
 868 0020 94F83030 		ldrb	r3, [r4, #48]	@ zero_extendqisi2
 869              	.LVL129:
3307:.\ff.c        **** 		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 870              		.loc 1 3307 0
 871 0024 EB2B     		cmp	r3, #235
 872 0026 03D0     		beq	.L74
3307:.\ff.c        **** 		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 873              		.loc 1 3307 0 is_stmt 0 discriminator 1
 874 0028 E92B     		cmp	r3, #233
 875 002a 01D0     		beq	.L74
3307:.\ff.c        **** 		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 81


 876              		.loc 1 3307 0 discriminator 2
 877 002c E82B     		cmp	r3, #232
 878 002e 3DD1     		bne	.L75
 879              	.L74:
3308:.\ff.c        **** 			return 0;	/* It is an FAT32 VBR */
 880              		.loc 1 3308 0 is_stmt 1
 881 0030 4AF65523 		movw	r3, #43605
 882              	.LVL130:
 883 0034 9D42     		cmp	r5, r3
 884 0036 07D1     		bne	.L76
3308:.\ff.c        **** 			return 0;	/* It is an FAT32 VBR */
 885              		.loc 1 3308 0 is_stmt 0 discriminator 1
 886 0038 04F18200 		add	r0, r4, #130
 887 003c 2249     		ldr	r1, .L84
 888 003e 0822     		movs	r2, #8
 889 0040 FFF7FEFF 		bl	memcmp
 890              	.LVL131:
 891 0044 0028     		cmp	r0, #0
 892 0046 3BD0     		beq	.L80
 893              	.L76:
3312:.\ff.c        **** 		b = fs->win[BPB_SecPerClus];
 894              		.loc 1 3312 0 is_stmt 1
 895 0048 04F13B00 		add	r0, r4, #59
 896 004c FFF7FEFF 		bl	ld_word
 897              	.LVL132:
3313:.\ff.c        **** 		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096
 898              		.loc 1 3313 0
 899 0050 94F83D20 		ldrb	r2, [r4, #61]	@ zero_extendqisi2
 900              	.LVL133:
3314:.\ff.c        **** 			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 901              		.loc 1 3314 0
 902 0054 431E     		subs	r3, r0, #1
 903 0056 1842     		tst	r0, r3
 904 0058 28D1     		bne	.L75
3314:.\ff.c        **** 			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 905              		.loc 1 3314 0 is_stmt 0 discriminator 1
 906 005a B0F5007F 		cmp	r0, #512
 907 005e 25D3     		bcc	.L75
3314:.\ff.c        **** 			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 908              		.loc 1 3314 0 discriminator 2
 909 0060 24D8     		bhi	.L75
3315:.\ff.c        **** 			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 910              		.loc 1 3315 0 is_stmt 1
 911 0062 1AB3     		cbz	r2, .L75
3315:.\ff.c        **** 			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 912              		.loc 1 3315 0 is_stmt 0 discriminator 1
 913 0064 531E     		subs	r3, r2, #1
 914 0066 1A42     		tst	r2, r3
 915 0068 20D1     		bne	.L75
3316:.\ff.c        **** 			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 916              		.loc 1 3316 0 is_stmt 1
 917 006a 04F13E00 		add	r0, r4, #62
 918              	.LVL134:
 919 006e FFF7FEFF 		bl	ld_word
 920              	.LVL135:
 921 0072 D8B1     		cbz	r0, .L75
3317:.\ff.c        **** 			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 82


 922              		.loc 1 3317 0
 923 0074 94F84030 		ldrb	r3, [r4, #64]	@ zero_extendqisi2
 924 0078 013B     		subs	r3, r3, #1
 925 007a 012B     		cmp	r3, #1
 926 007c 16D8     		bhi	.L75
3318:.\ff.c        **** 			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Pr
 927              		.loc 1 3318 0
 928 007e 04F14100 		add	r0, r4, #65
 929 0082 FFF7FEFF 		bl	ld_word
 930              	.LVL136:
 931 0086 88B1     		cbz	r0, .L75
3319:.\ff.c        **** 			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 932              		.loc 1 3319 0
 933 0088 04F14300 		add	r0, r4, #67
 934 008c FFF7FEFF 		bl	ld_word
 935              	.LVL137:
 936 0090 7F28     		cmp	r0, #127
 937 0092 06D8     		bhi	.L77
3319:.\ff.c        **** 			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 938              		.loc 1 3319 0 is_stmt 0 discriminator 1
 939 0094 04F15000 		add	r0, r4, #80
 940 0098 FFF7FEFF 		bl	ld_dword
 941              	.LVL138:
 942 009c B0F5803F 		cmp	r0, #65536
 943 00a0 04D3     		bcc	.L75
 944              	.L77:
3320:.\ff.c        **** 				return 0;	/* It can be presumed an FAT VBR */
 945              		.loc 1 3320 0 is_stmt 1
 946 00a2 04F14600 		add	r0, r4, #70
 947 00a6 FFF7FEFF 		bl	ld_word
 948              	.LVL139:
 949 00aa 58B9     		cbnz	r0, .L81
 950              	.L75:
3324:.\ff.c        **** }
 951              		.loc 1 3324 0
 952 00ac 4AF65523 		movw	r3, #43605
 953 00b0 9D42     		cmp	r5, r3
 954 00b2 01D1     		bne	.L82
 955 00b4 0220     		movs	r0, #2
 956 00b6 38BD     		pop	{r3, r4, r5, pc}
 957              	.LVL140:
 958              	.L82:
 959 00b8 0320     		movs	r0, #3
 960 00ba 38BD     		pop	{r3, r4, r5, pc}
 961              	.LVL141:
 962              	.L79:
3301:.\ff.c        **** 	sign = ld_word(fs->win + BS_55AA);
 963              		.loc 1 3301 0
 964 00bc 0420     		movs	r0, #4
 965 00be 38BD     		pop	{r3, r4, r5, pc}
 966              	.LVL142:
 967              	.L80:
3309:.\ff.c        **** 		}
 968              		.loc 1 3309 0
 969 00c0 0020     		movs	r0, #0
 970 00c2 38BD     		pop	{r3, r4, r5, pc}
 971              	.LVL143:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 83


 972              	.L81:
3321:.\ff.c        **** 		}
 973              		.loc 1 3321 0
 974 00c4 0020     		movs	r0, #0
3325:.\ff.c        **** 
 975              		.loc 1 3325 0
 976 00c6 38BD     		pop	{r3, r4, r5, pc}
 977              	.LVL144:
 978              	.L85:
 979              		.align	2
 980              	.L84:
 981 00c8 00000000 		.word	.LC0
 982              		.cfi_endproc
 983              	.LFE28:
 984              		.size	check_fs, .-check_fs
 985              		.section	.text.find_volume,"ax",%progbits
 986              		.align	2
 987              		.thumb
 988              		.thumb_func
 989              		.type	find_volume, %function
 990              	find_volume:
 991              	.LFB29:
3335:.\ff.c        **** 	UINT fmt, i;
 992              		.loc 1 3335 0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 16
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 996              	.LVL145:
 997 0000 70B5     		push	{r4, r5, r6, lr}
 998              		.cfi_def_cfa_offset 16
 999              		.cfi_offset 4, -16
 1000              		.cfi_offset 5, -12
 1001              		.cfi_offset 6, -8
 1002              		.cfi_offset 14, -4
 1003 0002 84B0     		sub	sp, sp, #16
 1004              		.cfi_def_cfa_offset 32
 1005 0004 0646     		mov	r6, r0
 1006 0006 0D46     		mov	r5, r1
3340:.\ff.c        **** 	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, 
 1007              		.loc 1 3340 0
 1008 0008 0021     		movs	r1, #0
 1009              	.LVL146:
 1010 000a FFF7FEFF 		bl	check_fs
 1011              	.LVL147:
3341:.\ff.c        **** 
 1012              		.loc 1 3341 0
 1013 000e 0228     		cmp	r0, #2
 1014 0010 10D0     		beq	.L94
3341:.\ff.c        **** 
 1015              		.loc 1 3341 0 is_stmt 0 discriminator 1
 1016 0012 27D8     		bhi	.L88
3341:.\ff.c        **** 
 1017              		.loc 1 3341 0 discriminator 3
 1018 0014 35B3     		cbz	r5, .L88
 1019 0016 0024     		movs	r4, #0
 1020 0018 0DE0     		b	.L87
 1021              	.LVL148:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 84


 1022              	.L89:
3369:.\ff.c        **** 	}
 1023              		.loc 1 3369 0 is_stmt 1 discriminator 3
 1024 001a 06EB0410 		add	r0, r6, r4, lsl #4
 1025 001e 00F5FB70 		add	r0, r0, #502
 1026 0022 FFF7FEFF 		bl	ld_dword
 1027              	.LVL149:
 1028 0026 04AB     		add	r3, sp, #16
 1029 0028 03EB8403 		add	r3, r3, r4, lsl #2
 1030 002c 43F8100C 		str	r0, [r3, #-16]
3368:.\ff.c        **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 1031              		.loc 1 3368 0 discriminator 3
 1032 0030 0134     		adds	r4, r4, #1
 1033              	.LVL150:
 1034 0032 00E0     		b	.L87
 1035              	.LVL151:
 1036              	.L94:
 1037 0034 0024     		movs	r4, #0
 1038              	.LVL152:
 1039              	.L87:
3368:.\ff.c        **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 1040              		.loc 1 3368 0 is_stmt 0 discriminator 1
 1041 0036 032C     		cmp	r4, #3
 1042 0038 EFD9     		bls	.L89
3371:.\ff.c        **** 	do {							/* Find an FAT volume */
 1043              		.loc 1 3371 0 is_stmt 1
 1044 003a 0DB1     		cbz	r5, .L97
3371:.\ff.c        **** 	do {							/* Find an FAT volume */
 1045              		.loc 1 3371 0 is_stmt 0 discriminator 1
 1046 003c 6C1E     		subs	r4, r5, #1
 1047              	.LVL153:
 1048 003e 00E0     		b	.L93
 1049              	.LVL154:
 1050              	.L97:
3371:.\ff.c        **** 	do {							/* Find an FAT volume */
 1051              		.loc 1 3371 0
 1052 0040 0024     		movs	r4, #0
 1053              	.LVL155:
 1054              	.L93:
3373:.\ff.c        **** 	} while (part == 0 && fmt >= 2 && ++i < 4);
 1055              		.loc 1 3373 0 is_stmt 1
 1056 0042 04AB     		add	r3, sp, #16
 1057 0044 03EB8403 		add	r3, r3, r4, lsl #2
 1058 0048 53F8101C 		ldr	r1, [r3, #-16]
 1059 004c 19B1     		cbz	r1, .L98
3373:.\ff.c        **** 	} while (part == 0 && fmt >= 2 && ++i < 4);
 1060              		.loc 1 3373 0 is_stmt 0 discriminator 1
 1061 004e 3046     		mov	r0, r6
 1062 0050 FFF7FEFF 		bl	check_fs
 1063              	.LVL156:
 1064 0054 00E0     		b	.L91
 1065              	.L98:
3373:.\ff.c        **** 	} while (part == 0 && fmt >= 2 && ++i < 4);
 1066              		.loc 1 3373 0
 1067 0056 0320     		movs	r0, #3
 1068              	.L91:
 1069              	.LVL157:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 85


3374:.\ff.c        **** 	return fmt;
 1070              		.loc 1 3374 0 is_stmt 1 discriminator 4
 1071 0058 25B9     		cbnz	r5, .L88
3374:.\ff.c        **** 	return fmt;
 1072              		.loc 1 3374 0 is_stmt 0 discriminator 1
 1073 005a 0128     		cmp	r0, #1
 1074 005c 02D9     		bls	.L88
3374:.\ff.c        **** 	return fmt;
 1075              		.loc 1 3374 0 discriminator 2
 1076 005e 0134     		adds	r4, r4, #1
 1077              	.LVL158:
 1078 0060 032C     		cmp	r4, #3
 1079 0062 EED9     		bls	.L93
 1080              	.LVL159:
 1081              	.L88:
3376:.\ff.c        **** 
 1082              		.loc 1 3376 0 is_stmt 1
 1083 0064 04B0     		add	sp, sp, #16
 1084              		.cfi_def_cfa_offset 16
 1085              		@ sp needed
 1086 0066 70BD     		pop	{r4, r5, r6, pc}
 1087              		.cfi_endproc
 1088              	.LFE29:
 1089              		.size	find_volume, .-find_volume
 1090              		.section	.text.mount_volume,"ax",%progbits
 1091              		.align	2
 1092              		.thumb
 1093              		.thumb_func
 1094              		.type	mount_volume, %function
 1095              	mount_volume:
 1096              	.LFB30:
3390:.\ff.c        **** 	int vol;
 1097              		.loc 1 3390 0
 1098              		.cfi_startproc
 1099              		@ args = 0, pretend = 0, frame = 0
 1100              		@ frame_needed = 0, uses_anonymous_args = 0
 1101              	.LVL160:
 1102 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1103              		.cfi_def_cfa_offset 32
 1104              		.cfi_offset 4, -32
 1105              		.cfi_offset 5, -28
 1106              		.cfi_offset 6, -24
 1107              		.cfi_offset 7, -20
 1108              		.cfi_offset 8, -16
 1109              		.cfi_offset 9, -12
 1110              		.cfi_offset 10, -8
 1111              		.cfi_offset 14, -4
 1112 0004 0D46     		mov	r5, r1
 1113 0006 1646     		mov	r6, r2
3401:.\ff.c        **** 	vol = get_ldnumber(path);
 1114              		.loc 1 3401 0
 1115 0008 0023     		movs	r3, #0
 1116 000a 0B60     		str	r3, [r1]
3402:.\ff.c        **** 	if (vol < 0) return FR_INVALID_DRIVE;
 1117              		.loc 1 3402 0
 1118 000c FFF7FEFF 		bl	get_ldnumber
 1119              	.LVL161:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 86


3403:.\ff.c        **** 
 1120              		.loc 1 3403 0
 1121 0010 0028     		cmp	r0, #0
 1122 0012 C0F20B81 		blt	.L114
3406:.\ff.c        **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 1123              		.loc 1 3406 0
 1124 0016 A54B     		ldr	r3, .L139
 1125 0018 53F82040 		ldr	r4, [r3, r0, lsl #2]
 1126              	.LVL162:
3407:.\ff.c        **** #if FF_FS_REENTRANT
 1127              		.loc 1 3407 0
 1128 001c 002C     		cmp	r4, #0
 1129 001e 00F00881 		beq	.L115
3411:.\ff.c        **** 
 1130              		.loc 1 3411 0
 1131 0022 2C60     		str	r4, [r5]
3413:.\ff.c        **** 	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 1132              		.loc 1 3413 0
 1133 0024 06F0FE06 		and	r6, r6, #254
 1134              	.LVL163:
3414:.\ff.c        **** 		stat = disk_status(fs->pdrv);
 1135              		.loc 1 3414 0
 1136 0028 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1137 002a 7BB1     		cbz	r3, .L102
3415:.\ff.c        **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 1138              		.loc 1 3415 0
 1139 002c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1140              	.LVL164:
 1141 002e FFF7FEFF 		bl	disk_status
 1142              	.LVL165:
3416:.\ff.c        **** 			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 1143              		.loc 1 3416 0
 1144 0032 10F0010F 		tst	r0, #1
 1145 0036 09D1     		bne	.L102
3417:.\ff.c        **** 				return FR_WRITE_PROTECTED;
 1146              		.loc 1 3417 0
 1147 0038 002E     		cmp	r6, #0
 1148 003a 00F0FD80 		beq	.L116
3417:.\ff.c        **** 				return FR_WRITE_PROTECTED;
 1149              		.loc 1 3417 0 is_stmt 0 discriminator 1
 1150 003e 10F0040F 		tst	r0, #4
 1151 0042 40F0FC80 		bne	.L117
3420:.\ff.c        **** 		}
 1152              		.loc 1 3420 0 is_stmt 1
 1153 0046 0020     		movs	r0, #0
 1154              	.LVL166:
 1155 0048 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1156              	.LVL167:
 1157              	.L102:
3427:.\ff.c        **** 	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 1158              		.loc 1 3427 0
 1159 004c 0023     		movs	r3, #0
 1160 004e 2370     		strb	r3, [r4]
3428:.\ff.c        **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 1161              		.loc 1 3428 0
 1162 0050 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1163 0052 FFF7FEFF 		bl	disk_initialize
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 87


 1164              	.LVL168:
3429:.\ff.c        **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 1165              		.loc 1 3429 0
 1166 0056 10F0010F 		tst	r0, #1
 1167 005a 40F0F380 		bne	.L118
3432:.\ff.c        **** 		return FR_WRITE_PROTECTED;
 1168              		.loc 1 3432 0
 1169 005e 1EB1     		cbz	r6, .L103
3432:.\ff.c        **** 		return FR_WRITE_PROTECTED;
 1170              		.loc 1 3432 0 is_stmt 0 discriminator 1
 1171 0060 10F0040F 		tst	r0, #4
 1172 0064 40F0F180 		bne	.L119
 1173              	.L103:
3441:.\ff.c        **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 1174              		.loc 1 3441 0 is_stmt 1
 1175 0068 2046     		mov	r0, r4
 1176              	.LVL169:
 1177 006a 0021     		movs	r1, #0
 1178 006c FFF7FEFF 		bl	find_volume
 1179              	.LVL170:
3442:.\ff.c        **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 1180              		.loc 1 3442 0
 1181 0070 0428     		cmp	r0, #4
 1182 0072 00F0ED80 		beq	.L120
3443:.\ff.c        **** 	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 1183              		.loc 1 3443 0
 1184 0076 0128     		cmp	r0, #1
 1185 0078 00F2ED80 		bhi	.L121
3444:.\ff.c        **** 
 1186              		.loc 1 3444 0
 1187 007c E66A     		ldr	r6, [r4, #44]
 1188              	.LVL171:
3512:.\ff.c        **** 
 1189              		.loc 1 3512 0
 1190 007e 04F13B00 		add	r0, r4, #59
 1191              	.LVL172:
 1192 0082 FFF7FEFF 		bl	ld_word
 1193              	.LVL173:
 1194 0086 B0F5007F 		cmp	r0, #512
 1195 008a 40F0E780 		bne	.L122
3514:.\ff.c        **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 1196              		.loc 1 3514 0
 1197 008e 04F14600 		add	r0, r4, #70
 1198 0092 FFF7FEFF 		bl	ld_word
 1199              	.LVL174:
 1200 0096 8046     		mov	r8, r0
 1201              	.LVL175:
3515:.\ff.c        **** 		fs->fsize = fasize;
 1202              		.loc 1 3515 0
 1203 0098 20B9     		cbnz	r0, .L104
3515:.\ff.c        **** 		fs->fsize = fasize;
 1204              		.loc 1 3515 0 is_stmt 0 discriminator 1
 1205 009a 04F15400 		add	r0, r4, #84
 1206              	.LVL176:
 1207 009e FFF7FEFF 		bl	ld_dword
 1208              	.LVL177:
 1209 00a2 8046     		mov	r8, r0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 88


 1210              	.LVL178:
 1211              	.L104:
3516:.\ff.c        **** 
 1212              		.loc 1 3516 0 is_stmt 1
 1213 00a4 C4F81880 		str	r8, [r4, #24]
3518:.\ff.c        **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 1214              		.loc 1 3518 0
 1215 00a8 94F84090 		ldrb	r9, [r4, #64]	@ zero_extendqisi2
 1216 00ac 84F80390 		strb	r9, [r4, #3]
3519:.\ff.c        **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 1217              		.loc 1 3519 0
 1218 00b0 09F1FF33 		add	r3, r9, #-1
 1219 00b4 DBB2     		uxtb	r3, r3
 1220 00b6 012B     		cmp	r3, #1
 1221 00b8 00F2D380 		bhi	.L123
3520:.\ff.c        **** 
 1222              		.loc 1 3520 0
 1223 00bc 08FB09F9 		mul	r9, r8, r9
 1224              	.LVL179:
3522:.\ff.c        **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
 1225              		.loc 1 3522 0
 1226 00c0 94F83D50 		ldrb	r5, [r4, #61]	@ zero_extendqisi2
 1227              	.LVL180:
 1228 00c4 6581     		strh	r5, [r4, #10]	@ movhi
3523:.\ff.c        **** 
 1229              		.loc 1 3523 0
 1230 00c6 002D     		cmp	r5, #0
 1231 00c8 00F0CE80 		beq	.L124
3523:.\ff.c        **** 
 1232              		.loc 1 3523 0 is_stmt 0 discriminator 2
 1233 00cc 6B1E     		subs	r3, r5, #1
 1234 00ce 1D42     		tst	r5, r3
 1235 00d0 40F0CD80 		bne	.L125
3525:.\ff.c        **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 1236              		.loc 1 3525 0 is_stmt 1
 1237 00d4 04F14100 		add	r0, r4, #65
 1238 00d8 FFF7FEFF 		bl	ld_word
 1239              	.LVL181:
 1240 00dc 8246     		mov	r10, r0
 1241 00de 2081     		strh	r0, [r4, #8]	@ movhi
3526:.\ff.c        **** 
 1242              		.loc 1 3526 0
 1243 00e0 10F00F0F 		tst	r0, #15
 1244 00e4 40F0C680 		bne	.L126
3528:.\ff.c        **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 1245              		.loc 1 3528 0
 1246 00e8 04F14300 		add	r0, r4, #67
 1247 00ec FFF7FEFF 		bl	ld_word
 1248              	.LVL182:
 1249 00f0 0746     		mov	r7, r0
 1250              	.LVL183:
3529:.\ff.c        **** 
 1251              		.loc 1 3529 0
 1252 00f2 20B9     		cbnz	r0, .L105
3529:.\ff.c        **** 
 1253              		.loc 1 3529 0 is_stmt 0 discriminator 1
 1254 00f4 04F15000 		add	r0, r4, #80
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 89


 1255              	.LVL184:
 1256 00f8 FFF7FEFF 		bl	ld_dword
 1257              	.LVL185:
 1258 00fc 0746     		mov	r7, r0
 1259              	.LVL186:
 1260              	.L105:
3531:.\ff.c        **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 1261              		.loc 1 3531 0 is_stmt 1
 1262 00fe 04F13E00 		add	r0, r4, #62
 1263              	.LVL187:
 1264 0102 FFF7FEFF 		bl	ld_word
 1265              	.LVL188:
3532:.\ff.c        **** 
 1266              		.loc 1 3532 0
 1267 0106 0346     		mov	r3, r0
 1268 0108 0028     		cmp	r0, #0
 1269 010a 00F0B680 		beq	.L127
3535:.\ff.c        **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 1270              		.loc 1 3535 0
 1271 010e 00EB0902 		add	r2, r0, r9
 1272 0112 02EB1A12 		add	r2, r2, r10, lsr #4
 1273              	.LVL189:
3536:.\ff.c        **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 1274              		.loc 1 3536 0
 1275 0116 9742     		cmp	r7, r2
 1276 0118 C0F0B280 		bcc	.L128
3537:.\ff.c        **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 1277              		.loc 1 3537 0
 1278 011c BF1A     		subs	r7, r7, r2
 1279              	.LVL190:
 1280 011e B7FBF5F5 		udiv	r5, r7, r5
 1281              	.LVL191:
3538:.\ff.c        **** 		fmt = 0;
 1282              		.loc 1 3538 0
 1283 0122 002D     		cmp	r5, #0
 1284 0124 00F0AF80 		beq	.L129
 1285              	.LVL192:
3540:.\ff.c        **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 1286              		.loc 1 3540 0
 1287 0128 6149     		ldr	r1, .L139+4
 1288 012a 8D42     		cmp	r5, r1
 1289 012c 01D9     		bls	.L130
3539:.\ff.c        **** 		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 1290              		.loc 1 3539 0
 1291 012e 0027     		movs	r7, #0
 1292 0130 00E0     		b	.L106
 1293              	.L130:
3540:.\ff.c        **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 1294              		.loc 1 3540 0
 1295 0132 0327     		movs	r7, #3
 1296              	.L106:
 1297              	.LVL193:
3541:.\ff.c        **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 1298              		.loc 1 3541 0
 1299 0134 4FF6F571 		movw	r1, #65525
 1300 0138 8D42     		cmp	r5, r1
 1301 013a 00D8     		bhi	.L107
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 90


 1302 013c 0227     		movs	r7, #2
 1303              	.LVL194:
 1304              	.L107:
3542:.\ff.c        **** 		if (fmt == 0) return FR_NO_FILESYSTEM;
 1305              		.loc 1 3542 0
 1306 013e 40F6F571 		movw	r1, #4085
 1307 0142 8D42     		cmp	r5, r1
 1308 0144 00D8     		bhi	.L108
 1309 0146 0127     		movs	r7, #1
 1310              	.LVL195:
 1311              	.L108:
3543:.\ff.c        **** 
 1312              		.loc 1 3543 0
 1313 0148 002F     		cmp	r7, #0
 1314 014a 00F09F80 		beq	.L133
3546:.\ff.c        **** 		fs->volbase = bsect;							/* Volume start sector */
 1315              		.loc 1 3546 0
 1316 014e 0235     		adds	r5, r5, #2
 1317              	.LVL196:
 1318 0150 6561     		str	r5, [r4, #20]
3547:.\ff.c        **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 1319              		.loc 1 3547 0
 1320 0152 E661     		str	r6, [r4, #28]
3548:.\ff.c        **** 		fs->database = bsect + sysect;					/* Data start sector */
 1321              		.loc 1 3548 0
 1322 0154 3344     		add	r3, r3, r6
 1323 0156 2362     		str	r3, [r4, #32]
3549:.\ff.c        **** 		if (fmt == FS_FAT32) {
 1324              		.loc 1 3549 0
 1325 0158 3244     		add	r2, r2, r6
 1326              	.LVL197:
 1327 015a A262     		str	r2, [r4, #40]
3550:.\ff.c        **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
 1328              		.loc 1 3550 0
 1329 015c 032F     		cmp	r7, #3
 1330 015e 11D1     		bne	.L109
3551:.\ff.c        **** 			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 1331              		.loc 1 3551 0
 1332 0160 04F15A00 		add	r0, r4, #90
 1333              	.LVL198:
 1334 0164 FFF7FEFF 		bl	ld_word
 1335              	.LVL199:
 1336 0168 0028     		cmp	r0, #0
 1337 016a 40F09280 		bne	.L134
3552:.\ff.c        **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 1338              		.loc 1 3552 0
 1339 016e BAF1000F 		cmp	r10, #0
 1340 0172 40F09180 		bne	.L135
3553:.\ff.c        **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 1341              		.loc 1 3553 0
 1342 0176 04F15C00 		add	r0, r4, #92
 1343 017a FFF7FEFF 		bl	ld_dword
 1344              	.LVL200:
 1345 017e 6062     		str	r0, [r4, #36]
3554:.\ff.c        **** 		} else {
 1346              		.loc 1 3554 0
 1347 0180 AD00     		lsls	r5, r5, #2
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 91


 1348              	.LVL201:
 1349 0182 0FE0     		b	.L110
 1350              	.LVL202:
 1351              	.L109:
3556:.\ff.c        **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 1352              		.loc 1 3556 0
 1353 0184 BAF1000F 		cmp	r10, #0
 1354 0188 00F08980 		beq	.L136
3557:.\ff.c        **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 1355              		.loc 1 3557 0
 1356 018c 4B44     		add	r3, r3, r9
 1357 018e 6362     		str	r3, [r4, #36]
3559:.\ff.c        **** 		}
 1358              		.loc 1 3559 0
 1359 0190 022F     		cmp	r7, #2
 1360 0192 01D1     		bne	.L111
3559:.\ff.c        **** 		}
 1361              		.loc 1 3559 0 is_stmt 0 discriminator 1
 1362 0194 6D00     		lsls	r5, r5, #1
 1363              	.LVL203:
 1364 0196 05E0     		b	.L110
 1365              	.LVL204:
 1366              	.L111:
3559:.\ff.c        **** 		}
 1367              		.loc 1 3559 0 discriminator 2
 1368 0198 05EB4503 		add	r3, r5, r5, lsl #1
 1369 019c 05F00105 		and	r5, r5, #1
 1370              	.LVL205:
 1371 01a0 05EB5305 		add	r5, r5, r3, lsr #1
 1372              	.LVL206:
 1373              	.L110:
3561:.\ff.c        **** 
 1374              		.loc 1 3561 0 is_stmt 1
 1375 01a4 05F2FF15 		addw	r5, r5, #511
 1376              	.LVL207:
 1377 01a8 B8EB552F 		cmp	r8, r5, lsr #9
 1378 01ac 7AD3     		bcc	.L137
3565:.\ff.c        **** 		fs->fsi_flag = 0x80;
 1379              		.loc 1 3565 0
 1380 01ae 4FF0FF33 		mov	r3, #-1
 1381 01b2 2361     		str	r3, [r4, #16]
 1382 01b4 E360     		str	r3, [r4, #12]
3566:.\ff.c        **** #if (FF_FS_NOFSINFO & 3) != 3
 1383              		.loc 1 3566 0
 1384 01b6 8023     		movs	r3, #128
 1385 01b8 6371     		strb	r3, [r4, #5]
3568:.\ff.c        **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
 1386              		.loc 1 3568 0
 1387 01ba 032F     		cmp	r7, #3
 1388 01bc 2CD1     		bne	.L113
3569:.\ff.c        **** 			&& move_window(fs, bsect + 1) == FR_OK)
 1389              		.loc 1 3569 0
 1390 01be 04F16000 		add	r0, r4, #96
 1391 01c2 FFF7FEFF 		bl	ld_word
 1392              	.LVL208:
 1393 01c6 0128     		cmp	r0, #1
 1394 01c8 26D1     		bne	.L113
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 92


3570:.\ff.c        **** 		{
 1395              		.loc 1 3570 0
 1396 01ca 2046     		mov	r0, r4
 1397 01cc 711C     		adds	r1, r6, #1
 1398 01ce FFF7FEFF 		bl	move_window
 1399              	.LVL209:
 1400 01d2 08BB     		cbnz	r0, .L113
3572:.\ff.c        **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 1401              		.loc 1 3572 0
 1402 01d4 0023     		movs	r3, #0
 1403 01d6 6371     		strb	r3, [r4, #5]
3573:.\ff.c        **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 1404              		.loc 1 3573 0
 1405 01d8 04F22E20 		addw	r0, r4, #558
 1406 01dc FFF7FEFF 		bl	ld_word
 1407              	.LVL210:
 1408 01e0 4AF65523 		movw	r3, #43605
 1409 01e4 9842     		cmp	r0, r3
 1410 01e6 17D1     		bne	.L113
3574:.\ff.c        **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 1411              		.loc 1 3574 0
 1412 01e8 04F13000 		add	r0, r4, #48
 1413 01ec FFF7FEFF 		bl	ld_dword
 1414              	.LVL211:
 1415 01f0 304B     		ldr	r3, .L139+8
 1416 01f2 9842     		cmp	r0, r3
 1417 01f4 10D1     		bne	.L113
3575:.\ff.c        **** 			{
 1418              		.loc 1 3575 0
 1419 01f6 04F50570 		add	r0, r4, #532
 1420 01fa FFF7FEFF 		bl	ld_dword
 1421              	.LVL212:
 1422 01fe 2E4B     		ldr	r3, .L139+12
 1423 0200 9842     		cmp	r0, r3
 1424 0202 09D1     		bne	.L113
3578:.\ff.c        **** #endif
 1425              		.loc 1 3578 0
 1426 0204 04F50670 		add	r0, r4, #536
 1427 0208 FFF7FEFF 		bl	ld_dword
 1428              	.LVL213:
 1429 020c 2061     		str	r0, [r4, #16]
3581:.\ff.c        **** #endif
 1430              		.loc 1 3581 0
 1431 020e 04F50770 		add	r0, r4, #540
 1432 0212 FFF7FEFF 		bl	ld_dword
 1433              	.LVL214:
 1434 0216 E060     		str	r0, [r4, #12]
 1435              	.L113:
3589:.\ff.c        **** 	fs->id = ++Fsid;		/* Volume mount ID */
 1436              		.loc 1 3589 0
 1437 0218 2770     		strb	r7, [r4]
3590:.\ff.c        **** #if FF_USE_LFN == 1
 1438              		.loc 1 3590 0
 1439 021a 244A     		ldr	r2, .L139
 1440 021c 9388     		ldrh	r3, [r2, #4]
 1441 021e 0133     		adds	r3, r3, #1
 1442 0220 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 93


 1443 0222 9380     		strh	r3, [r2, #4]	@ movhi
 1444 0224 E380     		strh	r3, [r4, #6]	@ movhi
3603:.\ff.c        **** }
 1445              		.loc 1 3603 0
 1446 0226 0020     		movs	r0, #0
 1447 0228 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1448              	.LVL215:
 1449              	.L114:
3403:.\ff.c        **** 
 1450              		.loc 1 3403 0
 1451 022c 0B20     		movs	r0, #11
 1452              	.LVL216:
 1453 022e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1454              	.LVL217:
 1455              	.L115:
3407:.\ff.c        **** #if FF_FS_REENTRANT
 1456              		.loc 1 3407 0
 1457 0232 0C20     		movs	r0, #12
 1458              	.LVL218:
 1459 0234 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1460              	.LVL219:
 1461              	.L116:
3420:.\ff.c        **** 		}
 1462              		.loc 1 3420 0
 1463 0238 0020     		movs	r0, #0
 1464              	.LVL220:
 1465 023a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1466              	.LVL221:
 1467              	.L117:
3418:.\ff.c        **** 			}
 1468              		.loc 1 3418 0
 1469 023e 0A20     		movs	r0, #10
 1470              	.LVL222:
 1471 0240 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1472              	.LVL223:
 1473              	.L118:
3430:.\ff.c        **** 	}
 1474              		.loc 1 3430 0
 1475 0244 0320     		movs	r0, #3
 1476              	.LVL224:
 1477 0246 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1478              	.LVL225:
 1479              	.L119:
3433:.\ff.c        **** 	}
 1480              		.loc 1 3433 0
 1481 024a 0A20     		movs	r0, #10
 1482              	.LVL226:
 1483 024c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1484              	.LVL227:
 1485              	.L120:
3442:.\ff.c        **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 1486              		.loc 1 3442 0
 1487 0250 0120     		movs	r0, #1
 1488              	.LVL228:
 1489 0252 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1490              	.LVL229:
 1491              	.L121:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 94


3443:.\ff.c        **** 	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 1492              		.loc 1 3443 0
 1493 0256 0D20     		movs	r0, #13
 1494              	.LVL230:
 1495 0258 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1496              	.LVL231:
 1497              	.L122:
3512:.\ff.c        **** 
 1498              		.loc 1 3512 0
 1499 025c 0D20     		movs	r0, #13
 1500 025e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1501              	.LVL232:
 1502              	.L123:
3519:.\ff.c        **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 1503              		.loc 1 3519 0
 1504 0262 0D20     		movs	r0, #13
 1505              	.LVL233:
 1506 0264 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1507              	.LVL234:
 1508              	.L124:
3523:.\ff.c        **** 
 1509              		.loc 1 3523 0
 1510 0268 0D20     		movs	r0, #13
 1511 026a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1512              	.LVL235:
 1513              	.L125:
 1514 026e 0D20     		movs	r0, #13
 1515 0270 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1516              	.LVL236:
 1517              	.L126:
3526:.\ff.c        **** 
 1518              		.loc 1 3526 0
 1519 0274 0D20     		movs	r0, #13
 1520 0276 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1521              	.LVL237:
 1522              	.L127:
3532:.\ff.c        **** 
 1523              		.loc 1 3532 0
 1524 027a 0D20     		movs	r0, #13
 1525              	.LVL238:
 1526 027c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1527              	.LVL239:
 1528              	.L128:
3536:.\ff.c        **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 1529              		.loc 1 3536 0
 1530 0280 0D20     		movs	r0, #13
 1531              	.LVL240:
 1532 0282 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1533              	.LVL241:
 1534              	.L129:
3538:.\ff.c        **** 		fmt = 0;
 1535              		.loc 1 3538 0
 1536 0286 0D20     		movs	r0, #13
 1537              	.LVL242:
 1538 0288 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1539              	.LVL243:
 1540              	.L133:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 95


3543:.\ff.c        **** 
 1541              		.loc 1 3543 0
 1542 028c 0D20     		movs	r0, #13
 1543              	.LVL244:
 1544 028e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1545              	.LVL245:
 1546              	.L134:
3551:.\ff.c        **** 			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 1547              		.loc 1 3551 0
 1548 0292 0D20     		movs	r0, #13
 1549 0294 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1550              	.LVL246:
 1551              	.L135:
3552:.\ff.c        **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 1552              		.loc 1 3552 0
 1553 0298 0D20     		movs	r0, #13
 1554 029a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1555              	.LVL247:
 1556              	.L136:
3556:.\ff.c        **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 1557              		.loc 1 3556 0
 1558 029e 0D20     		movs	r0, #13
 1559              	.LVL248:
 1560 02a0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1561              	.LVL249:
 1562              	.L137:
3561:.\ff.c        **** 
 1563              		.loc 1 3561 0
 1564 02a4 0D20     		movs	r0, #13
3604:.\ff.c        **** 
 1565              		.loc 1 3604 0
 1566 02a6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1567              	.LVL250:
 1568              	.L140:
 1569 02aa 00BF     		.align	2
 1570              	.L139:
 1571 02ac 00000000 		.word	.LANCHOR0
 1572 02b0 F5FFFF0F 		.word	268435445
 1573 02b4 52526141 		.word	1096897106
 1574 02b8 72724161 		.word	1631679090
 1575              		.cfi_endproc
 1576              	.LFE30:
 1577              		.size	mount_volume, .-mount_volume
 1578              		.section	.text.put_fat,"ax",%progbits
 1579              		.align	2
 1580              		.thumb
 1581              		.thumb_func
 1582              		.type	put_fat, %function
 1583              	put_fat:
 1584              	.LFB11:
1244:.\ff.c        **** 	UINT bc;
 1585              		.loc 1 1244 0
 1586              		.cfi_startproc
 1587              		@ args = 0, pretend = 0, frame = 0
 1588              		@ frame_needed = 0, uses_anonymous_args = 0
 1589              	.LVL251:
 1590 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 96


 1591              		.cfi_def_cfa_offset 32
 1592              		.cfi_offset 3, -32
 1593              		.cfi_offset 4, -28
 1594              		.cfi_offset 5, -24
 1595              		.cfi_offset 6, -20
 1596              		.cfi_offset 7, -16
 1597              		.cfi_offset 8, -12
 1598              		.cfi_offset 9, -8
 1599              		.cfi_offset 14, -4
 1600 0004 0C46     		mov	r4, r1
 1601              	.LVL252:
1250:.\ff.c        **** 		switch (fs->fs_type) {
 1602              		.loc 1 1250 0
 1603 0006 0129     		cmp	r1, #1
 1604 0008 77D9     		bls	.L150
 1605 000a 0546     		mov	r5, r0
 1606 000c 1746     		mov	r7, r2
1250:.\ff.c        **** 		switch (fs->fs_type) {
 1607              		.loc 1 1250 0 is_stmt 0 discriminator 1
 1608 000e 4369     		ldr	r3, [r0, #20]
 1609 0010 8B42     		cmp	r3, r1
 1610 0012 74D9     		bls	.L151
1251:.\ff.c        **** 		case FS_FAT12:
 1611              		.loc 1 1251 0 is_stmt 1
 1612 0014 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1613 0016 022B     		cmp	r3, #2
 1614 0018 43D0     		beq	.L143
 1615 001a 032B     		cmp	r3, #3
 1616 001c 53D0     		beq	.L144
 1617 001e 012B     		cmp	r3, #1
 1618 0020 6FD1     		bne	.L153
 1619              	.LVL253:
1253:.\ff.c        **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1620              		.loc 1 1253 0
 1621 0022 01EB5108 		add	r8, r1, r1, lsr #1
 1622              	.LVL254:
1254:.\ff.c        **** 			if (res != FR_OK) break;
 1623              		.loc 1 1254 0
 1624 0026 016A     		ldr	r1, [r0, #32]
 1625              	.LVL255:
 1626 0028 01EB5821 		add	r1, r1, r8, lsr #9
 1627 002c FFF7FEFF 		bl	move_window
 1628              	.LVL256:
1255:.\ff.c        **** 			p = fs->win + bc++ % SS(fs);
 1629              		.loc 1 1255 0
 1630 0030 0646     		mov	r6, r0
 1631 0032 0028     		cmp	r0, #0
 1632 0034 66D1     		bne	.L142
1256:.\ff.c        **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 1633              		.loc 1 1256 0
 1634 0036 08F10109 		add	r9, r8, #1
 1635              	.LVL257:
 1636 003a C8F30808 		ubfx	r8, r8, #0, #9
 1637              	.LVL258:
1257:.\ff.c        **** 			fs->wflag = 1;
 1638              		.loc 1 1257 0
 1639 003e 14F00104 		ands	r4, r4, #1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 97


 1640              	.LVL259:
 1641 0042 0AD0     		beq	.L146
1257:.\ff.c        **** 			fs->wflag = 1;
 1642              		.loc 1 1257 0 is_stmt 0 discriminator 1
 1643 0044 05EB0803 		add	r3, r5, r8
 1644 0048 93F83020 		ldrb	r2, [r3, #48]	@ zero_extendqisi2
 1645 004c FBB2     		uxtb	r3, r7
 1646 004e 02F00F02 		and	r2, r2, #15
 1647 0052 42EA0313 		orr	r3, r2, r3, lsl #4
 1648 0056 DBB2     		uxtb	r3, r3
 1649 0058 00E0     		b	.L147
 1650              	.L146:
1257:.\ff.c        **** 			fs->wflag = 1;
 1651              		.loc 1 1257 0 discriminator 2
 1652 005a FBB2     		uxtb	r3, r7
 1653              	.L147:
1257:.\ff.c        **** 			fs->wflag = 1;
 1654              		.loc 1 1257 0 discriminator 4
 1655 005c A844     		add	r8, r8, r5
 1656              	.LVL260:
 1657 005e 88F83030 		strb	r3, [r8, #48]
1258:.\ff.c        **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1658              		.loc 1 1258 0 is_stmt 1 discriminator 4
 1659 0062 0123     		movs	r3, #1
 1660 0064 2B71     		strb	r3, [r5, #4]
1259:.\ff.c        **** 			if (res != FR_OK) break;
 1661              		.loc 1 1259 0 discriminator 4
 1662 0066 296A     		ldr	r1, [r5, #32]
 1663 0068 2846     		mov	r0, r5
 1664              	.LVL261:
 1665 006a 01EB5921 		add	r1, r1, r9, lsr #9
 1666 006e FFF7FEFF 		bl	move_window
 1667              	.LVL262:
1260:.\ff.c        **** 			p = fs->win + bc % SS(fs);
 1668              		.loc 1 1260 0 discriminator 4
 1669 0072 0646     		mov	r6, r0
 1670 0074 0028     		cmp	r0, #0
 1671 0076 45D1     		bne	.L142
1261:.\ff.c        **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd by
 1672              		.loc 1 1261 0
 1673 0078 C9F30809 		ubfx	r9, r9, #0, #9
 1674              	.LVL263:
1262:.\ff.c        **** 			fs->wflag = 1;
 1675              		.loc 1 1262 0
 1676 007c 14B1     		cbz	r4, .L148
1262:.\ff.c        **** 			fs->wflag = 1;
 1677              		.loc 1 1262 0 is_stmt 0 discriminator 1
 1678 007e C7F30717 		ubfx	r7, r7, #4, #8
 1679              	.LVL264:
 1680 0082 08E0     		b	.L149
 1681              	.LVL265:
 1682              	.L148:
1262:.\ff.c        **** 			fs->wflag = 1;
 1683              		.loc 1 1262 0 discriminator 2
 1684 0084 05EB0903 		add	r3, r5, r9
 1685 0088 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 1686 008c 23F00F03 		bic	r3, r3, #15
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 98


 1687 0090 C7F30327 		ubfx	r7, r7, #8, #4
 1688              	.LVL266:
 1689 0094 1F43     		orrs	r7, r7, r3
 1690              	.L149:
1262:.\ff.c        **** 			fs->wflag = 1;
 1691              		.loc 1 1262 0 discriminator 4
 1692 0096 A944     		add	r9, r9, r5
 1693              	.LVL267:
 1694 0098 89F83070 		strb	r7, [r9, #48]
1263:.\ff.c        **** 			break;
 1695              		.loc 1 1263 0 is_stmt 1 discriminator 4
 1696 009c 0123     		movs	r3, #1
 1697 009e 2B71     		strb	r3, [r5, #4]
1264:.\ff.c        **** 
 1698              		.loc 1 1264 0 discriminator 4
 1699 00a0 30E0     		b	.L142
 1700              	.LVL268:
 1701              	.L143:
1267:.\ff.c        **** 			if (res != FR_OK) break;
 1702              		.loc 1 1267 0
 1703 00a2 016A     		ldr	r1, [r0, #32]
 1704              	.LVL269:
 1705 00a4 01EB1421 		add	r1, r1, r4, lsr #8
 1706 00a8 FFF7FEFF 		bl	move_window
 1707              	.LVL270:
1268:.\ff.c        **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 1708              		.loc 1 1268 0
 1709 00ac 0646     		mov	r6, r0
 1710 00ae 48BB     		cbnz	r0, .L142
1269:.\ff.c        **** 			fs->wflag = 1;
 1711              		.loc 1 1269 0
 1712 00b0 6000     		lsls	r0, r4, #1
 1713              	.LVL271:
 1714 00b2 00F4FF70 		and	r0, r0, #510
 1715 00b6 3030     		adds	r0, r0, #48
 1716 00b8 2844     		add	r0, r0, r5
 1717 00ba B9B2     		uxth	r1, r7
 1718 00bc FFF7FEFF 		bl	st_word
 1719              	.LVL272:
1270:.\ff.c        **** 			break;
 1720              		.loc 1 1270 0
 1721 00c0 0123     		movs	r3, #1
 1722 00c2 2B71     		strb	r3, [r5, #4]
1271:.\ff.c        **** 
 1723              		.loc 1 1271 0
 1724 00c4 1EE0     		b	.L142
 1725              	.LVL273:
 1726              	.L144:
1277:.\ff.c        **** 			if (res != FR_OK) break;
 1727              		.loc 1 1277 0
 1728 00c6 016A     		ldr	r1, [r0, #32]
 1729              	.LVL274:
 1730 00c8 01EBD411 		add	r1, r1, r4, lsr #7
 1731 00cc FFF7FEFF 		bl	move_window
 1732              	.LVL275:
1278:.\ff.c        **** 			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 1733              		.loc 1 1278 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 99


 1734 00d0 0646     		mov	r6, r0
 1735 00d2 B8B9     		cbnz	r0, .L142
1280:.\ff.c        **** 			}
 1736              		.loc 1 1280 0
 1737 00d4 27F07047 		bic	r7, r7, #-268435456
 1738              	.LVL276:
 1739 00d8 A400     		lsls	r4, r4, #2
 1740              	.LVL277:
 1741 00da 04F4FE74 		and	r4, r4, #508
 1742 00de 3034     		adds	r4, r4, #48
 1743 00e0 2C44     		add	r4, r4, r5
 1744 00e2 2046     		mov	r0, r4
 1745              	.LVL278:
 1746 00e4 FFF7FEFF 		bl	ld_dword
 1747              	.LVL279:
 1748 00e8 00F07041 		and	r1, r0, #-268435456
 1749              	.LVL280:
1282:.\ff.c        **** 			fs->wflag = 1;
 1750              		.loc 1 1282 0
 1751 00ec 2046     		mov	r0, r4
 1752 00ee 3943     		orrs	r1, r1, r7
 1753              	.LVL281:
 1754 00f0 FFF7FEFF 		bl	st_dword
 1755              	.LVL282:
1283:.\ff.c        **** 			break;
 1756              		.loc 1 1283 0
 1757 00f4 0123     		movs	r3, #1
 1758 00f6 2B71     		strb	r3, [r5, #4]
1284:.\ff.c        **** 		}
 1759              		.loc 1 1284 0
 1760 00f8 04E0     		b	.L142
 1761              	.LVL283:
 1762              	.L150:
1247:.\ff.c        **** 
 1763              		.loc 1 1247 0
 1764 00fa 0226     		movs	r6, #2
 1765 00fc 02E0     		b	.L142
 1766              	.L151:
 1767 00fe 0226     		movs	r6, #2
 1768 0100 00E0     		b	.L142
 1769              	.L153:
 1770 0102 0226     		movs	r6, #2
 1771              	.LVL284:
 1772              	.L142:
1288:.\ff.c        **** 
 1773              		.loc 1 1288 0
 1774 0104 3046     		mov	r0, r6
 1775 0106 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1776              		.cfi_endproc
 1777              	.LFE11:
 1778              		.size	put_fat, .-put_fat
 1779 010a 00BF     		.section	.text.get_fat,"ax",%progbits
 1780              		.align	2
 1781              		.thumb
 1782              		.thumb_func
 1783              		.type	get_fat, %function
 1784              	get_fat:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 100


 1785              	.LFB10:
1165:.\ff.c        **** 	UINT wc, bc;
 1786              		.loc 1 1165 0
 1787              		.cfi_startproc
 1788              		@ args = 0, pretend = 0, frame = 0
 1789              		@ frame_needed = 0, uses_anonymous_args = 0
 1790              	.LVL285:
 1791 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1792              		.cfi_def_cfa_offset 24
 1793              		.cfi_offset 3, -24
 1794              		.cfi_offset 4, -20
 1795              		.cfi_offset 5, -16
 1796              		.cfi_offset 6, -12
 1797              		.cfi_offset 7, -8
 1798              		.cfi_offset 14, -4
1168:.\ff.c        **** 
 1799              		.loc 1 1168 0
 1800 0002 0668     		ldr	r6, [r0]
 1801              	.LVL286:
1171:.\ff.c        **** 		val = 1;	/* Internal error */
 1802              		.loc 1 1171 0
 1803 0004 0129     		cmp	r1, #1
 1804 0006 51D9     		bls	.L162
1171:.\ff.c        **** 		val = 1;	/* Internal error */
 1805              		.loc 1 1171 0 is_stmt 0 discriminator 1
 1806 0008 7369     		ldr	r3, [r6, #20]
 1807 000a 8B42     		cmp	r3, r1
 1808 000c 50D9     		bls	.L163
 1809 000e 0C46     		mov	r4, r1
 1810              	.LVL287:
1177:.\ff.c        **** 		case FS_FAT12 :
 1811              		.loc 1 1177 0 is_stmt 1
 1812 0010 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 1813 0012 022B     		cmp	r3, #2
 1814 0014 2AD0     		beq	.L157
 1815 0016 032B     		cmp	r3, #3
 1816 0018 37D0     		beq	.L158
 1817 001a 012B     		cmp	r3, #1
 1818 001c 4AD1     		bne	.L169
 1819              	.LVL288:
1179:.\ff.c        **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 1820              		.loc 1 1179 0
 1821 001e 01EB5105 		add	r5, r1, r1, lsr #1
 1822              	.LVL289:
1180:.\ff.c        **** 			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 1823              		.loc 1 1180 0
 1824 0022 316A     		ldr	r1, [r6, #32]
 1825              	.LVL290:
 1826 0024 3046     		mov	r0, r6
 1827              	.LVL291:
 1828 0026 01EB5521 		add	r1, r1, r5, lsr #9
 1829 002a FFF7FEFF 		bl	move_window
 1830              	.LVL292:
 1831 002e 0028     		cmp	r0, #0
 1832 0030 42D1     		bne	.L165
1181:.\ff.c        **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 1833              		.loc 1 1181 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 101


 1834 0032 6F1C     		adds	r7, r5, #1
 1835              	.LVL293:
 1836 0034 C5F30805 		ubfx	r5, r5, #0, #9
 1837 0038 3544     		add	r5, r5, r6
 1838 003a 95F83050 		ldrb	r5, [r5, #48]	@ zero_extendqisi2
 1839              	.LVL294:
1182:.\ff.c        **** 			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 1840              		.loc 1 1182 0
 1841 003e 316A     		ldr	r1, [r6, #32]
 1842 0040 3046     		mov	r0, r6
 1843 0042 01EB5721 		add	r1, r1, r7, lsr #9
 1844 0046 FFF7FEFF 		bl	move_window
 1845              	.LVL295:
 1846 004a 0028     		cmp	r0, #0
 1847 004c 37D1     		bne	.L166
1183:.\ff.c        **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 1848              		.loc 1 1183 0
 1849 004e C7F30807 		ubfx	r7, r7, #0, #9
 1850              	.LVL296:
 1851 0052 3E44     		add	r6, r6, r7
 1852              	.LVL297:
 1853 0054 96F83000 		ldrb	r0, [r6, #48]	@ zero_extendqisi2
 1854 0058 45EA0020 		orr	r0, r5, r0, lsl #8
 1855              	.LVL298:
1184:.\ff.c        **** 			break;
 1856              		.loc 1 1184 0
 1857 005c 14F0010F 		tst	r4, #1
 1858 0060 01D0     		beq	.L160
1184:.\ff.c        **** 			break;
 1859              		.loc 1 1184 0 is_stmt 0 discriminator 1
 1860 0062 0009     		lsrs	r0, r0, #4
 1861              	.LVL299:
 1862 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1863              	.LVL300:
 1864              	.L160:
1184:.\ff.c        **** 			break;
 1865              		.loc 1 1184 0 discriminator 2
 1866 0066 C0F30B00 		ubfx	r0, r0, #0, #12
 1867              	.LVL301:
1185:.\ff.c        **** 
 1868              		.loc 1 1185 0 is_stmt 1 discriminator 2
 1869 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1870              	.LVL302:
 1871              	.L157:
1188:.\ff.c        **** 			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 1872              		.loc 1 1188 0
 1873 006c 316A     		ldr	r1, [r6, #32]
 1874              	.LVL303:
 1875 006e 3046     		mov	r0, r6
 1876              	.LVL304:
 1877 0070 01EB1421 		add	r1, r1, r4, lsr #8
 1878 0074 FFF7FEFF 		bl	move_window
 1879              	.LVL305:
 1880 0078 20BB     		cbnz	r0, .L167
1189:.\ff.c        **** 			break;
 1881              		.loc 1 1189 0
 1882 007a 6000     		lsls	r0, r4, #1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 102


 1883 007c 00F4FF70 		and	r0, r0, #510
 1884 0080 3030     		adds	r0, r0, #48
 1885 0082 3044     		add	r0, r0, r6
 1886 0084 FFF7FEFF 		bl	ld_word
 1887              	.LVL306:
1190:.\ff.c        **** 
 1888              		.loc 1 1190 0
 1889 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1890              	.LVL307:
 1891              	.L158:
1193:.\ff.c        **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upp
 1892              		.loc 1 1193 0
 1893 008a 316A     		ldr	r1, [r6, #32]
 1894              	.LVL308:
 1895 008c 3046     		mov	r0, r6
 1896              	.LVL309:
 1897 008e 01EBD411 		add	r1, r1, r4, lsr #7
 1898 0092 FFF7FEFF 		bl	move_window
 1899              	.LVL310:
 1900 0096 C0B9     		cbnz	r0, .L168
1194:.\ff.c        **** 			break;
 1901              		.loc 1 1194 0
 1902 0098 A000     		lsls	r0, r4, #2
 1903 009a 00F4FE70 		and	r0, r0, #508
 1904 009e 3030     		adds	r0, r0, #48
 1905 00a0 3044     		add	r0, r0, r6
 1906 00a2 FFF7FEFF 		bl	ld_dword
 1907              	.LVL311:
 1908 00a6 20F07040 		bic	r0, r0, #-268435456
 1909              	.LVL312:
1195:.\ff.c        **** #if FF_FS_EXFAT
 1910              		.loc 1 1195 0
 1911 00aa F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1912              	.LVL313:
 1913              	.L162:
1172:.\ff.c        **** 
 1914              		.loc 1 1172 0
 1915 00ac 0120     		movs	r0, #1
 1916              	.LVL314:
 1917 00ae F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1918              	.LVL315:
 1919              	.L163:
 1920 00b0 0120     		movs	r0, #1
 1921              	.LVL316:
 1922 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1923              	.LVL317:
 1924              	.L169:
1224:.\ff.c        **** 		}
 1925              		.loc 1 1224 0
 1926 00b4 0120     		movs	r0, #1
 1927              	.LVL318:
 1928 00b6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1929              	.LVL319:
 1930              	.L165:
1175:.\ff.c        **** 
 1931              		.loc 1 1175 0
 1932 00b8 4FF0FF30 		mov	r0, #-1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 103


 1933 00bc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1934              	.LVL320:
 1935              	.L166:
 1936 00be 4FF0FF30 		mov	r0, #-1
 1937 00c2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1938              	.LVL321:
 1939              	.L167:
 1940 00c4 4FF0FF30 		mov	r0, #-1
 1941 00c8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1942              	.LVL322:
 1943              	.L168:
 1944 00ca 4FF0FF30 		mov	r0, #-1
 1945              	.LVL323:
1229:.\ff.c        **** 
 1946              		.loc 1 1229 0
 1947 00ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1948              		.cfi_endproc
 1949              	.LFE10:
 1950              		.size	get_fat, .-get_fat
 1951              		.section	.text.dir_sdi,"ax",%progbits
 1952              		.align	2
 1953              		.thumb
 1954              		.thumb_func
 1955              		.type	dir_sdi, %function
 1956              	dir_sdi:
 1957              	.LFB15:
1701:.\ff.c        **** 	DWORD csz, clst;
 1958              		.loc 1 1701 0
 1959              		.cfi_startproc
 1960              		@ args = 0, pretend = 0, frame = 0
 1961              		@ frame_needed = 0, uses_anonymous_args = 0
 1962              	.LVL324:
 1963 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1964              		.cfi_def_cfa_offset 24
 1965              		.cfi_offset 4, -24
 1966              		.cfi_offset 5, -20
 1967              		.cfi_offset 6, -16
 1968              		.cfi_offset 7, -12
 1969              		.cfi_offset 8, -8
 1970              		.cfi_offset 14, -4
 1971 0004 0646     		mov	r6, r0
 1972 0006 0C46     		mov	r4, r1
1703:.\ff.c        **** 
 1973              		.loc 1 1703 0
 1974 0008 0768     		ldr	r7, [r0]
 1975              	.LVL325:
1706:.\ff.c        **** 		return FR_INT_ERR;
 1976              		.loc 1 1706 0
 1977 000a B1F5001F 		cmp	r1, #2097152
 1978 000e 3AD2     		bcs	.L178
1706:.\ff.c        **** 		return FR_INT_ERR;
 1979              		.loc 1 1706 0 is_stmt 0 discriminator 1
 1980 0010 11F01F0F 		tst	r1, #31
 1981 0014 3AD1     		bne	.L179
1709:.\ff.c        **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 1982              		.loc 1 1709 0 is_stmt 1
 1983 0016 3161     		str	r1, [r6, #16]
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 104


1710:.\ff.c        **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 1984              		.loc 1 1710 0
 1985 0018 8568     		ldr	r5, [r0, #8]
 1986              	.LVL326:
1711:.\ff.c        **** 		clst = (DWORD)fs->dirbase;
 1987              		.loc 1 1711 0
 1988 001a 1DB9     		cbnz	r5, .L173
1711:.\ff.c        **** 		clst = (DWORD)fs->dirbase;
 1989              		.loc 1 1711 0 is_stmt 0 discriminator 1
 1990 001c 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 1991 001e 022B     		cmp	r3, #2
 1992 0020 00D9     		bls	.L173
1712:.\ff.c        **** 		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 1993              		.loc 1 1712 0 is_stmt 1
 1994 0022 7D6A     		ldr	r5, [r7, #36]
 1995              	.LVL327:
 1996              	.L173:
1716:.\ff.c        **** 		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 1997              		.loc 1 1716 0
 1998 0024 35B9     		cbnz	r5, .L174
1717:.\ff.c        **** 		dp->sect = fs->dirbase;
 1999              		.loc 1 1717 0
 2000 0026 3B89     		ldrh	r3, [r7, #8]
 2001 0028 B3EB541F 		cmp	r3, r4, lsr #5
 2002 002c 31D9     		bls	.L180
1718:.\ff.c        **** 
 2003              		.loc 1 1718 0
 2004 002e 7B6A     		ldr	r3, [r7, #36]
 2005 0030 B361     		str	r3, [r6, #24]
 2006 0032 1AE0     		b	.L175
 2007              	.L174:
1721:.\ff.c        **** 		while (ofs >= csz) {				/* Follow cluster chain */
 2008              		.loc 1 1721 0
 2009 0034 B7F80A80 		ldrh	r8, [r7, #10]
 2010 0038 4FEA4828 		lsl	r8, r8, #9
 2011              	.LVL328:
1722:.\ff.c        **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2012              		.loc 1 1722 0
 2013 003c 0EE0     		b	.L176
 2014              	.LVL329:
 2015              	.L177:
1723:.\ff.c        **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2016              		.loc 1 1723 0
 2017 003e 3046     		mov	r0, r6
 2018 0040 2946     		mov	r1, r5
 2019 0042 FFF7FEFF 		bl	get_fat
 2020              	.LVL330:
 2021 0046 0546     		mov	r5, r0
 2022              	.LVL331:
1724:.\ff.c        **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2023              		.loc 1 1724 0
 2024 0048 B0F1FF3F 		cmp	r0, #-1
 2025 004c 24D0     		beq	.L181
1725:.\ff.c        **** 			ofs -= csz;
 2026              		.loc 1 1725 0
 2027 004e 0128     		cmp	r0, #1
 2028 0050 25D9     		bls	.L182
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 105


1725:.\ff.c        **** 			ofs -= csz;
 2029              		.loc 1 1725 0 is_stmt 0 discriminator 2
 2030 0052 7B69     		ldr	r3, [r7, #20]
 2031 0054 8342     		cmp	r3, r0
 2032 0056 25D9     		bls	.L183
1726:.\ff.c        **** 		}
 2033              		.loc 1 1726 0 is_stmt 1
 2034 0058 C8EB0404 		rsb	r4, r8, r4
 2035              	.LVL332:
 2036              	.L176:
1722:.\ff.c        **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2037              		.loc 1 1722 0
 2038 005c 4445     		cmp	r4, r8
 2039 005e EED2     		bcs	.L177
1728:.\ff.c        **** 	}
 2040              		.loc 1 1728 0
 2041 0060 3846     		mov	r0, r7
 2042 0062 2946     		mov	r1, r5
 2043 0064 FFF7FEFF 		bl	clst2sect
 2044              	.LVL333:
 2045 0068 B061     		str	r0, [r6, #24]
 2046              	.LVL334:
 2047              	.L175:
1730:.\ff.c        **** 	if (dp->sect == 0) return FR_INT_ERR;
 2048              		.loc 1 1730 0
 2049 006a 7561     		str	r5, [r6, #20]
1731:.\ff.c        **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2050              		.loc 1 1731 0
 2051 006c B369     		ldr	r3, [r6, #24]
 2052 006e E3B1     		cbz	r3, .L184
1732:.\ff.c        **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 2053              		.loc 1 1732 0
 2054 0070 03EB5423 		add	r3, r3, r4, lsr #9
 2055 0074 B361     		str	r3, [r6, #24]
1733:.\ff.c        **** 
 2056              		.loc 1 1733 0
 2057 0076 C4F30803 		ubfx	r3, r4, #0, #9
 2058 007a 3033     		adds	r3, r3, #48
 2059 007c 3B44     		add	r3, r3, r7
 2060 007e F361     		str	r3, [r6, #28]
1735:.\ff.c        **** }
 2061              		.loc 1 1735 0
 2062 0080 0020     		movs	r0, #0
 2063 0082 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2064              	.LVL335:
 2065              	.L178:
1707:.\ff.c        **** 	}
 2066              		.loc 1 1707 0
 2067 0086 0220     		movs	r0, #2
 2068              	.LVL336:
 2069 0088 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2070              	.LVL337:
 2071              	.L179:
 2072 008c 0220     		movs	r0, #2
 2073              	.LVL338:
 2074 008e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2075              	.LVL339:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 106


 2076              	.L180:
1717:.\ff.c        **** 		dp->sect = fs->dirbase;
 2077              		.loc 1 1717 0
 2078 0092 0220     		movs	r0, #2
 2079              	.LVL340:
 2080 0094 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2081              	.LVL341:
 2082              	.L181:
1724:.\ff.c        **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2083              		.loc 1 1724 0
 2084 0098 0120     		movs	r0, #1
 2085              	.LVL342:
 2086 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2087              	.LVL343:
 2088              	.L182:
1725:.\ff.c        **** 			ofs -= csz;
 2089              		.loc 1 1725 0
 2090 009e 0220     		movs	r0, #2
 2091              	.LVL344:
 2092 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2093              	.LVL345:
 2094              	.L183:
 2095 00a4 0220     		movs	r0, #2
 2096              	.LVL346:
 2097 00a6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2098              	.LVL347:
 2099              	.L184:
1731:.\ff.c        **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2100              		.loc 1 1731 0
 2101 00aa 0220     		movs	r0, #2
1736:.\ff.c        **** 
 2102              		.loc 1 1736 0
 2103 00ac BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2104              		.cfi_endproc
 2105              	.LFE15:
 2106              		.size	dir_sdi, .-dir_sdi
 2107              		.section	.text.create_chain,"ax",%progbits
 2108              		.align	2
 2109              		.thumb
 2110              		.thumb_func
 2111              		.type	create_chain, %function
 2112              	create_chain:
 2113              	.LFB13:
1528:.\ff.c        **** 	DWORD cs, ncl, scl;
 2114              		.loc 1 1528 0
 2115              		.cfi_startproc
 2116              		@ args = 0, pretend = 0, frame = 0
 2117              		@ frame_needed = 0, uses_anonymous_args = 0
 2118              	.LVL348:
 2119 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2120              		.cfi_def_cfa_offset 24
 2121              		.cfi_offset 4, -24
 2122              		.cfi_offset 5, -20
 2123              		.cfi_offset 6, -16
 2124              		.cfi_offset 7, -12
 2125              		.cfi_offset 8, -8
 2126              		.cfi_offset 14, -4
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 107


 2127 0004 0746     		mov	r7, r0
1531:.\ff.c        **** 
 2128              		.loc 1 1531 0
 2129 0006 0668     		ldr	r6, [r0]
 2130              	.LVL349:
1534:.\ff.c        **** 		scl = fs->last_clst;				/* Suggested cluster to start to find */
 2131              		.loc 1 1534 0
 2132 0008 8846     		mov	r8, r1
 2133 000a 29B9     		cbnz	r1, .L187
1535:.\ff.c        **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 2134              		.loc 1 1535 0
 2135 000c F568     		ldr	r5, [r6, #12]
 2136              	.LVL350:
1536:.\ff.c        **** 	}
 2137              		.loc 1 1536 0
 2138 000e 7DB1     		cbz	r5, .L202
1536:.\ff.c        **** 	}
 2139              		.loc 1 1536 0 is_stmt 0 discriminator 2
 2140 0010 7369     		ldr	r3, [r6, #20]
 2141 0012 AB42     		cmp	r3, r5
 2142 0014 0ED9     		bls	.L203
 2143 0016 0EE0     		b	.L188
 2144              	.LVL351:
 2145              	.L187:
1539:.\ff.c        **** 		if (cs < 2) return 1;				/* Test for insanity */
 2146              		.loc 1 1539 0 is_stmt 1
 2147 0018 FFF7FEFF 		bl	get_fat
 2148              	.LVL352:
1540:.\ff.c        **** 		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 2149              		.loc 1 1540 0
 2150 001c 0128     		cmp	r0, #1
 2151 001e 6ED9     		bls	.L204
1541:.\ff.c        **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2152              		.loc 1 1541 0
 2153 0020 B0F1FF3F 		cmp	r0, #-1
 2154 0024 72D0     		beq	.L189
1542:.\ff.c        **** 		scl = clst;							/* Cluster to start to find */
 2155              		.loc 1 1542 0
 2156 0026 7369     		ldr	r3, [r6, #20]
 2157 0028 8342     		cmp	r3, r0
 2158 002a 6FD8     		bhi	.L189
1543:.\ff.c        **** 	}
 2159              		.loc 1 1543 0
 2160 002c 4546     		mov	r5, r8
 2161 002e 02E0     		b	.L188
 2162              	.LVL353:
 2163              	.L202:
1536:.\ff.c        **** 	}
 2164              		.loc 1 1536 0
 2165 0030 0125     		movs	r5, #1
 2166              	.LVL354:
 2167 0032 00E0     		b	.L188
 2168              	.LVL355:
 2169              	.L203:
 2170 0034 0125     		movs	r5, #1
 2171              	.LVL356:
 2172              	.L188:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 108


1545:.\ff.c        **** 
 2173              		.loc 1 1545 0
 2174 0036 3069     		ldr	r0, [r6, #16]
 2175 0038 0028     		cmp	r0, #0
 2176 003a 67D0     		beq	.L189
 2177              	.LVL357:
1575:.\ff.c        **** 			ncl = scl + 1;						/* Test if next cluster is free */
 2178              		.loc 1 1575 0
 2179 003c 4545     		cmp	r5, r8
 2180 003e 16D1     		bne	.L207
1576:.\ff.c        **** 			if (ncl >= fs->n_fatent) ncl = 2;
 2181              		.loc 1 1576 0
 2182 0040 6C1C     		adds	r4, r5, #1
 2183              	.LVL358:
1577:.\ff.c        **** 			cs = get_fat(obj, ncl);				/* Get next cluster status */
 2184              		.loc 1 1577 0
 2185 0042 7369     		ldr	r3, [r6, #20]
 2186 0044 A342     		cmp	r3, r4
 2187 0046 00D8     		bhi	.L191
 2188 0048 0224     		movs	r4, #2
 2189              	.LVL359:
 2190              	.L191:
1578:.\ff.c        **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 2191              		.loc 1 1578 0
 2192 004a 3846     		mov	r0, r7
 2193 004c 2146     		mov	r1, r4
 2194 004e FFF7FEFF 		bl	get_fat
 2195              	.LVL360:
1579:.\ff.c        **** 			if (cs != 0) {						/* Not free? */
 2196              		.loc 1 1579 0
 2197 0052 0128     		cmp	r0, #1
 2198 0054 5AD0     		beq	.L189
1579:.\ff.c        **** 			if (cs != 0) {						/* Not free? */
 2199              		.loc 1 1579 0 is_stmt 0 discriminator 2
 2200 0056 B0F1FF3F 		cmp	r0, #-1
 2201 005a 57D0     		beq	.L189
1580:.\ff.c        **** 				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 2202              		.loc 1 1580 0 is_stmt 1
 2203 005c 68B1     		cbz	r0, .L190
1581:.\ff.c        **** 				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 2204              		.loc 1 1581 0
 2205 005e F368     		ldr	r3, [r6, #12]
 2206              	.LVL361:
1582:.\ff.c        **** 				ncl = 0;
 2207              		.loc 1 1582 0
 2208 0060 012B     		cmp	r3, #1
 2209 0062 06D9     		bls	.L211
1582:.\ff.c        **** 				ncl = 0;
 2210              		.loc 1 1582 0 is_stmt 0 discriminator 1
 2211 0064 7269     		ldr	r2, [r6, #20]
 2212 0066 9A42     		cmp	r2, r3
 2213 0068 05D8     		bhi	.L212
1583:.\ff.c        **** 			}
 2214              		.loc 1 1583 0 is_stmt 1
 2215 006a 0024     		movs	r4, #0
 2216              	.LVL362:
 2217 006c 05E0     		b	.L190
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 109


 2218              	.LVL363:
 2219              	.L207:
1574:.\ff.c        **** 		if (scl == clst) {						/* Stretching an existing chain? */
 2220              		.loc 1 1574 0
 2221 006e 0024     		movs	r4, #0
 2222 0070 03E0     		b	.L190
 2223              	.LVL364:
 2224              	.L211:
1583:.\ff.c        **** 			}
 2225              		.loc 1 1583 0
 2226 0072 0024     		movs	r4, #0
 2227              	.LVL365:
 2228 0074 01E0     		b	.L190
 2229              	.LVL366:
 2230              	.L212:
1582:.\ff.c        **** 				ncl = 0;
 2231              		.loc 1 1582 0
 2232 0076 1D46     		mov	r5, r3
 2233              	.LVL367:
1583:.\ff.c        **** 			}
 2234              		.loc 1 1583 0
 2235 0078 0024     		movs	r4, #0
 2236              	.LVL368:
 2237              	.L190:
1586:.\ff.c        **** 			ncl = scl;	/* Start cluster */
 2238              		.loc 1 1586 0
 2239 007a C4B9     		cbnz	r4, .L192
 2240 007c 2C46     		mov	r4, r5
 2241              	.LVL369:
 2242              	.L196:
1589:.\ff.c        **** 				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 2243              		.loc 1 1589 0
 2244 007e 0134     		adds	r4, r4, #1
 2245              	.LVL370:
1590:.\ff.c        **** 					ncl = 2;
 2246              		.loc 1 1590 0
 2247 0080 7369     		ldr	r3, [r6, #20]
 2248 0082 A342     		cmp	r3, r4
 2249 0084 02D8     		bhi	.L193
 2250              	.LVL371:
1592:.\ff.c        **** 				}
 2251              		.loc 1 1592 0
 2252 0086 012D     		cmp	r5, #1
 2253 0088 3CD9     		bls	.L213
1591:.\ff.c        **** 					if (ncl > scl) return 0;	/* No free cluster found? */
 2254              		.loc 1 1591 0
 2255 008a 0224     		movs	r4, #2
 2256              	.LVL372:
 2257              	.L193:
1594:.\ff.c        **** 				if (cs == 0) break;				/* Found a free cluster? */
 2258              		.loc 1 1594 0
 2259 008c 3846     		mov	r0, r7
 2260 008e 2146     		mov	r1, r4
 2261 0090 FFF7FEFF 		bl	get_fat
 2262              	.LVL373:
1595:.\ff.c        **** 				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 2263              		.loc 1 1595 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 110


 2264 0094 0346     		mov	r3, r0
 2265 0096 50B1     		cbz	r0, .L192
1596:.\ff.c        **** 				if (ncl == scl) return 0;		/* No free cluster found? */
 2266              		.loc 1 1596 0
 2267 0098 0128     		cmp	r0, #1
 2268 009a 02D0     		beq	.L194
1596:.\ff.c        **** 				if (ncl == scl) return 0;		/* No free cluster found? */
 2269              		.loc 1 1596 0 is_stmt 0 discriminator 2
 2270 009c B0F1FF3F 		cmp	r0, #-1
 2271 00a0 02D1     		bne	.L195
 2272              	.L194:
1596:.\ff.c        **** 				if (ncl == scl) return 0;		/* No free cluster found? */
 2273              		.loc 1 1596 0 discriminator 3
 2274 00a2 1846     		mov	r0, r3
 2275              	.LVL374:
 2276 00a4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2277              	.LVL375:
 2278              	.L195:
1597:.\ff.c        **** 			}
 2279              		.loc 1 1597 0 is_stmt 1
 2280 00a8 AC42     		cmp	r4, r5
 2281 00aa E8D1     		bne	.L196
 2282 00ac 2DE0     		b	.L214
 2283              	.LVL376:
 2284              	.L192:
1600:.\ff.c        **** 		if (res == FR_OK && clst != 0) {
 2285              		.loc 1 1600 0
 2286 00ae 3046     		mov	r0, r6
 2287 00b0 2146     		mov	r1, r4
 2288 00b2 4FF0FF32 		mov	r2, #-1
 2289 00b6 FFF7FEFF 		bl	put_fat
 2290              	.LVL377:
1601:.\ff.c        **** 			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 2291              		.loc 1 1601 0
 2292 00ba 0346     		mov	r3, r0
 2293 00bc 40B9     		cbnz	r0, .L197
1601:.\ff.c        **** 			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 2294              		.loc 1 1601 0 is_stmt 0 discriminator 1
 2295 00be B8F1000F 		cmp	r8, #0
 2296 00c2 05D0     		beq	.L197
1602:.\ff.c        **** 		}
 2297              		.loc 1 1602 0 is_stmt 1
 2298 00c4 3046     		mov	r0, r6
 2299              	.LVL378:
 2300 00c6 4146     		mov	r1, r8
 2301 00c8 2246     		mov	r2, r4
 2302 00ca FFF7FEFF 		bl	put_fat
 2303              	.LVL379:
 2304 00ce 0346     		mov	r3, r0
 2305              	.LVL380:
 2306              	.L197:
1606:.\ff.c        **** 		fs->last_clst = ncl;
 2307              		.loc 1 1606 0
 2308 00d0 63B9     		cbnz	r3, .L198
1607:.\ff.c        **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 2309              		.loc 1 1607 0
 2310 00d2 F460     		str	r4, [r6, #12]
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 111


1608:.\ff.c        **** 		fs->fsi_flag |= 1;
 2311              		.loc 1 1608 0
 2312 00d4 3269     		ldr	r2, [r6, #16]
 2313 00d6 7369     		ldr	r3, [r6, #20]
 2314              	.LVL381:
 2315 00d8 023B     		subs	r3, r3, #2
 2316 00da 9A42     		cmp	r2, r3
 2317 00dc 01D8     		bhi	.L199
1608:.\ff.c        **** 		fs->fsi_flag |= 1;
 2318              		.loc 1 1608 0 is_stmt 0 discriminator 1
 2319 00de 013A     		subs	r2, r2, #1
 2320 00e0 3261     		str	r2, [r6, #16]
 2321              	.L199:
1609:.\ff.c        **** 	} else {
 2322              		.loc 1 1609 0 is_stmt 1
 2323 00e2 7379     		ldrb	r3, [r6, #5]	@ zero_extendqisi2
 2324 00e4 43F00103 		orr	r3, r3, #1
 2325 00e8 7371     		strb	r3, [r6, #5]
 2326 00ea 05E0     		b	.L200
 2327              	.LVL382:
 2328              	.L198:
1611:.\ff.c        **** 	}
 2329              		.loc 1 1611 0
 2330 00ec 012B     		cmp	r3, #1
 2331 00ee 02D1     		bne	.L215
 2332 00f0 4FF0FF34 		mov	r4, #-1
 2333              	.LVL383:
 2334 00f4 00E0     		b	.L200
 2335              	.LVL384:
 2336              	.L215:
 2337 00f6 0124     		movs	r4, #1
 2338              	.LVL385:
 2339              	.L200:
1614:.\ff.c        **** }
 2340              		.loc 1 1614 0
 2341 00f8 2046     		mov	r0, r4
 2342 00fa BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2343              	.LVL386:
 2344              	.L204:
1540:.\ff.c        **** 		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 2345              		.loc 1 1540 0
 2346 00fe 0120     		movs	r0, #1
 2347              	.LVL387:
 2348 0100 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2349              	.LVL388:
 2350              	.L213:
1592:.\ff.c        **** 				}
 2351              		.loc 1 1592 0
 2352 0104 0020     		movs	r0, #0
 2353 0106 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2354              	.LVL389:
 2355              	.L214:
1597:.\ff.c        **** 			}
 2356              		.loc 1 1597 0
 2357 010a 0020     		movs	r0, #0
 2358              	.LVL390:
 2359              	.L189:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 112


1615:.\ff.c        **** 
 2360              		.loc 1 1615 0
 2361 010c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2362              		.cfi_endproc
 2363              	.LFE13:
 2364              		.size	create_chain, .-create_chain
 2365              		.section	.text.remove_chain,"ax",%progbits
 2366              		.align	2
 2367              		.thumb
 2368              		.thumb_func
 2369              		.type	remove_chain, %function
 2370              	remove_chain:
 2371              	.LFB12:
1434:.\ff.c        **** 	FRESULT res = FR_OK;
 2372              		.loc 1 1434 0
 2373              		.cfi_startproc
 2374              		@ args = 0, pretend = 0, frame = 0
 2375              		@ frame_needed = 0, uses_anonymous_args = 0
 2376              	.LVL391:
 2377 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2378              		.cfi_def_cfa_offset 24
 2379              		.cfi_offset 3, -24
 2380              		.cfi_offset 4, -20
 2381              		.cfi_offset 5, -16
 2382              		.cfi_offset 6, -12
 2383              		.cfi_offset 7, -8
 2384              		.cfi_offset 14, -4
 2385 0002 0746     		mov	r7, r0
 2386 0004 0E46     		mov	r6, r1
 2387              	.LVL392:
1437:.\ff.c        **** #if FF_FS_EXFAT || FF_USE_TRIM
 2388              		.loc 1 1437 0
 2389 0006 0468     		ldr	r4, [r0]
 2390              	.LVL393:
1445:.\ff.c        **** 
 2391              		.loc 1 1445 0
 2392 0008 0129     		cmp	r1, #1
 2393 000a 2CD9     		bls	.L223
1445:.\ff.c        **** 
 2394              		.loc 1 1445 0 is_stmt 0 discriminator 2
 2395 000c 6369     		ldr	r3, [r4, #20]
 2396 000e 8B42     		cmp	r3, r1
 2397 0010 2BD9     		bls	.L224
1448:.\ff.c        **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
 2398              		.loc 1 1448 0 is_stmt 1
 2399 0012 32B1     		cbz	r2, .L222
1449:.\ff.c        **** 		if (res != FR_OK) return res;
 2400              		.loc 1 1449 0
 2401 0014 2046     		mov	r0, r4
 2402              	.LVL394:
 2403 0016 1146     		mov	r1, r2
 2404              	.LVL395:
 2405 0018 4FF0FF32 		mov	r2, #-1
 2406              	.LVL396:
 2407 001c FFF7FEFF 		bl	put_fat
 2408              	.LVL397:
1450:.\ff.c        **** 	}
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 113


 2409              		.loc 1 1450 0
 2410 0020 28BB     		cbnz	r0, .L225
 2411              	.LVL398:
 2412              	.L222:
1455:.\ff.c        **** 		if (nxt == 0) break;				/* Empty cluster? */
 2413              		.loc 1 1455 0
 2414 0022 3846     		mov	r0, r7
 2415 0024 3146     		mov	r1, r6
 2416 0026 FFF7FEFF 		bl	get_fat
 2417              	.LVL399:
1456:.\ff.c        **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 2418              		.loc 1 1456 0
 2419 002a 0546     		mov	r5, r0
 2420 002c 00B3     		cbz	r0, .L226
1457:.\ff.c        **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 2421              		.loc 1 1457 0
 2422 002e 0128     		cmp	r0, #1
 2423 0030 20D0     		beq	.L227
1458:.\ff.c        **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 2424              		.loc 1 1458 0
 2425 0032 B0F1FF3F 		cmp	r0, #-1
 2426 0036 1FD0     		beq	.L228
1460:.\ff.c        **** 			if (res != FR_OK) return res;
 2427              		.loc 1 1460 0
 2428 0038 2046     		mov	r0, r4
 2429              	.LVL400:
 2430 003a 3146     		mov	r1, r6
 2431 003c 0022     		movs	r2, #0
 2432 003e FFF7FEFF 		bl	put_fat
 2433              	.LVL401:
1461:.\ff.c        **** 		}
 2434              		.loc 1 1461 0
 2435 0042 00B1     		cbz	r0, .L220
1461:.\ff.c        **** 		}
 2436              		.loc 1 1461 0 is_stmt 0 discriminator 1
 2437 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2438              	.LVL402:
 2439              	.L220:
1463:.\ff.c        **** 			fs->free_clst++;
 2440              		.loc 1 1463 0 is_stmt 1
 2441 0046 2369     		ldr	r3, [r4, #16]
 2442 0048 6269     		ldr	r2, [r4, #20]
 2443 004a 911E     		subs	r1, r2, #2
 2444 004c 8B42     		cmp	r3, r1
 2445 004e 05D2     		bcs	.L221
1464:.\ff.c        **** 			fs->fsi_flag |= 1;
 2446              		.loc 1 1464 0
 2447 0050 0133     		adds	r3, r3, #1
 2448 0052 2361     		str	r3, [r4, #16]
1465:.\ff.c        **** 		}
 2449              		.loc 1 1465 0
 2450 0054 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 2451 0056 43F00103 		orr	r3, r3, #1
 2452 005a 6371     		strb	r3, [r4, #5]
 2453              	.L221:
 2454              	.LVL403:
1485:.\ff.c        **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 114


 2455              		.loc 1 1485 0
 2456 005c 2E46     		mov	r6, r5
1486:.\ff.c        **** 
 2457              		.loc 1 1486 0
 2458 005e 9542     		cmp	r5, r2
 2459 0060 DFD3     		bcc	.L222
1514:.\ff.c        **** }
 2460              		.loc 1 1514 0
 2461 0062 0020     		movs	r0, #0
 2462              	.LVL404:
 2463 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2464              	.LVL405:
 2465              	.L223:
1445:.\ff.c        **** 
 2466              		.loc 1 1445 0
 2467 0066 0220     		movs	r0, #2
 2468              	.LVL406:
 2469 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2470              	.LVL407:
 2471              	.L224:
 2472 006a 0220     		movs	r0, #2
 2473              	.LVL408:
 2474 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2475              	.LVL409:
 2476              	.L225:
 2477 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2478              	.LVL410:
 2479              	.L226:
1514:.\ff.c        **** }
 2480              		.loc 1 1514 0
 2481 0070 0020     		movs	r0, #0
 2482              	.LVL411:
 2483 0072 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2484              	.LVL412:
 2485              	.L227:
1457:.\ff.c        **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 2486              		.loc 1 1457 0
 2487 0074 0220     		movs	r0, #2
 2488              	.LVL413:
 2489 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2490              	.LVL414:
 2491              	.L228:
1458:.\ff.c        **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 2492              		.loc 1 1458 0
 2493 0078 0120     		movs	r0, #1
 2494              	.LVL415:
1515:.\ff.c        **** 
 2495              		.loc 1 1515 0
 2496 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2497              		.cfi_endproc
 2498              	.LFE12:
 2499              		.size	remove_chain, .-remove_chain
 2500              		.section	.text.dir_remove,"ax",%progbits
 2501              		.align	2
 2502              		.thumb
 2503              		.thumb_func
 2504              		.type	dir_remove, %function
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 115


 2505              	dir_remove:
 2506              	.LFB23:
2574:.\ff.c        **** 	FRESULT res;
 2507              		.loc 1 2574 0
 2508              		.cfi_startproc
 2509              		@ args = 0, pretend = 0, frame = 0
 2510              		@ frame_needed = 0, uses_anonymous_args = 0
 2511              	.LVL416:
 2512 0000 38B5     		push	{r3, r4, r5, lr}
 2513              		.cfi_def_cfa_offset 16
 2514              		.cfi_offset 3, -16
 2515              		.cfi_offset 4, -12
 2516              		.cfi_offset 5, -8
 2517              		.cfi_offset 14, -4
 2518 0002 0446     		mov	r4, r0
2576:.\ff.c        **** #if FF_USE_LFN		/* LFN configuration */
 2519              		.loc 1 2576 0
 2520 0004 0568     		ldr	r5, [r0]
 2521              	.LVL417:
2598:.\ff.c        **** 	if (res == FR_OK) {
 2522              		.loc 1 2598 0
 2523 0006 2846     		mov	r0, r5
 2524              	.LVL418:
 2525 0008 A169     		ldr	r1, [r4, #24]
 2526 000a FFF7FEFF 		bl	move_window
 2527              	.LVL419:
2599:.\ff.c        **** 		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 2528              		.loc 1 2599 0
 2529 000e 0346     		mov	r3, r0
 2530 0010 20B9     		cbnz	r0, .L231
2600:.\ff.c        **** 		fs->wflag = 1;
 2531              		.loc 1 2600 0
 2532 0012 E269     		ldr	r2, [r4, #28]
 2533 0014 E521     		movs	r1, #229
 2534 0016 1170     		strb	r1, [r2]
2601:.\ff.c        **** 	}
 2535              		.loc 1 2601 0
 2536 0018 0122     		movs	r2, #1
 2537 001a 2A71     		strb	r2, [r5, #4]
 2538              	.L231:
2606:.\ff.c        **** 
 2539              		.loc 1 2606 0
 2540 001c 1846     		mov	r0, r3
 2541              	.LVL420:
 2542 001e 38BD     		pop	{r3, r4, r5, pc}
 2543              		.cfi_endproc
 2544              	.LFE23:
 2545              		.size	dir_remove, .-dir_remove
 2546              		.section	.text.dir_clear,"ax",%progbits
 2547              		.align	2
 2548              		.thumb
 2549              		.thumb_func
 2550              		.type	dir_clear, %function
 2551              	dir_clear:
 2552              	.LFB14:
1662:.\ff.c        **** 	LBA_t sect;
 2553              		.loc 1 1662 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 116


 2554              		.cfi_startproc
 2555              		@ args = 0, pretend = 0, frame = 0
 2556              		@ frame_needed = 0, uses_anonymous_args = 0
 2557              	.LVL421:
 2558 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2559              		.cfi_def_cfa_offset 24
 2560              		.cfi_offset 3, -24
 2561              		.cfi_offset 4, -20
 2562              		.cfi_offset 5, -16
 2563              		.cfi_offset 6, -12
 2564              		.cfi_offset 7, -8
 2565              		.cfi_offset 14, -4
 2566 0002 0546     		mov	r5, r0
 2567 0004 0C46     		mov	r4, r1
1668:.\ff.c        **** 	sect = clst2sect(fs, clst);		/* Top of the cluster */
 2568              		.loc 1 1668 0
 2569 0006 FFF7FEFF 		bl	sync_window
 2570              	.LVL422:
 2571 000a 00BB     		cbnz	r0, .L238
1669:.\ff.c        **** 	fs->winsect = sect;				/* Set window to top of the cluster */
 2572              		.loc 1 1669 0
 2573 000c 2846     		mov	r0, r5
 2574 000e 2146     		mov	r1, r4
 2575 0010 FFF7FEFF 		bl	clst2sect
 2576              	.LVL423:
 2577 0014 0746     		mov	r7, r0
 2578              	.LVL424:
1670:.\ff.c        **** 	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 2579              		.loc 1 1670 0
 2580 0016 E862     		str	r0, [r5, #44]
1671:.\ff.c        **** #if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
 2581              		.loc 1 1671 0
 2582 0018 05F13006 		add	r6, r5, #48
 2583 001c 3046     		mov	r0, r6
 2584              	.LVL425:
 2585 001e 0021     		movs	r1, #0
 2586 0020 4FF40072 		mov	r2, #512
 2587 0024 FFF7FEFF 		bl	memset
 2588              	.LVL426:
1684:.\ff.c        **** 	}
 2589              		.loc 1 1684 0
 2590 0028 0024     		movs	r4, #0
 2591              	.LVL427:
 2592 002a 00E0     		b	.L235
 2593              	.LVL428:
 2594              	.L237:
1684:.\ff.c        **** 	}
 2595              		.loc 1 1684 0 is_stmt 0 discriminator 4
 2596 002c 0134     		adds	r4, r4, #1
 2597              	.LVL429:
 2598              	.L235:
1684:.\ff.c        **** 	}
 2599              		.loc 1 1684 0 discriminator 1
 2600 002e 6B89     		ldrh	r3, [r5, #10]
 2601 0030 A342     		cmp	r3, r4
 2602 0032 07D9     		bls	.L236
1684:.\ff.c        **** 	}
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 117


 2603              		.loc 1 1684 0 discriminator 3
 2604 0034 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2605 0036 3146     		mov	r1, r6
 2606 0038 3A19     		adds	r2, r7, r4
 2607 003a 0123     		movs	r3, #1
 2608 003c FFF7FEFF 		bl	disk_write
 2609              	.LVL430:
 2610 0040 0028     		cmp	r0, #0
 2611 0042 F3D0     		beq	.L237
 2612              	.L236:
1686:.\ff.c        **** }
 2613              		.loc 1 1686 0 is_stmt 1
 2614 0044 6889     		ldrh	r0, [r5, #10]
 2615 0046 001B     		subs	r0, r0, r4
 2616 0048 18BF     		it	ne
 2617 004a 0120     		movne	r0, #1
 2618 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2619              	.LVL431:
 2620              	.L238:
1668:.\ff.c        **** 	sect = clst2sect(fs, clst);		/* Top of the cluster */
 2621              		.loc 1 1668 0
 2622 004e 0120     		movs	r0, #1
1687:.\ff.c        **** #endif	/* !FF_FS_READONLY */
 2623              		.loc 1 1687 0
 2624 0050 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2625              		.cfi_endproc
 2626              	.LFE14:
 2627              		.size	dir_clear, .-dir_clear
 2628 0052 00BF     		.section	.text.dir_next,"ax",%progbits
 2629              		.align	2
 2630              		.thumb
 2631              		.thumb_func
 2632              		.type	dir_next, %function
 2633              	dir_next:
 2634              	.LFB16:
1749:.\ff.c        **** 	DWORD ofs, clst;
 2635              		.loc 1 1749 0
 2636              		.cfi_startproc
 2637              		@ args = 0, pretend = 0, frame = 0
 2638              		@ frame_needed = 0, uses_anonymous_args = 0
 2639              	.LVL432:
 2640 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2641              		.cfi_def_cfa_offset 32
 2642              		.cfi_offset 3, -32
 2643              		.cfi_offset 4, -28
 2644              		.cfi_offset 5, -24
 2645              		.cfi_offset 6, -20
 2646              		.cfi_offset 7, -16
 2647              		.cfi_offset 8, -12
 2648              		.cfi_offset 9, -8
 2649              		.cfi_offset 14, -4
1751:.\ff.c        **** 
 2650              		.loc 1 1751 0
 2651 0004 0768     		ldr	r7, [r0]
 2652              	.LVL433:
1754:.\ff.c        **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;
 2653              		.loc 1 1754 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 118


 2654 0006 0569     		ldr	r5, [r0, #16]
 2655 0008 2035     		adds	r5, r5, #32
 2656              	.LVL434:
1755:.\ff.c        **** 	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 2657              		.loc 1 1755 0
 2658 000a B5F5001F 		cmp	r5, #2097152
 2659 000e 01D3     		bcc	.L241
1755:.\ff.c        **** 	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 2660              		.loc 1 1755 0 is_stmt 0 discriminator 1
 2661 0010 0023     		movs	r3, #0
 2662 0012 8361     		str	r3, [r0, #24]
 2663              	.L241:
1756:.\ff.c        **** 
 2664              		.loc 1 1756 0 is_stmt 1
 2665 0014 8369     		ldr	r3, [r0, #24]
 2666 0016 002B     		cmp	r3, #0
 2667 0018 48D0     		beq	.L247
 2668 001a 8846     		mov	r8, r1
 2669 001c 0446     		mov	r4, r0
1758:.\ff.c        **** 		dp->sect++;				/* Next sector */
 2670              		.loc 1 1758 0
 2671 001e C5F30806 		ubfx	r6, r5, #0, #9
 2672 0022 002E     		cmp	r6, #0
 2673 0024 3BD1     		bne	.L243
1759:.\ff.c        **** 
 2674              		.loc 1 1759 0
 2675 0026 0133     		adds	r3, r3, #1
 2676 0028 8361     		str	r3, [r0, #24]
1761:.\ff.c        **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 2677              		.loc 1 1761 0
 2678 002a 4169     		ldr	r1, [r0, #20]
 2679              	.LVL435:
 2680 002c 41B9     		cbnz	r1, .L244
1762:.\ff.c        **** 				dp->sect = 0; return FR_NO_FILE;
 2681              		.loc 1 1762 0
 2682 002e 3B89     		ldrh	r3, [r7, #8]
 2683 0030 B3EB551F 		cmp	r3, r5, lsr #5
 2684 0034 33D8     		bhi	.L243
1763:.\ff.c        **** 			}
 2685              		.loc 1 1763 0
 2686 0036 0023     		movs	r3, #0
 2687 0038 8361     		str	r3, [r0, #24]
 2688 003a 0420     		movs	r0, #4
 2689              	.LVL436:
 2690 003c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2691              	.LVL437:
 2692              	.L244:
1767:.\ff.c        **** 				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 2693              		.loc 1 1767 0
 2694 0040 7B89     		ldrh	r3, [r7, #10]
 2695 0042 013B     		subs	r3, r3, #1
 2696 0044 13EA5523 		ands	r3, r3, r5, lsr #9
 2697 0048 29D1     		bne	.L243
1768:.\ff.c        **** 				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 2698              		.loc 1 1768 0
 2699 004a FFF7FEFF 		bl	get_fat
 2700              	.LVL438:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 119


 2701 004e 8146     		mov	r9, r0
 2702              	.LVL439:
1769:.\ff.c        **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2703              		.loc 1 1769 0
 2704 0050 0128     		cmp	r0, #1
 2705 0052 2ED9     		bls	.L248
1770:.\ff.c        **** 				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 2706              		.loc 1 1770 0
 2707 0054 B0F1FF3F 		cmp	r0, #-1
 2708 0058 2ED0     		beq	.L249
1771:.\ff.c        **** #if !FF_FS_READONLY
 2709              		.loc 1 1771 0
 2710 005a 7B69     		ldr	r3, [r7, #20]
 2711 005c 8342     		cmp	r3, r0
 2712 005e 17D8     		bhi	.L245
1773:.\ff.c        **** 						dp->sect = 0; return FR_NO_FILE;
 2713              		.loc 1 1773 0
 2714 0060 B8F1000F 		cmp	r8, #0
 2715 0064 04D1     		bne	.L246
1774:.\ff.c        **** 					}
 2716              		.loc 1 1774 0
 2717 0066 0023     		movs	r3, #0
 2718 0068 A361     		str	r3, [r4, #24]
 2719 006a 0420     		movs	r0, #4
 2720              	.LVL440:
 2721 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2722              	.LVL441:
 2723              	.L246:
1776:.\ff.c        **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 2724              		.loc 1 1776 0
 2725 0070 2046     		mov	r0, r4
 2726              	.LVL442:
 2727 0072 6169     		ldr	r1, [r4, #20]
 2728 0074 FFF7FEFF 		bl	create_chain
 2729              	.LVL443:
1777:.\ff.c        **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 2730              		.loc 1 1777 0
 2731 0078 8146     		mov	r9, r0
 2732 007a 00B3     		cbz	r0, .L250
1778:.\ff.c        **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2733              		.loc 1 1778 0
 2734 007c 0128     		cmp	r0, #1
 2735 007e 21D0     		beq	.L251
1779:.\ff.c        **** 					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 2736              		.loc 1 1779 0
 2737 0080 B0F1FF3F 		cmp	r0, #-1
 2738 0084 21D0     		beq	.L252
1780:.\ff.c        **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 2739              		.loc 1 1780 0
 2740 0086 3846     		mov	r0, r7
 2741              	.LVL444:
 2742 0088 4946     		mov	r1, r9
 2743 008a FFF7FEFF 		bl	dir_clear
 2744              	.LVL445:
 2745 008e F8B9     		cbnz	r0, .L253
 2746              	.L245:
1787:.\ff.c        **** 				dp->sect = clst2sect(fs, clst);
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 120


 2747              		.loc 1 1787 0
 2748 0090 C4F81490 		str	r9, [r4, #20]
1788:.\ff.c        **** 			}
 2749              		.loc 1 1788 0
 2750 0094 3846     		mov	r0, r7
 2751 0096 4946     		mov	r1, r9
 2752 0098 FFF7FEFF 		bl	clst2sect
 2753              	.LVL446:
 2754 009c A061     		str	r0, [r4, #24]
 2755              	.LVL447:
 2756              	.L243:
1792:.\ff.c        **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 2757              		.loc 1 1792 0
 2758 009e 2561     		str	r5, [r4, #16]
1793:.\ff.c        **** 
 2759              		.loc 1 1793 0
 2760 00a0 3036     		adds	r6, r6, #48
 2761 00a2 3E44     		add	r6, r6, r7
 2762 00a4 E661     		str	r6, [r4, #28]
1795:.\ff.c        **** }
 2763              		.loc 1 1795 0
 2764 00a6 0020     		movs	r0, #0
 2765 00a8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2766              	.LVL448:
 2767              	.L247:
1756:.\ff.c        **** 
 2768              		.loc 1 1756 0
 2769 00ac 0420     		movs	r0, #4
 2770              	.LVL449:
 2771 00ae BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2772              	.LVL450:
 2773              	.L248:
1769:.\ff.c        **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2774              		.loc 1 1769 0
 2775 00b2 0220     		movs	r0, #2
 2776              	.LVL451:
 2777 00b4 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2778              	.LVL452:
 2779              	.L249:
1770:.\ff.c        **** 				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 2780              		.loc 1 1770 0
 2781 00b8 0120     		movs	r0, #1
 2782              	.LVL453:
 2783 00ba BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2784              	.LVL454:
 2785              	.L250:
1777:.\ff.c        **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 2786              		.loc 1 1777 0
 2787 00be 0720     		movs	r0, #7
 2788              	.LVL455:
 2789 00c0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2790              	.LVL456:
 2791              	.L251:
1778:.\ff.c        **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2792              		.loc 1 1778 0
 2793 00c4 0220     		movs	r0, #2
 2794              	.LVL457:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 121


 2795 00c6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2796              	.LVL458:
 2797              	.L252:
1779:.\ff.c        **** 					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 2798              		.loc 1 1779 0
 2799 00ca 0120     		movs	r0, #1
 2800              	.LVL459:
 2801 00cc BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2802              	.LVL460:
 2803              	.L253:
1780:.\ff.c        **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 2804              		.loc 1 1780 0
 2805 00d0 0120     		movs	r0, #1
1796:.\ff.c        **** 
 2806              		.loc 1 1796 0
 2807 00d2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2808              		.cfi_endproc
 2809              	.LFE16:
 2810              		.size	dir_next, .-dir_next
 2811 00d6 00BF     		.section	.text.dir_find,"ax",%progbits
 2812              		.align	2
 2813              		.thumb
 2814              		.thumb_func
 2815              		.type	dir_find, %function
 2816              	dir_find:
 2817              	.LFB21:
2387:.\ff.c        **** 	FRESULT res;
 2818              		.loc 1 2387 0
 2819              		.cfi_startproc
 2820              		@ args = 0, pretend = 0, frame = 0
 2821              		@ frame_needed = 0, uses_anonymous_args = 0
 2822              	.LVL461:
 2823 0000 70B5     		push	{r4, r5, r6, lr}
 2824              		.cfi_def_cfa_offset 16
 2825              		.cfi_offset 4, -16
 2826              		.cfi_offset 5, -12
 2827              		.cfi_offset 6, -8
 2828              		.cfi_offset 14, -4
 2829 0002 0446     		mov	r4, r0
2389:.\ff.c        **** 	BYTE c;
 2830              		.loc 1 2389 0
 2831 0004 0668     		ldr	r6, [r0]
 2832              	.LVL462:
2395:.\ff.c        **** 	if (res != FR_OK) return res;
 2833              		.loc 1 2395 0
 2834 0006 0021     		movs	r1, #0
 2835 0008 FFF7FEFF 		bl	dir_sdi
 2836              	.LVL463:
2396:.\ff.c        **** #if FF_FS_EXFAT
 2837              		.loc 1 2396 0
 2838 000c 08BB     		cbnz	r0, .L260
 2839              	.L259:
2422:.\ff.c        **** 		if (res != FR_OK) break;
 2840              		.loc 1 2422 0
 2841 000e 3046     		mov	r0, r6
 2842              	.LVL464:
 2843 0010 A169     		ldr	r1, [r4, #24]
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 122


 2844 0012 FFF7FEFF 		bl	move_window
 2845              	.LVL465:
2423:.\ff.c        **** 		c = dp->dir[DIR_Name];
 2846              		.loc 1 2423 0
 2847 0016 0546     		mov	r5, r0
 2848 0018 C8B9     		cbnz	r0, .L257
2424:.\ff.c        **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2849              		.loc 1 2424 0
 2850 001a E069     		ldr	r0, [r4, #28]
 2851              	.LVL466:
 2852 001c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2853              	.LVL467:
2425:.\ff.c        **** #if FF_USE_LFN		/* LFN configuration */
 2854              		.loc 1 2425 0
 2855 001e ABB1     		cbz	r3, .L261
2448:.\ff.c        **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry?
 2856              		.loc 1 2448 0
 2857 0020 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 2858              	.LVL468:
 2859 0022 03F03F03 		and	r3, r3, #63
 2860 0026 A371     		strb	r3, [r4, #6]
 2861              	.LVL469:
2449:.\ff.c        **** #endif
 2862              		.loc 1 2449 0
 2863 0028 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 2864 002a 13F0080F 		tst	r3, #8
 2865 002e 05D1     		bne	.L258
2449:.\ff.c        **** #endif
 2866              		.loc 1 2449 0 is_stmt 0 discriminator 1
 2867 0030 04F12001 		add	r1, r4, #32
 2868 0034 0B22     		movs	r2, #11
 2869 0036 FFF7FEFF 		bl	memcmp
 2870              	.LVL470:
 2871 003a 40B1     		cbz	r0, .L257
 2872              	.L258:
2451:.\ff.c        **** 	} while (res == FR_OK);
 2873              		.loc 1 2451 0 is_stmt 1
 2874 003c 2046     		mov	r0, r4
 2875 003e 0021     		movs	r1, #0
 2876 0040 FFF7FEFF 		bl	dir_next
 2877              	.LVL471:
2452:.\ff.c        **** 
 2878              		.loc 1 2452 0
 2879 0044 0546     		mov	r5, r0
 2880 0046 0028     		cmp	r0, #0
 2881 0048 E1D0     		beq	.L259
 2882 004a 00E0     		b	.L257
 2883              	.LVL472:
 2884              	.L261:
2425:.\ff.c        **** #if FF_USE_LFN		/* LFN configuration */
 2885              		.loc 1 2425 0
 2886 004c 0425     		movs	r5, #4
 2887              	.LVL473:
 2888              	.L257:
2454:.\ff.c        **** }
 2889              		.loc 1 2454 0
 2890 004e 2846     		mov	r0, r5
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 123


 2891 0050 70BD     		pop	{r4, r5, r6, pc}
 2892              	.LVL474:
 2893              	.L260:
2455:.\ff.c        **** 
 2894              		.loc 1 2455 0
 2895 0052 70BD     		pop	{r4, r5, r6, pc}
 2896              		.cfi_endproc
 2897              	.LFE21:
 2898              		.size	dir_find, .-dir_find
 2899              		.section	.text.dir_alloc,"ax",%progbits
 2900              		.align	2
 2901              		.thumb
 2902              		.thumb_func
 2903              		.type	dir_alloc, %function
 2904              	dir_alloc:
 2905              	.LFB17:
1810:.\ff.c        **** 	FRESULT res;
 2906              		.loc 1 1810 0
 2907              		.cfi_startproc
 2908              		@ args = 0, pretend = 0, frame = 0
 2909              		@ frame_needed = 0, uses_anonymous_args = 0
 2910              	.LVL475:
 2911 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2912              		.cfi_def_cfa_offset 24
 2913              		.cfi_offset 3, -24
 2914              		.cfi_offset 4, -20
 2915              		.cfi_offset 5, -16
 2916              		.cfi_offset 6, -12
 2917              		.cfi_offset 7, -8
 2918              		.cfi_offset 14, -4
 2919 0002 0446     		mov	r4, r0
 2920 0004 0F46     		mov	r7, r1
1813:.\ff.c        **** 
 2921              		.loc 1 1813 0
 2922 0006 0668     		ldr	r6, [r0]
 2923              	.LVL476:
1816:.\ff.c        **** 	if (res == FR_OK) {
 2924              		.loc 1 1816 0
 2925 0008 0021     		movs	r1, #0
 2926              	.LVL477:
 2927 000a FFF7FEFF 		bl	dir_sdi
 2928              	.LVL478:
1817:.\ff.c        **** 		n = 0;
 2929              		.loc 1 1817 0
 2930 000e 0246     		mov	r2, r0
 2931 0010 B8B9     		cbnz	r0, .L264
 2932 0012 0025     		movs	r5, #0
 2933              	.L267:
 2934              	.LVL479:
1820:.\ff.c        **** 			if (res != FR_OK) break;
 2935              		.loc 1 1820 0
 2936 0014 3046     		mov	r0, r6
 2937              	.LVL480:
 2938 0016 A169     		ldr	r1, [r4, #24]
 2939 0018 FFF7FEFF 		bl	move_window
 2940              	.LVL481:
1821:.\ff.c        **** #if FF_FS_EXFAT
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 124


 2941              		.loc 1 1821 0
 2942 001c 0246     		mov	r2, r0
 2943 001e 80B9     		cbnz	r0, .L264
1825:.\ff.c        **** #endif
 2944              		.loc 1 1825 0
 2945 0020 E369     		ldr	r3, [r4, #28]
 2946 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2947 0024 E52B     		cmp	r3, #229
 2948 0026 00D0     		beq	.L265
1825:.\ff.c        **** #endif
 2949              		.loc 1 1825 0 is_stmt 0 discriminator 1
 2950 0028 1BB9     		cbnz	r3, .L269
 2951              	.L265:
1827:.\ff.c        **** 			} else {
 2952              		.loc 1 1827 0 is_stmt 1
 2953 002a 0135     		adds	r5, r5, #1
 2954              	.LVL482:
 2955 002c BD42     		cmp	r5, r7
 2956 002e 01D1     		bne	.L266
 2957 0030 07E0     		b	.L264
 2958              	.L269:
1829:.\ff.c        **** 			}
 2959              		.loc 1 1829 0
 2960 0032 0025     		movs	r5, #0
 2961              	.LVL483:
 2962              	.L266:
1831:.\ff.c        **** 		} while (res == FR_OK);
 2963              		.loc 1 1831 0
 2964 0034 2046     		mov	r0, r4
 2965              	.LVL484:
 2966 0036 0121     		movs	r1, #1
 2967 0038 FFF7FEFF 		bl	dir_next
 2968              	.LVL485:
1832:.\ff.c        **** 	}
 2969              		.loc 1 1832 0
 2970 003c 0246     		mov	r2, r0
 2971 003e 0028     		cmp	r0, #0
 2972 0040 E8D0     		beq	.L267
 2973              	.LVL486:
 2974              	.L264:
1835:.\ff.c        **** 	return res;
 2975              		.loc 1 1835 0
 2976 0042 042A     		cmp	r2, #4
 2977 0044 00D1     		bne	.L268
 2978 0046 0722     		movs	r2, #7
 2979              	.LVL487:
 2980              	.L268:
1837:.\ff.c        **** 
 2981              		.loc 1 1837 0
 2982 0048 1046     		mov	r0, r2
 2983 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2984              		.cfi_endproc
 2985              	.LFE17:
 2986              		.size	dir_alloc, .-dir_alloc
 2987              		.section	.text.dir_read,"ax",%progbits
 2988              		.align	2
 2989              		.thumb
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 125


 2990              		.thumb_func
 2991              		.type	dir_read, %function
 2992              	dir_read:
 2993              	.LFB20:
2310:.\ff.c        **** 	FRESULT res = FR_NO_FILE;
 2994              		.loc 1 2310 0
 2995              		.cfi_startproc
 2996              		@ args = 0, pretend = 0, frame = 0
 2997              		@ frame_needed = 0, uses_anonymous_args = 0
 2998              	.LVL488:
 2999 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3000              		.cfi_def_cfa_offset 24
 3001              		.cfi_offset 3, -24
 3002              		.cfi_offset 4, -20
 3003              		.cfi_offset 5, -16
 3004              		.cfi_offset 6, -12
 3005              		.cfi_offset 7, -8
 3006              		.cfi_offset 14, -4
 3007 0002 0446     		mov	r4, r0
 3008 0004 0E46     		mov	r6, r1
 3009              	.LVL489:
2312:.\ff.c        **** 	BYTE attr, b;
 3010              		.loc 1 2312 0
 3011 0006 0568     		ldr	r5, [r0]
 3012              	.LVL490:
2311:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
 3013              		.loc 1 2311 0
 3014 0008 0427     		movs	r7, #4
2318:.\ff.c        **** 		res = move_window(fs, dp->sect);
 3015              		.loc 1 2318 0
 3016 000a 1FE0     		b	.L273
 3017              	.LVL491:
 3018              	.L276:
2319:.\ff.c        **** 		if (res != FR_OK) break;
 3019              		.loc 1 2319 0
 3020 000c 2846     		mov	r0, r5
 3021 000e FFF7FEFF 		bl	move_window
 3022              	.LVL492:
2320:.\ff.c        **** 		b = dp->dir[DIR_Name];	/* Test for the entry type */
 3023              		.loc 1 2320 0
 3024 0012 0746     		mov	r7, r0
 3025 0014 F8B9     		cbnz	r0, .L274
2321:.\ff.c        **** 		if (b == 0) {
 3026              		.loc 1 2321 0
 3027 0016 E369     		ldr	r3, [r4, #28]
 3028 0018 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3029              	.LVL493:
2322:.\ff.c        **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
 3030              		.loc 1 2322 0
 3031 001a DAB1     		cbz	r2, .L278
2342:.\ff.c        **** #if FF_USE_LFN		/* LFN configuration */
 3032              		.loc 1 2342 0
 3033 001c DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 3034 001e 03F03F03 		and	r3, r3, #63
 3035              	.LVL494:
 3036 0022 A371     		strb	r3, [r4, #6]
2363:.\ff.c        **** 				break;
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 126


 3037              		.loc 1 2363 0
 3038 0024 E52A     		cmp	r2, #229
 3039 0026 0BD0     		beq	.L275
2363:.\ff.c        **** 				break;
 3040              		.loc 1 2363 0 is_stmt 0 discriminator 1
 3041 0028 2E2A     		cmp	r2, #46
 3042 002a 09D0     		beq	.L275
2363:.\ff.c        **** 				break;
 3043              		.loc 1 2363 0 discriminator 2
 3044 002c 0F2B     		cmp	r3, #15
 3045 002e 07D0     		beq	.L275
2363:.\ff.c        **** 				break;
 3046              		.loc 1 2363 0 discriminator 3
 3047 0030 23F02003 		bic	r3, r3, #32
 3048              	.LVL495:
 3049 0034 082B     		cmp	r3, #8
 3050 0036 14BF     		ite	ne
 3051 0038 0023     		movne	r3, #0
 3052 003a 0123     		moveq	r3, #1
 3053 003c B342     		cmp	r3, r6
 3054 003e 0AD0     		beq	.L274
 3055              	.L275:
2368:.\ff.c        **** 		if (res != FR_OK) break;
 3056              		.loc 1 2368 0 is_stmt 1
 3057 0040 2046     		mov	r0, r4
 3058              	.LVL496:
 3059 0042 0021     		movs	r1, #0
 3060 0044 FFF7FEFF 		bl	dir_next
 3061              	.LVL497:
2369:.\ff.c        **** 	}
 3062              		.loc 1 2369 0
 3063 0048 0746     		mov	r7, r0
 3064 004a 20B9     		cbnz	r0, .L274
 3065              	.LVL498:
 3066              	.L273:
2318:.\ff.c        **** 		res = move_window(fs, dp->sect);
 3067              		.loc 1 2318 0
 3068 004c A169     		ldr	r1, [r4, #24]
 3069 004e 0029     		cmp	r1, #0
 3070 0050 DCD1     		bne	.L276
 3071 0052 00E0     		b	.L274
 3072              	.LVL499:
 3073              	.L278:
2323:.\ff.c        **** 		}
 3074              		.loc 1 2323 0
 3075 0054 0427     		movs	r7, #4
 3076              	.LVL500:
 3077              	.L274:
2372:.\ff.c        **** 	return res;
 3078              		.loc 1 2372 0
 3079 0056 0FB1     		cbz	r7, .L277
2372:.\ff.c        **** 	return res;
 3080              		.loc 1 2372 0 is_stmt 0 discriminator 1
 3081 0058 0023     		movs	r3, #0
 3082 005a A361     		str	r3, [r4, #24]
 3083              	.L277:
2374:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 127


 3084              		.loc 1 2374 0 is_stmt 1
 3085 005c 3846     		mov	r0, r7
 3086 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3087              		.cfi_endproc
 3088              	.LFE20:
 3089              		.size	dir_read, .-dir_read
 3090              		.section	.text.create_name,"ax",%progbits
 3091              		.align	2
 3092              		.thumb
 3093              		.thumb_func
 3094              		.type	create_name, %function
 3095              	create_name:
 3096              	.LFB25:
2851:.\ff.c        **** #if FF_USE_LFN		/* LFN configuration */
 3097              		.loc 1 2851 0
 3098              		.cfi_startproc
 3099              		@ args = 0, pretend = 0, frame = 8
 3100              		@ frame_needed = 0, uses_anonymous_args = 0
 3101              	.LVL501:
 3102 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3103              		.cfi_def_cfa_offset 36
 3104              		.cfi_offset 4, -36
 3105              		.cfi_offset 5, -32
 3106              		.cfi_offset 6, -28
 3107              		.cfi_offset 7, -24
 3108              		.cfi_offset 8, -20
 3109              		.cfi_offset 9, -16
 3110              		.cfi_offset 10, -12
 3111              		.cfi_offset 11, -8
 3112              		.cfi_offset 14, -4
 3113 0004 83B0     		sub	sp, sp, #12
 3114              		.cfi_def_cfa_offset 48
 3115 0006 0190     		str	r0, [sp, #4]
 3116 0008 8B46     		mov	fp, r1
2986:.\ff.c        **** 	memset(sfn, ' ', 11);
 3117              		.loc 1 2986 0
 3118 000a D1F80080 		ldr	r8, [r1]
 3119              	.LVL502:
 3120 000e 00F1200A 		add	r10, r0, #32
 3121              	.LVL503:
2987:.\ff.c        **** 	si = i = 0; ni = 8;
 3122              		.loc 1 2987 0
 3123 0012 5046     		mov	r0, r10
 3124              	.LVL504:
 3125 0014 2021     		movs	r1, #32
 3126              	.LVL505:
 3127 0016 0B22     		movs	r2, #11
 3128 0018 FFF7FEFF 		bl	memset
 3129              	.LVL506:
2988:.\ff.c        **** #if FF_FS_RPATH != 0
 3130              		.loc 1 2988 0
 3131 001c 0026     		movs	r6, #0
 3132 001e 3746     		mov	r7, r6
 3133 0020 4FF00809 		mov	r9, #8
 3134              	.LVL507:
 3135              	.L281:
3003:.\ff.c        **** 		if (c <= ' ') break; 			/* Break if end of the path name */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 128


 3136              		.loc 1 3003 0
 3137 0024 7D1C     		adds	r5, r7, #1
 3138              	.LVL508:
 3139 0026 18F80740 		ldrb	r4, [r8, r7]	@ zero_extendqisi2
 3140              	.LVL509:
3004:.\ff.c        **** 		if (IsSeparator(c)) {			/* Break if a separator is found */
 3141              		.loc 1 3004 0
 3142 002a 202C     		cmp	r4, #32
 3143 002c 42D9     		bls	.L282
3005:.\ff.c        **** 			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 3144              		.loc 1 3005 0
 3145 002e 2F2C     		cmp	r4, #47
 3146 0030 03D0     		beq	.L285
3005:.\ff.c        **** 			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 3147              		.loc 1 3005 0 is_stmt 0 discriminator 1
 3148 0032 5C2C     		cmp	r4, #92
 3149 0034 08D1     		bne	.L284
 3150 0036 00E0     		b	.L285
 3151              	.L286:
3006:.\ff.c        **** 			break;
 3152              		.loc 1 3006 0 is_stmt 1 discriminator 4
 3153 0038 0135     		adds	r5, r5, #1
 3154              	.LVL510:
 3155              	.L285:
3006:.\ff.c        **** 			break;
 3156              		.loc 1 3006 0 is_stmt 0 discriminator 1
 3157 003a 18F80530 		ldrb	r3, [r8, r5]	@ zero_extendqisi2
 3158 003e 2F2B     		cmp	r3, #47
 3159 0040 FAD0     		beq	.L286
3006:.\ff.c        **** 			break;
 3160              		.loc 1 3006 0 discriminator 3
 3161 0042 5C2B     		cmp	r3, #92
 3162 0044 F8D0     		beq	.L286
 3163 0046 35E0     		b	.L282
 3164              	.L284:
3009:.\ff.c        **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 3165              		.loc 1 3009 0 is_stmt 1
 3166 0048 2E2C     		cmp	r4, #46
 3167 004a 01D0     		beq	.L287
3009:.\ff.c        **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 3168              		.loc 1 3009 0 is_stmt 0 discriminator 1
 3169 004c 4E45     		cmp	r6, r9
 3170 004e 09D3     		bcc	.L288
 3171              	.L287:
3010:.\ff.c        **** 			i = 8; ni = 11;				/* Enter file extension field */
 3172              		.loc 1 3010 0 is_stmt 1
 3173 0050 B9F10B0F 		cmp	r9, #11
 3174 0054 4AD0     		beq	.L295
3010:.\ff.c        **** 			i = 8; ni = 11;				/* Enter file extension field */
 3175              		.loc 1 3010 0 is_stmt 0 discriminator 2
 3176 0056 2E2C     		cmp	r4, #46
 3177 0058 4AD1     		bne	.L296
3003:.\ff.c        **** 		if (c <= ' ') break; 			/* Break if end of the path name */
 3178              		.loc 1 3003 0 is_stmt 1
 3179 005a 2F46     		mov	r7, r5
3011:.\ff.c        **** 			continue;
 3180              		.loc 1 3011 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 129


 3181 005c 0826     		movs	r6, #8
 3182              	.LVL511:
 3183 005e 4FF00B09 		mov	r9, #11
 3184              	.LVL512:
 3185 0062 DFE7     		b	.L281
 3186              	.LVL513:
 3187              	.L288:
3023:.\ff.c        **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
 3188              		.loc 1 3023 0
 3189 0064 2046     		mov	r0, r4
 3190 0066 FFF7FEFF 		bl	dbc_1st
 3191              	.LVL514:
 3192 006a 90B1     		cbz	r0, .L291
3024:.\ff.c        **** 			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 3193              		.loc 1 3024 0
 3194 006c 6F1C     		adds	r7, r5, #1
 3195              	.LVL515:
 3196 006e 18F80550 		ldrb	r5, [r8, r5]	@ zero_extendqisi2
 3197              	.LVL516:
3025:.\ff.c        **** 			sfn[i++] = c;
 3198              		.loc 1 3025 0
 3199 0072 2846     		mov	r0, r5
 3200 0074 FFF7FEFF 		bl	dbc_2nd
 3201              	.LVL517:
 3202 0078 0028     		cmp	r0, #0
 3203 007a 3BD0     		beq	.L297
3025:.\ff.c        **** 			sfn[i++] = c;
 3204              		.loc 1 3025 0 is_stmt 0 discriminator 2
 3205 007c 09F1FF33 		add	r3, r9, #-1
 3206 0080 B342     		cmp	r3, r6
 3207 0082 39D9     		bls	.L298
3026:.\ff.c        **** 			sfn[i++] = d;
 3208              		.loc 1 3026 0 is_stmt 1
 3209 0084 731C     		adds	r3, r6, #1
 3210              	.LVL518:
 3211 0086 0AF80640 		strb	r4, [r10, r6]
3027:.\ff.c        **** 		} else {						/* SBC */
 3212              		.loc 1 3027 0
 3213 008a 0236     		adds	r6, r6, #2
 3214              	.LVL519:
 3215 008c 0AF80350 		strb	r5, [r10, r3]
 3216 0090 C8E7     		b	.L281
 3217              	.LVL520:
 3218              	.L291:
3029:.\ff.c        **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
 3219              		.loc 1 3029 0
 3220 0092 1D48     		ldr	r0, .L304
 3221 0094 2146     		mov	r1, r4
 3222 0096 FFF7FEFF 		bl	strchr
 3223              	.LVL521:
 3224 009a 78BB     		cbnz	r0, .L299
3030:.\ff.c        **** 			sfn[i++] = c;
 3225              		.loc 1 3030 0
 3226 009c A4F16103 		sub	r3, r4, #97
 3227 00a0 DBB2     		uxtb	r3, r3
 3228 00a2 192B     		cmp	r3, #25
 3229 00a4 01D8     		bhi	.L292
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 130


3030:.\ff.c        **** 			sfn[i++] = c;
 3230              		.loc 1 3030 0 is_stmt 0 discriminator 1
 3231 00a6 203C     		subs	r4, r4, #32
 3232              	.LVL522:
 3233 00a8 E4B2     		uxtb	r4, r4
 3234              	.LVL523:
 3235              	.L292:
3031:.\ff.c        **** 		}
 3236              		.loc 1 3031 0 is_stmt 1
 3237 00aa 0AF80640 		strb	r4, [r10, r6]
 3238 00ae 0136     		adds	r6, r6, #1
 3239              	.LVL524:
3003:.\ff.c        **** 		if (c <= ' ') break; 			/* Break if end of the path name */
 3240              		.loc 1 3003 0
 3241 00b0 2F46     		mov	r7, r5
 3242 00b2 B7E7     		b	.L281
 3243              	.L282:
3034:.\ff.c        **** 	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 3244              		.loc 1 3034 0
 3245 00b4 4544     		add	r5, r5, r8
 3246              	.LVL525:
 3247 00b6 CBF80050 		str	r5, [fp]
3035:.\ff.c        **** 
 3248              		.loc 1 3035 0
 3249 00ba 0EB3     		cbz	r6, .L300
3037:.\ff.c        **** 	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the pat
 3250              		.loc 1 3037 0
 3251 00bc 019B     		ldr	r3, [sp, #4]
 3252 00be 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3253 00c2 E52B     		cmp	r3, #229
 3254 00c4 03D1     		bne	.L293
3037:.\ff.c        **** 	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the pat
 3255              		.loc 1 3037 0 is_stmt 0 discriminator 1
 3256 00c6 0523     		movs	r3, #5
 3257 00c8 019A     		ldr	r2, [sp, #4]
 3258 00ca 82F82030 		strb	r3, [r2, #32]
 3259              	.L293:
3038:.\ff.c        **** 
 3260              		.loc 1 3038 0 is_stmt 1
 3261 00ce 202C     		cmp	r4, #32
 3262 00d0 04D9     		bls	.L301
3038:.\ff.c        **** 
 3263              		.loc 1 3038 0 is_stmt 0 discriminator 2
 3264 00d2 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3265 00d4 202B     		cmp	r3, #32
 3266 00d6 03D8     		bhi	.L302
3038:.\ff.c        **** 
 3267              		.loc 1 3038 0
 3268 00d8 0423     		movs	r3, #4
 3269 00da 02E0     		b	.L294
 3270              	.L301:
 3271 00dc 0423     		movs	r3, #4
 3272 00de 00E0     		b	.L294
 3273              	.L302:
 3274 00e0 0023     		movs	r3, #0
 3275              	.L294:
3038:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 131


 3276              		.loc 1 3038 0 discriminator 6
 3277 00e2 019A     		ldr	r2, [sp, #4]
 3278 00e4 82F82B30 		strb	r3, [r2, #43]
3040:.\ff.c        **** #endif /* FF_USE_LFN */
 3279              		.loc 1 3040 0 is_stmt 1 discriminator 6
 3280 00e8 0020     		movs	r0, #0
 3281 00ea 0AE0     		b	.L289
 3282              	.LVL526:
 3283              	.L295:
3010:.\ff.c        **** 			i = 8; ni = 11;				/* Enter file extension field */
 3284              		.loc 1 3010 0
 3285 00ec 0620     		movs	r0, #6
 3286 00ee 08E0     		b	.L289
 3287              	.L296:
 3288 00f0 0620     		movs	r0, #6
 3289 00f2 06E0     		b	.L289
 3290              	.LVL527:
 3291              	.L297:
3025:.\ff.c        **** 			sfn[i++] = c;
 3292              		.loc 1 3025 0
 3293 00f4 0620     		movs	r0, #6
 3294 00f6 04E0     		b	.L289
 3295              	.L298:
 3296 00f8 0620     		movs	r0, #6
 3297 00fa 02E0     		b	.L289
 3298              	.LVL528:
 3299              	.L299:
3029:.\ff.c        **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
 3300              		.loc 1 3029 0
 3301 00fc 0620     		movs	r0, #6
 3302 00fe 00E0     		b	.L289
 3303              	.LVL529:
 3304              	.L300:
3035:.\ff.c        **** 
 3305              		.loc 1 3035 0
 3306 0100 0620     		movs	r0, #6
 3307              	.L289:
3042:.\ff.c        **** 
 3308              		.loc 1 3042 0
 3309 0102 03B0     		add	sp, sp, #12
 3310              		.cfi_def_cfa_offset 36
 3311              		@ sp needed
 3312 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3313              	.LVL530:
 3314              	.L305:
 3315              		.align	2
 3316              	.L304:
 3317 0108 0C000000 		.word	.LC1
 3318              		.cfi_endproc
 3319              	.LFE25:
 3320              		.size	create_name, .-create_name
 3321              		.section	.text.follow_path,"ax",%progbits
 3322              		.align	2
 3323              		.thumb
 3324              		.thumb_func
 3325              		.type	follow_path, %function
 3326              	follow_path:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 132


 3327              	.LFB26:
3055:.\ff.c        **** 	FRESULT res;
 3328              		.loc 1 3055 0
 3329              		.cfi_startproc
 3330              		@ args = 0, pretend = 0, frame = 8
 3331              		@ frame_needed = 0, uses_anonymous_args = 0
 3332              	.LVL531:
 3333 0000 30B5     		push	{r4, r5, lr}
 3334              		.cfi_def_cfa_offset 12
 3335              		.cfi_offset 4, -12
 3336              		.cfi_offset 5, -8
 3337              		.cfi_offset 14, -4
 3338 0002 83B0     		sub	sp, sp, #12
 3339              		.cfi_def_cfa_offset 24
 3340 0004 0446     		mov	r4, r0
 3341 0006 0191     		str	r1, [sp, #4]
3058:.\ff.c        **** 
 3342              		.loc 1 3058 0
 3343 0008 0568     		ldr	r5, [r0]
 3344              	.LVL532:
3067:.\ff.c        **** 		dp->obj.sclust = 0;					/* Start from the root directory */
 3345              		.loc 1 3067 0
 3346 000a 01E0     		b	.L307
 3347              	.L308:
3067:.\ff.c        **** 		dp->obj.sclust = 0;					/* Start from the root directory */
 3348              		.loc 1 3067 0 is_stmt 0 discriminator 4
 3349 000c 0133     		adds	r3, r3, #1
 3350 000e 0193     		str	r3, [sp, #4]
 3351              	.L307:
3067:.\ff.c        **** 		dp->obj.sclust = 0;					/* Start from the root directory */
 3352              		.loc 1 3067 0 discriminator 1
 3353 0010 019B     		ldr	r3, [sp, #4]
 3354 0012 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3355 0014 2F2A     		cmp	r2, #47
 3356 0016 F9D0     		beq	.L308
3067:.\ff.c        **** 		dp->obj.sclust = 0;					/* Start from the root directory */
 3357              		.loc 1 3067 0 discriminator 3
 3358 0018 5C2A     		cmp	r2, #92
 3359 001a F7D0     		beq	.L308
3068:.\ff.c        **** 	}
 3360              		.loc 1 3068 0 is_stmt 1
 3361 001c 0022     		movs	r2, #0
 3362 001e A260     		str	r2, [r4, #8]
3087:.\ff.c        **** 		dp->fn[NSFLAG] = NS_NONAME;
 3363              		.loc 1 3087 0
 3364 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3365 0022 1F2B     		cmp	r3, #31
 3366 0024 08D8     		bhi	.L309
3088:.\ff.c        **** 		res = dir_sdi(dp, 0);
 3367              		.loc 1 3088 0
 3368 0026 8023     		movs	r3, #128
 3369 0028 84F82B30 		strb	r3, [r4, #43]
3089:.\ff.c        **** 
 3370              		.loc 1 3089 0
 3371 002c 2046     		mov	r0, r4
 3372              	.LVL533:
 3373 002e 1146     		mov	r1, r2
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 133


 3374              	.LVL534:
 3375 0030 FFF7FEFF 		bl	dir_sdi
 3376              	.LVL535:
 3377 0034 0346     		mov	r3, r0
 3378              	.LVL536:
 3379 0036 26E0     		b	.L310
 3380              	.LVL537:
 3381              	.L309:
3093:.\ff.c        **** 			if (res != FR_OK) break;
 3382              		.loc 1 3093 0
 3383 0038 2046     		mov	r0, r4
 3384 003a 01A9     		add	r1, sp, #4
 3385 003c FFF7FEFF 		bl	create_name
 3386              	.LVL538:
3094:.\ff.c        **** 			res = dir_find(dp);				/* Find an object with the segment name */
 3387              		.loc 1 3094 0
 3388 0040 0346     		mov	r3, r0
 3389 0042 00BB     		cbnz	r0, .L310
3095:.\ff.c        **** 			ns = dp->fn[NSFLAG];
 3390              		.loc 1 3095 0
 3391 0044 2046     		mov	r0, r4
 3392              	.LVL539:
 3393 0046 FFF7FEFF 		bl	dir_find
 3394              	.LVL540:
3096:.\ff.c        **** 			if (res != FR_OK) {				/* Failed to find the object */
 3395              		.loc 1 3096 0
 3396 004a 94F82B20 		ldrb	r2, [r4, #43]	@ zero_extendqisi2
 3397              	.LVL541:
3097:.\ff.c        **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 3398              		.loc 1 3097 0
 3399 004e 0346     		mov	r3, r0
 3400 0050 28B1     		cbz	r0, .L311
3098:.\ff.c        **** 					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 3401              		.loc 1 3098 0
 3402 0052 0428     		cmp	r0, #4
 3403 0054 17D1     		bne	.L310
3104:.\ff.c        **** 					}
 3404              		.loc 1 3104 0
 3405 0056 12F0040F 		tst	r2, #4
 3406 005a 11D0     		beq	.L312
 3407 005c 13E0     		b	.L310
 3408              	.L311:
3109:.\ff.c        **** 			/* Get into the sub-directory */
 3409              		.loc 1 3109 0
 3410 005e 12F0040F 		tst	r2, #4
 3411 0062 10D1     		bne	.L310
3111:.\ff.c        **** 				res = FR_NO_PATH; break;
 3412              		.loc 1 3111 0
 3413 0064 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3414 0066 13F0100F 		tst	r3, #16
 3415 006a 0BD0     		beq	.L313
3123:.\ff.c        **** 			}
 3416              		.loc 1 3123 0
 3417 006c 2169     		ldr	r1, [r4, #16]
 3418 006e C1F30801 		ubfx	r1, r1, #0, #9
 3419 0072 3031     		adds	r1, r1, #48
 3420 0074 2846     		mov	r0, r5
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 134


 3421              	.LVL542:
 3422 0076 2944     		add	r1, r1, r5
 3423 0078 FFF7FEFF 		bl	ld_clust
 3424              	.LVL543:
 3425 007c A060     		str	r0, [r4, #8]
3125:.\ff.c        **** 	}
 3426              		.loc 1 3125 0
 3427 007e DBE7     		b	.L309
 3428              	.LVL544:
 3429              	.L312:
3104:.\ff.c        **** 					}
 3430              		.loc 1 3104 0
 3431 0080 0523     		movs	r3, #5
 3432 0082 00E0     		b	.L310
 3433              	.L313:
3112:.\ff.c        **** 			}
 3434              		.loc 1 3112 0
 3435 0084 0523     		movs	r3, #5
 3436              	.LVL545:
 3437              	.L310:
3129:.\ff.c        **** 
 3438              		.loc 1 3129 0
 3439 0086 1846     		mov	r0, r3
 3440 0088 03B0     		add	sp, sp, #12
 3441              		.cfi_def_cfa_offset 12
 3442              		@ sp needed
 3443 008a 30BD     		pop	{r4, r5, pc}
 3444              		.cfi_endproc
 3445              	.LFE26:
 3446              		.size	follow_path, .-follow_path
 3447              		.section	.text.dir_register,"ax",%progbits
 3448              		.align	2
 3449              		.thumb
 3450              		.thumb_func
 3451              		.type	dir_register, %function
 3452              	dir_register:
 3453              	.LFB22:
2468:.\ff.c        **** 	FRESULT res;
 3454              		.loc 1 2468 0
 3455              		.cfi_startproc
 3456              		@ args = 0, pretend = 0, frame = 0
 3457              		@ frame_needed = 0, uses_anonymous_args = 0
 3458              	.LVL546:
 3459 0000 70B5     		push	{r4, r5, r6, lr}
 3460              		.cfi_def_cfa_offset 16
 3461              		.cfi_offset 4, -16
 3462              		.cfi_offset 5, -12
 3463              		.cfi_offset 6, -8
 3464              		.cfi_offset 14, -4
 3465 0002 0446     		mov	r4, r0
2470:.\ff.c        **** #if FF_USE_LFN		/* LFN configuration */
 3466              		.loc 1 2470 0
 3467 0004 0668     		ldr	r6, [r0]
 3468              	.LVL547:
2542:.\ff.c        **** 
 3469              		.loc 1 2542 0
 3470 0006 0121     		movs	r1, #1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 135


 3471 0008 FFF7FEFF 		bl	dir_alloc
 3472              	.LVL548:
2547:.\ff.c        **** 		res = move_window(fs, dp->sect);
 3473              		.loc 1 2547 0
 3474 000c 0546     		mov	r5, r0
 3475 000e B0B9     		cbnz	r0, .L316
2548:.\ff.c        **** 		if (res == FR_OK) {
 3476              		.loc 1 2548 0
 3477 0010 3046     		mov	r0, r6
 3478              	.LVL549:
 3479 0012 A169     		ldr	r1, [r4, #24]
 3480 0014 FFF7FEFF 		bl	move_window
 3481              	.LVL550:
2549:.\ff.c        **** 			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 3482              		.loc 1 2549 0
 3483 0018 0546     		mov	r5, r0
 3484 001a 80B9     		cbnz	r0, .L316
2550:.\ff.c        **** 			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 3485              		.loc 1 2550 0
 3486 001c E069     		ldr	r0, [r4, #28]
 3487              	.LVL551:
 3488 001e 0021     		movs	r1, #0
 3489 0020 2022     		movs	r2, #32
 3490 0022 FFF7FEFF 		bl	memset
 3491              	.LVL552:
2551:.\ff.c        **** #if FF_USE_LFN
 3492              		.loc 1 2551 0
 3493 0026 E369     		ldr	r3, [r4, #28]
 3494 0028 54F8201F 		ldr	r1, [r4, #32]!	@ unaligned
 3495              	.LVL553:
 3496 002c 6268     		ldr	r2, [r4, #4]	@ unaligned
 3497 002e 1960     		str	r1, [r3]	@ unaligned
 3498 0030 5A60     		str	r2, [r3, #4]	@ unaligned
 3499 0032 2189     		ldrh	r1, [r4, #8]	@ unaligned
 3500 0034 A27A     		ldrb	r2, [r4, #10]	@ zero_extendqisi2
 3501 0036 1981     		strh	r1, [r3, #8]	@ unaligned
 3502 0038 9A72     		strb	r2, [r3, #10]
2555:.\ff.c        **** 		}
 3503              		.loc 1 2555 0
 3504 003a 0123     		movs	r3, #1
 3505 003c 3371     		strb	r3, [r6, #4]
 3506              	.LVL554:
 3507              	.L316:
2560:.\ff.c        **** 
 3508              		.loc 1 2560 0
 3509 003e 2846     		mov	r0, r5
 3510 0040 70BD     		pop	{r4, r5, r6, pc}
 3511              		.cfi_endproc
 3512              	.LFE22:
 3513              		.size	dir_register, .-dir_register
 3514 0042 00BF     		.section	.text.sync_fs,"ax",%progbits
 3515              		.align	2
 3516              		.thumb
 3517              		.thumb_func
 3518              		.type	sync_fs, %function
 3519              	sync_fs:
 3520              	.LFB8:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 136


1111:.\ff.c        **** 	FRESULT res;
 3521              		.loc 1 1111 0
 3522              		.cfi_startproc
 3523              		@ args = 0, pretend = 0, frame = 0
 3524              		@ frame_needed = 0, uses_anonymous_args = 0
 3525              	.LVL555:
 3526 0000 70B5     		push	{r4, r5, r6, lr}
 3527              		.cfi_def_cfa_offset 16
 3528              		.cfi_offset 4, -16
 3529              		.cfi_offset 5, -12
 3530              		.cfi_offset 6, -8
 3531              		.cfi_offset 14, -4
 3532 0002 0446     		mov	r4, r0
1115:.\ff.c        **** 	if (res == FR_OK) {
 3533              		.loc 1 1115 0
 3534 0004 FFF7FEFF 		bl	sync_window
 3535              	.LVL556:
1116:.\ff.c        **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 3536              		.loc 1 1116 0
 3537 0008 0546     		mov	r5, r0
 3538 000a 0028     		cmp	r0, #0
 3539 000c 37D1     		bne	.L319
1117:.\ff.c        **** 			/* Create FSInfo structure */
 3540              		.loc 1 1117 0
 3541 000e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3542 0010 032B     		cmp	r3, #3
 3543 0012 2DD1     		bne	.L320
1117:.\ff.c        **** 			/* Create FSInfo structure */
 3544              		.loc 1 1117 0 is_stmt 0 discriminator 1
 3545 0014 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 3546 0016 012B     		cmp	r3, #1
 3547 0018 2AD1     		bne	.L320
1119:.\ff.c        **** 			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 3548              		.loc 1 1119 0 is_stmt 1
 3549 001a 04F13006 		add	r6, r4, #48
 3550 001e 3046     		mov	r0, r6
 3551              	.LVL557:
 3552 0020 0021     		movs	r1, #0
 3553 0022 4FF40072 		mov	r2, #512
 3554 0026 FFF7FEFF 		bl	memset
 3555              	.LVL558:
1120:.\ff.c        **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 3556              		.loc 1 1120 0
 3557 002a 04F22E20 		addw	r0, r4, #558
 3558 002e 4AF65521 		movw	r1, #43605
 3559 0032 FFF7FEFF 		bl	st_word
 3560              	.LVL559:
1121:.\ff.c        **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 3561              		.loc 1 1121 0
 3562 0036 3046     		mov	r0, r6
 3563 0038 1249     		ldr	r1, .L323
 3564 003a FFF7FEFF 		bl	st_dword
 3565              	.LVL560:
1122:.\ff.c        **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 3566              		.loc 1 1122 0
 3567 003e 04F50570 		add	r0, r4, #532
 3568 0042 1149     		ldr	r1, .L323+4
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 137


 3569 0044 FFF7FEFF 		bl	st_dword
 3570              	.LVL561:
1123:.\ff.c        **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 3571              		.loc 1 1123 0
 3572 0048 04F50670 		add	r0, r4, #536
 3573 004c 2169     		ldr	r1, [r4, #16]
 3574 004e FFF7FEFF 		bl	st_dword
 3575              	.LVL562:
1124:.\ff.c        **** 			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 3576              		.loc 1 1124 0
 3577 0052 04F50770 		add	r0, r4, #540
 3578 0056 E168     		ldr	r1, [r4, #12]
 3579 0058 FFF7FEFF 		bl	st_dword
 3580              	.LVL563:
1125:.\ff.c        **** 			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 3581              		.loc 1 1125 0
 3582 005c E269     		ldr	r2, [r4, #28]
 3583 005e 0132     		adds	r2, r2, #1
 3584 0060 E262     		str	r2, [r4, #44]
1126:.\ff.c        **** 			fs->fsi_flag = 0;
 3585              		.loc 1 1126 0
 3586 0062 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3587 0064 3146     		mov	r1, r6
 3588 0066 0123     		movs	r3, #1
 3589 0068 FFF7FEFF 		bl	disk_write
 3590              	.LVL564:
1127:.\ff.c        **** 		}
 3591              		.loc 1 1127 0
 3592 006c 0023     		movs	r3, #0
 3593 006e 6371     		strb	r3, [r4, #5]
 3594              	.L320:
1130:.\ff.c        **** 	}
 3595              		.loc 1 1130 0
 3596 0070 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3597 0072 0021     		movs	r1, #0
 3598 0074 0A46     		mov	r2, r1
 3599 0076 FFF7FEFF 		bl	disk_ioctl
 3600              	.LVL565:
 3601 007a 00B1     		cbz	r0, .L319
 3602 007c 0125     		movs	r5, #1
 3603              	.L319:
 3604              	.LVL566:
1134:.\ff.c        **** 
 3605              		.loc 1 1134 0
 3606 007e 2846     		mov	r0, r5
 3607 0080 70BD     		pop	{r4, r5, r6, pc}
 3608              	.LVL567:
 3609              	.L324:
 3610 0082 00BF     		.align	2
 3611              	.L323:
 3612 0084 52526141 		.word	1096897106
 3613 0088 72724161 		.word	1631679090
 3614              		.cfi_endproc
 3615              	.LFE8:
 3616              		.size	sync_fs, .-sync_fs
 3617              		.section	.text.f_mount,"ax",%progbits
 3618              		.align	2
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 138


 3619              		.global	f_mount
 3620              		.thumb
 3621              		.thumb_func
 3622              		.type	f_mount, %function
 3623              	f_mount:
 3624              	.LFB32:
3641:.\ff.c        **** 
3642:.\ff.c        **** 
3643:.\ff.c        **** 
3644:.\ff.c        **** 
3645:.\ff.c        **** /*---------------------------------------------------------------------------
3646:.\ff.c        **** 
3647:.\ff.c        ****    Public Functions (FatFs API)
3648:.\ff.c        **** 
3649:.\ff.c        **** ----------------------------------------------------------------------------*/
3650:.\ff.c        **** 
3651:.\ff.c        **** 
3652:.\ff.c        **** 
3653:.\ff.c        **** /*-----------------------------------------------------------------------*/
3654:.\ff.c        **** /* Mount/Unmount a Logical Drive                                         */
3655:.\ff.c        **** /*-----------------------------------------------------------------------*/
3656:.\ff.c        **** 
3657:.\ff.c        **** FRESULT f_mount (
3658:.\ff.c        **** 	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
3659:.\ff.c        **** 	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
3660:.\ff.c        **** 	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
3661:.\ff.c        **** )
3662:.\ff.c        **** {
 3625              		.loc 1 3662 0
 3626              		.cfi_startproc
 3627              		@ args = 0, pretend = 0, frame = 16
 3628              		@ frame_needed = 0, uses_anonymous_args = 0
 3629              	.LVL568:
 3630 0000 10B5     		push	{r4, lr}
 3631              		.cfi_def_cfa_offset 8
 3632              		.cfi_offset 4, -8
 3633              		.cfi_offset 14, -4
 3634 0002 84B0     		sub	sp, sp, #16
 3635              		.cfi_def_cfa_offset 24
 3636 0004 0190     		str	r0, [sp, #4]
 3637 0006 0091     		str	r1, [sp]
 3638 0008 1446     		mov	r4, r2
3663:.\ff.c        **** 	FATFS *cfs;
3664:.\ff.c        **** 	int vol;
3665:.\ff.c        **** 	FRESULT res;
3666:.\ff.c        **** 	const TCHAR *rp = path;
 3639              		.loc 1 3666 0
 3640 000a 04A8     		add	r0, sp, #16
 3641              	.LVL569:
 3642 000c 40F8041D 		str	r1, [r0, #-4]!
3667:.\ff.c        **** 
3668:.\ff.c        **** 
3669:.\ff.c        **** 	/* Get volume ID (logical drive number) */
3670:.\ff.c        **** 	vol = get_ldnumber(&rp);
 3643              		.loc 1 3670 0
 3644 0010 FFF7FEFF 		bl	get_ldnumber
 3645              	.LVL570:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 139


3671:.\ff.c        **** 	if (vol < 0) return FR_INVALID_DRIVE;
 3646              		.loc 1 3671 0
 3647 0014 0028     		cmp	r0, #0
 3648 0016 19DB     		blt	.L329
3672:.\ff.c        **** 	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 3649              		.loc 1 3672 0
 3650 0018 0F4B     		ldr	r3, .L332
 3651 001a 53F82030 		ldr	r3, [r3, r0, lsl #2]
 3652              	.LVL571:
3673:.\ff.c        **** 
3674:.\ff.c        **** 	if (cfs) {					/* Unregister current filesystem object if regsitered */
 3653              		.loc 1 3674 0
 3654 001e 23B1     		cbz	r3, .L327
3675:.\ff.c        **** 		FatFs[vol] = 0;
 3655              		.loc 1 3675 0
 3656 0020 0022     		movs	r2, #0
 3657 0022 0D49     		ldr	r1, .L332
 3658 0024 41F82020 		str	r2, [r1, r0, lsl #2]
3676:.\ff.c        **** #if FF_FS_LOCK
3677:.\ff.c        **** 		clear_share(cfs);
3678:.\ff.c        **** #endif
3679:.\ff.c        **** #if FF_FS_REENTRANT				/* Discard mutex of the current volume */
3680:.\ff.c        **** 		ff_mutex_delete(vol);
3681:.\ff.c        **** #endif
3682:.\ff.c        **** 		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 3659              		.loc 1 3682 0
 3660 0028 1A70     		strb	r2, [r3]
 3661              	.L327:
3683:.\ff.c        **** 	}
3684:.\ff.c        **** 
3685:.\ff.c        **** 	if (fs) {					/* Register new filesystem object */
 3662              		.loc 1 3685 0
 3663 002a 019B     		ldr	r3, [sp, #4]
 3664              	.LVL572:
 3665 002c 3BB1     		cbz	r3, .L328
3686:.\ff.c        **** 		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 3666              		.loc 1 3686 0
 3667 002e 5870     		strb	r0, [r3, #1]
3687:.\ff.c        **** #if FF_FS_REENTRANT				/* Create a volume mutex */
3688:.\ff.c        **** 		fs->ldrv = (BYTE)vol;	/* Owner volume ID */
3689:.\ff.c        **** 		if (!ff_mutex_create(vol)) return FR_INT_ERR;
3690:.\ff.c        **** #if FF_FS_LOCK
3691:.\ff.c        **** 		if (SysLock == 0) {		/* Create a system mutex if needed */
3692:.\ff.c        **** 			if (!ff_mutex_create(FF_VOLUMES)) {
3693:.\ff.c        **** 				ff_mutex_delete(vol);
3694:.\ff.c        **** 				return FR_INT_ERR;
3695:.\ff.c        **** 			}
3696:.\ff.c        **** 			SysLock = 1;		/* System mutex is ready */
3697:.\ff.c        **** 		}
3698:.\ff.c        **** #endif
3699:.\ff.c        **** #endif
3700:.\ff.c        **** 		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 3668              		.loc 1 3700 0
 3669 0030 0022     		movs	r2, #0
 3670 0032 019B     		ldr	r3, [sp, #4]
 3671 0034 1A70     		strb	r2, [r3]
3701:.\ff.c        **** 		FatFs[vol] = fs;		/* Register new fs object */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 140


 3672              		.loc 1 3701 0
 3673 0036 019A     		ldr	r2, [sp, #4]
 3674 0038 074B     		ldr	r3, .L332
 3675 003a 43F82020 		str	r2, [r3, r0, lsl #2]
 3676              	.L328:
3702:.\ff.c        **** 	}
3703:.\ff.c        **** 
3704:.\ff.c        **** 	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions *
 3677              		.loc 1 3704 0
 3678 003e 3CB1     		cbz	r4, .L330
3705:.\ff.c        **** 
3706:.\ff.c        **** 	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 3679              		.loc 1 3706 0
 3680 0040 6846     		mov	r0, sp
 3681              	.LVL573:
 3682 0042 01A9     		add	r1, sp, #4
 3683              	.LVL574:
 3684 0044 0022     		movs	r2, #0
 3685 0046 FFF7FEFF 		bl	mount_volume
 3686              	.LVL575:
3707:.\ff.c        **** 	LEAVE_FF(fs, res);
 3687              		.loc 1 3707 0
 3688 004a 02E0     		b	.L326
 3689              	.LVL576:
 3690              	.L329:
3671:.\ff.c        **** 	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 3691              		.loc 1 3671 0
 3692 004c 0B20     		movs	r0, #11
 3693              	.LVL577:
 3694 004e 00E0     		b	.L326
 3695              	.LVL578:
 3696              	.L330:
3704:.\ff.c        **** 
 3697              		.loc 1 3704 0
 3698 0050 0020     		movs	r0, #0
 3699              	.LVL579:
 3700              	.L326:
3708:.\ff.c        **** }
 3701              		.loc 1 3708 0
 3702 0052 04B0     		add	sp, sp, #16
 3703              		.cfi_def_cfa_offset 8
 3704              	.LVL580:
 3705              		@ sp needed
 3706 0054 10BD     		pop	{r4, pc}
 3707              	.LVL581:
 3708              	.L333:
 3709 0056 00BF     		.align	2
 3710              	.L332:
 3711 0058 00000000 		.word	.LANCHOR0
 3712              		.cfi_endproc
 3713              	.LFE32:
 3714              		.size	f_mount, .-f_mount
 3715              		.section	.text.f_open,"ax",%progbits
 3716              		.align	2
 3717              		.global	f_open
 3718              		.thumb
 3719              		.thumb_func
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 141


 3720              		.type	f_open, %function
 3721              	f_open:
 3722              	.LFB33:
3709:.\ff.c        **** 
3710:.\ff.c        **** 
3711:.\ff.c        **** 
3712:.\ff.c        **** 
3713:.\ff.c        **** /*-----------------------------------------------------------------------*/
3714:.\ff.c        **** /* Open or Create a File                                                 */
3715:.\ff.c        **** /*-----------------------------------------------------------------------*/
3716:.\ff.c        **** 
3717:.\ff.c        **** FRESULT f_open (
3718:.\ff.c        **** 	FIL* fp,			/* Pointer to the blank file object */
3719:.\ff.c        **** 	const TCHAR* path,	/* Pointer to the file name */
3720:.\ff.c        **** 	BYTE mode			/* Access mode and open mode flags */
3721:.\ff.c        **** )
3722:.\ff.c        **** {
 3723              		.loc 1 3722 0
 3724              		.cfi_startproc
 3725              		@ args = 0, pretend = 0, frame = 56
 3726              		@ frame_needed = 0, uses_anonymous_args = 0
 3727              	.LVL582:
 3728 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3729              		.cfi_def_cfa_offset 32
 3730              		.cfi_offset 4, -32
 3731              		.cfi_offset 5, -28
 3732              		.cfi_offset 6, -24
 3733              		.cfi_offset 7, -20
 3734              		.cfi_offset 8, -16
 3735              		.cfi_offset 9, -12
 3736              		.cfi_offset 10, -8
 3737              		.cfi_offset 14, -4
 3738 0004 8EB0     		sub	sp, sp, #56
 3739              		.cfi_def_cfa_offset 88
 3740 0006 0191     		str	r1, [sp, #4]
3723:.\ff.c        **** 	FRESULT res;
3724:.\ff.c        **** 	DIR dj;
3725:.\ff.c        **** 	FATFS *fs;
3726:.\ff.c        **** #if !FF_FS_READONLY
3727:.\ff.c        **** 	DWORD cl, bcs, clst, tm;
3728:.\ff.c        **** 	LBA_t sc;
3729:.\ff.c        **** 	FSIZE_t ofs;
3730:.\ff.c        **** #endif
3731:.\ff.c        **** 	DEF_NAMBUF
3732:.\ff.c        **** 
3733:.\ff.c        **** 
3734:.\ff.c        **** 	if (!fp) return FR_INVALID_OBJECT;
 3741              		.loc 1 3734 0
 3742 0008 0028     		cmp	r0, #0
 3743 000a 00F0EA80 		beq	.L351
 3744 000e 0646     		mov	r6, r0
 3745 0010 1546     		mov	r5, r2
3735:.\ff.c        **** 
3736:.\ff.c        **** 	/* Get logical drive number */
3737:.\ff.c        **** 	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN
 3746              		.loc 1 3737 0
 3747 0012 02F03F07 		and	r7, r2, #63
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 142


 3748              	.LVL583:
3738:.\ff.c        **** 	res = mount_volume(&path, &fs, mode);
 3749              		.loc 1 3738 0
 3750 0016 01A8     		add	r0, sp, #4
 3751              	.LVL584:
 3752 0018 02A9     		add	r1, sp, #8
 3753              	.LVL585:
 3754 001a 3A46     		mov	r2, r7
 3755 001c FFF7FEFF 		bl	mount_volume
 3756              	.LVL586:
3739:.\ff.c        **** 	if (res == FR_OK) {
 3757              		.loc 1 3739 0
 3758 0020 0446     		mov	r4, r0
 3759 0022 0028     		cmp	r0, #0
 3760 0024 40F0D880 		bne	.L336
3740:.\ff.c        **** 		dj.obj.fs = fs;
 3761              		.loc 1 3740 0
 3762 0028 029B     		ldr	r3, [sp, #8]
 3763 002a 0393     		str	r3, [sp, #12]
3741:.\ff.c        **** 		INIT_NAMBUF(fs);
3742:.\ff.c        **** 		res = follow_path(&dj, path);	/* Follow the file path */
 3764              		.loc 1 3742 0
 3765 002c 03A8     		add	r0, sp, #12
 3766              	.LVL587:
 3767 002e 0199     		ldr	r1, [sp, #4]
 3768 0030 FFF7FEFF 		bl	follow_path
 3769              	.LVL588:
3743:.\ff.c        **** #if !FF_FS_READONLY	/* Read/Write configuration */
3744:.\ff.c        **** 		if (res == FR_OK) {
 3770              		.loc 1 3744 0
 3771 0034 0446     		mov	r4, r0
 3772 0036 20B9     		cbnz	r0, .L337
3745:.\ff.c        **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 3773              		.loc 1 3745 0
 3774 0038 9DF93730 		ldrsb	r3, [sp, #55]
 3775 003c 002B     		cmp	r3, #0
 3776 003e 00DA     		bge	.L337
3746:.\ff.c        **** 				res = FR_INVALID_NAME;
 3777              		.loc 1 3746 0
 3778 0040 0624     		movs	r4, #6
 3779              	.L337:
 3780              	.LVL589:
3747:.\ff.c        **** 			}
3748:.\ff.c        **** #if FF_FS_LOCK
3749:.\ff.c        **** 			else {
3750:.\ff.c        **** 				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
3751:.\ff.c        **** 			}
3752:.\ff.c        **** #endif
3753:.\ff.c        **** 		}
3754:.\ff.c        **** 		/* Create or Open a file */
3755:.\ff.c        **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 3781              		.loc 1 3755 0
 3782 0042 15F01C0F 		tst	r5, #28
 3783 0046 54D0     		beq	.L338
3756:.\ff.c        **** 			if (res != FR_OK) {					/* No file, create new */
 3784              		.loc 1 3756 0
 3785 0048 44B1     		cbz	r4, .L339
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 143


3757:.\ff.c        **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 3786              		.loc 1 3757 0
 3787 004a 042C     		cmp	r4, #4
 3788 004c 03D1     		bne	.L340
3758:.\ff.c        **** #if FF_FS_LOCK
3759:.\ff.c        **** 					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
3760:.\ff.c        **** #else
3761:.\ff.c        **** 					res = dir_register(&dj);
 3789              		.loc 1 3761 0
 3790 004e 03A8     		add	r0, sp, #12
 3791 0050 FFF7FEFF 		bl	dir_register
 3792              	.LVL590:
 3793 0054 0446     		mov	r4, r0
 3794              	.LVL591:
 3795              	.L340:
3762:.\ff.c        **** #endif
3763:.\ff.c        **** 				}
3764:.\ff.c        **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
 3796              		.loc 1 3764 0
 3797 0056 47F00807 		orr	r7, r7, #8
 3798              	.LVL592:
 3799 005a 0BE0     		b	.L341
 3800              	.L339:
3765:.\ff.c        **** 			}
3766:.\ff.c        **** 			else {								/* Any object with the same name is already existing */
3767:.\ff.c        **** 				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 3801              		.loc 1 3767 0
 3802 005c 9DF81230 		ldrb	r3, [sp, #18]	@ zero_extendqisi2
 3803 0060 13F0110F 		tst	r3, #17
 3804 0064 03D1     		bne	.L353
3768:.\ff.c        **** 					res = FR_DENIED;
3769:.\ff.c        **** 				} else {
3770:.\ff.c        **** 					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 3805              		.loc 1 3770 0
 3806 0066 15F0040F 		tst	r5, #4
 3807 006a 02D1     		bne	.L354
 3808 006c 02E0     		b	.L341
 3809              	.L353:
3768:.\ff.c        **** 					res = FR_DENIED;
 3810              		.loc 1 3768 0
 3811 006e 0724     		movs	r4, #7
 3812              	.LVL593:
 3813 0070 00E0     		b	.L341
 3814              	.LVL594:
 3815              	.L354:
 3816              		.loc 1 3770 0
 3817 0072 0824     		movs	r4, #8
 3818              	.LVL595:
 3819              	.L341:
3771:.\ff.c        **** 				}
3772:.\ff.c        **** 			}
3773:.\ff.c        **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 3820              		.loc 1 3773 0
 3821 0074 002C     		cmp	r4, #0
 3822 0076 4CD1     		bne	.L342
 3823              		.loc 1 3773 0 is_stmt 0 discriminator 1
 3824 0078 17F0080F 		tst	r7, #8
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 144


 3825 007c 49D0     		beq	.L342
3774:.\ff.c        **** #if FF_FS_EXFAT
3775:.\ff.c        **** 				if (fs->fs_type == FS_EXFAT) {
3776:.\ff.c        **** 					/* Get current allocation info */
3777:.\ff.c        **** 					fp->obj.fs = fs;
3778:.\ff.c        **** 					init_alloc_info(fs, &fp->obj);
3779:.\ff.c        **** 					/* Set directory entry block initial state */
3780:.\ff.c        **** 					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
3781:.\ff.c        **** 					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
3782:.\ff.c        **** 					fs->dirbuf[XDIR_Attr] = AM_ARC;
3783:.\ff.c        **** 					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
3784:.\ff.c        **** 					fs->dirbuf[XDIR_GenFlags] = 1;
3785:.\ff.c        **** 					res = store_xdir(&dj);
3786:.\ff.c        **** 					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
3787:.\ff.c        **** 						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
3788:.\ff.c        **** 						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
3789:.\ff.c        **** 					}
3790:.\ff.c        **** 				} else
3791:.\ff.c        **** #endif
3792:.\ff.c        **** 				{
3793:.\ff.c        **** 					/* Set directory entry initial state */
3794:.\ff.c        **** 					tm = GET_FATTIME();					/* Set created time */
 3826              		.loc 1 3794 0 is_stmt 1
 3827 007e FFF7FEFF 		bl	get_fattime
 3828              	.LVL596:
 3829 0082 0546     		mov	r5, r0
 3830              	.LVL597:
3795:.\ff.c        **** 					st_dword(dj.dir + DIR_CrtTime, tm);
 3831              		.loc 1 3795 0
 3832 0084 0A98     		ldr	r0, [sp, #40]
 3833              	.LVL598:
 3834 0086 0E30     		adds	r0, r0, #14
 3835 0088 2946     		mov	r1, r5
 3836 008a FFF7FEFF 		bl	st_dword
 3837              	.LVL599:
3796:.\ff.c        **** 					st_dword(dj.dir + DIR_ModTime, tm);
 3838              		.loc 1 3796 0
 3839 008e 0A98     		ldr	r0, [sp, #40]
 3840 0090 1630     		adds	r0, r0, #22
 3841 0092 2946     		mov	r1, r5
 3842 0094 FFF7FEFF 		bl	st_dword
 3843              	.LVL600:
3797:.\ff.c        **** 					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 3844              		.loc 1 3797 0
 3845 0098 029D     		ldr	r5, [sp, #8]
 3846              	.LVL601:
 3847 009a DDF82880 		ldr	r8, [sp, #40]
 3848 009e 2846     		mov	r0, r5
 3849 00a0 4146     		mov	r1, r8
 3850 00a2 FFF7FEFF 		bl	ld_clust
 3851              	.LVL602:
 3852 00a6 8146     		mov	r9, r0
 3853              	.LVL603:
3798:.\ff.c        **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 3854              		.loc 1 3798 0
 3855 00a8 2023     		movs	r3, #32
 3856 00aa 88F80B30 		strb	r3, [r8, #11]
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 145


3799:.\ff.c        **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 3857              		.loc 1 3799 0
 3858 00ae 2846     		mov	r0, r5
 3859              	.LVL604:
 3860 00b0 0A99     		ldr	r1, [sp, #40]
 3861 00b2 0022     		movs	r2, #0
 3862 00b4 FFF7FEFF 		bl	st_clust
 3863              	.LVL605:
3800:.\ff.c        **** 					st_dword(dj.dir + DIR_FileSize, 0);
 3864              		.loc 1 3800 0
 3865 00b8 0A98     		ldr	r0, [sp, #40]
 3866 00ba 1C30     		adds	r0, r0, #28
 3867 00bc 0021     		movs	r1, #0
 3868 00be FFF7FEFF 		bl	st_dword
 3869              	.LVL606:
3801:.\ff.c        **** 					fs->wflag = 1;
 3870              		.loc 1 3801 0
 3871 00c2 029B     		ldr	r3, [sp, #8]
 3872 00c4 0122     		movs	r2, #1
 3873 00c6 1A71     		strb	r2, [r3, #4]
3802:.\ff.c        **** 					if (cl != 0) {						/* Remove the cluster chain if exist */
 3874              		.loc 1 3802 0
 3875 00c8 B9F1000F 		cmp	r9, #0
 3876 00cc 21D0     		beq	.L342
3803:.\ff.c        **** 						sc = fs->winsect;
 3877              		.loc 1 3803 0
 3878 00ce DD6A     		ldr	r5, [r3, #44]
 3879              	.LVL607:
3804:.\ff.c        **** 						res = remove_chain(&dj.obj, cl, 0);
 3880              		.loc 1 3804 0
 3881 00d0 03A8     		add	r0, sp, #12
 3882 00d2 4946     		mov	r1, r9
 3883 00d4 0022     		movs	r2, #0
 3884 00d6 FFF7FEFF 		bl	remove_chain
 3885              	.LVL608:
3805:.\ff.c        **** 						if (res == FR_OK) {
 3886              		.loc 1 3805 0
 3887 00da 0446     		mov	r4, r0
 3888 00dc C8B9     		cbnz	r0, .L342
3806:.\ff.c        **** 							res = move_window(fs, sc);
 3889              		.loc 1 3806 0
 3890 00de 0298     		ldr	r0, [sp, #8]
 3891              	.LVL609:
 3892 00e0 2946     		mov	r1, r5
 3893 00e2 FFF7FEFF 		bl	move_window
 3894              	.LVL610:
 3895 00e6 0446     		mov	r4, r0
 3896              	.LVL611:
3807:.\ff.c        **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 3897              		.loc 1 3807 0
 3898 00e8 09F1FF33 		add	r3, r9, #-1
 3899 00ec 029A     		ldr	r2, [sp, #8]
 3900 00ee D360     		str	r3, [r2, #12]
 3901 00f0 0FE0     		b	.L342
 3902              	.LVL612:
 3903              	.L338:
3808:.\ff.c        **** 						}
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 146


3809:.\ff.c        **** 					}
3810:.\ff.c        **** 				}
3811:.\ff.c        **** 			}
3812:.\ff.c        **** 		}
3813:.\ff.c        **** 		else {	/* Open an existing file */
3814:.\ff.c        **** 			if (res == FR_OK) {					/* Is the object exsiting? */
 3904              		.loc 1 3814 0
 3905 00f2 74B9     		cbnz	r4, .L342
3815:.\ff.c        **** 				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 3906              		.loc 1 3815 0
 3907 00f4 9DF81230 		ldrb	r3, [sp, #18]	@ zero_extendqisi2
 3908 00f8 13F0100F 		tst	r3, #16
 3909 00fc 06D1     		bne	.L355
3816:.\ff.c        **** 					res = FR_NO_FILE;
3817:.\ff.c        **** 				} else {
3818:.\ff.c        **** 					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 3910              		.loc 1 3818 0
 3911 00fe 15F0020F 		tst	r5, #2
 3912 0102 06D0     		beq	.L342
 3913              		.loc 1 3818 0 is_stmt 0 discriminator 1
 3914 0104 13F0010F 		tst	r3, #1
 3915 0108 02D1     		bne	.L356
 3916 010a 02E0     		b	.L342
 3917              	.L355:
3816:.\ff.c        **** 					res = FR_NO_FILE;
 3918              		.loc 1 3816 0 is_stmt 1
 3919 010c 0424     		movs	r4, #4
 3920              	.LVL613:
 3921 010e 00E0     		b	.L342
 3922              	.LVL614:
 3923              	.L356:
3819:.\ff.c        **** 						res = FR_DENIED;
 3924              		.loc 1 3819 0
 3925 0110 0724     		movs	r4, #7
 3926              	.LVL615:
 3927              	.L342:
3820:.\ff.c        **** 					}
3821:.\ff.c        **** 				}
3822:.\ff.c        **** 			}
3823:.\ff.c        **** 		}
3824:.\ff.c        **** 		if (res == FR_OK) {
 3928              		.loc 1 3824 0
 3929 0112 4CB9     		cbnz	r4, .L343
3825:.\ff.c        **** 			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwrit
 3930              		.loc 1 3825 0
 3931 0114 17F0080F 		tst	r7, #8
 3932 0118 01D0     		beq	.L344
 3933              		.loc 1 3825 0 is_stmt 0 discriminator 1
 3934 011a 47F04007 		orr	r7, r7, #64
 3935              	.LVL616:
 3936              	.L344:
3826:.\ff.c        **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 3937              		.loc 1 3826 0 is_stmt 1
 3938 011e 029B     		ldr	r3, [sp, #8]
 3939 0120 DB6A     		ldr	r3, [r3, #44]
 3940 0122 3362     		str	r3, [r6, #32]
3827:.\ff.c        **** 			fp->dir_ptr = dj.dir;
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 147


 3941              		.loc 1 3827 0
 3942 0124 0A9B     		ldr	r3, [sp, #40]
 3943 0126 7362     		str	r3, [r6, #36]
 3944              	.L343:
3828:.\ff.c        **** #if FF_FS_LOCK
3829:.\ff.c        **** 			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
3830:.\ff.c        **** 			if (fp->obj.lockid == 0) res = FR_INT_ERR;
3831:.\ff.c        **** #endif
3832:.\ff.c        **** 		}
3833:.\ff.c        **** #else		/* R/O configuration */
3834:.\ff.c        **** 		if (res == FR_OK) {
3835:.\ff.c        **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it origin directory itself? */
3836:.\ff.c        **** 				res = FR_INVALID_NAME;
3837:.\ff.c        **** 			} else {
3838:.\ff.c        **** 				if (dj.obj.attr & AM_DIR) {		/* Is it a directory? */
3839:.\ff.c        **** 					res = FR_NO_FILE;
3840:.\ff.c        **** 				}
3841:.\ff.c        **** 			}
3842:.\ff.c        **** 		}
3843:.\ff.c        **** #endif
3844:.\ff.c        **** 
3845:.\ff.c        **** 		if (res == FR_OK) {
 3945              		.loc 1 3845 0
 3946 0128 002C     		cmp	r4, #0
 3947 012a 55D1     		bne	.L336
3846:.\ff.c        **** #if FF_FS_EXFAT
3847:.\ff.c        **** 			if (fs->fs_type == FS_EXFAT) {
3848:.\ff.c        **** 				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
3849:.\ff.c        **** 				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3850:.\ff.c        **** 				fp->obj.c_ofs = dj.blk_ofs;
3851:.\ff.c        **** 				init_alloc_info(fs, &fp->obj);
3852:.\ff.c        **** 			} else
3853:.\ff.c        **** #endif
3854:.\ff.c        **** 			{
3855:.\ff.c        **** 				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 3948              		.loc 1 3855 0
 3949 012c DDF808A0 		ldr	r10, [sp, #8]
 3950 0130 DDF82880 		ldr	r8, [sp, #40]
 3951 0134 5046     		mov	r0, r10
 3952 0136 4146     		mov	r1, r8
 3953 0138 FFF7FEFF 		bl	ld_clust
 3954              	.LVL617:
 3955 013c 0546     		mov	r5, r0
 3956 013e B060     		str	r0, [r6, #8]
3856:.\ff.c        **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 3957              		.loc 1 3856 0
 3958 0140 08F11C00 		add	r0, r8, #28
 3959 0144 FFF7FEFF 		bl	ld_dword
 3960              	.LVL618:
 3961 0148 8046     		mov	r8, r0
 3962 014a F060     		str	r0, [r6, #12]
3857:.\ff.c        **** 			}
3858:.\ff.c        **** #if FF_USE_FASTSEEK
3859:.\ff.c        **** 			fp->cltbl = 0;		/* Disable fast seek mode */
3860:.\ff.c        **** #endif
3861:.\ff.c        **** 			fp->obj.fs = fs;	/* Validate the file object */
 3963              		.loc 1 3861 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 148


 3964 014c C6F800A0 		str	r10, [r6]
3862:.\ff.c        **** 			fp->obj.id = fs->id;
 3965              		.loc 1 3862 0
 3966 0150 BAF80630 		ldrh	r3, [r10, #6]
 3967 0154 B380     		strh	r3, [r6, #4]	@ movhi
3863:.\ff.c        **** 			fp->flag = mode;	/* Set file access mode */
 3968              		.loc 1 3863 0
 3969 0156 3774     		strb	r7, [r6, #16]
3864:.\ff.c        **** 			fp->err = 0;		/* Clear error flag */
 3970              		.loc 1 3864 0
 3971 0158 0021     		movs	r1, #0
 3972 015a 7174     		strb	r1, [r6, #17]
3865:.\ff.c        **** 			fp->sect = 0;		/* Invalidate current data sector */
 3973              		.loc 1 3865 0
 3974 015c F161     		str	r1, [r6, #28]
3866:.\ff.c        **** 			fp->fptr = 0;		/* Set file pointer top of the file */
 3975              		.loc 1 3866 0
 3976 015e 7161     		str	r1, [r6, #20]
3867:.\ff.c        **** #if !FF_FS_READONLY
3868:.\ff.c        **** #if !FF_FS_TINY
3869:.\ff.c        **** 			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 3977              		.loc 1 3869 0
 3978 0160 06F12809 		add	r9, r6, #40
 3979 0164 4846     		mov	r0, r9
 3980 0166 4FF40072 		mov	r2, #512
 3981 016a FFF7FEFF 		bl	memset
 3982              	.LVL619:
3870:.\ff.c        **** #endif
3871:.\ff.c        **** 			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is sp
 3983              		.loc 1 3871 0
 3984 016e 17F0200F 		tst	r7, #32
 3985 0172 31D0     		beq	.L336
 3986              		.loc 1 3871 0 is_stmt 0 discriminator 1
 3987 0174 B8F1000F 		cmp	r8, #0
 3988 0178 2ED0     		beq	.L336
3872:.\ff.c        **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 3989              		.loc 1 3872 0 is_stmt 1
 3990 017a C6F81480 		str	r8, [r6, #20]
3873:.\ff.c        **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 3991              		.loc 1 3873 0
 3992 017e BAF80A70 		ldrh	r7, [r10, #10]
 3993              	.LVL620:
 3994 0182 7F02     		lsls	r7, r7, #9
 3995              	.LVL621:
3874:.\ff.c        **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
3875:.\ff.c        **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 3996              		.loc 1 3875 0
 3997 0184 0DE0     		b	.L345
 3998              	.L349:
3876:.\ff.c        **** 					clst = get_fat(&fp->obj, clst);
 3999              		.loc 1 3876 0
 4000 0186 3046     		mov	r0, r6
 4001 0188 2946     		mov	r1, r5
 4002 018a FFF7FEFF 		bl	get_fat
 4003              	.LVL622:
 4004 018e 0546     		mov	r5, r0
 4005              	.LVL623:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 149


3877:.\ff.c        **** 					if (clst <= 1) res = FR_INT_ERR;
 4006              		.loc 1 3877 0
 4007 0190 0128     		cmp	r0, #1
 4008 0192 00D8     		bhi	.L346
 4009 0194 0224     		movs	r4, #2
 4010              	.LVL624:
 4011              	.L346:
3878:.\ff.c        **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 4012              		.loc 1 3878 0
 4013 0196 B5F1FF3F 		cmp	r5, #-1
 4014 019a 00D1     		bne	.L347
 4015 019c 0124     		movs	r4, #1
 4016              	.LVL625:
 4017              	.L347:
3875:.\ff.c        **** 					clst = get_fat(&fp->obj, clst);
 4018              		.loc 1 3875 0 discriminator 2
 4019 019e C7EB0808 		rsb	r8, r7, r8
 4020              	.LVL626:
 4021              	.L345:
3875:.\ff.c        **** 					clst = get_fat(&fp->obj, clst);
 4022              		.loc 1 3875 0 is_stmt 0 discriminator 1
 4023 01a2 0CB9     		cbnz	r4, .L348
3875:.\ff.c        **** 					clst = get_fat(&fp->obj, clst);
 4024              		.loc 1 3875 0 discriminator 3
 4025 01a4 B845     		cmp	r8, r7
 4026 01a6 EED8     		bhi	.L349
 4027              	.L348:
3879:.\ff.c        **** 				}
3880:.\ff.c        **** 				fp->clust = clst;
 4028              		.loc 1 3880 0 is_stmt 1
 4029 01a8 B561     		str	r5, [r6, #24]
3881:.\ff.c        **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 4030              		.loc 1 3881 0
 4031 01aa ACB9     		cbnz	r4, .L336
 4032              		.loc 1 3881 0 is_stmt 0 discriminator 1
 4033 01ac C8F30803 		ubfx	r3, r8, #0, #9
 4034 01b0 93B1     		cbz	r3, .L336
3882:.\ff.c        **** 					sc = clst2sect(fs, clst);
 4035              		.loc 1 3882 0 is_stmt 1
 4036 01b2 029F     		ldr	r7, [sp, #8]
 4037              	.LVL627:
 4038 01b4 3846     		mov	r0, r7
 4039 01b6 2946     		mov	r1, r5
 4040 01b8 FFF7FEFF 		bl	clst2sect
 4041              	.LVL628:
3883:.\ff.c        **** 					if (sc == 0) {
 4042              		.loc 1 3883 0
 4043 01bc 48B1     		cbz	r0, .L359
3884:.\ff.c        **** 						res = FR_INT_ERR;
3885:.\ff.c        **** 					} else {
3886:.\ff.c        **** 						fp->sect = sc + (DWORD)(ofs / SS(fs));
 4044              		.loc 1 3886 0
 4045 01be 00EB5822 		add	r2, r0, r8, lsr #9
 4046 01c2 F261     		str	r2, [r6, #28]
3887:.\ff.c        **** #if !FF_FS_TINY
3888:.\ff.c        **** 						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 4047              		.loc 1 3888 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 150


 4048 01c4 7878     		ldrb	r0, [r7, #1]	@ zero_extendqisi2
 4049              	.LVL629:
 4050 01c6 4946     		mov	r1, r9
 4051 01c8 0123     		movs	r3, #1
 4052 01ca FFF7FEFF 		bl	disk_read
 4053              	.LVL630:
 4054 01ce 10B9     		cbnz	r0, .L360
 4055 01d0 02E0     		b	.L336
 4056              	.LVL631:
 4057              	.L359:
3884:.\ff.c        **** 						res = FR_INT_ERR;
 4058              		.loc 1 3884 0
 4059 01d2 0224     		movs	r4, #2
 4060              	.LVL632:
 4061 01d4 00E0     		b	.L336
 4062              	.LVL633:
 4063              	.L360:
 4064              		.loc 1 3888 0
 4065 01d6 0124     		movs	r4, #1
 4066              	.LVL634:
 4067              	.L336:
3889:.\ff.c        **** #endif
3890:.\ff.c        **** 					}
3891:.\ff.c        **** 				}
3892:.\ff.c        **** #if FF_FS_LOCK
3893:.\ff.c        **** 				if (res != FR_OK) dec_share(fp->obj.lockid); /* Decrement file open counter if seek failed */
3894:.\ff.c        **** #endif
3895:.\ff.c        **** 			}
3896:.\ff.c        **** #endif
3897:.\ff.c        **** 		}
3898:.\ff.c        **** 
3899:.\ff.c        **** 		FREE_NAMBUF();
3900:.\ff.c        **** 	}
3901:.\ff.c        **** 
3902:.\ff.c        **** 	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 4068              		.loc 1 3902 0
 4069 01d8 0CB1     		cbz	r4, .L350
 4070              		.loc 1 3902 0 is_stmt 0 discriminator 1
 4071 01da 0023     		movs	r3, #0
 4072 01dc 3360     		str	r3, [r6]
 4073              	.L350:
3903:.\ff.c        **** 
3904:.\ff.c        **** 	LEAVE_FF(fs, res);
 4074              		.loc 1 3904 0 is_stmt 1
 4075 01de 2046     		mov	r0, r4
 4076 01e0 00E0     		b	.L335
 4077              	.LVL635:
 4078              	.L351:
3734:.\ff.c        **** 
 4079              		.loc 1 3734 0
 4080 01e2 0920     		movs	r0, #9
 4081              	.LVL636:
 4082              	.L335:
3905:.\ff.c        **** }
 4083              		.loc 1 3905 0
 4084 01e4 0EB0     		add	sp, sp, #56
 4085              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 151


 4086              		@ sp needed
 4087 01e6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4088              		.cfi_endproc
 4089              	.LFE33:
 4090              		.size	f_open, .-f_open
 4091 01ea 00BF     		.section	.text.f_read,"ax",%progbits
 4092              		.align	2
 4093              		.global	f_read
 4094              		.thumb
 4095              		.thumb_func
 4096              		.type	f_read, %function
 4097              	f_read:
 4098              	.LFB34:
3906:.\ff.c        **** 
3907:.\ff.c        **** 
3908:.\ff.c        **** 
3909:.\ff.c        **** 
3910:.\ff.c        **** /*-----------------------------------------------------------------------*/
3911:.\ff.c        **** /* Read File                                                             */
3912:.\ff.c        **** /*-----------------------------------------------------------------------*/
3913:.\ff.c        **** 
3914:.\ff.c        **** FRESULT f_read (
3915:.\ff.c        **** 	FIL* fp, 	/* Open file to be read */
3916:.\ff.c        **** 	void* buff,	/* Data buffer to store the read data */
3917:.\ff.c        **** 	UINT btr,	/* Number of bytes to read */
3918:.\ff.c        **** 	UINT* br	/* Number of bytes read */
3919:.\ff.c        **** )
3920:.\ff.c        **** {
 4099              		.loc 1 3920 0
 4100              		.cfi_startproc
 4101              		@ args = 0, pretend = 0, frame = 16
 4102              		@ frame_needed = 0, uses_anonymous_args = 0
 4103              	.LVL637:
 4104 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4105              		.cfi_def_cfa_offset 36
 4106              		.cfi_offset 4, -36
 4107              		.cfi_offset 5, -32
 4108              		.cfi_offset 6, -28
 4109              		.cfi_offset 7, -24
 4110              		.cfi_offset 8, -20
 4111              		.cfi_offset 9, -16
 4112              		.cfi_offset 10, -12
 4113              		.cfi_offset 11, -8
 4114              		.cfi_offset 14, -4
 4115 0004 85B0     		sub	sp, sp, #20
 4116              		.cfi_def_cfa_offset 56
 4117 0006 0446     		mov	r4, r0
 4118 0008 8846     		mov	r8, r1
 4119 000a 1546     		mov	r5, r2
 4120 000c 1F46     		mov	r7, r3
 4121              	.LVL638:
3921:.\ff.c        **** 	FRESULT res;
3922:.\ff.c        **** 	FATFS *fs;
3923:.\ff.c        **** 	DWORD clst;
3924:.\ff.c        **** 	LBA_t sect;
3925:.\ff.c        **** 	FSIZE_t remain;
3926:.\ff.c        **** 	UINT rcnt, cc, csect;
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 152


3927:.\ff.c        **** 	BYTE *rbuff = (BYTE*)buff;
3928:.\ff.c        **** 
3929:.\ff.c        **** 
3930:.\ff.c        **** 	*br = 0;	/* Clear read byte counter */
 4122              		.loc 1 3930 0
 4123 000e 0023     		movs	r3, #0
 4124              	.LVL639:
 4125 0010 3B60     		str	r3, [r7]
3931:.\ff.c        **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 4126              		.loc 1 3931 0
 4127 0012 0190     		str	r0, [sp, #4]
 4128 0014 03A9     		add	r1, sp, #12
 4129              	.LVL640:
 4130 0016 FFF7FEFF 		bl	validate
 4131              	.LVL641:
3932:.\ff.c        **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 4132              		.loc 1 3932 0
 4133 001a 0346     		mov	r3, r0
 4134 001c 08B9     		cbnz	r0, .L363
 4135              		.loc 1 3932 0 is_stmt 0 discriminator 2
 4136 001e 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 4137              	.LVL642:
 4138 0020 0BB1     		cbz	r3, .L364
 4139              	.LVL643:
 4140              	.L363:
 4141              		.loc 1 3932 0 discriminator 3
 4142 0022 1846     		mov	r0, r3
 4143 0024 A4E0     		b	.L365
 4144              	.L364:
3933:.\ff.c        **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 4145              		.loc 1 3933 0 is_stmt 1
 4146 0026 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4147              	.LVL644:
 4148 0028 13F0010F 		tst	r3, #1
 4149 002c 00F09F80 		beq	.L385
3934:.\ff.c        **** 	remain = fp->obj.objsize - fp->fptr;
 4150              		.loc 1 3934 0
 4151 0030 E668     		ldr	r6, [r4, #12]
 4152 0032 6369     		ldr	r3, [r4, #20]
 4153 0034 F61A     		subs	r6, r6, r3
 4154              	.LVL645:
3935:.\ff.c        **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 4155              		.loc 1 3935 0
 4156 0036 B542     		cmp	r5, r6
 4157 0038 00F29480 		bhi	.L367
 4158 003c 2E46     		mov	r6, r5
 4159              	.LVL646:
 4160 003e 91E0     		b	.L367
 4161              	.LVL647:
 4162              	.L384:
3936:.\ff.c        **** 
3937:.\ff.c        **** 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr 
3938:.\ff.c        **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 4163              		.loc 1 3938 0
 4164 0040 6369     		ldr	r3, [r4, #20]
 4165 0042 C3F30802 		ubfx	r2, r3, #0, #9
 4166 0046 002A     		cmp	r2, #0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 153


 4167 0048 76D1     		bne	.L368
3939:.\ff.c        **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 4168              		.loc 1 3939 0
 4169 004a 039A     		ldr	r2, [sp, #12]
 4170 004c B2F80A90 		ldrh	r9, [r2, #10]
 4171 0050 09F1FF39 		add	r9, r9, #-1
 4172              	.LVL648:
3940:.\ff.c        **** 			if (csect == 0) {					/* On the cluster boundary? */
 4173              		.loc 1 3940 0
 4174 0054 19EA5329 		ands	r9, r9, r3, lsr #9
 4175              	.LVL649:
 4176 0058 14D1     		bne	.L369
3941:.\ff.c        **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 4177              		.loc 1 3941 0
 4178 005a 0BB9     		cbnz	r3, .L370
3942:.\ff.c        **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 4179              		.loc 1 3942 0
 4180 005c A068     		ldr	r0, [r4, #8]
 4181              	.LVL650:
 4182 005e 03E0     		b	.L371
 4183              	.LVL651:
 4184              	.L370:
3943:.\ff.c        **** 				} else {						/* Middle or end of the file */
3944:.\ff.c        **** #if FF_USE_FASTSEEK
3945:.\ff.c        **** 					if (fp->cltbl) {
3946:.\ff.c        **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3947:.\ff.c        **** 					} else
3948:.\ff.c        **** #endif
3949:.\ff.c        **** 					{
3950:.\ff.c        **** 						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 4185              		.loc 1 3950 0
 4186 0060 0198     		ldr	r0, [sp, #4]
 4187 0062 A169     		ldr	r1, [r4, #24]
 4188 0064 FFF7FEFF 		bl	get_fat
 4189              	.LVL652:
 4190              	.L371:
3951:.\ff.c        **** 					}
3952:.\ff.c        **** 				}
3953:.\ff.c        **** 				if (clst < 2) ABORT(fs, FR_INT_ERR);
 4191              		.loc 1 3953 0
 4192 0068 0128     		cmp	r0, #1
 4193 006a 03D8     		bhi	.L372
 4194              		.loc 1 3953 0 is_stmt 0 discriminator 1
 4195 006c 0223     		movs	r3, #2
 4196 006e 6374     		strb	r3, [r4, #17]
 4197 0070 1846     		mov	r0, r3
 4198              	.LVL653:
 4199 0072 7DE0     		b	.L365
 4200              	.LVL654:
 4201              	.L372:
3954:.\ff.c        **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4202              		.loc 1 3954 0 is_stmt 1
 4203 0074 B0F1FF3F 		cmp	r0, #-1
 4204 0078 03D1     		bne	.L373
 4205              		.loc 1 3954 0 is_stmt 0 discriminator 1
 4206 007a 0123     		movs	r3, #1
 4207 007c 6374     		strb	r3, [r4, #17]
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 154


 4208 007e 1846     		mov	r0, r3
 4209              	.LVL655:
 4210 0080 76E0     		b	.L365
 4211              	.LVL656:
 4212              	.L373:
3955:.\ff.c        **** 				fp->clust = clst;				/* Update current cluster */
 4213              		.loc 1 3955 0 is_stmt 1
 4214 0082 A061     		str	r0, [r4, #24]
 4215              	.LVL657:
 4216              	.L369:
3956:.\ff.c        **** 			}
3957:.\ff.c        **** 			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 4217              		.loc 1 3957 0
 4218 0084 DDF80CB0 		ldr	fp, [sp, #12]
 4219 0088 5846     		mov	r0, fp
 4220 008a A169     		ldr	r1, [r4, #24]
 4221 008c FFF7FEFF 		bl	clst2sect
 4222              	.LVL658:
3958:.\ff.c        **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 4223              		.loc 1 3958 0
 4224 0090 8246     		mov	r10, r0
 4225 0092 10B9     		cbnz	r0, .L374
 4226              		.loc 1 3958 0 is_stmt 0 discriminator 1
 4227 0094 0220     		movs	r0, #2
 4228              	.LVL659:
 4229 0096 6074     		strb	r0, [r4, #17]
 4230 0098 6AE0     		b	.L365
 4231              	.LVL660:
 4232              	.L374:
3959:.\ff.c        **** 			sect += csect;
 4233              		.loc 1 3959 0 is_stmt 1
 4234 009a CA44     		add	r10, r10, r9
 4235              	.LVL661:
3960:.\ff.c        **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
3961:.\ff.c        **** 			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 4236              		.loc 1 3961 0
 4237 009c 750A     		lsrs	r5, r6, #9
 4238              	.LVL662:
 4239 009e 25D0     		beq	.L375
3962:.\ff.c        **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 4240              		.loc 1 3962 0
 4241 00a0 09EB0503 		add	r3, r9, r5
 4242 00a4 BBF80A20 		ldrh	r2, [fp, #10]
 4243 00a8 9342     		cmp	r3, r2
 4244 00aa 01D9     		bls	.L376
3963:.\ff.c        **** 					cc = fs->csize - csect;
 4245              		.loc 1 3963 0
 4246 00ac C9EB0205 		rsb	r5, r9, r2
 4247              	.LVL663:
 4248              	.L376:
3964:.\ff.c        **** 				}
3965:.\ff.c        **** 				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 4249              		.loc 1 3965 0
 4250 00b0 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 4251 00b4 4146     		mov	r1, r8
 4252 00b6 5246     		mov	r2, r10
 4253 00b8 2B46     		mov	r3, r5
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 155


 4254 00ba FFF7FEFF 		bl	disk_read
 4255              	.LVL664:
 4256 00be 10B1     		cbz	r0, .L377
 4257              		.loc 1 3965 0 is_stmt 0 discriminator 1
 4258 00c0 0120     		movs	r0, #1
 4259 00c2 6074     		strb	r0, [r4, #17]
 4260 00c4 54E0     		b	.L365
 4261              	.L377:
3966:.\ff.c        **** #if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if 
3967:.\ff.c        **** #if FF_FS_TINY
3968:.\ff.c        **** 				if (fs->wflag && fs->winsect - sect < cc) {
3969:.\ff.c        **** 					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
3970:.\ff.c        **** 				}
3971:.\ff.c        **** #else
3972:.\ff.c        **** 				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 4262              		.loc 1 3972 0 is_stmt 1
 4263 00c6 94F91030 		ldrsb	r3, [r4, #16]
 4264 00ca 002B     		cmp	r3, #0
 4265 00cc 0CDA     		bge	.L378
 4266              		.loc 1 3972 0 is_stmt 0 discriminator 1
 4267 00ce E069     		ldr	r0, [r4, #28]
 4268 00d0 CAEB0000 		rsb	r0, r10, r0
 4269 00d4 A842     		cmp	r0, r5
 4270 00d6 07D2     		bcs	.L378
3973:.\ff.c        **** 					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 4271              		.loc 1 3973 0 is_stmt 1
 4272 00d8 08EB4020 		add	r0, r8, r0, lsl #9
 4273 00dc 04F12801 		add	r1, r4, #40
 4274 00e0 4FF40072 		mov	r2, #512
 4275 00e4 FFF7FEFF 		bl	memcpy
 4276              	.LVL665:
 4277              	.L378:
3974:.\ff.c        **** 				}
3975:.\ff.c        **** #endif
3976:.\ff.c        **** #endif
3977:.\ff.c        **** 				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 4278              		.loc 1 3977 0
 4279 00e8 6D02     		lsls	r5, r5, #9
 4280              	.LVL666:
3978:.\ff.c        **** 				continue;
 4281              		.loc 1 3978 0
 4282 00ea 33E0     		b	.L379
 4283              	.LVL667:
 4284              	.L375:
3979:.\ff.c        **** 			}
3980:.\ff.c        **** #if !FF_FS_TINY
3981:.\ff.c        **** 			if (fp->sect != sect) {			/* Load data sector if not in cache */
 4285              		.loc 1 3981 0
 4286 00ec E269     		ldr	r2, [r4, #28]
 4287 00ee 5245     		cmp	r2, r10
 4288 00f0 20D0     		beq	.L380
3982:.\ff.c        **** #if !FF_FS_READONLY
3983:.\ff.c        **** 				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 4289              		.loc 1 3983 0
 4290 00f2 94F91030 		ldrsb	r3, [r4, #16]
 4291 00f6 002B     		cmp	r3, #0
 4292 00f8 0FDA     		bge	.L381
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 156


3984:.\ff.c        **** 					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 4293              		.loc 1 3984 0
 4294 00fa 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 4295 00fe 04F12801 		add	r1, r4, #40
 4296 0102 0123     		movs	r3, #1
 4297 0104 FFF7FEFF 		bl	disk_write
 4298              	.LVL668:
 4299 0108 18B1     		cbz	r0, .L382
 4300              		.loc 1 3984 0 is_stmt 0 discriminator 1
 4301 010a 0123     		movs	r3, #1
 4302 010c 6374     		strb	r3, [r4, #17]
 4303 010e 1846     		mov	r0, r3
 4304 0110 2EE0     		b	.L365
 4305              	.L382:
3985:.\ff.c        **** 					fp->flag &= (BYTE)~FA_DIRTY;
 4306              		.loc 1 3985 0 is_stmt 1
 4307 0112 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4308 0114 03F07F03 		and	r3, r3, #127
 4309 0118 2374     		strb	r3, [r4, #16]
 4310              	.L381:
3986:.\ff.c        **** 				}
3987:.\ff.c        **** #endif
3988:.\ff.c        **** 				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cac
 4311              		.loc 1 3988 0
 4312 011a 039B     		ldr	r3, [sp, #12]
 4313 011c 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4314 011e 04F12801 		add	r1, r4, #40
 4315 0122 5246     		mov	r2, r10
 4316 0124 0123     		movs	r3, #1
 4317 0126 FFF7FEFF 		bl	disk_read
 4318              	.LVL669:
 4319 012a 18B1     		cbz	r0, .L380
 4320              		.loc 1 3988 0 is_stmt 0 discriminator 1
 4321 012c 0123     		movs	r3, #1
 4322 012e 6374     		strb	r3, [r4, #17]
 4323 0130 1846     		mov	r0, r3
 4324 0132 1DE0     		b	.L365
 4325              	.L380:
3989:.\ff.c        **** 			}
3990:.\ff.c        **** #endif
3991:.\ff.c        **** 			fp->sect = sect;
 4326              		.loc 1 3991 0 is_stmt 1
 4327 0134 C4F81CA0 		str	r10, [r4, #28]
 4328              	.LVL670:
 4329              	.L368:
3992:.\ff.c        **** 		}
3993:.\ff.c        **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 4330              		.loc 1 3993 0
 4331 0138 6169     		ldr	r1, [r4, #20]
 4332 013a C1F30801 		ubfx	r1, r1, #0, #9
 4333 013e C1F50075 		rsb	r5, r1, #512
 4334              	.LVL671:
3994:.\ff.c        **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 4335              		.loc 1 3994 0
 4336 0142 B542     		cmp	r5, r6
 4337 0144 00D9     		bls	.L383
 4338 0146 3546     		mov	r5, r6
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 157


 4339              	.LVL672:
 4340              	.L383:
3995:.\ff.c        **** #if FF_FS_TINY
3996:.\ff.c        **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3997:.\ff.c        **** 		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3998:.\ff.c        **** #else
3999:.\ff.c        **** 		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 4341              		.loc 1 3999 0
 4342 0148 2831     		adds	r1, r1, #40
 4343 014a 4046     		mov	r0, r8
 4344 014c 2144     		add	r1, r1, r4
 4345 014e 2A46     		mov	r2, r5
 4346 0150 FFF7FEFF 		bl	memcpy
 4347              	.LVL673:
 4348              	.L379:
3937:.\ff.c        **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 4349              		.loc 1 3937 0
 4350 0154 761B     		subs	r6, r6, r5
 4351              	.LVL674:
 4352 0156 3B68     		ldr	r3, [r7]
 4353 0158 2B44     		add	r3, r3, r5
 4354 015a 3B60     		str	r3, [r7]
 4355 015c A844     		add	r8, r8, r5
 4356              	.LVL675:
 4357 015e 6369     		ldr	r3, [r4, #20]
 4358 0160 1D44     		add	r5, r5, r3
 4359              	.LVL676:
 4360 0162 6561     		str	r5, [r4, #20]
 4361              	.LVL677:
 4362              	.L367:
3937:.\ff.c        **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 4363              		.loc 1 3937 0 is_stmt 0 discriminator 1
 4364 0164 002E     		cmp	r6, #0
 4365 0166 7FF46BAF 		bne	.L384
4000:.\ff.c        **** #endif
4001:.\ff.c        **** 	}
4002:.\ff.c        **** 
4003:.\ff.c        **** 	LEAVE_FF(fs, FR_OK);
 4366              		.loc 1 4003 0 is_stmt 1
 4367 016a 0020     		movs	r0, #0
 4368 016c 00E0     		b	.L365
 4369              	.LVL678:
 4370              	.L385:
3933:.\ff.c        **** 	remain = fp->obj.objsize - fp->fptr;
 4371              		.loc 1 3933 0
 4372 016e 0720     		movs	r0, #7
 4373              	.LVL679:
 4374              	.L365:
4004:.\ff.c        **** }
 4375              		.loc 1 4004 0
 4376 0170 05B0     		add	sp, sp, #20
 4377              		.cfi_def_cfa_offset 36
 4378              		@ sp needed
 4379 0172 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4380              		.cfi_endproc
 4381              	.LFE34:
 4382              		.size	f_read, .-f_read
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 158


 4383              		.section	.text.f_write,"ax",%progbits
 4384              		.align	2
 4385              		.global	f_write
 4386              		.thumb
 4387              		.thumb_func
 4388              		.type	f_write, %function
 4389              	f_write:
 4390              	.LFB35:
4005:.\ff.c        **** 
4006:.\ff.c        **** 
4007:.\ff.c        **** 
4008:.\ff.c        **** 
4009:.\ff.c        **** #if !FF_FS_READONLY
4010:.\ff.c        **** /*-----------------------------------------------------------------------*/
4011:.\ff.c        **** /* Write File                                                            */
4012:.\ff.c        **** /*-----------------------------------------------------------------------*/
4013:.\ff.c        **** 
4014:.\ff.c        **** FRESULT f_write (
4015:.\ff.c        **** 	FIL* fp,			/* Open file to be written */
4016:.\ff.c        **** 	const void* buff,	/* Data to be written */
4017:.\ff.c        **** 	UINT btw,			/* Number of bytes to write */
4018:.\ff.c        **** 	UINT* bw			/* Number of bytes written */
4019:.\ff.c        **** )
4020:.\ff.c        **** {
 4391              		.loc 1 4020 0
 4392              		.cfi_startproc
 4393              		@ args = 0, pretend = 0, frame = 16
 4394              		@ frame_needed = 0, uses_anonymous_args = 0
 4395              	.LVL680:
 4396 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4397              		.cfi_def_cfa_offset 36
 4398              		.cfi_offset 4, -36
 4399              		.cfi_offset 5, -32
 4400              		.cfi_offset 6, -28
 4401              		.cfi_offset 7, -24
 4402              		.cfi_offset 8, -20
 4403              		.cfi_offset 9, -16
 4404              		.cfi_offset 10, -12
 4405              		.cfi_offset 11, -8
 4406              		.cfi_offset 14, -4
 4407 0004 85B0     		sub	sp, sp, #20
 4408              		.cfi_def_cfa_offset 56
 4409 0006 0446     		mov	r4, r0
 4410 0008 8846     		mov	r8, r1
 4411 000a 1646     		mov	r6, r2
 4412 000c 1F46     		mov	r7, r3
 4413              	.LVL681:
4021:.\ff.c        **** 	FRESULT res;
4022:.\ff.c        **** 	FATFS *fs;
4023:.\ff.c        **** 	DWORD clst;
4024:.\ff.c        **** 	LBA_t sect;
4025:.\ff.c        **** 	UINT wcnt, cc, csect;
4026:.\ff.c        **** 	const BYTE *wbuff = (const BYTE*)buff;
4027:.\ff.c        **** 
4028:.\ff.c        **** 
4029:.\ff.c        **** 	*bw = 0;	/* Clear write byte counter */
 4414              		.loc 1 4029 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 159


 4415 000e 0023     		movs	r3, #0
 4416              	.LVL682:
 4417 0010 3B60     		str	r3, [r7]
4030:.\ff.c        **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 4418              		.loc 1 4030 0
 4419 0012 0190     		str	r0, [sp, #4]
 4420 0014 03A9     		add	r1, sp, #12
 4421              	.LVL683:
 4422 0016 FFF7FEFF 		bl	validate
 4423              	.LVL684:
4031:.\ff.c        **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 4424              		.loc 1 4031 0
 4425 001a 0346     		mov	r3, r0
 4426 001c 08B9     		cbnz	r0, .L389
 4427              		.loc 1 4031 0 is_stmt 0 discriminator 2
 4428 001e 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 4429              	.LVL685:
 4430 0020 0BB1     		cbz	r3, .L390
 4431              	.LVL686:
 4432              	.L389:
 4433              		.loc 1 4031 0 discriminator 3
 4434 0022 1846     		mov	r0, r3
 4435 0024 C0E0     		b	.L391
 4436              	.L390:
4032:.\ff.c        **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 4437              		.loc 1 4032 0 is_stmt 1
 4438 0026 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4439              	.LVL687:
 4440 0028 13F0020F 		tst	r3, #2
 4441 002c 00F0BB80 		beq	.L412
4033:.\ff.c        **** 
4034:.\ff.c        **** 	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
4035:.\ff.c        **** 	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 4442              		.loc 1 4035 0
 4443 0030 6369     		ldr	r3, [r4, #20]
 4444 0032 F342     		cmn	r3, r6
 4445 0034 C0F0AE80 		bcc	.L393
4036:.\ff.c        **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 4446              		.loc 1 4036 0
 4447 0038 DE43     		mvns	r6, r3
 4448              	.LVL688:
 4449 003a ABE0     		b	.L393
 4450              	.LVL689:
 4451              	.L411:
4037:.\ff.c        **** 	}
4038:.\ff.c        **** 
4039:.\ff.c        **** 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp-
4040:.\ff.c        **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 4452              		.loc 1 4040 0
 4453 003c 6369     		ldr	r3, [r4, #20]
 4454 003e C3F30802 		ubfx	r2, r3, #0, #9
 4455 0042 002A     		cmp	r2, #0
 4456 0044 40F08780 		bne	.L394
4041:.\ff.c        **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 4457              		.loc 1 4041 0
 4458 0048 039A     		ldr	r2, [sp, #12]
 4459 004a B2F80A90 		ldrh	r9, [r2, #10]
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 160


 4460 004e 09F1FF39 		add	r9, r9, #-1
 4461              	.LVL690:
4042:.\ff.c        **** 			if (csect == 0) {				/* On the cluster boundary? */
 4462              		.loc 1 4042 0
 4463 0052 19EA5329 		ands	r9, r9, r3, lsr #9
 4464              	.LVL691:
 4465 0056 1FD1     		bne	.L395
4043:.\ff.c        **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 4466              		.loc 1 4043 0
 4467 0058 33B9     		cbnz	r3, .L396
4044:.\ff.c        **** 					clst = fp->obj.sclust;	/* Follow from the origin */
 4468              		.loc 1 4044 0
 4469 005a A068     		ldr	r0, [r4, #8]
 4470              	.LVL692:
4045:.\ff.c        **** 					if (clst == 0) {		/* If no cluster is allocated, */
 4471              		.loc 1 4045 0
 4472 005c 40B9     		cbnz	r0, .L397
4046:.\ff.c        **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 4473              		.loc 1 4046 0
 4474 005e 0198     		ldr	r0, [sp, #4]
 4475              	.LVL693:
 4476 0060 0021     		movs	r1, #0
 4477 0062 FFF7FEFF 		bl	create_chain
 4478              	.LVL694:
 4479 0066 03E0     		b	.L397
 4480              	.LVL695:
 4481              	.L396:
4047:.\ff.c        **** 					}
4048:.\ff.c        **** 				} else {					/* On the middle or end of the file */
4049:.\ff.c        **** #if FF_USE_FASTSEEK
4050:.\ff.c        **** 					if (fp->cltbl) {
4051:.\ff.c        **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
4052:.\ff.c        **** 					} else
4053:.\ff.c        **** #endif
4054:.\ff.c        **** 					{
4055:.\ff.c        **** 						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 4482              		.loc 1 4055 0
 4483 0068 0198     		ldr	r0, [sp, #4]
 4484 006a A169     		ldr	r1, [r4, #24]
 4485 006c FFF7FEFF 		bl	create_chain
 4486              	.LVL696:
 4487              	.L397:
4056:.\ff.c        **** 					}
4057:.\ff.c        **** 				}
4058:.\ff.c        **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 4488              		.loc 1 4058 0
 4489 0070 0028     		cmp	r0, #0
 4490 0072 00F09280 		beq	.L398
4059:.\ff.c        **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 4491              		.loc 1 4059 0
 4492 0076 0128     		cmp	r0, #1
 4493 0078 03D1     		bne	.L399
 4494              		.loc 1 4059 0 is_stmt 0 discriminator 1
 4495 007a 0223     		movs	r3, #2
 4496 007c 6374     		strb	r3, [r4, #17]
 4497 007e 1846     		mov	r0, r3
 4498              	.LVL697:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 161


 4499 0080 92E0     		b	.L391
 4500              	.LVL698:
 4501              	.L399:
4060:.\ff.c        **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4502              		.loc 1 4060 0 is_stmt 1
 4503 0082 B0F1FF3F 		cmp	r0, #-1
 4504 0086 03D1     		bne	.L400
 4505              		.loc 1 4060 0 is_stmt 0 discriminator 1
 4506 0088 0123     		movs	r3, #1
 4507 008a 6374     		strb	r3, [r4, #17]
 4508 008c 1846     		mov	r0, r3
 4509              	.LVL699:
 4510 008e 8BE0     		b	.L391
 4511              	.LVL700:
 4512              	.L400:
4061:.\ff.c        **** 				fp->clust = clst;			/* Update current cluster */
 4513              		.loc 1 4061 0 is_stmt 1
 4514 0090 A061     		str	r0, [r4, #24]
4062:.\ff.c        **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 4515              		.loc 1 4062 0
 4516 0092 A368     		ldr	r3, [r4, #8]
 4517 0094 03B9     		cbnz	r3, .L395
 4518              		.loc 1 4062 0 is_stmt 0 discriminator 1
 4519 0096 A060     		str	r0, [r4, #8]
 4520              	.LVL701:
 4521              	.L395:
4063:.\ff.c        **** 			}
4064:.\ff.c        **** #if FF_FS_TINY
4065:.\ff.c        **** 			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back s
4066:.\ff.c        **** #else
4067:.\ff.c        **** 			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 4522              		.loc 1 4067 0 is_stmt 1
 4523 0098 94F91030 		ldrsb	r3, [r4, #16]
 4524 009c 002B     		cmp	r3, #0
 4525 009e 10DA     		bge	.L401
4068:.\ff.c        **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 4526              		.loc 1 4068 0
 4527 00a0 039B     		ldr	r3, [sp, #12]
 4528 00a2 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4529 00a4 04F12801 		add	r1, r4, #40
 4530 00a8 E269     		ldr	r2, [r4, #28]
 4531 00aa 0123     		movs	r3, #1
 4532 00ac FFF7FEFF 		bl	disk_write
 4533              	.LVL702:
 4534 00b0 18B1     		cbz	r0, .L402
 4535              		.loc 1 4068 0 is_stmt 0 discriminator 1
 4536 00b2 0123     		movs	r3, #1
 4537 00b4 6374     		strb	r3, [r4, #17]
 4538 00b6 1846     		mov	r0, r3
 4539 00b8 76E0     		b	.L391
 4540              	.L402:
4069:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
 4541              		.loc 1 4069 0 is_stmt 1
 4542 00ba 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4543 00bc 03F07F03 		and	r3, r3, #127
 4544 00c0 2374     		strb	r3, [r4, #16]
 4545              	.L401:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 162


4070:.\ff.c        **** 			}
4071:.\ff.c        **** #endif
4072:.\ff.c        **** 			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 4546              		.loc 1 4072 0
 4547 00c2 DDF80CB0 		ldr	fp, [sp, #12]
 4548 00c6 5846     		mov	r0, fp
 4549 00c8 A169     		ldr	r1, [r4, #24]
 4550 00ca FFF7FEFF 		bl	clst2sect
 4551              	.LVL703:
4073:.\ff.c        **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 4552              		.loc 1 4073 0
 4553 00ce 8246     		mov	r10, r0
 4554 00d0 10B9     		cbnz	r0, .L403
 4555              		.loc 1 4073 0 is_stmt 0 discriminator 1
 4556 00d2 0220     		movs	r0, #2
 4557              	.LVL704:
 4558 00d4 6074     		strb	r0, [r4, #17]
 4559 00d6 67E0     		b	.L391
 4560              	.LVL705:
 4561              	.L403:
4074:.\ff.c        **** 			sect += csect;
 4562              		.loc 1 4074 0 is_stmt 1
 4563 00d8 CA44     		add	r10, r10, r9
 4564              	.LVL706:
4075:.\ff.c        **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
4076:.\ff.c        **** 			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 4565              		.loc 1 4076 0
 4566 00da 750A     		lsrs	r5, r6, #9
 4567              	.LVL707:
 4568 00dc 25D0     		beq	.L404
4077:.\ff.c        **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 4569              		.loc 1 4077 0
 4570 00de 09EB0503 		add	r3, r9, r5
 4571 00e2 BBF80A20 		ldrh	r2, [fp, #10]
 4572 00e6 9342     		cmp	r3, r2
 4573 00e8 01D9     		bls	.L405
4078:.\ff.c        **** 					cc = fs->csize - csect;
 4574              		.loc 1 4078 0
 4575 00ea C9EB0205 		rsb	r5, r9, r2
 4576              	.LVL708:
 4577              	.L405:
4079:.\ff.c        **** 				}
4080:.\ff.c        **** 				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 4578              		.loc 1 4080 0
 4579 00ee 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 4580 00f2 4146     		mov	r1, r8
 4581 00f4 5246     		mov	r2, r10
 4582 00f6 2B46     		mov	r3, r5
 4583 00f8 FFF7FEFF 		bl	disk_write
 4584              	.LVL709:
 4585 00fc 10B1     		cbz	r0, .L406
 4586              		.loc 1 4080 0 is_stmt 0 discriminator 1
 4587 00fe 0120     		movs	r0, #1
 4588 0100 6074     		strb	r0, [r4, #17]
 4589 0102 51E0     		b	.L391
 4590              	.L406:
4081:.\ff.c        **** #if FF_FS_MINIMIZE <= 2
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 163


4082:.\ff.c        **** #if FF_FS_TINY
4083:.\ff.c        **** 				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct writ
4084:.\ff.c        **** 					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
4085:.\ff.c        **** 					fs->wflag = 0;
4086:.\ff.c        **** 				}
4087:.\ff.c        **** #else
4088:.\ff.c        **** 				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write *
 4591              		.loc 1 4088 0 is_stmt 1
 4592 0104 E169     		ldr	r1, [r4, #28]
 4593 0106 CAEB0101 		rsb	r1, r10, r1
 4594 010a A942     		cmp	r1, r5
 4595 010c 0BD2     		bcs	.L407
4089:.\ff.c        **** 					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 4596              		.loc 1 4089 0
 4597 010e 04F12800 		add	r0, r4, #40
 4598 0112 08EB4121 		add	r1, r8, r1, lsl #9
 4599 0116 4FF40072 		mov	r2, #512
 4600 011a FFF7FEFF 		bl	memcpy
 4601              	.LVL710:
4090:.\ff.c        **** 					fp->flag &= (BYTE)~FA_DIRTY;
 4602              		.loc 1 4090 0
 4603 011e 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4604 0120 03F07F03 		and	r3, r3, #127
 4605 0124 2374     		strb	r3, [r4, #16]
 4606              	.L407:
4091:.\ff.c        **** 				}
4092:.\ff.c        **** #endif
4093:.\ff.c        **** #endif
4094:.\ff.c        **** 				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 4607              		.loc 1 4094 0
 4608 0126 6D02     		lsls	r5, r5, #9
 4609              	.LVL711:
4095:.\ff.c        **** 				continue;
 4610              		.loc 1 4095 0
 4611 0128 27E0     		b	.L408
 4612              	.LVL712:
 4613              	.L404:
4096:.\ff.c        **** 			}
4097:.\ff.c        **** #if FF_FS_TINY
4098:.\ff.c        **** 			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
4099:.\ff.c        **** 				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
4100:.\ff.c        **** 				fs->winsect = sect;
4101:.\ff.c        **** 			}
4102:.\ff.c        **** #else
4103:.\ff.c        **** 			if (fp->sect != sect && 		/* Fill sector cache with file data */
 4614              		.loc 1 4103 0
 4615 012a E369     		ldr	r3, [r4, #28]
 4616 012c 5345     		cmp	r3, r10
 4617 012e 10D0     		beq	.L409
4104:.\ff.c        **** 				fp->fptr < fp->obj.objsize &&
 4618              		.loc 1 4104 0 discriminator 1
 4619 0130 6269     		ldr	r2, [r4, #20]
 4620 0132 E368     		ldr	r3, [r4, #12]
4103:.\ff.c        **** 				fp->fptr < fp->obj.objsize &&
 4621              		.loc 1 4103 0 discriminator 1
 4622 0134 9A42     		cmp	r2, r3
 4623 0136 0CD2     		bcs	.L409
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 164


4105:.\ff.c        **** 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 4624              		.loc 1 4105 0
 4625 0138 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 4626 013c 04F12801 		add	r1, r4, #40
 4627 0140 5246     		mov	r2, r10
 4628 0142 0123     		movs	r3, #1
 4629 0144 FFF7FEFF 		bl	disk_read
 4630              	.LVL713:
4104:.\ff.c        **** 				fp->fptr < fp->obj.objsize &&
 4631              		.loc 1 4104 0
 4632 0148 18B1     		cbz	r0, .L409
4106:.\ff.c        **** 					ABORT(fs, FR_DISK_ERR);
 4633              		.loc 1 4106 0
 4634 014a 0123     		movs	r3, #1
 4635 014c 6374     		strb	r3, [r4, #17]
 4636 014e 1846     		mov	r0, r3
 4637 0150 2AE0     		b	.L391
 4638              	.L409:
4107:.\ff.c        **** 			}
4108:.\ff.c        **** #endif
4109:.\ff.c        **** 			fp->sect = sect;
 4639              		.loc 1 4109 0
 4640 0152 C4F81CA0 		str	r10, [r4, #28]
 4641              	.LVL714:
 4642              	.L394:
4110:.\ff.c        **** 		}
4111:.\ff.c        **** 		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 4643              		.loc 1 4111 0
 4644 0156 6069     		ldr	r0, [r4, #20]
 4645 0158 C0F30800 		ubfx	r0, r0, #0, #9
 4646 015c C0F50075 		rsb	r5, r0, #512
 4647              	.LVL715:
4112:.\ff.c        **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 4648              		.loc 1 4112 0
 4649 0160 B542     		cmp	r5, r6
 4650 0162 00D9     		bls	.L410
 4651 0164 3546     		mov	r5, r6
 4652              	.LVL716:
 4653              	.L410:
4113:.\ff.c        **** #if FF_FS_TINY
4114:.\ff.c        **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
4115:.\ff.c        **** 		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
4116:.\ff.c        **** 		fs->wflag = 1;
4117:.\ff.c        **** #else
4118:.\ff.c        **** 		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 4654              		.loc 1 4118 0
 4655 0166 2830     		adds	r0, r0, #40
 4656 0168 2044     		add	r0, r0, r4
 4657 016a 4146     		mov	r1, r8
 4658 016c 2A46     		mov	r2, r5
 4659 016e FFF7FEFF 		bl	memcpy
 4660              	.LVL717:
4119:.\ff.c        **** 		fp->flag |= FA_DIRTY;
 4661              		.loc 1 4119 0
 4662 0172 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4663 0174 63F07F03 		orn	r3, r3, #127
 4664 0178 2374     		strb	r3, [r4, #16]
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 165


 4665              	.L408:
4039:.\ff.c        **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 4666              		.loc 1 4039 0
 4667 017a 761B     		subs	r6, r6, r5
 4668              	.LVL718:
 4669 017c 3B68     		ldr	r3, [r7]
 4670 017e 2B44     		add	r3, r3, r5
 4671 0180 3B60     		str	r3, [r7]
 4672 0182 A844     		add	r8, r8, r5
 4673              	.LVL719:
 4674 0184 6369     		ldr	r3, [r4, #20]
 4675 0186 1D44     		add	r5, r5, r3
 4676              	.LVL720:
 4677 0188 6561     		str	r5, [r4, #20]
 4678 018a E368     		ldr	r3, [r4, #12]
 4679 018c 9D42     		cmp	r5, r3
 4680 018e 38BF     		it	cc
 4681 0190 1D46     		movcc	r5, r3
 4682 0192 E560     		str	r5, [r4, #12]
 4683              	.L393:
4039:.\ff.c        **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 4684              		.loc 1 4039 0 is_stmt 0 discriminator 1
 4685 0194 002E     		cmp	r6, #0
 4686 0196 7FF451AF 		bne	.L411
 4687              	.L398:
4120:.\ff.c        **** #endif
4121:.\ff.c        **** 	}
4122:.\ff.c        **** 
4123:.\ff.c        **** 	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 4688              		.loc 1 4123 0 is_stmt 1
 4689 019a 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4690 019c 43F04003 		orr	r3, r3, #64
 4691 01a0 2374     		strb	r3, [r4, #16]
4124:.\ff.c        **** 
4125:.\ff.c        **** 	LEAVE_FF(fs, FR_OK);
 4692              		.loc 1 4125 0
 4693 01a2 0020     		movs	r0, #0
 4694 01a4 00E0     		b	.L391
 4695              	.LVL721:
 4696              	.L412:
4032:.\ff.c        **** 
 4697              		.loc 1 4032 0
 4698 01a6 0720     		movs	r0, #7
 4699              	.LVL722:
 4700              	.L391:
4126:.\ff.c        **** }
 4701              		.loc 1 4126 0
 4702 01a8 05B0     		add	sp, sp, #20
 4703              		.cfi_def_cfa_offset 36
 4704              		@ sp needed
 4705 01aa BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4706              		.cfi_endproc
 4707              	.LFE35:
 4708              		.size	f_write, .-f_write
 4709 01ae 00BF     		.section	.text.f_sync,"ax",%progbits
 4710              		.align	2
 4711              		.global	f_sync
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 166


 4712              		.thumb
 4713              		.thumb_func
 4714              		.type	f_sync, %function
 4715              	f_sync:
 4716              	.LFB36:
4127:.\ff.c        **** 
4128:.\ff.c        **** 
4129:.\ff.c        **** 
4130:.\ff.c        **** 
4131:.\ff.c        **** /*-----------------------------------------------------------------------*/
4132:.\ff.c        **** /* Synchronize the File                                                  */
4133:.\ff.c        **** /*-----------------------------------------------------------------------*/
4134:.\ff.c        **** 
4135:.\ff.c        **** FRESULT f_sync (
4136:.\ff.c        **** 	FIL* fp		/* Open file to be synced */
4137:.\ff.c        **** )
4138:.\ff.c        **** {
 4717              		.loc 1 4138 0
 4718              		.cfi_startproc
 4719              		@ args = 0, pretend = 0, frame = 8
 4720              		@ frame_needed = 0, uses_anonymous_args = 0
 4721              	.LVL723:
 4722 0000 70B5     		push	{r4, r5, r6, lr}
 4723              		.cfi_def_cfa_offset 16
 4724              		.cfi_offset 4, -16
 4725              		.cfi_offset 5, -12
 4726              		.cfi_offset 6, -8
 4727              		.cfi_offset 14, -4
 4728 0002 82B0     		sub	sp, sp, #8
 4729              		.cfi_def_cfa_offset 24
 4730 0004 0446     		mov	r4, r0
4139:.\ff.c        **** 	FRESULT res;
4140:.\ff.c        **** 	FATFS *fs;
4141:.\ff.c        **** 	DWORD tm;
4142:.\ff.c        **** 	BYTE *dir;
4143:.\ff.c        **** 
4144:.\ff.c        **** 
4145:.\ff.c        **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 4731              		.loc 1 4145 0
 4732 0006 01A9     		add	r1, sp, #4
 4733 0008 FFF7FEFF 		bl	validate
 4734              	.LVL724:
4146:.\ff.c        **** 	if (res == FR_OK) {
 4735              		.loc 1 4146 0
 4736 000c 0346     		mov	r3, r0
 4737 000e 0028     		cmp	r0, #0
 4738 0010 3FD1     		bne	.L416
4147:.\ff.c        **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 4739              		.loc 1 4147 0
 4740 0012 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 4741 0014 12F0400F 		tst	r2, #64
 4742 0018 3BD0     		beq	.L416
4148:.\ff.c        **** #if !FF_FS_TINY
4149:.\ff.c        **** 			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 4743              		.loc 1 4149 0
 4744 001a 12F0800F 		tst	r2, #128
 4745 001e 0CD0     		beq	.L417
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 167


4150:.\ff.c        **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 4746              		.loc 1 4150 0
 4747 0020 019B     		ldr	r3, [sp, #4]
 4748 0022 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4749              	.LVL725:
 4750 0024 04F12801 		add	r1, r4, #40
 4751 0028 E269     		ldr	r2, [r4, #28]
 4752 002a 0123     		movs	r3, #1
 4753 002c FFF7FEFF 		bl	disk_write
 4754              	.LVL726:
 4755 0030 88BB     		cbnz	r0, .L419
4151:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
 4756              		.loc 1 4151 0
 4757 0032 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4758 0034 03F07F03 		and	r3, r3, #127
 4759 0038 2374     		strb	r3, [r4, #16]
 4760              	.L417:
4152:.\ff.c        **** 			}
4153:.\ff.c        **** #endif
4154:.\ff.c        **** 			/* Update the directory entry */
4155:.\ff.c        **** 			tm = GET_FATTIME();				/* Modified time */
 4761              		.loc 1 4155 0
 4762 003a FFF7FEFF 		bl	get_fattime
 4763              	.LVL727:
 4764 003e 0646     		mov	r6, r0
 4765              	.LVL728:
4156:.\ff.c        **** #if FF_FS_EXFAT
4157:.\ff.c        **** 			if (fs->fs_type == FS_EXFAT) {
4158:.\ff.c        **** 				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
4159:.\ff.c        **** 				if (res == FR_OK) {
4160:.\ff.c        **** 					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if nee
4161:.\ff.c        **** 				}
4162:.\ff.c        **** 				if (res == FR_OK) {
4163:.\ff.c        **** 					DIR dj;
4164:.\ff.c        **** 					DEF_NAMBUF
4165:.\ff.c        **** 
4166:.\ff.c        **** 					INIT_NAMBUF(fs);
4167:.\ff.c        **** 					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
4168:.\ff.c        **** 					if (res == FR_OK) {
4169:.\ff.c        **** 						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has be
4170:.\ff.c        **** 						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
4171:.\ff.c        **** 						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
4172:.\ff.c        **** 						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
4173:.\ff.c        **** 						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid 
4174:.\ff.c        **** 						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
4175:.\ff.c        **** 						fs->dirbuf[XDIR_ModTime10] = 0;
4176:.\ff.c        **** 						st_dword(fs->dirbuf + XDIR_AccTime, 0);
4177:.\ff.c        **** 						res = store_xdir(&dj);	/* Restore it to the directory */
4178:.\ff.c        **** 						if (res == FR_OK) {
4179:.\ff.c        **** 							res = sync_fs(fs);
4180:.\ff.c        **** 							fp->flag &= (BYTE)~FA_MODIFIED;
4181:.\ff.c        **** 						}
4182:.\ff.c        **** 					}
4183:.\ff.c        **** 					FREE_NAMBUF();
4184:.\ff.c        **** 				}
4185:.\ff.c        **** 			} else
4186:.\ff.c        **** #endif
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 168


4187:.\ff.c        **** 			{
4188:.\ff.c        **** 				res = move_window(fs, fp->dir_sect);
 4766              		.loc 1 4188 0
 4767 0040 0198     		ldr	r0, [sp, #4]
 4768              	.LVL729:
 4769 0042 216A     		ldr	r1, [r4, #32]
 4770 0044 FFF7FEFF 		bl	move_window
 4771              	.LVL730:
4189:.\ff.c        **** 				if (res == FR_OK) {
 4772              		.loc 1 4189 0
 4773 0048 0346     		mov	r3, r0
 4774 004a 10BB     		cbnz	r0, .L416
4190:.\ff.c        **** 					dir = fp->dir_ptr;
 4775              		.loc 1 4190 0
 4776 004c 656A     		ldr	r5, [r4, #36]
 4777              	.LVL731:
4191:.\ff.c        **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been chan
 4778              		.loc 1 4191 0
 4779 004e EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 4780 0050 43F02003 		orr	r3, r3, #32
 4781 0054 EB72     		strb	r3, [r5, #11]
4192:.\ff.c        **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 4782              		.loc 1 4192 0
 4783 0056 2068     		ldr	r0, [r4]
 4784              	.LVL732:
 4785 0058 2946     		mov	r1, r5
 4786 005a A268     		ldr	r2, [r4, #8]
 4787 005c FFF7FEFF 		bl	st_clust
 4788              	.LVL733:
4193:.\ff.c        **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 4789              		.loc 1 4193 0
 4790 0060 05F11C00 		add	r0, r5, #28
 4791 0064 E168     		ldr	r1, [r4, #12]
 4792 0066 FFF7FEFF 		bl	st_dword
 4793              	.LVL734:
4194:.\ff.c        **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 4794              		.loc 1 4194 0
 4795 006a 05F11600 		add	r0, r5, #22
 4796 006e 3146     		mov	r1, r6
 4797 0070 FFF7FEFF 		bl	st_dword
 4798              	.LVL735:
4195:.\ff.c        **** 					st_word(dir + DIR_LstAccDate, 0);
 4799              		.loc 1 4195 0
 4800 0074 05F11200 		add	r0, r5, #18
 4801 0078 0021     		movs	r1, #0
 4802 007a FFF7FEFF 		bl	st_word
 4803              	.LVL736:
4196:.\ff.c        **** 					fs->wflag = 1;
 4804              		.loc 1 4196 0
 4805 007e 0198     		ldr	r0, [sp, #4]
 4806 0080 0123     		movs	r3, #1
 4807 0082 0371     		strb	r3, [r0, #4]
4197:.\ff.c        **** 					res = sync_fs(fs);					/* Restore it to the directory */
 4808              		.loc 1 4197 0
 4809 0084 FFF7FEFF 		bl	sync_fs
 4810              	.LVL737:
 4811 0088 0346     		mov	r3, r0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 169


 4812              	.LVL738:
4198:.\ff.c        **** 					fp->flag &= (BYTE)~FA_MODIFIED;
 4813              		.loc 1 4198 0
 4814 008a 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 4815 008c 22F04002 		bic	r2, r2, #64
 4816 0090 2274     		strb	r2, [r4, #16]
 4817              	.LVL739:
 4818              	.L416:
4199:.\ff.c        **** 				}
4200:.\ff.c        **** 			}
4201:.\ff.c        **** 		}
4202:.\ff.c        **** 	}
4203:.\ff.c        **** 
4204:.\ff.c        **** 	LEAVE_FF(fs, res);
 4819              		.loc 1 4204 0
 4820 0092 1846     		mov	r0, r3
 4821 0094 00E0     		b	.L418
 4822              	.LVL740:
 4823              	.L419:
4150:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
 4824              		.loc 1 4150 0
 4825 0096 0120     		movs	r0, #1
 4826              	.L418:
4205:.\ff.c        **** }
 4827              		.loc 1 4205 0
 4828 0098 02B0     		add	sp, sp, #8
 4829              		.cfi_def_cfa_offset 16
 4830              		@ sp needed
 4831 009a 70BD     		pop	{r4, r5, r6, pc}
 4832              		.cfi_endproc
 4833              	.LFE36:
 4834              		.size	f_sync, .-f_sync
 4835              		.section	.text.f_close,"ax",%progbits
 4836              		.align	2
 4837              		.global	f_close
 4838              		.thumb
 4839              		.thumb_func
 4840              		.type	f_close, %function
 4841              	f_close:
 4842              	.LFB37:
4206:.\ff.c        **** 
4207:.\ff.c        **** #endif /* !FF_FS_READONLY */
4208:.\ff.c        **** 
4209:.\ff.c        **** 
4210:.\ff.c        **** 
4211:.\ff.c        **** 
4212:.\ff.c        **** /*-----------------------------------------------------------------------*/
4213:.\ff.c        **** /* Close File                                                            */
4214:.\ff.c        **** /*-----------------------------------------------------------------------*/
4215:.\ff.c        **** 
4216:.\ff.c        **** FRESULT f_close (
4217:.\ff.c        **** 	FIL* fp		/* Open file to be closed */
4218:.\ff.c        **** )
4219:.\ff.c        **** {
 4843              		.loc 1 4219 0
 4844              		.cfi_startproc
 4845              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 170


 4846              		@ frame_needed = 0, uses_anonymous_args = 0
 4847              	.LVL741:
 4848 0000 10B5     		push	{r4, lr}
 4849              		.cfi_def_cfa_offset 8
 4850              		.cfi_offset 4, -8
 4851              		.cfi_offset 14, -4
 4852 0002 82B0     		sub	sp, sp, #8
 4853              		.cfi_def_cfa_offset 16
 4854 0004 0446     		mov	r4, r0
4220:.\ff.c        **** 	FRESULT res;
4221:.\ff.c        **** 	FATFS *fs;
4222:.\ff.c        **** 
4223:.\ff.c        **** #if !FF_FS_READONLY
4224:.\ff.c        **** 	res = f_sync(fp);					/* Flush cached data */
 4855              		.loc 1 4224 0
 4856 0006 FFF7FEFF 		bl	f_sync
 4857              	.LVL742:
4225:.\ff.c        **** 	if (res == FR_OK)
 4858              		.loc 1 4225 0
 4859 000a 0346     		mov	r3, r0
 4860 000c 38B9     		cbnz	r0, .L422
4226:.\ff.c        **** #endif
4227:.\ff.c        **** 	{
4228:.\ff.c        **** 		res = validate(&fp->obj, &fs);	/* Lock volume */
 4861              		.loc 1 4228 0
 4862 000e 2046     		mov	r0, r4
 4863              	.LVL743:
 4864 0010 01A9     		add	r1, sp, #4
 4865 0012 FFF7FEFF 		bl	validate
 4866              	.LVL744:
4229:.\ff.c        **** 		if (res == FR_OK) {
 4867              		.loc 1 4229 0
 4868 0016 0346     		mov	r3, r0
 4869 0018 08B9     		cbnz	r0, .L422
4230:.\ff.c        **** #if FF_FS_LOCK
4231:.\ff.c        **** 			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
4232:.\ff.c        **** 			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
4233:.\ff.c        **** #else
4234:.\ff.c        **** 			fp->obj.fs = 0;	/* Invalidate file object */
 4870              		.loc 1 4234 0
 4871 001a 0022     		movs	r2, #0
 4872 001c 2260     		str	r2, [r4]
 4873              	.L422:
 4874              	.LVL745:
4235:.\ff.c        **** #endif
4236:.\ff.c        **** #if FF_FS_REENTRANT
4237:.\ff.c        **** 			unlock_volume(fs, FR_OK);		/* Unlock volume */
4238:.\ff.c        **** #endif
4239:.\ff.c        **** 		}
4240:.\ff.c        **** 	}
4241:.\ff.c        **** 	return res;
4242:.\ff.c        **** }
 4875              		.loc 1 4242 0
 4876 001e 1846     		mov	r0, r3
 4877 0020 02B0     		add	sp, sp, #8
 4878              		.cfi_def_cfa_offset 8
 4879              		@ sp needed
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 171


 4880 0022 10BD     		pop	{r4, pc}
 4881              		.cfi_endproc
 4882              	.LFE37:
 4883              		.size	f_close, .-f_close
 4884              		.section	.text.f_lseek,"ax",%progbits
 4885              		.align	2
 4886              		.global	f_lseek
 4887              		.thumb
 4888              		.thumb_func
 4889              		.type	f_lseek, %function
 4890              	f_lseek:
 4891              	.LFB38:
4243:.\ff.c        **** 
4244:.\ff.c        **** 
4245:.\ff.c        **** 
4246:.\ff.c        **** 
4247:.\ff.c        **** #if FF_FS_RPATH >= 1
4248:.\ff.c        **** /*-----------------------------------------------------------------------*/
4249:.\ff.c        **** /* Change Current Directory or Current Drive, Get Current Directory      */
4250:.\ff.c        **** /*-----------------------------------------------------------------------*/
4251:.\ff.c        **** 
4252:.\ff.c        **** FRESULT f_chdrive (
4253:.\ff.c        **** 	const TCHAR* path		/* Drive number to set */
4254:.\ff.c        **** )
4255:.\ff.c        **** {
4256:.\ff.c        **** 	int vol;
4257:.\ff.c        **** 
4258:.\ff.c        **** 
4259:.\ff.c        **** 	/* Get logical drive number */
4260:.\ff.c        **** 	vol = get_ldnumber(&path);
4261:.\ff.c        **** 	if (vol < 0) return FR_INVALID_DRIVE;
4262:.\ff.c        **** 	CurrVol = (BYTE)vol;	/* Set it as current volume */
4263:.\ff.c        **** 
4264:.\ff.c        **** 	return FR_OK;
4265:.\ff.c        **** }
4266:.\ff.c        **** 
4267:.\ff.c        **** 
4268:.\ff.c        **** 
4269:.\ff.c        **** FRESULT f_chdir (
4270:.\ff.c        **** 	const TCHAR* path	/* Pointer to the directory path */
4271:.\ff.c        **** )
4272:.\ff.c        **** {
4273:.\ff.c        **** #if FF_STR_VOLUME_ID == 2
4274:.\ff.c        **** 	UINT i;
4275:.\ff.c        **** #endif
4276:.\ff.c        **** 	FRESULT res;
4277:.\ff.c        **** 	DIR dj;
4278:.\ff.c        **** 	FATFS *fs;
4279:.\ff.c        **** 	DEF_NAMBUF
4280:.\ff.c        **** 
4281:.\ff.c        **** 
4282:.\ff.c        **** 	/* Get logical drive */
4283:.\ff.c        **** 	res = mount_volume(&path, &fs, 0);
4284:.\ff.c        **** 	if (res == FR_OK) {
4285:.\ff.c        **** 		dj.obj.fs = fs;
4286:.\ff.c        **** 		INIT_NAMBUF(fs);
4287:.\ff.c        **** 		res = follow_path(&dj, path);		/* Follow the path */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 172


4288:.\ff.c        **** 		if (res == FR_OK) {					/* Follow completed */
4289:.\ff.c        **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it the start directory itself? */
4290:.\ff.c        **** 				fs->cdir = dj.obj.sclust;
4291:.\ff.c        **** #if FF_FS_EXFAT
4292:.\ff.c        **** 				if (fs->fs_type == FS_EXFAT) {
4293:.\ff.c        **** 					fs->cdc_scl = dj.obj.c_scl;
4294:.\ff.c        **** 					fs->cdc_size = dj.obj.c_size;
4295:.\ff.c        **** 					fs->cdc_ofs = dj.obj.c_ofs;
4296:.\ff.c        **** 				}
4297:.\ff.c        **** #endif
4298:.\ff.c        **** 			} else {
4299:.\ff.c        **** 				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
4300:.\ff.c        **** #if FF_FS_EXFAT
4301:.\ff.c        **** 					if (fs->fs_type == FS_EXFAT) {
4302:.\ff.c        **** 						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
4303:.\ff.c        **** 						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
4304:.\ff.c        **** 						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
4305:.\ff.c        **** 						fs->cdc_ofs = dj.blk_ofs;
4306:.\ff.c        **** 					} else
4307:.\ff.c        **** #endif
4308:.\ff.c        **** 					{
4309:.\ff.c        **** 						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
4310:.\ff.c        **** 					}
4311:.\ff.c        **** 				} else {
4312:.\ff.c        **** 					res = FR_NO_PATH;		/* Reached but a file */
4313:.\ff.c        **** 				}
4314:.\ff.c        **** 			}
4315:.\ff.c        **** 		}
4316:.\ff.c        **** 		FREE_NAMBUF();
4317:.\ff.c        **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
4318:.\ff.c        **** #if FF_STR_VOLUME_ID == 2	/* Also current drive is changed if in Unix style volume ID */
4319:.\ff.c        **** 		if (res == FR_OK) {
4320:.\ff.c        **** 			for (i = FF_VOLUMES - 1; i && fs != FatFs[i]; i--) ;	/* Set current drive */
4321:.\ff.c        **** 			CurrVol = (BYTE)i;
4322:.\ff.c        **** 		}
4323:.\ff.c        **** #endif
4324:.\ff.c        **** 	}
4325:.\ff.c        **** 
4326:.\ff.c        **** 	LEAVE_FF(fs, res);
4327:.\ff.c        **** }
4328:.\ff.c        **** 
4329:.\ff.c        **** 
4330:.\ff.c        **** #if FF_FS_RPATH >= 2
4331:.\ff.c        **** FRESULT f_getcwd (
4332:.\ff.c        **** 	TCHAR* buff,	/* Pointer to the directory path */
4333:.\ff.c        **** 	UINT len		/* Size of buff in unit of TCHAR */
4334:.\ff.c        **** )
4335:.\ff.c        **** {
4336:.\ff.c        **** 	FRESULT res;
4337:.\ff.c        **** 	DIR dj;
4338:.\ff.c        **** 	FATFS *fs;
4339:.\ff.c        **** 	UINT i, n;
4340:.\ff.c        **** 	DWORD ccl;
4341:.\ff.c        **** 	TCHAR *tp = buff;
4342:.\ff.c        **** #if FF_VOLUMES >= 2
4343:.\ff.c        **** 	UINT vl;
4344:.\ff.c        **** #if FF_STR_VOLUME_ID
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 173


4345:.\ff.c        **** 	const char *vp;
4346:.\ff.c        **** #endif
4347:.\ff.c        **** #endif
4348:.\ff.c        **** 	FILINFO fno;
4349:.\ff.c        **** 	DEF_NAMBUF
4350:.\ff.c        **** 
4351:.\ff.c        **** 
4352:.\ff.c        **** 	/* Get logical drive */
4353:.\ff.c        **** 	buff[0] = 0;	/* Set null string to get current volume */
4354:.\ff.c        **** 	res = mount_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
4355:.\ff.c        **** 	if (res == FR_OK) {
4356:.\ff.c        **** 		dj.obj.fs = fs;
4357:.\ff.c        **** 		INIT_NAMBUF(fs);
4358:.\ff.c        **** 
4359:.\ff.c        **** 		/* Follow parent directories and create the path */
4360:.\ff.c        **** 		i = len;			/* Bottom of buffer (directory stack base) */
4361:.\ff.c        **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root pat
4362:.\ff.c        **** 			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
4363:.\ff.c        **** 			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
4364:.\ff.c        **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
4365:.\ff.c        **** 				if (res != FR_OK) break;
4366:.\ff.c        **** 				res = move_window(fs, dj.sect);
4367:.\ff.c        **** 				if (res != FR_OK) break;
4368:.\ff.c        **** 				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
4369:.\ff.c        **** 				res = dir_sdi(&dj, 0);
4370:.\ff.c        **** 				if (res != FR_OK) break;
4371:.\ff.c        **** 				do {							/* Find the entry links to the child directory */
4372:.\ff.c        **** 					res = DIR_READ_FILE(&dj);
4373:.\ff.c        **** 					if (res != FR_OK) break;
4374:.\ff.c        **** 					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
4375:.\ff.c        **** 					res = dir_next(&dj, 0);
4376:.\ff.c        **** 				} while (res == FR_OK);
4377:.\ff.c        **** 				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
4378:.\ff.c        **** 				if (res != FR_OK) break;
4379:.\ff.c        **** 				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
4380:.\ff.c        **** 				for (n = 0; fno.fname[n]; n++) ;	/* Name length */
4381:.\ff.c        **** 				if (i < n + 1) {	/* Insufficient space to store the path name? */
4382:.\ff.c        **** 					res = FR_NOT_ENOUGH_CORE; break;
4383:.\ff.c        **** 				}
4384:.\ff.c        **** 				while (n) buff[--i] = fno.fname[--n];	/* Stack the name */
4385:.\ff.c        **** 				buff[--i] = '/';
4386:.\ff.c        **** 			}
4387:.\ff.c        **** 		}
4388:.\ff.c        **** 		if (res == FR_OK) {
4389:.\ff.c        **** 			if (i == len) buff[--i] = '/';	/* Is it the root-directory? */
4390:.\ff.c        **** #if FF_VOLUMES >= 2			/* Put drive prefix */
4391:.\ff.c        **** 			vl = 0;
4392:.\ff.c        **** #if FF_STR_VOLUME_ID >= 1	/* String volume ID */
4393:.\ff.c        **** 			for (n = 0, vp = (const char*)VolumeStr[CurrVol]; vp[n]; n++) ;
4394:.\ff.c        **** 			if (i >= n + 2) {
4395:.\ff.c        **** 				if (FF_STR_VOLUME_ID == 2) *tp++ = (TCHAR)'/';
4396:.\ff.c        **** 				for (vl = 0; vl < n; *tp++ = (TCHAR)vp[vl], vl++) ;
4397:.\ff.c        **** 				if (FF_STR_VOLUME_ID == 1) *tp++ = (TCHAR)':';
4398:.\ff.c        **** 				vl++;
4399:.\ff.c        **** 			}
4400:.\ff.c        **** #else						/* Numeric volume ID */
4401:.\ff.c        **** 			if (i >= 3) {
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 174


4402:.\ff.c        **** 				*tp++ = (TCHAR)'0' + CurrVol;
4403:.\ff.c        **** 				*tp++ = (TCHAR)':';
4404:.\ff.c        **** 				vl = 2;
4405:.\ff.c        **** 			}
4406:.\ff.c        **** #endif
4407:.\ff.c        **** 			if (vl == 0) res = FR_NOT_ENOUGH_CORE;
4408:.\ff.c        **** #endif
4409:.\ff.c        **** 			/* Add current directory path */
4410:.\ff.c        **** 			if (res == FR_OK) {
4411:.\ff.c        **** 				do {	/* Copy stacked path string */
4412:.\ff.c        **** 					*tp++ = buff[i++];
4413:.\ff.c        **** 				} while (i < len);
4414:.\ff.c        **** 			}
4415:.\ff.c        **** 		}
4416:.\ff.c        **** 		FREE_NAMBUF();
4417:.\ff.c        **** 	}
4418:.\ff.c        **** 
4419:.\ff.c        **** 	*tp = 0;
4420:.\ff.c        **** 	LEAVE_FF(fs, res);
4421:.\ff.c        **** }
4422:.\ff.c        **** 
4423:.\ff.c        **** #endif /* FF_FS_RPATH >= 2 */
4424:.\ff.c        **** #endif /* FF_FS_RPATH >= 1 */
4425:.\ff.c        **** 
4426:.\ff.c        **** 
4427:.\ff.c        **** 
4428:.\ff.c        **** #if FF_FS_MINIMIZE <= 2
4429:.\ff.c        **** /*-----------------------------------------------------------------------*/
4430:.\ff.c        **** /* Seek File Read/Write Pointer                                          */
4431:.\ff.c        **** /*-----------------------------------------------------------------------*/
4432:.\ff.c        **** 
4433:.\ff.c        **** FRESULT f_lseek (
4434:.\ff.c        **** 	FIL* fp,		/* Pointer to the file object */
4435:.\ff.c        **** 	FSIZE_t ofs		/* File pointer from top of file */
4436:.\ff.c        **** )
4437:.\ff.c        **** {
 4892              		.loc 1 4437 0
 4893              		.cfi_startproc
 4894              		@ args = 0, pretend = 0, frame = 8
 4895              		@ frame_needed = 0, uses_anonymous_args = 0
 4896              	.LVL746:
 4897 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4898              		.cfi_def_cfa_offset 24
 4899              		.cfi_offset 4, -24
 4900              		.cfi_offset 5, -20
 4901              		.cfi_offset 6, -16
 4902              		.cfi_offset 7, -12
 4903              		.cfi_offset 8, -8
 4904              		.cfi_offset 14, -4
 4905 0004 82B0     		sub	sp, sp, #8
 4906              		.cfi_def_cfa_offset 32
 4907 0006 0446     		mov	r4, r0
 4908 0008 0D46     		mov	r5, r1
4438:.\ff.c        **** 	FRESULT res;
4439:.\ff.c        **** 	FATFS *fs;
4440:.\ff.c        **** 	DWORD clst, bcs;
4441:.\ff.c        **** 	LBA_t nsect;
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 175


4442:.\ff.c        **** 	FSIZE_t ifptr;
4443:.\ff.c        **** #if FF_USE_FASTSEEK
4444:.\ff.c        **** 	DWORD cl, pcl, ncl, tcl, tlen, ulen;
4445:.\ff.c        **** 	DWORD *tbl;
4446:.\ff.c        **** 	LBA_t dsc;
4447:.\ff.c        **** #endif
4448:.\ff.c        **** 
4449:.\ff.c        **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 4909              		.loc 1 4449 0
 4910 000a 8046     		mov	r8, r0
 4911 000c 01A9     		add	r1, sp, #4
 4912              	.LVL747:
 4913 000e FFF7FEFF 		bl	validate
 4914              	.LVL748:
4450:.\ff.c        **** 	if (res == FR_OK) res = (FRESULT)fp->err;
 4915              		.loc 1 4450 0
 4916 0012 0646     		mov	r6, r0
 4917 0014 00B9     		cbnz	r0, .L425
 4918              		.loc 1 4450 0 is_stmt 0 discriminator 1
 4919 0016 667C     		ldrb	r6, [r4, #17]	@ zero_extendqisi2
 4920              	.LVL749:
 4921              	.L425:
4451:.\ff.c        **** #if FF_FS_EXFAT && !FF_FS_READONLY
4452:.\ff.c        **** 	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
4453:.\ff.c        **** 		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed
4454:.\ff.c        **** 	}
4455:.\ff.c        **** #endif
4456:.\ff.c        **** 	if (res != FR_OK) LEAVE_FF(fs, res);
 4922              		.loc 1 4456 0 is_stmt 1
 4923 0018 002E     		cmp	r6, #0
 4924 001a 40F0A680 		bne	.L448
4457:.\ff.c        **** 
4458:.\ff.c        **** #if FF_USE_FASTSEEK
4459:.\ff.c        **** 	if (fp->cltbl) {	/* Fast seek */
4460:.\ff.c        **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
4461:.\ff.c        **** 			tbl = fp->cltbl;
4462:.\ff.c        **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
4463:.\ff.c        **** 			cl = fp->obj.sclust;		/* Origin of the chain */
4464:.\ff.c        **** 			if (cl != 0) {
4465:.\ff.c        **** 				do {
4466:.\ff.c        **** 					/* Get a fragment */
4467:.\ff.c        **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
4468:.\ff.c        **** 					do {
4469:.\ff.c        **** 						pcl = cl; ncl++;
4470:.\ff.c        **** 						cl = get_fat(&fp->obj, cl);
4471:.\ff.c        **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
4472:.\ff.c        **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4473:.\ff.c        **** 					} while (cl == pcl + 1);
4474:.\ff.c        **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
4475:.\ff.c        **** 						*tbl++ = ncl; *tbl++ = tcl;
4476:.\ff.c        **** 					}
4477:.\ff.c        **** 				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
4478:.\ff.c        **** 			}
4479:.\ff.c        **** 			*fp->cltbl = ulen;	/* Number of items used */
4480:.\ff.c        **** 			if (ulen <= tlen) {
4481:.\ff.c        **** 				*tbl = 0;		/* Terminate table */
4482:.\ff.c        **** 			} else {
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 176


4483:.\ff.c        **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
4484:.\ff.c        **** 			}
4485:.\ff.c        **** 		} else {						/* Fast seek */
4486:.\ff.c        **** 			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
4487:.\ff.c        **** 			fp->fptr = ofs;				/* Set file pointer */
4488:.\ff.c        **** 			if (ofs > 0) {
4489:.\ff.c        **** 				fp->clust = clmt_clust(fp, ofs - 1);
4490:.\ff.c        **** 				dsc = clst2sect(fs, fp->clust);
4491:.\ff.c        **** 				if (dsc == 0) ABORT(fs, FR_INT_ERR);
4492:.\ff.c        **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
4493:.\ff.c        **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
4494:.\ff.c        **** #if !FF_FS_TINY
4495:.\ff.c        **** #if !FF_FS_READONLY
4496:.\ff.c        **** 					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
4497:.\ff.c        **** 						if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4498:.\ff.c        **** 						fp->flag &= (BYTE)~FA_DIRTY;
4499:.\ff.c        **** 					}
4500:.\ff.c        **** #endif
4501:.\ff.c        **** 					if (disk_read(fs->pdrv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current se
4502:.\ff.c        **** #endif
4503:.\ff.c        **** 					fp->sect = dsc;
4504:.\ff.c        **** 				}
4505:.\ff.c        **** 			}
4506:.\ff.c        **** 		}
4507:.\ff.c        **** 	} else
4508:.\ff.c        **** #endif
4509:.\ff.c        **** 
4510:.\ff.c        **** 	/* Normal Seek */
4511:.\ff.c        **** 	{
4512:.\ff.c        **** #if FF_FS_EXFAT
4513:.\ff.c        **** 		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at F
4514:.\ff.c        **** #endif
4515:.\ff.c        **** 		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, 
 4925              		.loc 1 4515 0
 4926 001e E368     		ldr	r3, [r4, #12]
 4927 0020 AB42     		cmp	r3, r5
 4928 0022 04D2     		bcs	.L427
 4929              		.loc 1 4515 0 is_stmt 0 discriminator 1
 4930 0024 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 4931 0026 12F0020F 		tst	r2, #2
 4932 002a 00D1     		bne	.L427
4516:.\ff.c        **** 			ofs = fp->obj.objsize;
 4933              		.loc 1 4516 0 is_stmt 1
 4934 002c 1D46     		mov	r5, r3
 4935              	.LVL750:
 4936              	.L427:
4517:.\ff.c        **** 		}
4518:.\ff.c        **** 		ifptr = fp->fptr;
 4937              		.loc 1 4518 0
 4938 002e 6369     		ldr	r3, [r4, #20]
 4939              	.LVL751:
4519:.\ff.c        **** 		fp->fptr = nsect = 0;
 4940              		.loc 1 4519 0
 4941 0030 0022     		movs	r2, #0
 4942 0032 6261     		str	r2, [r4, #20]
4520:.\ff.c        **** 		if (ofs > 0) {
 4943              		.loc 1 4520 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 177


 4944 0034 002D     		cmp	r5, #0
 4945 0036 62D0     		beq	.L450
4521:.\ff.c        **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 4946              		.loc 1 4521 0
 4947 0038 019A     		ldr	r2, [sp, #4]
 4948 003a 5789     		ldrh	r7, [r2, #10]
 4949 003c 7F02     		lsls	r7, r7, #9
 4950              	.LVL752:
4522:.\ff.c        **** 			if (ifptr > 0 &&
 4951              		.loc 1 4522 0
 4952 003e 6BB1     		cbz	r3, .L429
4523:.\ff.c        **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 4953              		.loc 1 4523 0 discriminator 1
 4954 0040 6A1E     		subs	r2, r5, #1
 4955 0042 B2FBF7F2 		udiv	r2, r2, r7
 4956 0046 013B     		subs	r3, r3, #1
 4957              	.LVL753:
 4958 0048 B3FBF7F1 		udiv	r1, r3, r7
4522:.\ff.c        **** 			if (ifptr > 0 &&
 4959              		.loc 1 4522 0 discriminator 1
 4960 004c 8A42     		cmp	r2, r1
 4961 004e 05D3     		bcc	.L429
4524:.\ff.c        **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 4962              		.loc 1 4524 0
 4963 0050 7A42     		negs	r2, r7
 4964 0052 1340     		ands	r3, r3, r2
 4965              	.LVL754:
 4966 0054 6361     		str	r3, [r4, #20]
4525:.\ff.c        **** 				ofs -= fp->fptr;
 4967              		.loc 1 4525 0
 4968 0056 ED1A     		subs	r5, r5, r3
 4969              	.LVL755:
4526:.\ff.c        **** 				clst = fp->clust;
 4970              		.loc 1 4526 0
 4971 0058 A169     		ldr	r1, [r4, #24]
 4972              	.LVL756:
 4973 005a 14E0     		b	.L430
 4974              	.LVL757:
 4975              	.L429:
4527:.\ff.c        **** 			} else {									/* When seek to back cluster, */
4528:.\ff.c        **** 				clst = fp->obj.sclust;					/* start from the first cluster */
 4976              		.loc 1 4528 0
 4977 005c A168     		ldr	r1, [r4, #8]
 4978              	.LVL758:
4529:.\ff.c        **** #if !FF_FS_READONLY
4530:.\ff.c        **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 4979              		.loc 1 4530 0
 4980 005e 89B9     		cbnz	r1, .L431
4531:.\ff.c        **** 					clst = create_chain(&fp->obj, 0);
 4981              		.loc 1 4531 0
 4982 0060 2046     		mov	r0, r4
 4983 0062 FFF7FEFF 		bl	create_chain
 4984              	.LVL759:
 4985 0066 0146     		mov	r1, r0
 4986              	.LVL760:
4532:.\ff.c        **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
 4987              		.loc 1 4532 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 178


 4988 0068 0128     		cmp	r0, #1
 4989 006a 03D1     		bne	.L432
 4990              		.loc 1 4532 0 is_stmt 0 discriminator 1
 4991 006c 0226     		movs	r6, #2
 4992              	.LVL761:
 4993 006e 6674     		strb	r6, [r4, #17]
 4994 0070 3046     		mov	r0, r6
 4995              	.LVL762:
 4996 0072 7BE0     		b	.L426
 4997              	.LVL763:
 4998              	.L432:
4533:.\ff.c        **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4999              		.loc 1 4533 0 is_stmt 1
 5000 0074 B0F1FF3F 		cmp	r0, #-1
 5001 0078 03D1     		bne	.L433
 5002              		.loc 1 4533 0 is_stmt 0 discriminator 1
 5003 007a 0126     		movs	r6, #1
 5004              	.LVL764:
 5005 007c 6674     		strb	r6, [r4, #17]
 5006 007e 3046     		mov	r0, r6
 5007              	.LVL765:
 5008 0080 74E0     		b	.L426
 5009              	.LVL766:
 5010              	.L433:
4534:.\ff.c        **** 					fp->obj.sclust = clst;
 5011              		.loc 1 4534 0 is_stmt 1
 5012 0082 A060     		str	r0, [r4, #8]
 5013              	.LVL767:
 5014              	.L431:
4535:.\ff.c        **** 				}
4536:.\ff.c        **** #endif
4537:.\ff.c        **** 				fp->clust = clst;
 5015              		.loc 1 4537 0
 5016 0084 A161     		str	r1, [r4, #24]
 5017              	.L430:
4538:.\ff.c        **** 			}
4539:.\ff.c        **** 			if (clst != 0) {
 5018              		.loc 1 4539 0
 5019 0086 29BB     		cbnz	r1, .L434
4519:.\ff.c        **** 		if (ofs > 0) {
 5020              		.loc 1 4519 0
 5021 0088 0025     		movs	r5, #0
 5022              	.LVL768:
 5023 008a 3BE0     		b	.L428
 5024              	.LVL769:
 5025              	.L441:
4540:.\ff.c        **** 				while (ofs > bcs) {						/* Cluster following loop */
4541:.\ff.c        **** 					ofs -= bcs; fp->fptr += bcs;
 5026              		.loc 1 4541 0
 5027 008c ED1B     		subs	r5, r5, r7
 5028              	.LVL770:
 5029 008e 6369     		ldr	r3, [r4, #20]
 5030 0090 3B44     		add	r3, r3, r7
 5031 0092 6361     		str	r3, [r4, #20]
4542:.\ff.c        **** #if !FF_FS_READONLY
4543:.\ff.c        **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 5032              		.loc 1 4543 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 179


 5033 0094 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 5034 0096 13F0020F 		tst	r3, #2
 5035 009a 05D0     		beq	.L435
4544:.\ff.c        **** 						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize
4545:.\ff.c        **** 							fp->obj.objsize = fp->fptr;
4546:.\ff.c        **** 							fp->flag |= FA_MODIFIED;
4547:.\ff.c        **** 						}
4548:.\ff.c        **** 						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 5036              		.loc 1 4548 0
 5037 009c 4046     		mov	r0, r8
 5038 009e FFF7FEFF 		bl	create_chain
 5039              	.LVL771:
4549:.\ff.c        **** 						if (clst == 0) {				/* Clip file size in case of disk full */
 5040              		.loc 1 4549 0
 5041 00a2 0146     		mov	r1, r0
 5042 00a4 20B9     		cbnz	r0, .L437
 5043 00a6 18E0     		b	.L451
 5044              	.LVL772:
 5045              	.L435:
4550:.\ff.c        **** 							ofs = 0; break;
4551:.\ff.c        **** 						}
4552:.\ff.c        **** 					} else
4553:.\ff.c        **** #endif
4554:.\ff.c        **** 					{
4555:.\ff.c        **** 						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 5046              		.loc 1 4555 0
 5047 00a8 4046     		mov	r0, r8
 5048 00aa FFF7FEFF 		bl	get_fat
 5049              	.LVL773:
 5050 00ae 0146     		mov	r1, r0
 5051              	.LVL774:
 5052              	.L437:
4556:.\ff.c        **** 					}
4557:.\ff.c        **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 5053              		.loc 1 4557 0
 5054 00b0 B1F1FF3F 		cmp	r1, #-1
 5055 00b4 03D1     		bne	.L438
 5056              		.loc 1 4557 0 is_stmt 0 discriminator 1
 5057 00b6 0126     		movs	r6, #1
 5058              	.LVL775:
 5059 00b8 6674     		strb	r6, [r4, #17]
 5060 00ba 3046     		mov	r0, r6
 5061              	.LVL776:
 5062 00bc 56E0     		b	.L426
 5063              	.LVL777:
 5064              	.L438:
4558:.\ff.c        **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 5065              		.loc 1 4558 0 is_stmt 1
 5066 00be 0129     		cmp	r1, #1
 5067 00c0 03D9     		bls	.L439
 5068              		.loc 1 4558 0 is_stmt 0 discriminator 2
 5069 00c2 019B     		ldr	r3, [sp, #4]
 5070 00c4 5B69     		ldr	r3, [r3, #20]
 5071 00c6 8B42     		cmp	r3, r1
 5072 00c8 03D8     		bhi	.L440
 5073              	.L439:
 5074              		.loc 1 4558 0 discriminator 3
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 180


 5075 00ca 0226     		movs	r6, #2
 5076              	.LVL778:
 5077 00cc 6674     		strb	r6, [r4, #17]
 5078 00ce 3046     		mov	r0, r6
 5079              	.LVL779:
 5080 00d0 4CE0     		b	.L426
 5081              	.LVL780:
 5082              	.L440:
4559:.\ff.c        **** 					fp->clust = clst;
 5083              		.loc 1 4559 0 is_stmt 1
 5084 00d2 A161     		str	r1, [r4, #24]
 5085              	.LVL781:
 5086              	.L434:
4540:.\ff.c        **** 					ofs -= bcs; fp->fptr += bcs;
 5087              		.loc 1 4540 0
 5088 00d4 BD42     		cmp	r5, r7
 5089 00d6 D9D8     		bhi	.L441
 5090 00d8 00E0     		b	.L436
 5091              	.LVL782:
 5092              	.L451:
4550:.\ff.c        **** 						}
 5093              		.loc 1 4550 0
 5094 00da 0025     		movs	r5, #0
 5095              	.LVL783:
 5096              	.L436:
4560:.\ff.c        **** 				}
4561:.\ff.c        **** 				fp->fptr += ofs;
 5097              		.loc 1 4561 0
 5098 00dc 6369     		ldr	r3, [r4, #20]
 5099 00de 2B44     		add	r3, r3, r5
 5100 00e0 6361     		str	r3, [r4, #20]
4562:.\ff.c        **** 				if (ofs % SS(fs)) {
 5101              		.loc 1 4562 0
 5102 00e2 C5F30803 		ubfx	r3, r5, #0, #9
 5103 00e6 63B1     		cbz	r3, .L452
4563:.\ff.c        **** 					nsect = clst2sect(fs, clst);	/* Current sector */
 5104              		.loc 1 4563 0
 5105 00e8 0198     		ldr	r0, [sp, #4]
 5106 00ea FFF7FEFF 		bl	clst2sect
 5107              	.LVL784:
4564:.\ff.c        **** 					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 5108              		.loc 1 4564 0
 5109 00ee 18B9     		cbnz	r0, .L442
 5110              		.loc 1 4564 0 is_stmt 0 discriminator 1
 5111 00f0 0226     		movs	r6, #2
 5112              	.LVL785:
 5113 00f2 6674     		strb	r6, [r4, #17]
 5114 00f4 3046     		mov	r0, r6
 5115              	.LVL786:
 5116 00f6 39E0     		b	.L426
 5117              	.LVL787:
 5118              	.L442:
4565:.\ff.c        **** 					nsect += (DWORD)(ofs / SS(fs));
 5119              		.loc 1 4565 0 is_stmt 1
 5120 00f8 00EB5525 		add	r5, r0, r5, lsr #9
 5121              	.LVL788:
 5122 00fc 02E0     		b	.L428
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 181


 5123              	.LVL789:
 5124              	.L450:
4519:.\ff.c        **** 		if (ofs > 0) {
 5125              		.loc 1 4519 0
 5126 00fe 0025     		movs	r5, #0
 5127              	.LVL790:
 5128 0100 00E0     		b	.L428
 5129              	.LVL791:
 5130              	.L452:
 5131 0102 0025     		movs	r5, #0
 5132              	.LVL792:
 5133              	.L428:
4566:.\ff.c        **** 				}
4567:.\ff.c        **** 			}
4568:.\ff.c        **** 		}
4569:.\ff.c        **** 		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is 
 5134              		.loc 1 4569 0
 5135 0104 6369     		ldr	r3, [r4, #20]
 5136 0106 E268     		ldr	r2, [r4, #12]
 5137 0108 9342     		cmp	r3, r2
 5138 010a 04D9     		bls	.L443
4570:.\ff.c        **** 			fp->obj.objsize = fp->fptr;
 5139              		.loc 1 4570 0
 5140 010c E360     		str	r3, [r4, #12]
4571:.\ff.c        **** 			fp->flag |= FA_MODIFIED;
 5141              		.loc 1 4571 0
 5142 010e 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 5143 0110 42F04002 		orr	r2, r2, #64
 5144 0114 2274     		strb	r2, [r4, #16]
 5145              	.L443:
4572:.\ff.c        **** 		}
4573:.\ff.c        **** 		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 5146              		.loc 1 4573 0
 5147 0116 C3F30803 		ubfx	r3, r3, #0, #9
 5148 011a 23B3     		cbz	r3, .L444
 5149              		.loc 1 4573 0 is_stmt 0 discriminator 1
 5150 011c E269     		ldr	r2, [r4, #28]
 5151 011e AA42     		cmp	r2, r5
 5152 0120 21D0     		beq	.L444
4574:.\ff.c        **** #if !FF_FS_TINY
4575:.\ff.c        **** #if !FF_FS_READONLY
4576:.\ff.c        **** 			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 5153              		.loc 1 4576 0 is_stmt 1
 5154 0122 94F91030 		ldrsb	r3, [r4, #16]
 5155 0126 002B     		cmp	r3, #0
 5156 0128 0FDA     		bge	.L445
4577:.\ff.c        **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 5157              		.loc 1 4577 0
 5158 012a 019B     		ldr	r3, [sp, #4]
 5159 012c 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5160 012e 04F12801 		add	r1, r4, #40
 5161 0132 0123     		movs	r3, #1
 5162 0134 FFF7FEFF 		bl	disk_write
 5163              	.LVL793:
 5164 0138 18B1     		cbz	r0, .L446
 5165              		.loc 1 4577 0 is_stmt 0 discriminator 1
 5166 013a 0126     		movs	r6, #1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 182


 5167              	.LVL794:
 5168 013c 6674     		strb	r6, [r4, #17]
 5169 013e 3046     		mov	r0, r6
 5170 0140 14E0     		b	.L426
 5171              	.LVL795:
 5172              	.L446:
4578:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5173              		.loc 1 4578 0 is_stmt 1
 5174 0142 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 5175 0144 03F07F03 		and	r3, r3, #127
 5176 0148 2374     		strb	r3, [r4, #16]
 5177              	.L445:
4579:.\ff.c        **** 			}
4580:.\ff.c        **** #endif
4581:.\ff.c        **** 			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cac
 5178              		.loc 1 4581 0
 5179 014a 019B     		ldr	r3, [sp, #4]
 5180 014c 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5181 014e 04F12801 		add	r1, r4, #40
 5182 0152 2A46     		mov	r2, r5
 5183 0154 0123     		movs	r3, #1
 5184 0156 FFF7FEFF 		bl	disk_read
 5185              	.LVL796:
 5186 015a 18B1     		cbz	r0, .L447
 5187              		.loc 1 4581 0 is_stmt 0 discriminator 1
 5188 015c 0126     		movs	r6, #1
 5189              	.LVL797:
 5190 015e 6674     		strb	r6, [r4, #17]
 5191 0160 3046     		mov	r0, r6
 5192 0162 03E0     		b	.L426
 5193              	.LVL798:
 5194              	.L447:
4582:.\ff.c        **** #endif
4583:.\ff.c        **** 			fp->sect = nsect;
 5195              		.loc 1 4583 0 is_stmt 1
 5196 0164 E561     		str	r5, [r4, #28]
 5197              	.L444:
4584:.\ff.c        **** 		}
4585:.\ff.c        **** 	}
4586:.\ff.c        **** 
4587:.\ff.c        **** 	LEAVE_FF(fs, res);
 5198              		.loc 1 4587 0
 5199 0166 3046     		mov	r0, r6
 5200 0168 00E0     		b	.L426
 5201              	.LVL799:
 5202              	.L448:
4456:.\ff.c        **** 
 5203              		.loc 1 4456 0
 5204 016a 3046     		mov	r0, r6
 5205              	.LVL800:
 5206              	.L426:
4588:.\ff.c        **** }
 5207              		.loc 1 4588 0
 5208 016c 02B0     		add	sp, sp, #8
 5209              		.cfi_def_cfa_offset 24
 5210              		@ sp needed
 5211 016e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 183


 5212              		.cfi_endproc
 5213              	.LFE38:
 5214              		.size	f_lseek, .-f_lseek
 5215 0172 00BF     		.section	.text.f_opendir,"ax",%progbits
 5216              		.align	2
 5217              		.global	f_opendir
 5218              		.thumb
 5219              		.thumb_func
 5220              		.type	f_opendir, %function
 5221              	f_opendir:
 5222              	.LFB39:
4589:.\ff.c        **** 
4590:.\ff.c        **** 
4591:.\ff.c        **** 
4592:.\ff.c        **** #if FF_FS_MINIMIZE <= 1
4593:.\ff.c        **** /*-----------------------------------------------------------------------*/
4594:.\ff.c        **** /* Create a Directory Object                                             */
4595:.\ff.c        **** /*-----------------------------------------------------------------------*/
4596:.\ff.c        **** 
4597:.\ff.c        **** FRESULT f_opendir (
4598:.\ff.c        **** 	DIR* dp,			/* Pointer to directory object to create */
4599:.\ff.c        **** 	const TCHAR* path	/* Pointer to the directory path */
4600:.\ff.c        **** )
4601:.\ff.c        **** {
 5223              		.loc 1 4601 0
 5224              		.cfi_startproc
 5225              		@ args = 0, pretend = 0, frame = 16
 5226              		@ frame_needed = 0, uses_anonymous_args = 0
 5227              	.LVL801:
 5228 0000 30B5     		push	{r4, r5, lr}
 5229              		.cfi_def_cfa_offset 12
 5230              		.cfi_offset 4, -12
 5231              		.cfi_offset 5, -8
 5232              		.cfi_offset 14, -4
 5233 0002 85B0     		sub	sp, sp, #20
 5234              		.cfi_def_cfa_offset 32
 5235 0004 0191     		str	r1, [sp, #4]
4602:.\ff.c        **** 	FRESULT res;
4603:.\ff.c        **** 	FATFS *fs;
4604:.\ff.c        **** 	DEF_NAMBUF
4605:.\ff.c        **** 
4606:.\ff.c        **** 
4607:.\ff.c        **** 	if (!dp) return FR_INVALID_OBJECT;
 5236              		.loc 1 4607 0
 5237 0006 78B3     		cbz	r0, .L460
 5238 0008 0546     		mov	r5, r0
4608:.\ff.c        **** 
4609:.\ff.c        **** 	/* Get logical drive */
4610:.\ff.c        **** 	res = mount_volume(&path, &fs, 0);
 5239              		.loc 1 4610 0
 5240 000a 01A8     		add	r0, sp, #4
 5241              	.LVL802:
 5242 000c 03A9     		add	r1, sp, #12
 5243              	.LVL803:
 5244 000e 0022     		movs	r2, #0
 5245 0010 FFF7FEFF 		bl	mount_volume
 5246              	.LVL804:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 184


4611:.\ff.c        **** 	if (res == FR_OK) {
 5247              		.loc 1 4611 0
 5248 0014 0446     		mov	r4, r0
 5249 0016 10BB     		cbnz	r0, .L456
4612:.\ff.c        **** 		dp->obj.fs = fs;
 5250              		.loc 1 4612 0
 5251 0018 039B     		ldr	r3, [sp, #12]
 5252 001a 2B60     		str	r3, [r5]
4613:.\ff.c        **** 		INIT_NAMBUF(fs);
4614:.\ff.c        **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 5253              		.loc 1 4614 0
 5254 001c 2846     		mov	r0, r5
 5255              	.LVL805:
 5256 001e 0199     		ldr	r1, [sp, #4]
 5257 0020 FFF7FEFF 		bl	follow_path
 5258              	.LVL806:
4615:.\ff.c        **** 		if (res == FR_OK) {						/* Follow completed */
 5259              		.loc 1 4615 0
 5260 0024 0446     		mov	r4, r0
 5261 0026 B8B9     		cbnz	r0, .L457
4616:.\ff.c        **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 5262              		.loc 1 4616 0
 5263 0028 95F92B30 		ldrsb	r3, [r5, #43]
 5264 002c 002B     		cmp	r3, #0
 5265 002e 0ADB     		blt	.L458
4617:.\ff.c        **** 				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 5266              		.loc 1 4617 0
 5267 0030 AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 5268 0032 13F0100F 		tst	r3, #16
 5269 0036 05D0     		beq	.L461
4618:.\ff.c        **** #if FF_FS_EXFAT
4619:.\ff.c        **** 					if (fs->fs_type == FS_EXFAT) {
4620:.\ff.c        **** 						dp->obj.c_scl = dp->obj.sclust;	/* Get containing directory inforamation */
4621:.\ff.c        **** 						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
4622:.\ff.c        **** 						dp->obj.c_ofs = dp->blk_ofs;
4623:.\ff.c        **** 						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
4624:.\ff.c        **** 					} else
4625:.\ff.c        **** #endif
4626:.\ff.c        **** 					{
4627:.\ff.c        **** 						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 5270              		.loc 1 4627 0
 5271 0038 0398     		ldr	r0, [sp, #12]
 5272              	.LVL807:
 5273 003a E969     		ldr	r1, [r5, #28]
 5274 003c FFF7FEFF 		bl	ld_clust
 5275              	.LVL808:
 5276 0040 A860     		str	r0, [r5, #8]
 5277 0042 00E0     		b	.L458
 5278              	.LVL809:
 5279              	.L461:
4628:.\ff.c        **** 					}
4629:.\ff.c        **** 				} else {						/* This object is a file */
4630:.\ff.c        **** 					res = FR_NO_PATH;
 5280              		.loc 1 4630 0
 5281 0044 0524     		movs	r4, #5
 5282              	.LVL810:
 5283              	.L458:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 185


4631:.\ff.c        **** 				}
4632:.\ff.c        **** 			}
4633:.\ff.c        **** 			if (res == FR_OK) {
 5284              		.loc 1 4633 0
 5285 0046 3CB9     		cbnz	r4, .L457
4634:.\ff.c        **** 				dp->obj.id = fs->id;
 5286              		.loc 1 4634 0
 5287 0048 039B     		ldr	r3, [sp, #12]
 5288 004a DB88     		ldrh	r3, [r3, #6]
 5289 004c AB80     		strh	r3, [r5, #4]	@ movhi
4635:.\ff.c        **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 5290              		.loc 1 4635 0
 5291 004e 2846     		mov	r0, r5
 5292 0050 0021     		movs	r1, #0
 5293 0052 FFF7FEFF 		bl	dir_sdi
 5294              	.LVL811:
 5295 0056 0446     		mov	r4, r0
 5296              	.LVL812:
 5297              	.L457:
4636:.\ff.c        **** #if FF_FS_LOCK
4637:.\ff.c        **** 				if (res == FR_OK) {
4638:.\ff.c        **** 					if (dp->obj.sclust != 0) {
4639:.\ff.c        **** 						dp->obj.lockid = inc_share(dp, 0);	/* Lock the sub directory */
4640:.\ff.c        **** 						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
4641:.\ff.c        **** 					} else {
4642:.\ff.c        **** 						dp->obj.lockid = 0;	/* Root directory need not to be locked */
4643:.\ff.c        **** 					}
4644:.\ff.c        **** 				}
4645:.\ff.c        **** #endif
4646:.\ff.c        **** 			}
4647:.\ff.c        **** 		}
4648:.\ff.c        **** 		FREE_NAMBUF();
4649:.\ff.c        **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 5298              		.loc 1 4649 0
 5299 0058 042C     		cmp	r4, #4
 5300 005a 00D1     		bne	.L456
 5301 005c 0524     		movs	r4, #5
 5302              	.LVL813:
 5303              	.L456:
4650:.\ff.c        **** 	}
4651:.\ff.c        **** 	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
 5304              		.loc 1 4651 0
 5305 005e 0CB1     		cbz	r4, .L459
 5306              		.loc 1 4651 0 is_stmt 0 discriminator 1
 5307 0060 0023     		movs	r3, #0
 5308 0062 2B60     		str	r3, [r5]
 5309              	.L459:
4652:.\ff.c        **** 
4653:.\ff.c        **** 	LEAVE_FF(fs, res);
 5310              		.loc 1 4653 0 is_stmt 1
 5311 0064 2046     		mov	r0, r4
 5312 0066 00E0     		b	.L455
 5313              	.LVL814:
 5314              	.L460:
4607:.\ff.c        **** 
 5315              		.loc 1 4607 0
 5316 0068 0920     		movs	r0, #9
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 186


 5317              	.LVL815:
 5318              	.L455:
4654:.\ff.c        **** }
 5319              		.loc 1 4654 0
 5320 006a 05B0     		add	sp, sp, #20
 5321              		.cfi_def_cfa_offset 12
 5322              		@ sp needed
 5323 006c 30BD     		pop	{r4, r5, pc}
 5324              		.cfi_endproc
 5325              	.LFE39:
 5326              		.size	f_opendir, .-f_opendir
 5327 006e 00BF     		.section	.text.f_closedir,"ax",%progbits
 5328              		.align	2
 5329              		.global	f_closedir
 5330              		.thumb
 5331              		.thumb_func
 5332              		.type	f_closedir, %function
 5333              	f_closedir:
 5334              	.LFB40:
4655:.\ff.c        **** 
4656:.\ff.c        **** 
4657:.\ff.c        **** 
4658:.\ff.c        **** 
4659:.\ff.c        **** /*-----------------------------------------------------------------------*/
4660:.\ff.c        **** /* Close Directory                                                       */
4661:.\ff.c        **** /*-----------------------------------------------------------------------*/
4662:.\ff.c        **** 
4663:.\ff.c        **** FRESULT f_closedir (
4664:.\ff.c        **** 	DIR *dp		/* Pointer to the directory object to be closed */
4665:.\ff.c        **** )
4666:.\ff.c        **** {
 5335              		.loc 1 4666 0
 5336              		.cfi_startproc
 5337              		@ args = 0, pretend = 0, frame = 8
 5338              		@ frame_needed = 0, uses_anonymous_args = 0
 5339              	.LVL816:
 5340 0000 10B5     		push	{r4, lr}
 5341              		.cfi_def_cfa_offset 8
 5342              		.cfi_offset 4, -8
 5343              		.cfi_offset 14, -4
 5344 0002 82B0     		sub	sp, sp, #8
 5345              		.cfi_def_cfa_offset 16
 5346 0004 0446     		mov	r4, r0
4667:.\ff.c        **** 	FRESULT res;
4668:.\ff.c        **** 	FATFS *fs;
4669:.\ff.c        **** 
4670:.\ff.c        **** 
4671:.\ff.c        **** 	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 5347              		.loc 1 4671 0
 5348 0006 01A9     		add	r1, sp, #4
 5349 0008 FFF7FEFF 		bl	validate
 5350              	.LVL817:
4672:.\ff.c        **** 	if (res == FR_OK) {
 5351              		.loc 1 4672 0
 5352 000c 0346     		mov	r3, r0
 5353 000e 08B9     		cbnz	r0, .L465
4673:.\ff.c        **** #if FF_FS_LOCK
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 187


4674:.\ff.c        **** 		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
4675:.\ff.c        **** 		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
4676:.\ff.c        **** #else
4677:.\ff.c        **** 		dp->obj.fs = 0;	/* Invalidate directory object */
 5354              		.loc 1 4677 0
 5355 0010 0022     		movs	r2, #0
 5356 0012 2260     		str	r2, [r4]
 5357              	.L465:
4678:.\ff.c        **** #endif
4679:.\ff.c        **** #if FF_FS_REENTRANT
4680:.\ff.c        **** 		unlock_volume(fs, FR_OK);	/* Unlock volume */
4681:.\ff.c        **** #endif
4682:.\ff.c        **** 	}
4683:.\ff.c        **** 	return res;
4684:.\ff.c        **** }
 5358              		.loc 1 4684 0
 5359 0014 1846     		mov	r0, r3
 5360              	.LVL818:
 5361 0016 02B0     		add	sp, sp, #8
 5362              		.cfi_def_cfa_offset 8
 5363              		@ sp needed
 5364 0018 10BD     		pop	{r4, pc}
 5365              		.cfi_endproc
 5366              	.LFE40:
 5367              		.size	f_closedir, .-f_closedir
 5368 001a 00BF     		.section	.text.f_readdir,"ax",%progbits
 5369              		.align	2
 5370              		.global	f_readdir
 5371              		.thumb
 5372              		.thumb_func
 5373              		.type	f_readdir, %function
 5374              	f_readdir:
 5375              	.LFB41:
4685:.\ff.c        **** 
4686:.\ff.c        **** 
4687:.\ff.c        **** 
4688:.\ff.c        **** 
4689:.\ff.c        **** /*-----------------------------------------------------------------------*/
4690:.\ff.c        **** /* Read Directory Entries in Sequence                                    */
4691:.\ff.c        **** /*-----------------------------------------------------------------------*/
4692:.\ff.c        **** 
4693:.\ff.c        **** FRESULT f_readdir (
4694:.\ff.c        **** 	DIR* dp,			/* Pointer to the open directory object */
4695:.\ff.c        **** 	FILINFO* fno		/* Pointer to file information to return */
4696:.\ff.c        **** )
4697:.\ff.c        **** {
 5376              		.loc 1 4697 0
 5377              		.cfi_startproc
 5378              		@ args = 0, pretend = 0, frame = 8
 5379              		@ frame_needed = 0, uses_anonymous_args = 0
 5380              	.LVL819:
 5381 0000 70B5     		push	{r4, r5, r6, lr}
 5382              		.cfi_def_cfa_offset 16
 5383              		.cfi_offset 4, -16
 5384              		.cfi_offset 5, -12
 5385              		.cfi_offset 6, -8
 5386              		.cfi_offset 14, -4
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 188


 5387 0002 82B0     		sub	sp, sp, #8
 5388              		.cfi_def_cfa_offset 24
 5389 0004 0546     		mov	r5, r0
 5390 0006 0E46     		mov	r6, r1
4698:.\ff.c        **** 	FRESULT res;
4699:.\ff.c        **** 	FATFS *fs;
4700:.\ff.c        **** 	DEF_NAMBUF
4701:.\ff.c        **** 
4702:.\ff.c        **** 
4703:.\ff.c        **** 	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 5391              		.loc 1 4703 0
 5392 0008 01A9     		add	r1, sp, #4
 5393              	.LVL820:
 5394 000a FFF7FEFF 		bl	validate
 5395              	.LVL821:
4704:.\ff.c        **** 	if (res == FR_OK) {
 5396              		.loc 1 4704 0
 5397 000e 0446     		mov	r4, r0
 5398 0010 C8B9     		cbnz	r0, .L468
4705:.\ff.c        **** 		if (!fno) {
 5399              		.loc 1 4705 0
 5400 0012 2EB9     		cbnz	r6, .L469
4706:.\ff.c        **** 			res = dir_sdi(dp, 0);		/* Rewind the directory object */
 5401              		.loc 1 4706 0
 5402 0014 2846     		mov	r0, r5
 5403              	.LVL822:
 5404 0016 0021     		movs	r1, #0
 5405 0018 FFF7FEFF 		bl	dir_sdi
 5406              	.LVL823:
 5407 001c 0446     		mov	r4, r0
 5408              	.LVL824:
 5409 001e 12E0     		b	.L468
 5410              	.LVL825:
 5411              	.L469:
4707:.\ff.c        **** 		} else {
4708:.\ff.c        **** 			INIT_NAMBUF(fs);
4709:.\ff.c        **** 			res = DIR_READ_FILE(dp);		/* Read an item */
 5412              		.loc 1 4709 0
 5413 0020 2846     		mov	r0, r5
 5414              	.LVL826:
 5415 0022 0021     		movs	r1, #0
 5416 0024 FFF7FEFF 		bl	dir_read
 5417              	.LVL827:
4710:.\ff.c        **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 5418              		.loc 1 4710 0
 5419 0028 0428     		cmp	r0, #4
 5420 002a 00D0     		beq	.L470
4709:.\ff.c        **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 5421              		.loc 1 4709 0
 5422 002c 0446     		mov	r4, r0
 5423              	.L470:
 5424              	.LVL828:
4711:.\ff.c        **** 			if (res == FR_OK) {				/* A valid entry is found */
 5425              		.loc 1 4711 0
 5426 002e 54B9     		cbnz	r4, .L468
4712:.\ff.c        **** 				get_fileinfo(dp, fno);		/* Get the object information */
 5427              		.loc 1 4712 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 189


 5428 0030 2846     		mov	r0, r5
 5429 0032 3146     		mov	r1, r6
 5430 0034 FFF7FEFF 		bl	get_fileinfo
 5431              	.LVL829:
4713:.\ff.c        **** 				res = dir_next(dp, 0);		/* Increment index for next */
 5432              		.loc 1 4713 0
 5433 0038 2846     		mov	r0, r5
 5434 003a 0021     		movs	r1, #0
 5435 003c FFF7FEFF 		bl	dir_next
 5436              	.LVL830:
4714:.\ff.c        **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 5437              		.loc 1 4714 0
 5438 0040 0428     		cmp	r0, #4
 5439 0042 00D0     		beq	.L468
4713:.\ff.c        **** 				res = dir_next(dp, 0);		/* Increment index for next */
 5440              		.loc 1 4713 0
 5441 0044 0446     		mov	r4, r0
 5442              	.LVL831:
 5443              	.L468:
4715:.\ff.c        **** 			}
4716:.\ff.c        **** 			FREE_NAMBUF();
4717:.\ff.c        **** 		}
4718:.\ff.c        **** 	}
4719:.\ff.c        **** 	LEAVE_FF(fs, res);
4720:.\ff.c        **** }
 5444              		.loc 1 4720 0
 5445 0046 2046     		mov	r0, r4
 5446 0048 02B0     		add	sp, sp, #8
 5447              		.cfi_def_cfa_offset 16
 5448              		@ sp needed
 5449 004a 70BD     		pop	{r4, r5, r6, pc}
 5450              		.cfi_endproc
 5451              	.LFE41:
 5452              		.size	f_readdir, .-f_readdir
 5453              		.section	.text.f_stat,"ax",%progbits
 5454              		.align	2
 5455              		.global	f_stat
 5456              		.thumb
 5457              		.thumb_func
 5458              		.type	f_stat, %function
 5459              	f_stat:
 5460              	.LFB42:
4721:.\ff.c        **** 
4722:.\ff.c        **** 
4723:.\ff.c        **** 
4724:.\ff.c        **** #if FF_USE_FIND
4725:.\ff.c        **** /*-----------------------------------------------------------------------*/
4726:.\ff.c        **** /* Find Next File                                                        */
4727:.\ff.c        **** /*-----------------------------------------------------------------------*/
4728:.\ff.c        **** 
4729:.\ff.c        **** FRESULT f_findnext (
4730:.\ff.c        **** 	DIR* dp,		/* Pointer to the open directory object */
4731:.\ff.c        **** 	FILINFO* fno	/* Pointer to the file information structure */
4732:.\ff.c        **** )
4733:.\ff.c        **** {
4734:.\ff.c        **** 	FRESULT res;
4735:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 190


4736:.\ff.c        **** 
4737:.\ff.c        **** 	for (;;) {
4738:.\ff.c        **** 		res = f_readdir(dp, fno);		/* Get a directory item */
4739:.\ff.c        **** 		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory 
4740:.\ff.c        **** 		if (pattern_match(dp->pat, fno->fname, 0, FIND_RECURS)) break;		/* Test for the file name */
4741:.\ff.c        **** #if FF_USE_LFN && FF_USE_FIND == 2
4742:.\ff.c        **** 		if (pattern_match(dp->pat, fno->altname, 0, FIND_RECURS)) break;	/* Test for alternative name if 
4743:.\ff.c        **** #endif
4744:.\ff.c        **** 	}
4745:.\ff.c        **** 	return res;
4746:.\ff.c        **** }
4747:.\ff.c        **** 
4748:.\ff.c        **** 
4749:.\ff.c        **** 
4750:.\ff.c        **** /*-----------------------------------------------------------------------*/
4751:.\ff.c        **** /* Find First File                                                       */
4752:.\ff.c        **** /*-----------------------------------------------------------------------*/
4753:.\ff.c        **** 
4754:.\ff.c        **** FRESULT f_findfirst (
4755:.\ff.c        **** 	DIR* dp,				/* Pointer to the blank directory object */
4756:.\ff.c        **** 	FILINFO* fno,			/* Pointer to the file information structure */
4757:.\ff.c        **** 	const TCHAR* path,		/* Pointer to the directory to open */
4758:.\ff.c        **** 	const TCHAR* pattern	/* Pointer to the matching pattern */
4759:.\ff.c        **** )
4760:.\ff.c        **** {
4761:.\ff.c        **** 	FRESULT res;
4762:.\ff.c        **** 
4763:.\ff.c        **** 
4764:.\ff.c        **** 	dp->pat = pattern;		/* Save pointer to pattern string */
4765:.\ff.c        **** 	res = f_opendir(dp, path);		/* Open the target directory */
4766:.\ff.c        **** 	if (res == FR_OK) {
4767:.\ff.c        **** 		res = f_findnext(dp, fno);	/* Find the first item */
4768:.\ff.c        **** 	}
4769:.\ff.c        **** 	return res;
4770:.\ff.c        **** }
4771:.\ff.c        **** 
4772:.\ff.c        **** #endif	/* FF_USE_FIND */
4773:.\ff.c        **** 
4774:.\ff.c        **** 
4775:.\ff.c        **** 
4776:.\ff.c        **** #if FF_FS_MINIMIZE == 0
4777:.\ff.c        **** /*-----------------------------------------------------------------------*/
4778:.\ff.c        **** /* Get File Status                                                       */
4779:.\ff.c        **** /*-----------------------------------------------------------------------*/
4780:.\ff.c        **** 
4781:.\ff.c        **** FRESULT f_stat (
4782:.\ff.c        **** 	const TCHAR* path,	/* Pointer to the file path */
4783:.\ff.c        **** 	FILINFO* fno		/* Pointer to file information to return */
4784:.\ff.c        **** )
4785:.\ff.c        **** {
 5461              		.loc 1 4785 0
 5462              		.cfi_startproc
 5463              		@ args = 0, pretend = 0, frame = 56
 5464              		@ frame_needed = 0, uses_anonymous_args = 0
 5465              	.LVL832:
 5466 0000 30B5     		push	{r4, r5, lr}
 5467              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 191


 5468              		.cfi_offset 4, -12
 5469              		.cfi_offset 5, -8
 5470              		.cfi_offset 14, -4
 5471 0002 8FB0     		sub	sp, sp, #60
 5472              		.cfi_def_cfa_offset 72
 5473 0004 0EAB     		add	r3, sp, #56
 5474 0006 43F8340D 		str	r0, [r3, #-52]!
 5475 000a 0D46     		mov	r5, r1
4786:.\ff.c        **** 	FRESULT res;
4787:.\ff.c        **** 	DIR dj;
4788:.\ff.c        **** 	DEF_NAMBUF
4789:.\ff.c        **** 
4790:.\ff.c        **** 
4791:.\ff.c        **** 	/* Get logical drive */
4792:.\ff.c        **** 	res = mount_volume(&path, &dj.obj.fs, 0);
 5476              		.loc 1 4792 0
 5477 000c 1846     		mov	r0, r3
 5478              	.LVL833:
 5479 000e 03A9     		add	r1, sp, #12
 5480              	.LVL834:
 5481 0010 0022     		movs	r2, #0
 5482 0012 FFF7FEFF 		bl	mount_volume
 5483              	.LVL835:
4793:.\ff.c        **** 	if (res == FR_OK) {
 5484              		.loc 1 4793 0
 5485 0016 0446     		mov	r4, r0
 5486 0018 80B9     		cbnz	r0, .L473
4794:.\ff.c        **** 		INIT_NAMBUF(dj.obj.fs);
4795:.\ff.c        **** 		res = follow_path(&dj, path);	/* Follow the file path */
 5487              		.loc 1 4795 0
 5488 001a 03A8     		add	r0, sp, #12
 5489              	.LVL836:
 5490 001c 0199     		ldr	r1, [sp, #4]
 5491 001e FFF7FEFF 		bl	follow_path
 5492              	.LVL837:
4796:.\ff.c        **** 		if (res == FR_OK) {				/* Follow completed */
 5493              		.loc 1 4796 0
 5494 0022 0446     		mov	r4, r0
 5495 0024 50B9     		cbnz	r0, .L473
4797:.\ff.c        **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 5496              		.loc 1 4797 0
 5497 0026 9DF93730 		ldrsb	r3, [sp, #55]
 5498 002a 002B     		cmp	r3, #0
 5499 002c 05DB     		blt	.L474
4798:.\ff.c        **** 				res = FR_INVALID_NAME;
4799:.\ff.c        **** 			} else {							/* Found an object */
4800:.\ff.c        **** 				if (fno) get_fileinfo(&dj, fno);
 5500              		.loc 1 4800 0
 5501 002e 2DB1     		cbz	r5, .L473
 5502              		.loc 1 4800 0 is_stmt 0 discriminator 1
 5503 0030 03A8     		add	r0, sp, #12
 5504              	.LVL838:
 5505 0032 2946     		mov	r1, r5
 5506 0034 FFF7FEFF 		bl	get_fileinfo
 5507              	.LVL839:
 5508 0038 00E0     		b	.L473
 5509              	.LVL840:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 192


 5510              	.L474:
4798:.\ff.c        **** 				res = FR_INVALID_NAME;
 5511              		.loc 1 4798 0 is_stmt 1
 5512 003a 0624     		movs	r4, #6
 5513              	.LVL841:
 5514              	.L473:
4801:.\ff.c        **** 			}
4802:.\ff.c        **** 		}
4803:.\ff.c        **** 		FREE_NAMBUF();
4804:.\ff.c        **** 	}
4805:.\ff.c        **** 
4806:.\ff.c        **** 	LEAVE_FF(dj.obj.fs, res);
4807:.\ff.c        **** }
 5515              		.loc 1 4807 0
 5516 003c 2046     		mov	r0, r4
 5517 003e 0FB0     		add	sp, sp, #60
 5518              		.cfi_def_cfa_offset 12
 5519              		@ sp needed
 5520 0040 30BD     		pop	{r4, r5, pc}
 5521              		.cfi_endproc
 5522              	.LFE42:
 5523              		.size	f_stat, .-f_stat
 5524              		.section	.text.f_getfree,"ax",%progbits
 5525              		.align	2
 5526              		.global	f_getfree
 5527              		.thumb
 5528              		.thumb_func
 5529              		.type	f_getfree, %function
 5530              	f_getfree:
 5531              	.LFB43:
4808:.\ff.c        **** 
4809:.\ff.c        **** 
4810:.\ff.c        **** 
4811:.\ff.c        **** #if !FF_FS_READONLY
4812:.\ff.c        **** /*-----------------------------------------------------------------------*/
4813:.\ff.c        **** /* Get Number of Free Clusters                                           */
4814:.\ff.c        **** /*-----------------------------------------------------------------------*/
4815:.\ff.c        **** 
4816:.\ff.c        **** FRESULT f_getfree (
4817:.\ff.c        **** 	const TCHAR* path,	/* Logical drive number */
4818:.\ff.c        **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
4819:.\ff.c        **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
4820:.\ff.c        **** )
4821:.\ff.c        **** {
 5532              		.loc 1 4821 0
 5533              		.cfi_startproc
 5534              		@ args = 0, pretend = 0, frame = 32
 5535              		@ frame_needed = 0, uses_anonymous_args = 0
 5536              	.LVL842:
 5537 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5538              		.cfi_def_cfa_offset 32
 5539              		.cfi_offset 4, -32
 5540              		.cfi_offset 5, -28
 5541              		.cfi_offset 6, -24
 5542              		.cfi_offset 7, -20
 5543              		.cfi_offset 8, -16
 5544              		.cfi_offset 9, -12
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 193


 5545              		.cfi_offset 10, -8
 5546              		.cfi_offset 14, -4
 5547 0004 88B0     		sub	sp, sp, #32
 5548              		.cfi_def_cfa_offset 64
 5549 0006 08AB     		add	r3, sp, #32
 5550 0008 43F81C0D 		str	r0, [r3, #-28]!
 5551 000c 8946     		mov	r9, r1
 5552 000e 1446     		mov	r4, r2
4822:.\ff.c        **** 	FRESULT res;
4823:.\ff.c        **** 	FATFS *fs;
4824:.\ff.c        **** 	DWORD nfree, clst, stat;
4825:.\ff.c        **** 	LBA_t sect;
4826:.\ff.c        **** 	UINT i;
4827:.\ff.c        **** 	FFOBJID obj;
4828:.\ff.c        **** 
4829:.\ff.c        **** 
4830:.\ff.c        **** 	/* Get logical drive */
4831:.\ff.c        **** 	res = mount_volume(&path, &fs, 0);
 5553              		.loc 1 4831 0
 5554 0010 1846     		mov	r0, r3
 5555              	.LVL843:
 5556 0012 07A9     		add	r1, sp, #28
 5557              	.LVL844:
 5558 0014 0022     		movs	r2, #0
 5559              	.LVL845:
 5560 0016 FFF7FEFF 		bl	mount_volume
 5561              	.LVL846:
4832:.\ff.c        **** 	if (res == FR_OK) {
 5562              		.loc 1 4832 0
 5563 001a 8046     		mov	r8, r0
 5564 001c 0028     		cmp	r0, #0
 5565 001e 59D1     		bne	.L477
4833:.\ff.c        **** 		*fatfs = fs;				/* Return ptr to the fs object */
 5566              		.loc 1 4833 0
 5567 0020 079B     		ldr	r3, [sp, #28]
 5568 0022 2360     		str	r3, [r4]
4834:.\ff.c        **** 		/* If free_clst is valid, return it without full FAT scan */
4835:.\ff.c        **** 		if (fs->free_clst <= fs->n_fatent - 2) {
 5569              		.loc 1 4835 0
 5570 0024 1A69     		ldr	r2, [r3, #16]
 5571 0026 5D69     		ldr	r5, [r3, #20]
 5572 0028 A91E     		subs	r1, r5, #2
 5573 002a 8A42     		cmp	r2, r1
 5574 002c 02D8     		bhi	.L478
4836:.\ff.c        **** 			*nclst = fs->free_clst;
 5575              		.loc 1 4836 0
 5576 002e C9F80020 		str	r2, [r9]
 5577 0032 4FE0     		b	.L477
 5578              	.L478:
 5579              	.LVL847:
4837:.\ff.c        **** 		} else {
4838:.\ff.c        **** 			/* Scan FAT to obtain number of free clusters */
4839:.\ff.c        **** 			nfree = 0;
4840:.\ff.c        **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 5580              		.loc 1 4840 0
 5581 0034 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5582 0036 012A     		cmp	r2, #1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 194


 5583 0038 13D1     		bne	.L479
 5584              	.LVL848:
4841:.\ff.c        **** 				clst = 2; obj.fs = fs;
 5585              		.loc 1 4841 0
 5586 003a 0393     		str	r3, [sp, #12]
 5587 003c 0224     		movs	r4, #2
 5588              	.LVL849:
4839:.\ff.c        **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 5589              		.loc 1 4839 0
 5590 003e 0026     		movs	r6, #0
 5591              	.LVL850:
 5592              	.L482:
4842:.\ff.c        **** 				do {
4843:.\ff.c        **** 					stat = get_fat(&obj, clst);
 5593              		.loc 1 4843 0
 5594 0040 03A8     		add	r0, sp, #12
 5595 0042 2146     		mov	r1, r4
 5596 0044 FFF7FEFF 		bl	get_fat
 5597              	.LVL851:
4844:.\ff.c        **** 					if (stat == 0xFFFFFFFF) {
 5598              		.loc 1 4844 0
 5599 0048 B0F1FF3F 		cmp	r0, #-1
 5600 004c 32D0     		beq	.L489
4845:.\ff.c        **** 						res = FR_DISK_ERR; break;
4846:.\ff.c        **** 					}
4847:.\ff.c        **** 					if (stat == 1) {
 5601              		.loc 1 4847 0
 5602 004e 0128     		cmp	r0, #1
 5603 0050 33D0     		beq	.L490
4848:.\ff.c        **** 						res = FR_INT_ERR; break;
4849:.\ff.c        **** 					}
4850:.\ff.c        **** 					if (stat == 0) nfree++;
 5604              		.loc 1 4850 0
 5605 0052 00B9     		cbnz	r0, .L481
 5606              		.loc 1 4850 0 is_stmt 0 discriminator 1
 5607 0054 0136     		adds	r6, r6, #1
 5608              	.LVL852:
 5609              	.L481:
4851:.\ff.c        **** 				} while (++clst < fs->n_fatent);
 5610              		.loc 1 4851 0 is_stmt 1
 5611 0056 0134     		adds	r4, r4, #1
 5612              	.LVL853:
 5613 0058 079B     		ldr	r3, [sp, #28]
 5614 005a 5B69     		ldr	r3, [r3, #20]
 5615 005c 9C42     		cmp	r4, r3
 5616 005e EFD3     		bcc	.L482
 5617 0060 2DE0     		b	.L480
 5618              	.LVL854:
 5619              	.L479:
4852:.\ff.c        **** 			} else {
4853:.\ff.c        **** #if FF_FS_EXFAT
4854:.\ff.c        **** 				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
4855:.\ff.c        **** 					BYTE bm;
4856:.\ff.c        **** 					UINT b;
4857:.\ff.c        **** 
4858:.\ff.c        **** 					clst = fs->n_fatent - 2;	/* Number of clusters */
4859:.\ff.c        **** 					sect = fs->bitbase;			/* Bitmap sector */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 195


4860:.\ff.c        **** 					i = 0;						/* Offset in the sector */
4861:.\ff.c        **** 					do {	/* Counts numbuer of bits with zero in the bitmap */
4862:.\ff.c        **** 						if (i == 0) {	/* New sector? */
4863:.\ff.c        **** 							res = move_window(fs, sect++);
4864:.\ff.c        **** 							if (res != FR_OK) break;
4865:.\ff.c        **** 						}
4866:.\ff.c        **** 						for (b = 8, bm = ~fs->win[i]; b && clst; b--, clst--) {
4867:.\ff.c        **** 							nfree += bm & 1;
4868:.\ff.c        **** 							bm >>= 1;
4869:.\ff.c        **** 						}
4870:.\ff.c        **** 						i = (i + 1) % SS(fs);
4871:.\ff.c        **** 					} while (clst);
4872:.\ff.c        **** 				} else
4873:.\ff.c        **** #endif
4874:.\ff.c        **** 				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
4875:.\ff.c        **** 					clst = fs->n_fatent;	/* Number of entries */
4876:.\ff.c        **** 					sect = fs->fatbase;		/* Top of the FAT */
 5620              		.loc 1 4876 0
 5621 0062 1F6A     		ldr	r7, [r3, #32]
 5622              	.LVL855:
4877:.\ff.c        **** 					i = 0;					/* Offset in the sector */
 5623              		.loc 1 4877 0
 5624 0064 0024     		movs	r4, #0
 5625              	.LVL856:
4839:.\ff.c        **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 5626              		.loc 1 4839 0
 5627 0066 2646     		mov	r6, r4
 5628              	.LVL857:
 5629              	.L488:
4878:.\ff.c        **** 					do {	/* Counts numbuer of entries with zero in the FAT */
4879:.\ff.c        **** 						if (i == 0) {	/* New sector? */
 5630              		.loc 1 4879 0
 5631 0068 44B9     		cbnz	r4, .L483
4880:.\ff.c        **** 							res = move_window(fs, sect++);
 5632              		.loc 1 4880 0
 5633 006a 07F1010A 		add	r10, r7, #1
 5634              	.LVL858:
 5635 006e 0798     		ldr	r0, [sp, #28]
 5636 0070 3946     		mov	r1, r7
 5637 0072 FFF7FEFF 		bl	move_window
 5638              	.LVL859:
4881:.\ff.c        **** 							if (res != FR_OK) break;
 5639              		.loc 1 4881 0
 5640 0076 8046     		mov	r8, r0
 5641 0078 08BB     		cbnz	r0, .L480
4880:.\ff.c        **** 							res = move_window(fs, sect++);
 5642              		.loc 1 4880 0
 5643 007a 5746     		mov	r7, r10
 5644              	.LVL860:
 5645              	.L483:
4882:.\ff.c        **** 						}
4883:.\ff.c        **** 						if (fs->fs_type == FS_FAT16) {
 5646              		.loc 1 4883 0
 5647 007c 079B     		ldr	r3, [sp, #28]
 5648 007e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5649 0080 022A     		cmp	r2, #2
 5650 0082 08D1     		bne	.L484
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 196


4884:.\ff.c        **** 							if (ld_word(fs->win + i) == 0) nfree++;
 5651              		.loc 1 4884 0
 5652 0084 04F13000 		add	r0, r4, #48
 5653 0088 1844     		add	r0, r0, r3
 5654 008a FFF7FEFF 		bl	ld_word
 5655              	.LVL861:
 5656 008e 00B9     		cbnz	r0, .L485
 5657              		.loc 1 4884 0 is_stmt 0 discriminator 1
 5658 0090 0136     		adds	r6, r6, #1
 5659              	.LVL862:
 5660              	.L485:
4885:.\ff.c        **** 							i += 2;
 5661              		.loc 1 4885 0 is_stmt 1
 5662 0092 0234     		adds	r4, r4, #2
 5663              	.LVL863:
 5664 0094 09E0     		b	.L486
 5665              	.L484:
4886:.\ff.c        **** 						} else {
4887:.\ff.c        **** 							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 5666              		.loc 1 4887 0
 5667 0096 04F13000 		add	r0, r4, #48
 5668 009a 1844     		add	r0, r0, r3
 5669 009c FFF7FEFF 		bl	ld_dword
 5670              	.LVL864:
 5671 00a0 20F07040 		bic	r0, r0, #-268435456
 5672 00a4 00B9     		cbnz	r0, .L487
 5673              		.loc 1 4887 0 is_stmt 0 discriminator 1
 5674 00a6 0136     		adds	r6, r6, #1
 5675              	.LVL865:
 5676              	.L487:
4888:.\ff.c        **** 							i += 4;
 5677              		.loc 1 4888 0 is_stmt 1
 5678 00a8 0434     		adds	r4, r4, #4
 5679              	.LVL866:
 5680              	.L486:
4889:.\ff.c        **** 						}
4890:.\ff.c        **** 						i %= SS(fs);
 5681              		.loc 1 4890 0
 5682 00aa C4F30804 		ubfx	r4, r4, #0, #9
 5683              	.LVL867:
4891:.\ff.c        **** 					} while (--clst);
 5684              		.loc 1 4891 0
 5685 00ae 013D     		subs	r5, r5, #1
 5686              	.LVL868:
 5687 00b0 DAD1     		bne	.L488
 5688 00b2 04E0     		b	.L480
 5689              	.LVL869:
 5690              	.L489:
4845:.\ff.c        **** 					}
 5691              		.loc 1 4845 0
 5692 00b4 4FF00108 		mov	r8, #1
 5693 00b8 01E0     		b	.L480
 5694              	.L490:
4848:.\ff.c        **** 					}
 5695              		.loc 1 4848 0
 5696 00ba 4FF00208 		mov	r8, #2
 5697              	.LVL870:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 197


 5698              	.L480:
4892:.\ff.c        **** 				}
4893:.\ff.c        **** 			}
4894:.\ff.c        **** 			if (res == FR_OK) {		/* Update parameters if succeeded */
 5699              		.loc 1 4894 0
 5700 00be B8F1000F 		cmp	r8, #0
 5701 00c2 07D1     		bne	.L477
4895:.\ff.c        **** 				*nclst = nfree;			/* Return the free clusters */
 5702              		.loc 1 4895 0
 5703 00c4 C9F80060 		str	r6, [r9]
4896:.\ff.c        **** 				fs->free_clst = nfree;	/* Now free_clst is valid */
 5704              		.loc 1 4896 0
 5705 00c8 079B     		ldr	r3, [sp, #28]
 5706 00ca 1E61     		str	r6, [r3, #16]
4897:.\ff.c        **** 				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 5707              		.loc 1 4897 0
 5708 00cc 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 5709 00ce 42F00102 		orr	r2, r2, #1
 5710 00d2 5A71     		strb	r2, [r3, #5]
 5711              	.LVL871:
 5712              	.L477:
4898:.\ff.c        **** 			}
4899:.\ff.c        **** 		}
4900:.\ff.c        **** 	}
4901:.\ff.c        **** 
4902:.\ff.c        **** 	LEAVE_FF(fs, res);
4903:.\ff.c        **** }
 5713              		.loc 1 4903 0
 5714 00d4 4046     		mov	r0, r8
 5715 00d6 08B0     		add	sp, sp, #32
 5716              		.cfi_def_cfa_offset 32
 5717              	.LVL872:
 5718              		@ sp needed
 5719 00d8 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5720              		.cfi_endproc
 5721              	.LFE43:
 5722              		.size	f_getfree, .-f_getfree
 5723              		.section	.text.f_truncate,"ax",%progbits
 5724              		.align	2
 5725              		.global	f_truncate
 5726              		.thumb
 5727              		.thumb_func
 5728              		.type	f_truncate, %function
 5729              	f_truncate:
 5730              	.LFB44:
4904:.\ff.c        **** 
4905:.\ff.c        **** 
4906:.\ff.c        **** 
4907:.\ff.c        **** 
4908:.\ff.c        **** /*-----------------------------------------------------------------------*/
4909:.\ff.c        **** /* Truncate File                                                         */
4910:.\ff.c        **** /*-----------------------------------------------------------------------*/
4911:.\ff.c        **** 
4912:.\ff.c        **** FRESULT f_truncate (
4913:.\ff.c        **** 	FIL* fp		/* Pointer to the file object */
4914:.\ff.c        **** )
4915:.\ff.c        **** {
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 198


 5731              		.loc 1 4915 0
 5732              		.cfi_startproc
 5733              		@ args = 0, pretend = 0, frame = 8
 5734              		@ frame_needed = 0, uses_anonymous_args = 0
 5735              	.LVL873:
 5736 0000 30B5     		push	{r4, r5, lr}
 5737              		.cfi_def_cfa_offset 12
 5738              		.cfi_offset 4, -12
 5739              		.cfi_offset 5, -8
 5740              		.cfi_offset 14, -4
 5741 0002 83B0     		sub	sp, sp, #12
 5742              		.cfi_def_cfa_offset 24
 5743 0004 0546     		mov	r5, r0
4916:.\ff.c        **** 	FRESULT res;
4917:.\ff.c        **** 	FATFS *fs;
4918:.\ff.c        **** 	DWORD ncl;
4919:.\ff.c        **** 
4920:.\ff.c        **** 
4921:.\ff.c        **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 5744              		.loc 1 4921 0
 5745 0006 01A9     		add	r1, sp, #4
 5746 0008 FFF7FEFF 		bl	validate
 5747              	.LVL874:
4922:.\ff.c        **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 5748              		.loc 1 4922 0
 5749 000c 0446     		mov	r4, r0
 5750 000e 08B9     		cbnz	r0, .L493
 5751              		.loc 1 4922 0 is_stmt 0 discriminator 2
 5752 0010 6C7C     		ldrb	r4, [r5, #17]	@ zero_extendqisi2
 5753              	.LVL875:
 5754 0012 0CB1     		cbz	r4, .L494
 5755              	.LVL876:
 5756              	.L493:
 5757              		.loc 1 4922 0 discriminator 3
 5758 0014 2046     		mov	r0, r4
 5759 0016 47E0     		b	.L495
 5760              	.L494:
4923:.\ff.c        **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 5761              		.loc 1 4923 0 is_stmt 1
 5762 0018 2B7C     		ldrb	r3, [r5, #16]	@ zero_extendqisi2
 5763 001a 13F0020F 		tst	r3, #2
 5764 001e 42D0     		beq	.L502
4924:.\ff.c        **** 
4925:.\ff.c        **** 	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 5765              		.loc 1 4925 0
 5766 0020 6B69     		ldr	r3, [r5, #20]
 5767 0022 EA68     		ldr	r2, [r5, #12]
 5768 0024 9342     		cmp	r3, r2
 5769 0026 3CD2     		bcs	.L496
4926:.\ff.c        **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 5770              		.loc 1 4926 0
 5771 0028 43B9     		cbnz	r3, .L497
4927:.\ff.c        **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 5772              		.loc 1 4927 0
 5773 002a 2846     		mov	r0, r5
 5774 002c A968     		ldr	r1, [r5, #8]
 5775 002e 0022     		movs	r2, #0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 199


 5776 0030 FFF7FEFF 		bl	remove_chain
 5777              	.LVL877:
 5778 0034 0446     		mov	r4, r0
 5779              	.LVL878:
4928:.\ff.c        **** 			fp->obj.sclust = 0;
 5780              		.loc 1 4928 0
 5781 0036 0023     		movs	r3, #0
 5782 0038 AB60     		str	r3, [r5, #8]
 5783 003a 15E0     		b	.L498
 5784              	.L497:
4929:.\ff.c        **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
4930:.\ff.c        **** 			ncl = get_fat(&fp->obj, fp->clust);
 5785              		.loc 1 4930 0
 5786 003c 2846     		mov	r0, r5
 5787 003e A969     		ldr	r1, [r5, #24]
 5788 0040 FFF7FEFF 		bl	get_fat
 5789              	.LVL879:
 5790 0044 0146     		mov	r1, r0
 5791              	.LVL880:
4931:.\ff.c        **** 			res = FR_OK;
4932:.\ff.c        **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 5792              		.loc 1 4932 0
 5793 0046 B0F1FF3F 		cmp	r0, #-1
 5794 004a 00D1     		bne	.L499
 5795 004c 0124     		movs	r4, #1
 5796              	.L499:
 5797              	.LVL881:
4933:.\ff.c        **** 			if (ncl == 1) res = FR_INT_ERR;
 5798              		.loc 1 4933 0
 5799 004e 0129     		cmp	r1, #1
 5800 0050 00D1     		bne	.L500
 5801 0052 0224     		movs	r4, #2
 5802              	.LVL882:
 5803              	.L500:
4934:.\ff.c        **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 5804              		.loc 1 4934 0
 5805 0054 44B9     		cbnz	r4, .L498
 5806              		.loc 1 4934 0 is_stmt 0 discriminator 1
 5807 0056 019B     		ldr	r3, [sp, #4]
 5808 0058 5B69     		ldr	r3, [r3, #20]
 5809 005a 8B42     		cmp	r3, r1
 5810 005c 04D9     		bls	.L498
4935:.\ff.c        **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 5811              		.loc 1 4935 0 is_stmt 1
 5812 005e 2846     		mov	r0, r5
 5813              	.LVL883:
 5814 0060 AA69     		ldr	r2, [r5, #24]
 5815 0062 FFF7FEFF 		bl	remove_chain
 5816              	.LVL884:
 5817 0066 0446     		mov	r4, r0
 5818              	.LVL885:
 5819              	.L498:
4936:.\ff.c        **** 			}
4937:.\ff.c        **** 		}
4938:.\ff.c        **** 		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
 5820              		.loc 1 4938 0
 5821 0068 6B69     		ldr	r3, [r5, #20]
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 200


 5822 006a EB60     		str	r3, [r5, #12]
4939:.\ff.c        **** 		fp->flag |= FA_MODIFIED;
 5823              		.loc 1 4939 0
 5824 006c 2B7C     		ldrb	r3, [r5, #16]	@ zero_extendqisi2
 5825 006e 43F04003 		orr	r3, r3, #64
 5826 0072 2B74     		strb	r3, [r5, #16]
4940:.\ff.c        **** #if !FF_FS_TINY
4941:.\ff.c        **** 		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
 5827              		.loc 1 4941 0
 5828 0074 8CB9     		cbnz	r4, .L501
 5829              		.loc 1 4941 0 is_stmt 0 discriminator 1
 5830 0076 13F0800F 		tst	r3, #128
 5831 007a 0ED0     		beq	.L501
4942:.\ff.c        **** 			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
 5832              		.loc 1 4942 0 is_stmt 1
 5833 007c 019B     		ldr	r3, [sp, #4]
 5834 007e 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5835 0080 05F12801 		add	r1, r5, #40
 5836 0084 EA69     		ldr	r2, [r5, #28]
 5837 0086 0123     		movs	r3, #1
 5838 0088 FFF7FEFF 		bl	disk_write
 5839              	.LVL886:
 5840 008c 20B9     		cbnz	r0, .L505
4943:.\ff.c        **** 				res = FR_DISK_ERR;
4944:.\ff.c        **** 			} else {
4945:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5841              		.loc 1 4945 0
 5842 008e 2B7C     		ldrb	r3, [r5, #16]	@ zero_extendqisi2
 5843 0090 03F07F03 		and	r3, r3, #127
 5844 0094 2B74     		strb	r3, [r5, #16]
 5845 0096 00E0     		b	.L501
 5846              	.L505:
4943:.\ff.c        **** 				res = FR_DISK_ERR;
 5847              		.loc 1 4943 0
 5848 0098 0124     		movs	r4, #1
 5849              	.LVL887:
 5850              	.L501:
4946:.\ff.c        **** 			}
4947:.\ff.c        **** 		}
4948:.\ff.c        **** #endif
4949:.\ff.c        **** 		if (res != FR_OK) ABORT(fs, res);
 5851              		.loc 1 4949 0
 5852 009a 14B1     		cbz	r4, .L496
 5853              		.loc 1 4949 0 is_stmt 0 discriminator 1
 5854 009c 6C74     		strb	r4, [r5, #17]
 5855 009e 2046     		mov	r0, r4
 5856 00a0 02E0     		b	.L495
 5857              	.L496:
4950:.\ff.c        **** 	}
4951:.\ff.c        **** 
4952:.\ff.c        **** 	LEAVE_FF(fs, res);
 5858              		.loc 1 4952 0 is_stmt 1
 5859 00a2 2046     		mov	r0, r4
 5860 00a4 00E0     		b	.L495
 5861              	.L502:
4923:.\ff.c        **** 
 5862              		.loc 1 4923 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 201


 5863 00a6 0720     		movs	r0, #7
 5864              	.L495:
4953:.\ff.c        **** }
 5865              		.loc 1 4953 0
 5866 00a8 03B0     		add	sp, sp, #12
 5867              		.cfi_def_cfa_offset 12
 5868              		@ sp needed
 5869 00aa 30BD     		pop	{r4, r5, pc}
 5870              		.cfi_endproc
 5871              	.LFE44:
 5872              		.size	f_truncate, .-f_truncate
 5873              		.section	.text.f_unlink,"ax",%progbits
 5874              		.align	2
 5875              		.global	f_unlink
 5876              		.thumb
 5877              		.thumb_func
 5878              		.type	f_unlink, %function
 5879              	f_unlink:
 5880              	.LFB45:
4954:.\ff.c        **** 
4955:.\ff.c        **** 
4956:.\ff.c        **** 
4957:.\ff.c        **** 
4958:.\ff.c        **** /*-----------------------------------------------------------------------*/
4959:.\ff.c        **** /* Delete a File/Directory                                               */
4960:.\ff.c        **** /*-----------------------------------------------------------------------*/
4961:.\ff.c        **** 
4962:.\ff.c        **** FRESULT f_unlink (
4963:.\ff.c        **** 	const TCHAR* path		/* Pointer to the file or directory path */
4964:.\ff.c        **** )
4965:.\ff.c        **** {
 5881              		.loc 1 4965 0
 5882              		.cfi_startproc
 5883              		@ args = 0, pretend = 0, frame = 104
 5884              		@ frame_needed = 0, uses_anonymous_args = 0
 5885              	.LVL888:
 5886 0000 70B5     		push	{r4, r5, r6, lr}
 5887              		.cfi_def_cfa_offset 16
 5888              		.cfi_offset 4, -16
 5889              		.cfi_offset 5, -12
 5890              		.cfi_offset 6, -8
 5891              		.cfi_offset 14, -4
 5892 0002 9AB0     		sub	sp, sp, #104
 5893              		.cfi_def_cfa_offset 120
 5894 0004 1AAB     		add	r3, sp, #104
 5895 0006 43F8640D 		str	r0, [r3, #-100]!
 5896              	.LVL889:
4966:.\ff.c        **** 	FRESULT res;
4967:.\ff.c        **** 	FATFS *fs;
4968:.\ff.c        **** 	DIR dj, sdj;
4969:.\ff.c        **** 	DWORD dclst = 0;
4970:.\ff.c        **** #if FF_FS_EXFAT
4971:.\ff.c        **** 	FFOBJID obj;
4972:.\ff.c        **** #endif
4973:.\ff.c        **** 	DEF_NAMBUF
4974:.\ff.c        **** 
4975:.\ff.c        **** 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 202


4976:.\ff.c        **** 	/* Get logical drive */
4977:.\ff.c        **** 	res = mount_volume(&path, &fs, FA_WRITE);
 5897              		.loc 1 4977 0
 5898 000a 1846     		mov	r0, r3
 5899              	.LVL890:
 5900 000c 19A9     		add	r1, sp, #100
 5901 000e 0222     		movs	r2, #2
 5902 0010 FFF7FEFF 		bl	mount_volume
 5903              	.LVL891:
4978:.\ff.c        **** 	if (res == FR_OK) {
 5904              		.loc 1 4978 0
 5905 0014 0446     		mov	r4, r0
 5906 0016 0028     		cmp	r0, #0
 5907 0018 47D1     		bne	.L508
4979:.\ff.c        **** 		dj.obj.fs = fs;
 5908              		.loc 1 4979 0
 5909 001a 199B     		ldr	r3, [sp, #100]
 5910 001c 0E93     		str	r3, [sp, #56]
4980:.\ff.c        **** 		INIT_NAMBUF(fs);
4981:.\ff.c        **** 		res = follow_path(&dj, path);		/* Follow the file path */
 5911              		.loc 1 4981 0
 5912 001e 0EA8     		add	r0, sp, #56
 5913              	.LVL892:
 5914 0020 0199     		ldr	r1, [sp, #4]
 5915 0022 FFF7FEFF 		bl	follow_path
 5916              	.LVL893:
4982:.\ff.c        **** 		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
4983:.\ff.c        **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
4984:.\ff.c        **** 		}
4985:.\ff.c        **** #if FF_FS_LOCK
4986:.\ff.c        **** 		if (res == FR_OK) res = chk_share(&dj, 2);	/* Check if it is an open object */
4987:.\ff.c        **** #endif
4988:.\ff.c        **** 		if (res == FR_OK) {					/* The object is accessible */
 5917              		.loc 1 4988 0
 5918 0026 0446     		mov	r4, r0
 5919 0028 0028     		cmp	r0, #0
 5920 002a 3ED1     		bne	.L508
4989:.\ff.c        **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
 5921              		.loc 1 4989 0
 5922 002c 9DF96330 		ldrsb	r3, [sp, #99]
 5923 0030 002B     		cmp	r3, #0
 5924 0032 05DB     		blt	.L513
4990:.\ff.c        **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
4991:.\ff.c        **** 			} else {
4992:.\ff.c        **** 				if (dj.obj.attr & AM_RDO) {
 5925              		.loc 1 4992 0
 5926 0034 9DF83E30 		ldrb	r3, [sp, #62]	@ zero_extendqisi2
 5927 0038 13F0010F 		tst	r3, #1
 5928 003c 02D1     		bne	.L514
 5929 003e 02E0     		b	.L509
 5930              	.L513:
4990:.\ff.c        **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 5931              		.loc 1 4990 0
 5932 0040 0624     		movs	r4, #6
 5933 0042 00E0     		b	.L509
 5934              	.L514:
4993:.\ff.c        **** 					res = FR_DENIED;		/* Cannot remove R/O object */
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 203


 5935              		.loc 1 4993 0
 5936 0044 0724     		movs	r4, #7
 5937              	.L509:
 5938              	.LVL894:
4994:.\ff.c        **** 				}
4995:.\ff.c        **** 			}
4996:.\ff.c        **** 			if (res == FR_OK) {
 5939              		.loc 1 4996 0
 5940 0046 ECB9     		cbnz	r4, .L515
4997:.\ff.c        **** #if FF_FS_EXFAT
4998:.\ff.c        **** 				obj.fs = fs;
4999:.\ff.c        **** 				if (fs->fs_type == FS_EXFAT) {
5000:.\ff.c        **** 					init_alloc_info(fs, &obj);
5001:.\ff.c        **** 					dclst = obj.sclust;
5002:.\ff.c        **** 				} else
5003:.\ff.c        **** #endif
5004:.\ff.c        **** 				{
5005:.\ff.c        **** 					dclst = ld_clust(fs, dj.dir);
 5941              		.loc 1 5005 0
 5942 0048 199E     		ldr	r6, [sp, #100]
 5943 004a 3046     		mov	r0, r6
 5944 004c 1599     		ldr	r1, [sp, #84]
 5945 004e FFF7FEFF 		bl	ld_clust
 5946              	.LVL895:
 5947 0052 0546     		mov	r5, r0
 5948              	.LVL896:
5006:.\ff.c        **** 				}
5007:.\ff.c        **** 				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 5949              		.loc 1 5007 0
 5950 0054 9DF83E30 		ldrb	r3, [sp, #62]	@ zero_extendqisi2
 5951 0058 13F0100F 		tst	r3, #16
 5952 005c 13D0     		beq	.L510
5008:.\ff.c        **** #if FF_FS_RPATH != 0
5009:.\ff.c        **** 					if (dclst == fs->cdir) {	 	/* Is it the current directory? */
5010:.\ff.c        **** 						res = FR_DENIED;
5011:.\ff.c        **** 					} else
5012:.\ff.c        **** #endif
5013:.\ff.c        **** 					{
5014:.\ff.c        **** 						sdj.obj.fs = fs;			/* Open the sub-directory */
 5953              		.loc 1 5014 0
 5954 005e 0396     		str	r6, [sp, #12]
5015:.\ff.c        **** 						sdj.obj.sclust = dclst;
 5955              		.loc 1 5015 0
 5956 0060 0590     		str	r0, [sp, #20]
5016:.\ff.c        **** #if FF_FS_EXFAT
5017:.\ff.c        **** 						if (fs->fs_type == FS_EXFAT) {
5018:.\ff.c        **** 							sdj.obj.objsize = obj.objsize;
5019:.\ff.c        **** 							sdj.obj.stat = obj.stat;
5020:.\ff.c        **** 						}
5021:.\ff.c        **** #endif
5022:.\ff.c        **** 						res = dir_sdi(&sdj, 0);
 5957              		.loc 1 5022 0
 5958 0062 03A8     		add	r0, sp, #12
 5959              	.LVL897:
 5960 0064 0021     		movs	r1, #0
 5961 0066 FFF7FEFF 		bl	dir_sdi
 5962              	.LVL898:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 204


5023:.\ff.c        **** 						if (res == FR_OK) {
 5963              		.loc 1 5023 0
 5964 006a 0446     		mov	r4, r0
 5965 006c 58B9     		cbnz	r0, .L510
5024:.\ff.c        **** 							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 5966              		.loc 1 5024 0
 5967 006e 03A8     		add	r0, sp, #12
 5968              	.LVL899:
 5969 0070 0021     		movs	r1, #0
 5970 0072 FFF7FEFF 		bl	dir_read
 5971              	.LVL900:
5025:.\ff.c        **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 5972              		.loc 1 5025 0
 5973 0076 0346     		mov	r3, r0
 5974 0078 00B9     		cbnz	r0, .L511
 5975 007a 0723     		movs	r3, #7
 5976              	.L511:
 5977              	.LVL901:
5026:.\ff.c        **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 5978              		.loc 1 5026 0
 5979 007c 042B     		cmp	r3, #4
 5980 007e 02D0     		beq	.L510
 5981 0080 1C46     		mov	r4, r3
 5982 0082 00E0     		b	.L510
 5983              	.LVL902:
 5984              	.L515:
4969:.\ff.c        **** #if FF_FS_EXFAT
 5985              		.loc 1 4969 0
 5986 0084 0025     		movs	r5, #0
 5987              	.LVL903:
 5988              	.L510:
5027:.\ff.c        **** 						}
5028:.\ff.c        **** 					}
5029:.\ff.c        **** 				}
5030:.\ff.c        **** 			}
5031:.\ff.c        **** 			if (res == FR_OK) {
 5989              		.loc 1 5031 0
 5990 0086 84B9     		cbnz	r4, .L508
5032:.\ff.c        **** 				res = dir_remove(&dj);			/* Remove the directory entry */
 5991              		.loc 1 5032 0
 5992 0088 0EA8     		add	r0, sp, #56
 5993 008a FFF7FEFF 		bl	dir_remove
 5994              	.LVL904:
5033:.\ff.c        **** 				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 5995              		.loc 1 5033 0
 5996 008e 0446     		mov	r4, r0
 5997 0090 30B9     		cbnz	r0, .L512
 5998              		.loc 1 5033 0 is_stmt 0 discriminator 1
 5999 0092 2DB1     		cbz	r5, .L512
5034:.\ff.c        **** #if FF_FS_EXFAT
5035:.\ff.c        **** 					res = remove_chain(&obj, dclst, 0);
5036:.\ff.c        **** #else
5037:.\ff.c        **** 					res = remove_chain(&dj.obj, dclst, 0);
 6000              		.loc 1 5037 0 is_stmt 1
 6001 0094 0EA8     		add	r0, sp, #56
 6002              	.LVL905:
 6003 0096 2946     		mov	r1, r5
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 205


 6004 0098 0022     		movs	r2, #0
 6005 009a FFF7FEFF 		bl	remove_chain
 6006              	.LVL906:
 6007 009e 0446     		mov	r4, r0
 6008              	.LVL907:
 6009              	.L512:
5038:.\ff.c        **** #endif
5039:.\ff.c        **** 				}
5040:.\ff.c        **** 				if (res == FR_OK) res = sync_fs(fs);
 6010              		.loc 1 5040 0
 6011 00a0 1CB9     		cbnz	r4, .L508
 6012              		.loc 1 5040 0 is_stmt 0 discriminator 1
 6013 00a2 1998     		ldr	r0, [sp, #100]
 6014 00a4 FFF7FEFF 		bl	sync_fs
 6015              	.LVL908:
 6016 00a8 0446     		mov	r4, r0
 6017              	.LVL909:
 6018              	.L508:
5041:.\ff.c        **** 			}
5042:.\ff.c        **** 		}
5043:.\ff.c        **** 		FREE_NAMBUF();
5044:.\ff.c        **** 	}
5045:.\ff.c        **** 
5046:.\ff.c        **** 	LEAVE_FF(fs, res);
5047:.\ff.c        **** }
 6019              		.loc 1 5047 0 is_stmt 1
 6020 00aa 2046     		mov	r0, r4
 6021 00ac 1AB0     		add	sp, sp, #104
 6022              		.cfi_def_cfa_offset 16
 6023              	.LVL910:
 6024              		@ sp needed
 6025 00ae 70BD     		pop	{r4, r5, r6, pc}
 6026              		.cfi_endproc
 6027              	.LFE45:
 6028              		.size	f_unlink, .-f_unlink
 6029              		.section	.text.f_mkdir,"ax",%progbits
 6030              		.align	2
 6031              		.global	f_mkdir
 6032              		.thumb
 6033              		.thumb_func
 6034              		.type	f_mkdir, %function
 6035              	f_mkdir:
 6036              	.LFB46:
5048:.\ff.c        **** 
5049:.\ff.c        **** 
5050:.\ff.c        **** 
5051:.\ff.c        **** 
5052:.\ff.c        **** /*-----------------------------------------------------------------------*/
5053:.\ff.c        **** /* Create a Directory                                                    */
5054:.\ff.c        **** /*-----------------------------------------------------------------------*/
5055:.\ff.c        **** 
5056:.\ff.c        **** FRESULT f_mkdir (
5057:.\ff.c        **** 	const TCHAR* path		/* Pointer to the directory path */
5058:.\ff.c        **** )
5059:.\ff.c        **** {
 6037              		.loc 1 5059 0
 6038              		.cfi_startproc
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 206


 6039              		@ args = 0, pretend = 0, frame = 72
 6040              		@ frame_needed = 0, uses_anonymous_args = 0
 6041              	.LVL911:
 6042 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6043              		.cfi_def_cfa_offset 20
 6044              		.cfi_offset 4, -20
 6045              		.cfi_offset 5, -16
 6046              		.cfi_offset 6, -12
 6047              		.cfi_offset 7, -8
 6048              		.cfi_offset 14, -4
 6049 0002 93B0     		sub	sp, sp, #76
 6050              		.cfi_def_cfa_offset 96
 6051 0004 12AB     		add	r3, sp, #72
 6052 0006 43F8440D 		str	r0, [r3, #-68]!
5060:.\ff.c        **** 	FRESULT res;
5061:.\ff.c        **** 	FATFS *fs;
5062:.\ff.c        **** 	DIR dj;
5063:.\ff.c        **** 	FFOBJID sobj;
5064:.\ff.c        **** 	DWORD dcl, pcl, tm;
5065:.\ff.c        **** 	DEF_NAMBUF
5066:.\ff.c        **** 
5067:.\ff.c        **** 
5068:.\ff.c        **** 	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 6053              		.loc 1 5068 0
 6054 000a 1846     		mov	r0, r3
 6055              	.LVL912:
 6056 000c 11A9     		add	r1, sp, #68
 6057 000e 0222     		movs	r2, #2
 6058 0010 FFF7FEFF 		bl	mount_volume
 6059              	.LVL913:
5069:.\ff.c        **** 	if (res == FR_OK) {
 6060              		.loc 1 5069 0
 6061 0014 0446     		mov	r4, r0
 6062 0016 0028     		cmp	r0, #0
 6063 0018 40F08580 		bne	.L519
5070:.\ff.c        **** 		dj.obj.fs = fs;
 6064              		.loc 1 5070 0
 6065 001c 119B     		ldr	r3, [sp, #68]
 6066 001e 0693     		str	r3, [sp, #24]
5071:.\ff.c        **** 		INIT_NAMBUF(fs);
5072:.\ff.c        **** 		res = follow_path(&dj, path);			/* Follow the file path */
 6067              		.loc 1 5072 0
 6068 0020 06A8     		add	r0, sp, #24
 6069              	.LVL914:
 6070 0022 0199     		ldr	r1, [sp, #4]
 6071 0024 FFF7FEFF 		bl	follow_path
 6072              	.LVL915:
5073:.\ff.c        **** 		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 6073              		.loc 1 5073 0
 6074 0028 0346     		mov	r3, r0
 6075 002a 00B9     		cbnz	r0, .L520
 6076 002c 0823     		movs	r3, #8
 6077              	.L520:
 6078              	.LVL916:
5074:.\ff.c        **** 		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
5075:.\ff.c        **** 			res = FR_INVALID_NAME;
5076:.\ff.c        **** 		}
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 207


5077:.\ff.c        **** 		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
 6079              		.loc 1 5077 0
 6080 002e 042B     		cmp	r3, #4
 6081 0030 78D1     		bne	.L527
5078:.\ff.c        **** 			sobj.fs = fs;						/* New object id to create a new chain */
 6082              		.loc 1 5078 0
 6083 0032 12A8     		add	r0, sp, #72
 6084              	.LVL917:
 6085 0034 119B     		ldr	r3, [sp, #68]
 6086              	.LVL918:
 6087 0036 40F8403D 		str	r3, [r0, #-64]!
 6088              	.LVL919:
5079:.\ff.c        **** 			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 6089              		.loc 1 5079 0
 6090 003a 0021     		movs	r1, #0
 6091 003c FFF7FEFF 		bl	create_chain
 6092              	.LVL920:
5080:.\ff.c        **** 			res = FR_OK;
5081:.\ff.c        **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 6093              		.loc 1 5081 0
 6094 0040 0546     		mov	r5, r0
 6095 0042 00B9     		cbnz	r0, .L521
 6096 0044 0724     		movs	r4, #7
 6097              	.L521:
 6098              	.LVL921:
5082:.\ff.c        **** 			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 6099              		.loc 1 5082 0
 6100 0046 012D     		cmp	r5, #1
 6101 0048 00D1     		bne	.L522
 6102 004a 0224     		movs	r4, #2
 6103              	.LVL922:
 6104              	.L522:
5083:.\ff.c        **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 6105              		.loc 1 5083 0
 6106 004c B5F1FF3F 		cmp	r5, #-1
 6107 0050 00D1     		bne	.L523
 6108 0052 0124     		movs	r4, #1
 6109              	.LVL923:
 6110              	.L523:
5084:.\ff.c        **** 			tm = GET_FATTIME();
 6111              		.loc 1 5084 0
 6112 0054 FFF7FEFF 		bl	get_fattime
 6113              	.LVL924:
 6114 0058 0646     		mov	r6, r0
 6115              	.LVL925:
5085:.\ff.c        **** 			if (res == FR_OK) {
 6116              		.loc 1 5085 0
 6117 005a 002C     		cmp	r4, #0
 6118 005c 46D1     		bne	.L524
5086:.\ff.c        **** 				res = dir_clear(fs, dcl);		/* Clean up the new table */
 6119              		.loc 1 5086 0
 6120 005e 1198     		ldr	r0, [sp, #68]
 6121              	.LVL926:
 6122 0060 2946     		mov	r1, r5
 6123 0062 FFF7FEFF 		bl	dir_clear
 6124              	.LVL927:
5087:.\ff.c        **** 				if (res == FR_OK) {
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 208


 6125              		.loc 1 5087 0
 6126 0066 0446     		mov	r4, r0
 6127 0068 0028     		cmp	r0, #0
 6128 006a 3FD1     		bne	.L524
5088:.\ff.c        **** 					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
5089:.\ff.c        **** 						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
 6129              		.loc 1 5089 0
 6130 006c 119C     		ldr	r4, [sp, #68]
 6131 006e 04F13000 		add	r0, r4, #48
 6132              	.LVL928:
 6133 0072 2021     		movs	r1, #32
 6134 0074 0B22     		movs	r2, #11
 6135 0076 FFF7FEFF 		bl	memset
 6136              	.LVL929:
5090:.\ff.c        **** 						fs->win[DIR_Name] = '.';
 6137              		.loc 1 5090 0
 6138 007a 2E27     		movs	r7, #46
 6139 007c 84F83070 		strb	r7, [r4, #48]
5091:.\ff.c        **** 						fs->win[DIR_Attr] = AM_DIR;
 6140              		.loc 1 5091 0
 6141 0080 1023     		movs	r3, #16
 6142 0082 84F83B30 		strb	r3, [r4, #59]
5092:.\ff.c        **** 						st_dword(fs->win + DIR_ModTime, tm);
 6143              		.loc 1 5092 0
 6144 0086 04F14600 		add	r0, r4, #70
 6145 008a 3146     		mov	r1, r6
 6146 008c FFF7FEFF 		bl	st_dword
 6147              	.LVL930:
5093:.\ff.c        **** 						st_clust(fs, fs->win, dcl);
 6148              		.loc 1 5093 0
 6149 0090 1199     		ldr	r1, [sp, #68]
 6150 0092 0846     		mov	r0, r1
 6151 0094 3031     		adds	r1, r1, #48
 6152 0096 2A46     		mov	r2, r5
 6153 0098 FFF7FEFF 		bl	st_clust
 6154              	.LVL931:
5094:.\ff.c        **** 						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
 6155              		.loc 1 5094 0
 6156 009c 1198     		ldr	r0, [sp, #68]
 6157 009e 00F15001 		add	r1, r0, #80
 6158 00a2 0346     		mov	r3, r0
 6159 00a4 53F830CF 		ldr	ip, [r3, #48]!	@ unaligned
 6160 00a8 D3F804E0 		ldr	lr, [r3, #4]	@ unaligned
 6161 00ac 9C68     		ldr	r4, [r3, #8]	@ unaligned
 6162 00ae DA68     		ldr	r2, [r3, #12]	@ unaligned
 6163 00b0 C0F850C0 		str	ip, [r0, #80]	@ unaligned
 6164 00b4 C1F804E0 		str	lr, [r1, #4]	@ unaligned
 6165 00b8 8C60     		str	r4, [r1, #8]	@ unaligned
 6166 00ba CA60     		str	r2, [r1, #12]	@ unaligned
 6167 00bc D3F810C0 		ldr	ip, [r3, #16]	@ unaligned
 6168 00c0 D3F814E0 		ldr	lr, [r3, #20]	@ unaligned
 6169 00c4 9C69     		ldr	r4, [r3, #24]	@ unaligned
 6170 00c6 DA69     		ldr	r2, [r3, #28]	@ unaligned
 6171 00c8 C1F810C0 		str	ip, [r1, #16]	@ unaligned
 6172 00cc C1F814E0 		str	lr, [r1, #20]	@ unaligned
 6173 00d0 8C61     		str	r4, [r1, #24]	@ unaligned
 6174 00d2 CA61     		str	r2, [r1, #28]	@ unaligned
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 209


5095:.\ff.c        **** 						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 6175              		.loc 1 5095 0
 6176 00d4 80F85170 		strb	r7, [r0, #81]
 6177              	.LVL932:
5096:.\ff.c        **** 						st_clust(fs, fs->win + SZDIRE, pcl);
 6178              		.loc 1 5096 0
 6179 00d8 089A     		ldr	r2, [sp, #32]
 6180 00da FFF7FEFF 		bl	st_clust
 6181              	.LVL933:
5097:.\ff.c        **** 						fs->wflag = 1;
 6182              		.loc 1 5097 0
 6183 00de 0122     		movs	r2, #1
 6184 00e0 119B     		ldr	r3, [sp, #68]
 6185 00e2 1A71     		strb	r2, [r3, #4]
5098:.\ff.c        **** 					}
5099:.\ff.c        **** 					res = dir_register(&dj);	/* Register the object to the parent directoy */
 6186              		.loc 1 5099 0
 6187 00e4 06A8     		add	r0, sp, #24
 6188 00e6 FFF7FEFF 		bl	dir_register
 6189              	.LVL934:
 6190 00ea 0446     		mov	r4, r0
 6191              	.LVL935:
 6192              	.L524:
5100:.\ff.c        **** 				}
5101:.\ff.c        **** 			}
5102:.\ff.c        **** 			if (res == FR_OK) {
 6193              		.loc 1 5102 0
 6194 00ec A4B9     		cbnz	r4, .L525
5103:.\ff.c        **** #if FF_FS_EXFAT
5104:.\ff.c        **** 				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
5105:.\ff.c        **** 					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
5106:.\ff.c        **** 					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
5107:.\ff.c        **** 					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* Directory size needs to be
5108:.\ff.c        **** 					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
5109:.\ff.c        **** 					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
5110:.\ff.c        **** 					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
5111:.\ff.c        **** 					res = store_xdir(&dj);
5112:.\ff.c        **** 				} else
5113:.\ff.c        **** #endif
5114:.\ff.c        **** 				{
5115:.\ff.c        **** 					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
 6195              		.loc 1 5115 0
 6196 00ee 0D98     		ldr	r0, [sp, #52]
 6197 00f0 1630     		adds	r0, r0, #22
 6198 00f2 3146     		mov	r1, r6
 6199 00f4 FFF7FEFF 		bl	st_dword
 6200              	.LVL936:
5116:.\ff.c        **** 					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
 6201              		.loc 1 5116 0
 6202 00f8 1198     		ldr	r0, [sp, #68]
 6203 00fa 0D99     		ldr	r1, [sp, #52]
 6204 00fc 2A46     		mov	r2, r5
 6205 00fe FFF7FEFF 		bl	st_clust
 6206              	.LVL937:
5117:.\ff.c        **** 					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 6207              		.loc 1 5117 0
 6208 0102 1022     		movs	r2, #16
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 210


 6209 0104 0D9B     		ldr	r3, [sp, #52]
 6210 0106 DA72     		strb	r2, [r3, #11]
5118:.\ff.c        **** 					fs->wflag = 1;
 6211              		.loc 1 5118 0
 6212 0108 1198     		ldr	r0, [sp, #68]
 6213 010a 0123     		movs	r3, #1
 6214 010c 0371     		strb	r3, [r0, #4]
5119:.\ff.c        **** 				}
5120:.\ff.c        **** 				if (res == FR_OK) {
 6215              		.loc 1 5120 0
 6216 010e 54B9     		cbnz	r4, .L519
5121:.\ff.c        **** 					res = sync_fs(fs);
 6217              		.loc 1 5121 0
 6218 0110 FFF7FEFF 		bl	sync_fs
 6219              	.LVL938:
 6220 0114 0446     		mov	r4, r0
 6221              	.LVL939:
 6222 0116 06E0     		b	.L519
 6223              	.L525:
5122:.\ff.c        **** 				}
5123:.\ff.c        **** 			} else {
5124:.\ff.c        **** 				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
 6224              		.loc 1 5124 0
 6225 0118 02A8     		add	r0, sp, #8
 6226 011a 2946     		mov	r1, r5
 6227 011c 0022     		movs	r2, #0
 6228 011e FFF7FEFF 		bl	remove_chain
 6229              	.LVL940:
 6230 0122 00E0     		b	.L519
 6231              	.LVL941:
 6232              	.L527:
 6233 0124 1C46     		mov	r4, r3
 6234              	.LVL942:
 6235              	.L519:
5125:.\ff.c        **** 			}
5126:.\ff.c        **** 		}
5127:.\ff.c        **** 		FREE_NAMBUF();
5128:.\ff.c        **** 	}
5129:.\ff.c        **** 
5130:.\ff.c        **** 	LEAVE_FF(fs, res);
5131:.\ff.c        **** }
 6236              		.loc 1 5131 0
 6237 0126 2046     		mov	r0, r4
 6238 0128 13B0     		add	sp, sp, #76
 6239              		.cfi_def_cfa_offset 20
 6240              		@ sp needed
 6241 012a F0BD     		pop	{r4, r5, r6, r7, pc}
 6242              		.cfi_endproc
 6243              	.LFE46:
 6244              		.size	f_mkdir, .-f_mkdir
 6245              		.section	.text.f_rename,"ax",%progbits
 6246              		.align	2
 6247              		.global	f_rename
 6248              		.thumb
 6249              		.thumb_func
 6250              		.type	f_rename, %function
 6251              	f_rename:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 211


 6252              	.LFB47:
5132:.\ff.c        **** 
5133:.\ff.c        **** 
5134:.\ff.c        **** 
5135:.\ff.c        **** 
5136:.\ff.c        **** /*-----------------------------------------------------------------------*/
5137:.\ff.c        **** /* Rename a File/Directory                                               */
5138:.\ff.c        **** /*-----------------------------------------------------------------------*/
5139:.\ff.c        **** 
5140:.\ff.c        **** FRESULT f_rename (
5141:.\ff.c        **** 	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
5142:.\ff.c        **** 	const TCHAR* path_new	/* Pointer to the new name */
5143:.\ff.c        **** )
5144:.\ff.c        **** {
 6253              		.loc 1 5144 0
 6254              		.cfi_startproc
 6255              		@ args = 0, pretend = 0, frame = 136
 6256              		@ frame_needed = 0, uses_anonymous_args = 0
 6257              	.LVL943:
 6258 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6259              		.cfi_def_cfa_offset 20
 6260              		.cfi_offset 4, -20
 6261              		.cfi_offset 5, -16
 6262              		.cfi_offset 6, -12
 6263              		.cfi_offset 7, -8
 6264              		.cfi_offset 14, -4
 6265 0002 A3B0     		sub	sp, sp, #140
 6266              		.cfi_def_cfa_offset 160
 6267 0004 0190     		str	r0, [sp, #4]
 6268 0006 22A8     		add	r0, sp, #136
 6269              	.LVL944:
 6270 0008 40F8881D 		str	r1, [r0, #-136]!
5145:.\ff.c        **** 	FRESULT res;
5146:.\ff.c        **** 	FATFS *fs;
5147:.\ff.c        **** 	DIR djo, djn;
5148:.\ff.c        **** 	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
5149:.\ff.c        **** 	LBA_t sect;
5150:.\ff.c        **** 	DEF_NAMBUF
5151:.\ff.c        **** 
5152:.\ff.c        **** 
5153:.\ff.c        **** 	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
 6271              		.loc 1 5153 0
 6272 000c FFF7FEFF 		bl	get_ldnumber
 6273              	.LVL945:
5154:.\ff.c        **** 	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 6274              		.loc 1 5154 0
 6275 0010 01A8     		add	r0, sp, #4
 6276              	.LVL946:
 6277 0012 21A9     		add	r1, sp, #132
 6278 0014 0222     		movs	r2, #2
 6279 0016 FFF7FEFF 		bl	mount_volume
 6280              	.LVL947:
5155:.\ff.c        **** 	if (res == FR_OK) {
 6281              		.loc 1 5155 0
 6282 001a 0446     		mov	r4, r0
 6283 001c 0028     		cmp	r0, #0
 6284 001e 40F09280 		bne	.L533
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 212


5156:.\ff.c        **** 		djo.obj.fs = fs;
 6285              		.loc 1 5156 0
 6286 0022 219B     		ldr	r3, [sp, #132]
 6287 0024 1693     		str	r3, [sp, #88]
5157:.\ff.c        **** 		INIT_NAMBUF(fs);
5158:.\ff.c        **** 		res = follow_path(&djo, path_old);			/* Check old object */
 6288              		.loc 1 5158 0
 6289 0026 16A8     		add	r0, sp, #88
 6290              	.LVL948:
 6291 0028 0199     		ldr	r1, [sp, #4]
 6292 002a FFF7FEFF 		bl	follow_path
 6293              	.LVL949:
5159:.\ff.c        **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
 6294              		.loc 1 5159 0
 6295 002e 0446     		mov	r4, r0
 6296 0030 28B9     		cbnz	r0, .L534
 6297              		.loc 1 5159 0 is_stmt 0 discriminator 1
 6298 0032 9DF88330 		ldrb	r3, [sp, #131]	@ zero_extendqisi2
 6299 0036 13F0A00F 		tst	r3, #160
 6300 003a 00D0     		beq	.L534
 6301              		.loc 1 5159 0
 6302 003c 0624     		movs	r4, #6
 6303              	.L534:
 6304              	.LVL950:
5160:.\ff.c        **** #if FF_FS_LOCK
5161:.\ff.c        **** 		if (res == FR_OK) {
5162:.\ff.c        **** 			res = chk_share(&djo, 2);
5163:.\ff.c        **** 		}
5164:.\ff.c        **** #endif
5165:.\ff.c        **** 		if (res == FR_OK) {					/* Object to be renamed is found */
 6305              		.loc 1 5165 0 is_stmt 1
 6306 003e 002C     		cmp	r4, #0
 6307 0040 40F08180 		bne	.L533
5166:.\ff.c        **** #if FF_FS_EXFAT
5167:.\ff.c        **** 			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
5168:.\ff.c        **** 				BYTE nf, nn;
5169:.\ff.c        **** 				WORD nh;
5170:.\ff.c        **** 
5171:.\ff.c        **** 				memcpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
5172:.\ff.c        **** 				memcpy(&djn, &djo, sizeof djo);
5173:.\ff.c        **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
5174:.\ff.c        **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
5175:.\ff.c        **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
5176:.\ff.c        **** 				}
5177:.\ff.c        **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
5178:.\ff.c        **** 					res = dir_register(&djn);			/* Register the new entry */
5179:.\ff.c        **** 					if (res == FR_OK) {
5180:.\ff.c        **** 						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
5181:.\ff.c        **** 						nh = ld_word(fs->dirbuf + XDIR_NameHash);
5182:.\ff.c        **** 						memcpy(fs->dirbuf, buf, SZDIRE * 2);	/* Restore 85+C0 entry */
5183:.\ff.c        **** 						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
5184:.\ff.c        **** 						st_word(fs->dirbuf + XDIR_NameHash, nh);
5185:.\ff.c        **** 						if (!(fs->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_ARC;	/* Set archive attrib
5186:.\ff.c        **** /* Start of critical section where an interruption can cause a cross-link */
5187:.\ff.c        **** 						res = store_xdir(&djn);
5188:.\ff.c        **** 					}
5189:.\ff.c        **** 				}
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 213


5190:.\ff.c        **** 			} else
5191:.\ff.c        **** #endif
5192:.\ff.c        **** 			{	/* At FAT/FAT32 volume */
5193:.\ff.c        **** 				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
 6308              		.loc 1 5193 0
 6309 0044 1D9D     		ldr	r5, [sp, #116]
 6310 0046 03AC     		add	r4, sp, #12
 6311              	.LVL951:
 6312 0048 2868     		ldr	r0, [r5]	@ unaligned
 6313 004a 6968     		ldr	r1, [r5, #4]	@ unaligned
 6314 004c AA68     		ldr	r2, [r5, #8]	@ unaligned
 6315 004e EB68     		ldr	r3, [r5, #12]	@ unaligned
 6316 0050 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 6317 0052 2869     		ldr	r0, [r5, #16]	@ unaligned
 6318 0054 6969     		ldr	r1, [r5, #20]	@ unaligned
 6319 0056 AA69     		ldr	r2, [r5, #24]	@ unaligned
 6320 0058 EB69     		ldr	r3, [r5, #28]	@ unaligned
 6321 005a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
5194:.\ff.c        **** 				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 6322              		.loc 1 5194 0
 6323 005c 0BAC     		add	r4, sp, #44
 6324 005e 16AD     		add	r5, sp, #88
 6325 0060 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 6326 0062 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 6327 0064 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 6328 0066 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 6329 0068 95E80700 		ldmia	r5, {r0, r1, r2}
 6330 006c 84E80700 		stmia	r4, {r0, r1, r2}
5195:.\ff.c        **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 6331              		.loc 1 5195 0
 6332 0070 0BA8     		add	r0, sp, #44
 6333 0072 0099     		ldr	r1, [sp]
 6334 0074 FFF7FEFF 		bl	follow_path
 6335              	.LVL952:
5196:.\ff.c        **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 6336              		.loc 1 5196 0
 6337 0078 0446     		mov	r4, r0
 6338 007a 60B9     		cbnz	r0, .L535
5197:.\ff.c        **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 6339              		.loc 1 5197 0
 6340 007c 189B     		ldr	r3, [sp, #96]
 6341 007e 0D9A     		ldr	r2, [sp, #52]
 6342 0080 9A42     		cmp	r2, r3
 6343 0082 05D1     		bne	.L540
 6344              		.loc 1 5197 0 is_stmt 0 discriminator 1
 6345 0084 1A9B     		ldr	r3, [sp, #104]
 6346 0086 0F9A     		ldr	r2, [sp, #60]
 6347 0088 9A42     		cmp	r2, r3
 6348 008a 03D0     		beq	.L541
 6349              		.loc 1 5197 0
 6350 008c 0824     		movs	r4, #8
 6351 008e 02E0     		b	.L535
 6352              	.L540:
 6353 0090 0824     		movs	r4, #8
 6354 0092 00E0     		b	.L535
 6355              	.L541:
 6356 0094 0424     		movs	r4, #4
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 214


 6357              	.LVL953:
 6358              	.L535:
5198:.\ff.c        **** 				}
5199:.\ff.c        **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 6359              		.loc 1 5199 0 is_stmt 1
 6360 0096 042C     		cmp	r4, #4
 6361 0098 4BD1     		bne	.L537
5200:.\ff.c        **** 					res = dir_register(&djn);			/* Register the new entry */
 6362              		.loc 1 5200 0
 6363 009a 0BA8     		add	r0, sp, #44
 6364 009c FFF7FEFF 		bl	dir_register
 6365              	.LVL954:
5201:.\ff.c        **** 					if (res == FR_OK) {
 6366              		.loc 1 5201 0
 6367 00a0 0446     		mov	r4, r0
 6368 00a2 0028     		cmp	r0, #0
 6369 00a4 45D1     		bne	.L537
5202:.\ff.c        **** 						dir = djn.dir;					/* Copy directory entry of the object except name */
 6370              		.loc 1 5202 0
 6371 00a6 1299     		ldr	r1, [sp, #72]
 6372              	.LVL955:
5203:.\ff.c        **** 						memcpy(dir + 13, buf + 13, SZDIRE - 13);
 6373              		.loc 1 5203 0
 6374 00a8 22AB     		add	r3, sp, #136
 6375              	.LVL956:
 6376 00aa 53F86F7D 		ldr	r7, [r3, #-111]!	@ unaligned
 6377              	.LVL957:
 6378 00ae 5E68     		ldr	r6, [r3, #4]	@ unaligned
 6379 00b0 9D68     		ldr	r5, [r3, #8]	@ unaligned
 6380 00b2 D868     		ldr	r0, [r3, #12]	@ unaligned
 6381              	.LVL958:
 6382 00b4 C1F80D70 		str	r7, [r1, #13]	@ unaligned
 6383 00b8 C1F81160 		str	r6, [r1, #17]	@ unaligned
 6384 00bc C1F81550 		str	r5, [r1, #21]	@ unaligned
 6385 00c0 C1F81900 		str	r0, [r1, #25]	@ unaligned
 6386 00c4 188A     		ldrh	r0, [r3, #16]	@ unaligned
 6387 00c6 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 6388              	.LVL959:
 6389 00c8 A1F81D00 		strh	r0, [r1, #29]	@ unaligned
 6390 00cc CB77     		strb	r3, [r1, #31]
5204:.\ff.c        **** 						dir[DIR_Attr] = buf[DIR_Attr];
 6391              		.loc 1 5204 0
 6392 00ce 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 6393 00d2 CB72     		strb	r3, [r1, #11]
5205:.\ff.c        **** 						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a f
 6394              		.loc 1 5205 0
 6395 00d4 13F0100F 		tst	r3, #16
 6396 00d8 02D1     		bne	.L538
 6397              		.loc 1 5205 0 is_stmt 0 discriminator 1
 6398 00da 43F02003 		orr	r3, r3, #32
 6399 00de CB72     		strb	r3, [r1, #11]
 6400              	.L538:
5206:.\ff.c        **** 						fs->wflag = 1;
 6401              		.loc 1 5206 0 is_stmt 1
 6402 00e0 219D     		ldr	r5, [sp, #132]
 6403 00e2 0123     		movs	r3, #1
 6404 00e4 2B71     		strb	r3, [r5, #4]
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 215


5207:.\ff.c        **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
 6405              		.loc 1 5207 0
 6406 00e6 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 6407 00e8 13F0100F 		tst	r3, #16
 6408 00ec 21D0     		beq	.L537
 6409              		.loc 1 5207 0 is_stmt 0 discriminator 1
 6410 00ee 0D9B     		ldr	r3, [sp, #52]
 6411 00f0 189A     		ldr	r2, [sp, #96]
 6412 00f2 9A42     		cmp	r2, r3
 6413 00f4 1DD0     		beq	.L537
5208:.\ff.c        **** 							sect = clst2sect(fs, ld_clust(fs, dir));
 6414              		.loc 1 5208 0 is_stmt 1
 6415 00f6 2846     		mov	r0, r5
 6416 00f8 FFF7FEFF 		bl	ld_clust
 6417              	.LVL960:
 6418 00fc 0146     		mov	r1, r0
 6419 00fe 2846     		mov	r0, r5
 6420 0100 FFF7FEFF 		bl	clst2sect
 6421              	.LVL961:
5209:.\ff.c        **** 							if (sect == 0) {
 6422              		.loc 1 5209 0
 6423 0104 0146     		mov	r1, r0
 6424 0106 98B1     		cbz	r0, .L542
5210:.\ff.c        **** 								res = FR_INT_ERR;
5211:.\ff.c        **** 							} else {
5212:.\ff.c        **** /* Start of critical section where an interruption can cause a cross-link */
5213:.\ff.c        **** 								res = move_window(fs, sect);
 6425              		.loc 1 5213 0
 6426 0108 2846     		mov	r0, r5
 6427              	.LVL962:
 6428 010a FFF7FEFF 		bl	move_window
 6429              	.LVL963:
5214:.\ff.c        **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 6430              		.loc 1 5214 0
 6431 010e 219B     		ldr	r3, [sp, #132]
 6432 0110 03F15001 		add	r1, r3, #80
 6433              	.LVL964:
5215:.\ff.c        **** 								if (res == FR_OK && dir[1] == '.') {
 6434              		.loc 1 5215 0
 6435 0114 0446     		mov	r4, r0
 6436 0116 60B9     		cbnz	r0, .L537
 6437              		.loc 1 5215 0 is_stmt 0 discriminator 1
 6438 0118 93F85120 		ldrb	r2, [r3, #81]	@ zero_extendqisi2
 6439 011c 2E2A     		cmp	r2, #46
 6440 011e 08D1     		bne	.L537
5216:.\ff.c        **** 									st_clust(fs, dir, djn.obj.sclust);
 6441              		.loc 1 5216 0 is_stmt 1
 6442 0120 1846     		mov	r0, r3
 6443              	.LVL965:
 6444 0122 0D9A     		ldr	r2, [sp, #52]
 6445 0124 FFF7FEFF 		bl	st_clust
 6446              	.LVL966:
5217:.\ff.c        **** 									fs->wflag = 1;
 6447              		.loc 1 5217 0
 6448 0128 0122     		movs	r2, #1
 6449 012a 219B     		ldr	r3, [sp, #132]
 6450 012c 1A71     		strb	r2, [r3, #4]
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 216


 6451 012e 00E0     		b	.L537
 6452              	.LVL967:
 6453              	.L542:
5210:.\ff.c        **** 							} else {
 6454              		.loc 1 5210 0
 6455 0130 0224     		movs	r4, #2
 6456              	.LVL968:
 6457              	.L537:
5218:.\ff.c        **** 								}
5219:.\ff.c        **** 							}
5220:.\ff.c        **** 						}
5221:.\ff.c        **** 					}
5222:.\ff.c        **** 				}
5223:.\ff.c        **** 			}
5224:.\ff.c        **** 			if (res == FR_OK) {
 6458              		.loc 1 5224 0
 6459 0132 44B9     		cbnz	r4, .L533
5225:.\ff.c        **** 				res = dir_remove(&djo);		/* Remove old entry */
 6460              		.loc 1 5225 0
 6461 0134 16A8     		add	r0, sp, #88
 6462 0136 FFF7FEFF 		bl	dir_remove
 6463              	.LVL969:
5226:.\ff.c        **** 				if (res == FR_OK) {
 6464              		.loc 1 5226 0
 6465 013a 0446     		mov	r4, r0
 6466 013c 18B9     		cbnz	r0, .L533
5227:.\ff.c        **** 					res = sync_fs(fs);
 6467              		.loc 1 5227 0
 6468 013e 2198     		ldr	r0, [sp, #132]
 6469              	.LVL970:
 6470 0140 FFF7FEFF 		bl	sync_fs
 6471              	.LVL971:
 6472 0144 0446     		mov	r4, r0
 6473              	.LVL972:
 6474              	.L533:
5228:.\ff.c        **** 				}
5229:.\ff.c        **** 			}
5230:.\ff.c        **** /* End of the critical section */
5231:.\ff.c        **** 		}
5232:.\ff.c        **** 		FREE_NAMBUF();
5233:.\ff.c        **** 	}
5234:.\ff.c        **** 
5235:.\ff.c        **** 	LEAVE_FF(fs, res);
5236:.\ff.c        **** }
 6475              		.loc 1 5236 0
 6476 0146 2046     		mov	r0, r4
 6477 0148 23B0     		add	sp, sp, #140
 6478              		.cfi_def_cfa_offset 20
 6479              		@ sp needed
 6480 014a F0BD     		pop	{r4, r5, r6, r7, pc}
 6481              		.cfi_endproc
 6482              	.LFE47:
 6483              		.size	f_rename, .-f_rename
 6484              		.section	.rodata.str1.4,"aMS",%progbits,1
 6485              		.align	2
 6486              	.LC0:
 6487 0000 46415433 		.ascii	"FAT32   \000"
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 217


 6487      32202020 
 6487      00
 6488 0009 000000   		.space	3
 6489              	.LC1:
 6490 000c 2A2B2C3A 		.ascii	"*+,:;<=>[]|\"?\177\000"
 6490      3B3C3D3E 
 6490      5B5D7C22 
 6490      3F7F00
 6491 001b 00       		.bss
 6492              		.align	2
 6493              		.set	.LANCHOR0,. + 0
 6494              		.type	FatFs, %object
 6495              		.size	FatFs, 4
 6496              	FatFs:
 6497 0000 00000000 		.space	4
 6498              		.type	Fsid, %object
 6499              		.size	Fsid, 2
 6500              	Fsid:
 6501 0004 0000     		.space	2
 6502 0006 0000     		.text
 6503              	.Letext0:
 6504              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 6505              		.file 3 ".\\ff.h"
 6506              		.file 4 ".\\diskio.h"
 6507              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 6508              		.section	.debug_info,"",%progbits
 6509              	.Ldebug_info0:
 6510 0000 122D0000 		.4byte	0x2d12
 6511 0004 0400     		.2byte	0x4
 6512 0006 00000000 		.4byte	.Ldebug_abbrev0
 6513 000a 04       		.byte	0x4
 6514 000b 01       		.uleb128 0x1
 6515 000c 5B050000 		.4byte	.LASF173
 6516 0010 01       		.byte	0x1
 6517 0011 C0040000 		.4byte	.LASF174
 6518 0015 AE010000 		.4byte	.LASF175
 6519 0019 00000000 		.4byte	.Ldebug_ranges0+0
 6520 001d 00000000 		.4byte	0
 6521 0021 00000000 		.4byte	.Ldebug_line0
 6522 0025 02       		.uleb128 0x2
 6523 0026 04       		.byte	0x4
 6524 0027 05       		.byte	0x5
 6525 0028 696E7400 		.ascii	"int\000"
 6526 002c 03       		.uleb128 0x3
 6527 002d F5010000 		.4byte	.LASF11
 6528 0031 02       		.byte	0x2
 6529 0032 D4       		.byte	0xd4
 6530 0033 37000000 		.4byte	0x37
 6531 0037 04       		.uleb128 0x4
 6532 0038 04       		.byte	0x4
 6533 0039 07       		.byte	0x7
 6534 003a 6D000000 		.4byte	.LASF0
 6535 003e 04       		.uleb128 0x4
 6536 003f 01       		.byte	0x1
 6537 0040 06       		.byte	0x6
 6538 0041 4A060000 		.4byte	.LASF1
 6539 0045 04       		.uleb128 0x4
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 218


 6540 0046 01       		.byte	0x1
 6541 0047 08       		.byte	0x8
 6542 0048 4D050000 		.4byte	.LASF2
 6543 004c 04       		.uleb128 0x4
 6544 004d 02       		.byte	0x2
 6545 004e 05       		.byte	0x5
 6546 004f 3C040000 		.4byte	.LASF3
 6547 0053 04       		.uleb128 0x4
 6548 0054 02       		.byte	0x2
 6549 0055 07       		.byte	0x7
 6550 0056 60060000 		.4byte	.LASF4
 6551 005a 04       		.uleb128 0x4
 6552 005b 04       		.byte	0x4
 6553 005c 05       		.byte	0x5
 6554 005d 74040000 		.4byte	.LASF5
 6555 0061 04       		.uleb128 0x4
 6556 0062 04       		.byte	0x4
 6557 0063 07       		.byte	0x7
 6558 0064 F3040000 		.4byte	.LASF6
 6559 0068 04       		.uleb128 0x4
 6560 0069 08       		.byte	0x8
 6561 006a 05       		.byte	0x5
 6562 006b F4020000 		.4byte	.LASF7
 6563 006f 04       		.uleb128 0x4
 6564 0070 08       		.byte	0x8
 6565 0071 07       		.byte	0x7
 6566 0072 2C010000 		.4byte	.LASF8
 6567 0076 04       		.uleb128 0x4
 6568 0077 04       		.byte	0x4
 6569 0078 07       		.byte	0x7
 6570 0079 EA040000 		.4byte	.LASF9
 6571 007d 05       		.uleb128 0x5
 6572 007e 04       		.byte	0x4
 6573 007f 06       		.uleb128 0x6
 6574 0080 04       		.byte	0x4
 6575 0081 85000000 		.4byte	0x85
 6576 0085 04       		.uleb128 0x4
 6577 0086 01       		.byte	0x1
 6578 0087 08       		.byte	0x8
 6579 0088 88020000 		.4byte	.LASF10
 6580 008c 06       		.uleb128 0x6
 6581 008d 04       		.byte	0x4
 6582 008e 92000000 		.4byte	0x92
 6583 0092 07       		.uleb128 0x7
 6584 0093 85000000 		.4byte	0x85
 6585 0097 03       		.uleb128 0x3
 6586 0098 D9040000 		.4byte	.LASF12
 6587 009c 03       		.byte	0x3
 6588 009d 3A       		.byte	0x3a
 6589 009e 37000000 		.4byte	0x37
 6590 00a2 03       		.uleb128 0x3
 6591 00a3 46030000 		.4byte	.LASF13
 6592 00a7 03       		.byte	0x3
 6593 00a8 3B       		.byte	0x3b
 6594 00a9 45000000 		.4byte	0x45
 6595 00ad 03       		.uleb128 0x3
 6596 00ae 58030000 		.4byte	.LASF14
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 219


 6597 00b2 03       		.byte	0x3
 6598 00b3 3C       		.byte	0x3c
 6599 00b4 53000000 		.4byte	0x53
 6600 00b8 03       		.uleb128 0x3
 6601 00b9 17010000 		.4byte	.LASF15
 6602 00bd 03       		.byte	0x3
 6603 00be 3D       		.byte	0x3d
 6604 00bf 61000000 		.4byte	0x61
 6605 00c3 03       		.uleb128 0x3
 6606 00c4 00000000 		.4byte	.LASF16
 6607 00c8 03       		.byte	0x3
 6608 00c9 52       		.byte	0x52
 6609 00ca B8000000 		.4byte	0xb8
 6610 00ce 03       		.uleb128 0x3
 6611 00cf 4E040000 		.4byte	.LASF17
 6612 00d3 03       		.byte	0x3
 6613 00d4 53       		.byte	0x53
 6614 00d5 B8000000 		.4byte	0xb8
 6615 00d9 03       		.uleb128 0x3
 6616 00da 1D010000 		.4byte	.LASF18
 6617 00de 03       		.byte	0x3
 6618 00df 69       		.byte	0x69
 6619 00e0 85000000 		.4byte	0x85
 6620 00e4 08       		.uleb128 0x8
 6621 00e5 3002     		.2byte	0x230
 6622 00e7 03       		.byte	0x3
 6623 00e8 84       		.byte	0x84
 6624 00e9 D1010000 		.4byte	0x1d1
 6625 00ed 09       		.uleb128 0x9
 6626 00ee 82010000 		.4byte	.LASF19
 6627 00f2 03       		.byte	0x3
 6628 00f3 85       		.byte	0x85
 6629 00f4 A2000000 		.4byte	0xa2
 6630 00f8 00       		.byte	0
 6631 00f9 09       		.uleb128 0x9
 6632 00fa AF020000 		.4byte	.LASF20
 6633 00fe 03       		.byte	0x3
 6634 00ff 86       		.byte	0x86
 6635 0100 A2000000 		.4byte	0xa2
 6636 0104 01       		.byte	0x1
 6637 0105 09       		.uleb128 0x9
 6638 0106 B0000000 		.4byte	.LASF21
 6639 010a 03       		.byte	0x3
 6640 010b 87       		.byte	0x87
 6641 010c A2000000 		.4byte	0xa2
 6642 0110 02       		.byte	0x2
 6643 0111 09       		.uleb128 0x9
 6644 0112 8B000000 		.4byte	.LASF22
 6645 0116 03       		.byte	0x3
 6646 0117 88       		.byte	0x88
 6647 0118 A2000000 		.4byte	0xa2
 6648 011c 03       		.byte	0x3
 6649 011d 09       		.uleb128 0x9
 6650 011e 35030000 		.4byte	.LASF23
 6651 0122 03       		.byte	0x3
 6652 0123 89       		.byte	0x89
 6653 0124 A2000000 		.4byte	0xa2
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 220


 6654 0128 04       		.byte	0x4
 6655 0129 09       		.uleb128 0x9
 6656 012a F4000000 		.4byte	.LASF24
 6657 012e 03       		.byte	0x3
 6658 012f 8A       		.byte	0x8a
 6659 0130 A2000000 		.4byte	0xa2
 6660 0134 05       		.byte	0x5
 6661 0135 0A       		.uleb128 0xa
 6662 0136 696400   		.ascii	"id\000"
 6663 0139 03       		.byte	0x3
 6664 013a 8B       		.byte	0x8b
 6665 013b AD000000 		.4byte	0xad
 6666 013f 06       		.byte	0x6
 6667 0140 09       		.uleb128 0x9
 6668 0141 C7040000 		.4byte	.LASF25
 6669 0145 03       		.byte	0x3
 6670 0146 8C       		.byte	0x8c
 6671 0147 AD000000 		.4byte	0xad
 6672 014b 08       		.byte	0x8
 6673 014c 09       		.uleb128 0x9
 6674 014d 64030000 		.4byte	.LASF26
 6675 0151 03       		.byte	0x3
 6676 0152 8D       		.byte	0x8d
 6677 0153 AD000000 		.4byte	0xad
 6678 0157 0A       		.byte	0xa
 6679 0158 09       		.uleb128 0x9
 6680 0159 63000000 		.4byte	.LASF27
 6681 015d 03       		.byte	0x3
 6682 015e 98       		.byte	0x98
 6683 015f B8000000 		.4byte	0xb8
 6684 0163 0C       		.byte	0xc
 6685 0164 09       		.uleb128 0x9
 6686 0165 26040000 		.4byte	.LASF28
 6687 0169 03       		.byte	0x3
 6688 016a 99       		.byte	0x99
 6689 016b B8000000 		.4byte	0xb8
 6690 016f 10       		.byte	0x10
 6691 0170 09       		.uleb128 0x9
 6692 0171 8D030000 		.4byte	.LASF29
 6693 0175 03       		.byte	0x3
 6694 0176 A3       		.byte	0xa3
 6695 0177 B8000000 		.4byte	0xb8
 6696 017b 14       		.byte	0x14
 6697 017c 09       		.uleb128 0x9
 6698 017d 02030000 		.4byte	.LASF30
 6699 0181 03       		.byte	0x3
 6700 0182 A4       		.byte	0xa4
 6701 0183 B8000000 		.4byte	0xb8
 6702 0187 18       		.byte	0x18
 6703 0188 09       		.uleb128 0x9
 6704 0189 18030000 		.4byte	.LASF31
 6705 018d 03       		.byte	0x3
 6706 018e A5       		.byte	0xa5
 6707 018f CE000000 		.4byte	0xce
 6708 0193 1C       		.byte	0x1c
 6709 0194 09       		.uleb128 0x9
 6710 0195 8A010000 		.4byte	.LASF32
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 221


 6711 0199 03       		.byte	0x3
 6712 019a A6       		.byte	0xa6
 6713 019b CE000000 		.4byte	0xce
 6714 019f 20       		.byte	0x20
 6715 01a0 09       		.uleb128 0x9
 6716 01a1 AC030000 		.4byte	.LASF33
 6717 01a5 03       		.byte	0x3
 6718 01a6 A7       		.byte	0xa7
 6719 01a7 CE000000 		.4byte	0xce
 6720 01ab 24       		.byte	0x24
 6721 01ac 09       		.uleb128 0x9
 6722 01ad 73060000 		.4byte	.LASF34
 6723 01b1 03       		.byte	0x3
 6724 01b2 A8       		.byte	0xa8
 6725 01b3 CE000000 		.4byte	0xce
 6726 01b7 28       		.byte	0x28
 6727 01b8 09       		.uleb128 0x9
 6728 01b9 A8000000 		.4byte	.LASF35
 6729 01bd 03       		.byte	0x3
 6730 01be AC       		.byte	0xac
 6731 01bf CE000000 		.4byte	0xce
 6732 01c3 2C       		.byte	0x2c
 6733 01c4 0A       		.uleb128 0xa
 6734 01c5 77696E00 		.ascii	"win\000"
 6735 01c9 03       		.byte	0x3
 6736 01ca AD       		.byte	0xad
 6737 01cb D1010000 		.4byte	0x1d1
 6738 01cf 30       		.byte	0x30
 6739 01d0 00       		.byte	0
 6740 01d1 0B       		.uleb128 0xb
 6741 01d2 A2000000 		.4byte	0xa2
 6742 01d6 E2010000 		.4byte	0x1e2
 6743 01da 0C       		.uleb128 0xc
 6744 01db 76000000 		.4byte	0x76
 6745 01df FF01     		.2byte	0x1ff
 6746 01e1 00       		.byte	0
 6747 01e2 03       		.uleb128 0x3
 6748 01e3 5D000000 		.4byte	.LASF36
 6749 01e7 03       		.byte	0x3
 6750 01e8 AE       		.byte	0xae
 6751 01e9 E4000000 		.4byte	0xe4
 6752 01ed 0D       		.uleb128 0xd
 6753 01ee 10       		.byte	0x10
 6754 01ef 03       		.byte	0x3
 6755 01f0 B4       		.byte	0xb4
 6756 01f1 3C020000 		.4byte	0x23c
 6757 01f5 0A       		.uleb128 0xa
 6758 01f6 667300   		.ascii	"fs\000"
 6759 01f9 03       		.byte	0x3
 6760 01fa B5       		.byte	0xb5
 6761 01fb 3C020000 		.4byte	0x23c
 6762 01ff 00       		.byte	0
 6763 0200 0A       		.uleb128 0xa
 6764 0201 696400   		.ascii	"id\000"
 6765 0204 03       		.byte	0x3
 6766 0205 B6       		.byte	0xb6
 6767 0206 AD000000 		.4byte	0xad
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 222


 6768 020a 04       		.byte	0x4
 6769 020b 09       		.uleb128 0x9
 6770 020c 6A010000 		.4byte	.LASF37
 6771 0210 03       		.byte	0x3
 6772 0211 B7       		.byte	0xb7
 6773 0212 A2000000 		.4byte	0xa2
 6774 0216 06       		.byte	0x6
 6775 0217 09       		.uleb128 0x9
 6776 0218 A0010000 		.4byte	.LASF38
 6777 021c 03       		.byte	0x3
 6778 021d B8       		.byte	0xb8
 6779 021e A2000000 		.4byte	0xa2
 6780 0222 07       		.byte	0x7
 6781 0223 09       		.uleb128 0x9
 6782 0224 CE060000 		.4byte	.LASF39
 6783 0228 03       		.byte	0x3
 6784 0229 B9       		.byte	0xb9
 6785 022a B8000000 		.4byte	0xb8
 6786 022e 08       		.byte	0x8
 6787 022f 09       		.uleb128 0x9
 6788 0230 3A050000 		.4byte	.LASF40
 6789 0234 03       		.byte	0x3
 6790 0235 BA       		.byte	0xba
 6791 0236 C3000000 		.4byte	0xc3
 6792 023a 0C       		.byte	0xc
 6793 023b 00       		.byte	0
 6794 023c 06       		.uleb128 0x6
 6795 023d 04       		.byte	0x4
 6796 023e E2010000 		.4byte	0x1e2
 6797 0242 03       		.uleb128 0x3
 6798 0243 6C040000 		.4byte	.LASF41
 6799 0247 03       		.byte	0x3
 6800 0248 C5       		.byte	0xc5
 6801 0249 ED010000 		.4byte	0x1ed
 6802 024d 08       		.uleb128 0x8
 6803 024e 2802     		.2byte	0x228
 6804 0250 03       		.byte	0x3
 6805 0251 CB       		.byte	0xcb
 6806 0252 C3020000 		.4byte	0x2c3
 6807 0256 0A       		.uleb128 0xa
 6808 0257 6F626A00 		.ascii	"obj\000"
 6809 025b 03       		.byte	0x3
 6810 025c CC       		.byte	0xcc
 6811 025d 42020000 		.4byte	0x242
 6812 0261 00       		.byte	0
 6813 0262 09       		.uleb128 0x9
 6814 0263 A4040000 		.4byte	.LASF42
 6815 0267 03       		.byte	0x3
 6816 0268 CD       		.byte	0xcd
 6817 0269 A2000000 		.4byte	0xa2
 6818 026d 10       		.byte	0x10
 6819 026e 0A       		.uleb128 0xa
 6820 026f 65727200 		.ascii	"err\000"
 6821 0273 03       		.byte	0x3
 6822 0274 CE       		.byte	0xce
 6823 0275 A2000000 		.4byte	0xa2
 6824 0279 11       		.byte	0x11
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 223


 6825 027a 09       		.uleb128 0x9
 6826 027b 88030000 		.4byte	.LASF43
 6827 027f 03       		.byte	0x3
 6828 0280 CF       		.byte	0xcf
 6829 0281 C3000000 		.4byte	0xc3
 6830 0285 14       		.byte	0x14
 6831 0286 09       		.uleb128 0x9
 6832 0287 42050000 		.4byte	.LASF44
 6833 028b 03       		.byte	0x3
 6834 028c D0       		.byte	0xd0
 6835 028d B8000000 		.4byte	0xb8
 6836 0291 18       		.byte	0x18
 6837 0292 09       		.uleb128 0x9
 6838 0293 CD020000 		.4byte	.LASF45
 6839 0297 03       		.byte	0x3
 6840 0298 D1       		.byte	0xd1
 6841 0299 CE000000 		.4byte	0xce
 6842 029d 1C       		.byte	0x1c
 6843 029e 09       		.uleb128 0x9
 6844 029f FD000000 		.4byte	.LASF46
 6845 02a3 03       		.byte	0x3
 6846 02a4 D3       		.byte	0xd3
 6847 02a5 CE000000 		.4byte	0xce
 6848 02a9 20       		.byte	0x20
 6849 02aa 09       		.uleb128 0x9
 6850 02ab 48000000 		.4byte	.LASF47
 6851 02af 03       		.byte	0x3
 6852 02b0 D4       		.byte	0xd4
 6853 02b1 C3020000 		.4byte	0x2c3
 6854 02b5 24       		.byte	0x24
 6855 02b6 0A       		.uleb128 0xa
 6856 02b7 62756600 		.ascii	"buf\000"
 6857 02bb 03       		.byte	0x3
 6858 02bc DA       		.byte	0xda
 6859 02bd D1010000 		.4byte	0x1d1
 6860 02c1 28       		.byte	0x28
 6861 02c2 00       		.byte	0
 6862 02c3 06       		.uleb128 0x6
 6863 02c4 04       		.byte	0x4
 6864 02c5 A2000000 		.4byte	0xa2
 6865 02c9 0E       		.uleb128 0xe
 6866 02ca 46494C00 		.ascii	"FIL\000"
 6867 02ce 03       		.byte	0x3
 6868 02cf DC       		.byte	0xdc
 6869 02d0 4D020000 		.4byte	0x24d
 6870 02d4 0D       		.uleb128 0xd
 6871 02d5 2C       		.byte	0x2c
 6872 02d6 03       		.byte	0x3
 6873 02d7 E2       		.byte	0xe2
 6874 02d8 24030000 		.4byte	0x324
 6875 02dc 0A       		.uleb128 0xa
 6876 02dd 6F626A00 		.ascii	"obj\000"
 6877 02e1 03       		.byte	0x3
 6878 02e2 E3       		.byte	0xe3
 6879 02e3 42020000 		.4byte	0x242
 6880 02e7 00       		.byte	0
 6881 02e8 09       		.uleb128 0x9
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 224


 6882 02e9 54040000 		.4byte	.LASF48
 6883 02ed 03       		.byte	0x3
 6884 02ee E4       		.byte	0xe4
 6885 02ef B8000000 		.4byte	0xb8
 6886 02f3 10       		.byte	0x10
 6887 02f4 09       		.uleb128 0x9
 6888 02f5 42050000 		.4byte	.LASF44
 6889 02f9 03       		.byte	0x3
 6890 02fa E5       		.byte	0xe5
 6891 02fb B8000000 		.4byte	0xb8
 6892 02ff 14       		.byte	0x14
 6893 0300 09       		.uleb128 0x9
 6894 0301 CD020000 		.4byte	.LASF45
 6895 0305 03       		.byte	0x3
 6896 0306 E6       		.byte	0xe6
 6897 0307 CE000000 		.4byte	0xce
 6898 030b 18       		.byte	0x18
 6899 030c 0A       		.uleb128 0xa
 6900 030d 64697200 		.ascii	"dir\000"
 6901 0311 03       		.byte	0x3
 6902 0312 E7       		.byte	0xe7
 6903 0313 C3020000 		.4byte	0x2c3
 6904 0317 1C       		.byte	0x1c
 6905 0318 0A       		.uleb128 0xa
 6906 0319 666E00   		.ascii	"fn\000"
 6907 031c 03       		.byte	0x3
 6908 031d E8       		.byte	0xe8
 6909 031e 24030000 		.4byte	0x324
 6910 0322 20       		.byte	0x20
 6911 0323 00       		.byte	0
 6912 0324 0B       		.uleb128 0xb
 6913 0325 A2000000 		.4byte	0xa2
 6914 0329 34030000 		.4byte	0x334
 6915 032d 0F       		.uleb128 0xf
 6916 032e 76000000 		.4byte	0x76
 6917 0332 0B       		.byte	0xb
 6918 0333 00       		.byte	0
 6919 0334 0E       		.uleb128 0xe
 6920 0335 44495200 		.ascii	"DIR\000"
 6921 0339 03       		.byte	0x3
 6922 033a EF       		.byte	0xef
 6923 033b D4020000 		.4byte	0x2d4
 6924 033f 0D       		.uleb128 0xd
 6925 0340 18       		.byte	0x18
 6926 0341 03       		.byte	0x3
 6927 0342 F5       		.byte	0xf5
 6928 0343 84030000 		.4byte	0x384
 6929 0347 09       		.uleb128 0x9
 6930 0348 02030000 		.4byte	.LASF30
 6931 034c 03       		.byte	0x3
 6932 034d F6       		.byte	0xf6
 6933 034e C3000000 		.4byte	0xc3
 6934 0352 00       		.byte	0
 6935 0353 09       		.uleb128 0x9
 6936 0354 E8000000 		.4byte	.LASF49
 6937 0358 03       		.byte	0x3
 6938 0359 F7       		.byte	0xf7
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 225


 6939 035a AD000000 		.4byte	0xad
 6940 035e 04       		.byte	0x4
 6941 035f 09       		.uleb128 0x9
 6942 0360 0B010000 		.4byte	.LASF50
 6943 0364 03       		.byte	0x3
 6944 0365 F8       		.byte	0xf8
 6945 0366 AD000000 		.4byte	0xad
 6946 036a 06       		.byte	0x6
 6947 036b 09       		.uleb128 0x9
 6948 036c D1040000 		.4byte	.LASF51
 6949 0370 03       		.byte	0x3
 6950 0371 F9       		.byte	0xf9
 6951 0372 A2000000 		.4byte	0xa2
 6952 0376 08       		.byte	0x8
 6953 0377 09       		.uleb128 0x9
 6954 0378 B4030000 		.4byte	.LASF52
 6955 037c 03       		.byte	0x3
 6956 037d FE       		.byte	0xfe
 6957 037e 84030000 		.4byte	0x384
 6958 0382 09       		.byte	0x9
 6959 0383 00       		.byte	0
 6960 0384 0B       		.uleb128 0xb
 6961 0385 D9000000 		.4byte	0xd9
 6962 0389 94030000 		.4byte	0x394
 6963 038d 0F       		.uleb128 0xf
 6964 038e 76000000 		.4byte	0x76
 6965 0392 0C       		.byte	0xc
 6966 0393 00       		.byte	0
 6967 0394 10       		.uleb128 0x10
 6968 0395 AD060000 		.4byte	.LASF53
 6969 0399 03       		.byte	0x3
 6970 039a 0001     		.2byte	0x100
 6971 039c 3F030000 		.4byte	0x33f
 6972 03a0 11       		.uleb128 0x11
 6973 03a1 01       		.byte	0x1
 6974 03a2 03       		.byte	0x3
 6975 03a3 1201     		.2byte	0x112
 6976 03a5 22040000 		.4byte	0x422
 6977 03a9 12       		.uleb128 0x12
 6978 03aa 21050000 		.4byte	.LASF54
 6979 03ae 00       		.sleb128 0
 6980 03af 12       		.uleb128 0x12
 6981 03b0 30040000 		.4byte	.LASF55
 6982 03b4 01       		.sleb128 1
 6983 03b5 12       		.uleb128 0x12
 6984 03b6 43010000 		.4byte	.LASF56
 6985 03ba 02       		.sleb128 2
 6986 03bb 12       		.uleb128 0x12
 6987 03bc 50000000 		.4byte	.LASF57
 6988 03c0 03       		.sleb128 3
 6989 03c1 12       		.uleb128 0x12
 6990 03c2 3B030000 		.4byte	.LASF58
 6991 03c6 04       		.sleb128 4
 6992 03c7 12       		.uleb128 0x12
 6993 03c8 04040000 		.4byte	.LASF59
 6994 03cc 05       		.sleb128 5
 6995 03cd 12       		.uleb128 0x12
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 226


 6996 03ce 94040000 		.4byte	.LASF60
 6997 03d2 06       		.sleb128 6
 6998 03d3 12       		.uleb128 0x12
 6999 03d4 CC030000 		.4byte	.LASF61
 7000 03d8 07       		.sleb128 7
 7001 03d9 12       		.uleb128 0x12
 7002 03da EC010000 		.4byte	.LASF62
 7003 03de 08       		.sleb128 8
 7004 03df 12       		.uleb128 0x12
 7005 03e0 0A020000 		.4byte	.LASF63
 7006 03e4 09       		.sleb128 9
 7007 03e5 12       		.uleb128 0x12
 7008 03e6 9A060000 		.4byte	.LASF64
 7009 03ea 0A       		.sleb128 10
 7010 03eb 12       		.uleb128 0x12
 7011 03ec 7A000000 		.4byte	.LASF65
 7012 03f0 0B       		.sleb128 11
 7013 03f1 12       		.uleb128 0x12
 7014 03f2 0F040000 		.4byte	.LASF66
 7015 03f6 0C       		.sleb128 12
 7016 03f7 12       		.uleb128 0x12
 7017 03f8 E3020000 		.4byte	.LASF67
 7018 03fc 0D       		.sleb128 13
 7019 03fd 12       		.uleb128 0x12
 7020 03fe 98000000 		.4byte	.LASF68
 7021 0402 0E       		.sleb128 14
 7022 0403 12       		.uleb128 0x12
 7023 0404 03060000 		.4byte	.LASF69
 7024 0408 0F       		.sleb128 15
 7025 0409 12       		.uleb128 0x12
 7026 040a 2E020000 		.4byte	.LASF70
 7027 040e 10       		.sleb128 16
 7028 040f 12       		.uleb128 0x12
 7029 0410 59040000 		.4byte	.LASF71
 7030 0414 11       		.sleb128 17
 7031 0415 12       		.uleb128 0x12
 7032 0416 BA000000 		.4byte	.LASF72
 7033 041a 12       		.sleb128 18
 7034 041b 12       		.uleb128 0x12
 7035 041c 20030000 		.4byte	.LASF73
 7036 0420 13       		.sleb128 19
 7037 0421 00       		.byte	0
 7038 0422 10       		.uleb128 0x10
 7039 0423 0C050000 		.4byte	.LASF74
 7040 0427 03       		.byte	0x3
 7041 0428 2701     		.2byte	0x127
 7042 042a A0030000 		.4byte	0x3a0
 7043 042e 03       		.uleb128 0x3
 7044 042f 13060000 		.4byte	.LASF75
 7045 0433 04       		.byte	0x4
 7046 0434 0D       		.byte	0xd
 7047 0435 A2000000 		.4byte	0xa2
 7048 0439 13       		.uleb128 0x13
 7049 043a 01       		.byte	0x1
 7050 043b 04       		.byte	0x4
 7051 043c 10       		.byte	0x10
 7052 043d 60040000 		.4byte	0x460
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 227


 7053 0441 12       		.uleb128 0x12
 7054 0442 28060000 		.4byte	.LASF76
 7055 0446 00       		.sleb128 0
 7056 0447 12       		.uleb128 0x12
 7057 0448 B4020000 		.4byte	.LASF77
 7058 044c 01       		.sleb128 1
 7059 044d 12       		.uleb128 0x12
 7060 044e A2030000 		.4byte	.LASF78
 7061 0452 02       		.sleb128 2
 7062 0453 12       		.uleb128 0x12
 7063 0454 3A060000 		.4byte	.LASF79
 7064 0458 03       		.sleb128 3
 7065 0459 12       		.uleb128 0x12
 7066 045a 7D030000 		.4byte	.LASF80
 7067 045e 04       		.sleb128 4
 7068 045f 00       		.byte	0
 7069 0460 03       		.uleb128 0x3
 7070 0461 1E040000 		.4byte	.LASF81
 7071 0465 04       		.byte	0x4
 7072 0466 16       		.byte	0x16
 7073 0467 39040000 		.4byte	0x439
 7074 046b 14       		.uleb128 0x14
 7075 046c 80020000 		.4byte	.LASF82
 7076 0470 01       		.byte	0x1
 7077 0471 6A02     		.2byte	0x26a
 7078 0473 AD000000 		.4byte	0xad
 7079 0477 00000000 		.4byte	.LFB0
 7080 047b 0A000000 		.4byte	.LFE0-.LFB0
 7081 047f 01       		.uleb128 0x1
 7082 0480 9C       		.byte	0x9c
 7083 0481 A5040000 		.4byte	0x4a5
 7084 0485 15       		.uleb128 0x15
 7085 0486 70747200 		.ascii	"ptr\000"
 7086 048a 01       		.byte	0x1
 7087 048b 6A02     		.2byte	0x26a
 7088 048d A5040000 		.4byte	0x4a5
 7089 0491 00000000 		.4byte	.LLST0
 7090 0495 16       		.uleb128 0x16
 7091 0496 727600   		.ascii	"rv\000"
 7092 0499 01       		.byte	0x1
 7093 049a 6C02     		.2byte	0x26c
 7094 049c AD000000 		.4byte	0xad
 7095 04a0 21000000 		.4byte	.LLST1
 7096 04a4 00       		.byte	0
 7097 04a5 06       		.uleb128 0x6
 7098 04a6 04       		.byte	0x4
 7099 04a7 AB040000 		.4byte	0x4ab
 7100 04ab 07       		.uleb128 0x7
 7101 04ac A2000000 		.4byte	0xa2
 7102 04b0 14       		.uleb128 0x14
 7103 04b1 6E020000 		.4byte	.LASF83
 7104 04b5 01       		.byte	0x1
 7105 04b6 7302     		.2byte	0x273
 7106 04b8 B8000000 		.4byte	0xb8
 7107 04bc 00000000 		.4byte	.LFB1
 7108 04c0 16000000 		.4byte	.LFE1-.LFB1
 7109 04c4 01       		.uleb128 0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 228


 7110 04c5 9C       		.byte	0x9c
 7111 04c6 EA040000 		.4byte	0x4ea
 7112 04ca 15       		.uleb128 0x15
 7113 04cb 70747200 		.ascii	"ptr\000"
 7114 04cf 01       		.byte	0x1
 7115 04d0 7302     		.2byte	0x273
 7116 04d2 A5040000 		.4byte	0x4a5
 7117 04d6 63000000 		.4byte	.LLST2
 7118 04da 16       		.uleb128 0x16
 7119 04db 727600   		.ascii	"rv\000"
 7120 04de 01       		.byte	0x1
 7121 04df 7502     		.2byte	0x275
 7122 04e1 B8000000 		.4byte	0xb8
 7123 04e5 84000000 		.4byte	.LLST3
 7124 04e9 00       		.byte	0
 7125 04ea 17       		.uleb128 0x17
 7126 04eb 40000000 		.4byte	.LASF84
 7127 04ef 01       		.byte	0x1
 7128 04f0 9002     		.2byte	0x290
 7129 04f2 00000000 		.4byte	.LFB2
 7130 04f6 08000000 		.4byte	.LFE2-.LFB2
 7131 04fa 01       		.uleb128 0x1
 7132 04fb 9C       		.byte	0x9c
 7133 04fc 21050000 		.4byte	0x521
 7134 0500 15       		.uleb128 0x15
 7135 0501 70747200 		.ascii	"ptr\000"
 7136 0505 01       		.byte	0x1
 7137 0506 9002     		.2byte	0x290
 7138 0508 C3020000 		.4byte	0x2c3
 7139 050c BF000000 		.4byte	.LLST4
 7140 0510 15       		.uleb128 0x15
 7141 0511 76616C00 		.ascii	"val\000"
 7142 0515 01       		.byte	0x1
 7143 0516 9002     		.2byte	0x290
 7144 0518 AD000000 		.4byte	0xad
 7145 051c EC000000 		.4byte	.LLST5
 7146 0520 00       		.byte	0
 7147 0521 17       		.uleb128 0x17
 7148 0522 E9050000 		.4byte	.LASF85
 7149 0526 01       		.byte	0x1
 7150 0527 9602     		.2byte	0x296
 7151 0529 00000000 		.4byte	.LFB3
 7152 052d 14000000 		.4byte	.LFE3-.LFB3
 7153 0531 01       		.uleb128 0x1
 7154 0532 9C       		.byte	0x9c
 7155 0533 58050000 		.4byte	0x558
 7156 0537 15       		.uleb128 0x15
 7157 0538 70747200 		.ascii	"ptr\000"
 7158 053c 01       		.byte	0x1
 7159 053d 9602     		.2byte	0x296
 7160 053f C3020000 		.4byte	0x2c3
 7161 0543 0E010000 		.4byte	.LLST6
 7162 0547 15       		.uleb128 0x15
 7163 0548 76616C00 		.ascii	"val\000"
 7164 054c 01       		.byte	0x1
 7165 054d 9602     		.2byte	0x296
 7166 054f B8000000 		.4byte	0xb8
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 229


 7167 0553 55010000 		.4byte	.LLST7
 7168 0557 00       		.byte	0
 7169 0558 14       		.uleb128 0x14
 7170 0559 8B060000 		.4byte	.LASF86
 7171 055d 01       		.byte	0x1
 7172 055e B402     		.2byte	0x2b4
 7173 0560 25000000 		.4byte	0x25
 7174 0564 00000000 		.4byte	.LFB4
 7175 0568 24000000 		.4byte	.LFE4-.LFB4
 7176 056c 01       		.uleb128 0x1
 7177 056d 9C       		.byte	0x9c
 7178 056e 81050000 		.4byte	0x581
 7179 0572 15       		.uleb128 0x15
 7180 0573 6300     		.ascii	"c\000"
 7181 0575 01       		.byte	0x1
 7182 0576 B402     		.2byte	0x2b4
 7183 0578 A2000000 		.4byte	0xa2
 7184 057c A0010000 		.4byte	.LLST8
 7185 0580 00       		.byte	0
 7186 0581 14       		.uleb128 0x14
 7187 0582 1C000000 		.4byte	.LASF87
 7188 0586 01       		.byte	0x1
 7189 0587 C802     		.2byte	0x2c8
 7190 0589 25000000 		.4byte	0x25
 7191 058d 00000000 		.4byte	.LFB5
 7192 0591 26000000 		.4byte	.LFE5-.LFB5
 7193 0595 01       		.uleb128 0x1
 7194 0596 9C       		.byte	0x9c
 7195 0597 AA050000 		.4byte	0x5aa
 7196 059b 15       		.uleb128 0x15
 7197 059c 6300     		.ascii	"c\000"
 7198 059e 01       		.byte	0x1
 7199 059f C802     		.2byte	0x2c8
 7200 05a1 A2000000 		.4byte	0xa2
 7201 05a5 25020000 		.4byte	.LLST9
 7202 05a9 00       		.byte	0
 7203 05aa 14       		.uleb128 0x14
 7204 05ab C2030000 		.4byte	.LASF88
 7205 05af 01       		.byte	0x1
 7206 05b0 7804     		.2byte	0x478
 7207 05b2 CE000000 		.4byte	0xce
 7208 05b6 00000000 		.4byte	.LFB9
 7209 05ba 18000000 		.4byte	.LFE9-.LFB9
 7210 05be 01       		.uleb128 0x1
 7211 05bf 9C       		.byte	0x9c
 7212 05c0 E4050000 		.4byte	0x5e4
 7213 05c4 15       		.uleb128 0x15
 7214 05c5 667300   		.ascii	"fs\000"
 7215 05c8 01       		.byte	0x1
 7216 05c9 7904     		.2byte	0x479
 7217 05cb 3C020000 		.4byte	0x23c
 7218 05cf AA020000 		.4byte	.LLST10
 7219 05d3 18       		.uleb128 0x18
 7220 05d4 3B000000 		.4byte	.LASF89
 7221 05d8 01       		.byte	0x1
 7222 05d9 7A04     		.2byte	0x47a
 7223 05db B8000000 		.4byte	0xb8
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 230


 7224 05df E4020000 		.4byte	.LLST11
 7225 05e3 00       		.byte	0
 7226 05e4 14       		.uleb128 0x14
 7227 05e5 F2050000 		.4byte	.LASF90
 7228 05e9 01       		.byte	0x1
 7229 05ea 3807     		.2byte	0x738
 7230 05ec B8000000 		.4byte	0xb8
 7231 05f0 00000000 		.4byte	.LFB18
 7232 05f4 24000000 		.4byte	.LFE18-.LFB18
 7233 05f8 01       		.uleb128 0x1
 7234 05f9 9C       		.byte	0x9c
 7235 05fa 51060000 		.4byte	0x651
 7236 05fe 15       		.uleb128 0x15
 7237 05ff 667300   		.ascii	"fs\000"
 7238 0602 01       		.byte	0x1
 7239 0603 3907     		.2byte	0x739
 7240 0605 3C020000 		.4byte	0x23c
 7241 0609 02030000 		.4byte	.LLST12
 7242 060d 15       		.uleb128 0x15
 7243 060e 64697200 		.ascii	"dir\000"
 7244 0612 01       		.byte	0x1
 7245 0613 3A07     		.2byte	0x73a
 7246 0615 A5040000 		.4byte	0x4a5
 7247 0619 20030000 		.4byte	.LLST13
 7248 061d 16       		.uleb128 0x16
 7249 061e 636C00   		.ascii	"cl\000"
 7250 0621 01       		.byte	0x1
 7251 0622 3D07     		.2byte	0x73d
 7252 0624 B8000000 		.4byte	0xb8
 7253 0628 3E030000 		.4byte	.LLST14
 7254 062c 19       		.uleb128 0x19
 7255 062d 0E000000 		.4byte	.LVL45
 7256 0631 6B040000 		.4byte	0x46b
 7257 0635 40060000 		.4byte	0x640
 7258 0639 1A       		.uleb128 0x1a
 7259 063a 01       		.uleb128 0x1
 7260 063b 50       		.byte	0x50
 7261 063c 02       		.uleb128 0x2
 7262 063d 75       		.byte	0x75
 7263 063e 1A       		.sleb128 26
 7264 063f 00       		.byte	0
 7265 0640 1B       		.uleb128 0x1b
 7266 0641 1E000000 		.4byte	.LVL48
 7267 0645 6B040000 		.4byte	0x46b
 7268 0649 1A       		.uleb128 0x1a
 7269 064a 01       		.uleb128 0x1
 7270 064b 50       		.byte	0x50
 7271 064c 02       		.uleb128 0x2
 7272 064d 75       		.byte	0x75
 7273 064e 14       		.sleb128 20
 7274 064f 00       		.byte	0
 7275 0650 00       		.byte	0
 7276 0651 17       		.uleb128 0x17
 7277 0652 A5010000 		.4byte	.LASF91
 7278 0656 01       		.byte	0x1
 7279 0657 4907     		.2byte	0x749
 7280 0659 00000000 		.4byte	.LFB19
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 231


 7281 065d 24000000 		.4byte	.LFE19-.LFB19
 7282 0661 01       		.uleb128 0x1
 7283 0662 9C       		.byte	0x9c
 7284 0663 C8060000 		.4byte	0x6c8
 7285 0667 15       		.uleb128 0x15
 7286 0668 667300   		.ascii	"fs\000"
 7287 066b 01       		.byte	0x1
 7288 066c 4A07     		.2byte	0x74a
 7289 066e 3C020000 		.4byte	0x23c
 7290 0672 67030000 		.4byte	.LLST15
 7291 0676 15       		.uleb128 0x15
 7292 0677 64697200 		.ascii	"dir\000"
 7293 067b 01       		.byte	0x1
 7294 067c 4B07     		.2byte	0x74b
 7295 067e C3020000 		.4byte	0x2c3
 7296 0682 85030000 		.4byte	.LLST16
 7297 0686 15       		.uleb128 0x15
 7298 0687 636C00   		.ascii	"cl\000"
 7299 068a 01       		.byte	0x1
 7300 068b 4C07     		.2byte	0x74c
 7301 068d B8000000 		.4byte	0xb8
 7302 0691 A3030000 		.4byte	.LLST17
 7303 0695 19       		.uleb128 0x19
 7304 0696 12000000 		.4byte	.LVL53
 7305 069a EA040000 		.4byte	0x4ea
 7306 069e AF060000 		.4byte	0x6af
 7307 06a2 1A       		.uleb128 0x1a
 7308 06a3 01       		.uleb128 0x1
 7309 06a4 51       		.byte	0x51
 7310 06a5 02       		.uleb128 0x2
 7311 06a6 74       		.byte	0x74
 7312 06a7 00       		.sleb128 0
 7313 06a8 1A       		.uleb128 0x1a
 7314 06a9 01       		.uleb128 0x1
 7315 06aa 50       		.byte	0x50
 7316 06ab 02       		.uleb128 0x2
 7317 06ac 75       		.byte	0x75
 7318 06ad 1A       		.sleb128 26
 7319 06ae 00       		.byte	0
 7320 06af 1B       		.uleb128 0x1b
 7321 06b0 22000000 		.4byte	.LVL54
 7322 06b4 EA040000 		.4byte	0x4ea
 7323 06b8 1A       		.uleb128 0x1a
 7324 06b9 01       		.uleb128 0x1
 7325 06ba 51       		.byte	0x51
 7326 06bb 04       		.uleb128 0x4
 7327 06bc 74       		.byte	0x74
 7328 06bd 00       		.sleb128 0
 7329 06be 40       		.byte	0x40
 7330 06bf 25       		.byte	0x25
 7331 06c0 1A       		.uleb128 0x1a
 7332 06c1 01       		.uleb128 0x1
 7333 06c2 50       		.byte	0x50
 7334 06c3 02       		.uleb128 0x2
 7335 06c4 75       		.byte	0x75
 7336 06c5 14       		.sleb128 20
 7337 06c6 00       		.byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 232


 7338 06c7 00       		.byte	0
 7339 06c8 17       		.uleb128 0x17
 7340 06c9 51020000 		.4byte	.LASF92
 7341 06cd 01       		.byte	0x1
 7342 06ce 390A     		.2byte	0xa39
 7343 06d0 00000000 		.4byte	.LFB24
 7344 06d4 6E000000 		.4byte	.LFE24-.LFB24
 7345 06d8 01       		.uleb128 0x1
 7346 06d9 9C       		.byte	0x9c
 7347 06da 45070000 		.4byte	0x745
 7348 06de 15       		.uleb128 0x15
 7349 06df 647000   		.ascii	"dp\000"
 7350 06e2 01       		.byte	0x1
 7351 06e3 3A0A     		.2byte	0xa3a
 7352 06e5 45070000 		.4byte	0x745
 7353 06e9 C1030000 		.4byte	.LLST18
 7354 06ed 15       		.uleb128 0x15
 7355 06ee 666E6F00 		.ascii	"fno\000"
 7356 06f2 01       		.byte	0x1
 7357 06f3 3B0A     		.2byte	0xa3b
 7358 06f5 4B070000 		.4byte	0x74b
 7359 06f9 EA030000 		.4byte	.LLST19
 7360 06fd 16       		.uleb128 0x16
 7361 06fe 736900   		.ascii	"si\000"
 7362 0701 01       		.byte	0x1
 7363 0702 3E0A     		.2byte	0xa3e
 7364 0704 97000000 		.4byte	0x97
 7365 0708 13040000 		.4byte	.LLST20
 7366 070c 16       		.uleb128 0x16
 7367 070d 646900   		.ascii	"di\000"
 7368 0710 01       		.byte	0x1
 7369 0711 3E0A     		.2byte	0xa3e
 7370 0713 97000000 		.4byte	0x97
 7371 0717 3C040000 		.4byte	.LLST21
 7372 071b 16       		.uleb128 0x16
 7373 071c 6300     		.ascii	"c\000"
 7374 071e 01       		.byte	0x1
 7375 071f 450A     		.2byte	0xa45
 7376 0721 D9000000 		.4byte	0xd9
 7377 0725 67040000 		.4byte	.LLST22
 7378 0729 1C       		.uleb128 0x1c
 7379 072a 54000000 		.4byte	.LVL67
 7380 072e B0040000 		.4byte	0x4b0
 7381 0732 1C       		.uleb128 0x1c
 7382 0733 5E000000 		.4byte	.LVL68
 7383 0737 6B040000 		.4byte	0x46b
 7384 073b 1C       		.uleb128 0x1c
 7385 073c 68000000 		.4byte	.LVL69
 7386 0740 6B040000 		.4byte	0x46b
 7387 0744 00       		.byte	0
 7388 0745 06       		.uleb128 0x6
 7389 0746 04       		.byte	0x4
 7390 0747 34030000 		.4byte	0x334
 7391 074b 06       		.uleb128 0x6
 7392 074c 04       		.byte	0x4
 7393 074d 94030000 		.4byte	0x394
 7394 0751 14       		.uleb128 0x14
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 233


 7395 0752 1B060000 		.4byte	.LASF93
 7396 0756 01       		.byte	0x1
 7397 0757 420C     		.2byte	0xc42
 7398 0759 25000000 		.4byte	0x25
 7399 075d 00000000 		.4byte	.LFB27
 7400 0761 54000000 		.4byte	.LFE27-.LFB27
 7401 0765 01       		.uleb128 0x1
 7402 0766 9C       		.byte	0x9c
 7403 0767 C7070000 		.4byte	0x7c7
 7404 076b 18       		.uleb128 0x18
 7405 076c 40020000 		.4byte	.LASF94
 7406 0770 01       		.byte	0x1
 7407 0771 430C     		.2byte	0xc43
 7408 0773 C7070000 		.4byte	0x7c7
 7409 0777 7A040000 		.4byte	.LLST23
 7410 077b 16       		.uleb128 0x16
 7411 077c 747000   		.ascii	"tp\000"
 7412 077f 01       		.byte	0x1
 7413 0780 460C     		.2byte	0xc46
 7414 0782 CD070000 		.4byte	0x7cd
 7415 0786 CD040000 		.4byte	.LLST24
 7416 078a 16       		.uleb128 0x16
 7417 078b 747400   		.ascii	"tt\000"
 7418 078e 01       		.byte	0x1
 7419 078f 470C     		.2byte	0xc47
 7420 0791 CD070000 		.4byte	0x7cd
 7421 0795 1A050000 		.4byte	.LLST25
 7422 0799 16       		.uleb128 0x16
 7423 079a 746300   		.ascii	"tc\000"
 7424 079d 01       		.byte	0x1
 7425 079e 480C     		.2byte	0xc48
 7426 07a0 D9000000 		.4byte	0xd9
 7427 07a4 59050000 		.4byte	.LLST26
 7428 07a8 16       		.uleb128 0x16
 7429 07a9 6900     		.ascii	"i\000"
 7430 07ab 01       		.byte	0x1
 7431 07ac 490C     		.2byte	0xc49
 7432 07ae 25000000 		.4byte	0x25
 7433 07b2 8F050000 		.4byte	.LLST27
 7434 07b6 16       		.uleb128 0x16
 7435 07b7 766F6C00 		.ascii	"vol\000"
 7436 07bb 01       		.byte	0x1
 7437 07bc 4A0C     		.2byte	0xc4a
 7438 07be 25000000 		.4byte	0x25
 7439 07c2 C5050000 		.4byte	.LLST28
 7440 07c6 00       		.byte	0
 7441 07c7 06       		.uleb128 0x6
 7442 07c8 04       		.byte	0x4
 7443 07c9 CD070000 		.4byte	0x7cd
 7444 07cd 06       		.uleb128 0x6
 7445 07ce 04       		.byte	0x4
 7446 07cf D3070000 		.4byte	0x7d3
 7447 07d3 07       		.uleb128 0x7
 7448 07d4 D9000000 		.4byte	0xd9
 7449 07d8 14       		.uleb128 0x14
 7450 07d9 D5060000 		.4byte	.LASF95
 7451 07dd 01       		.byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 234


 7452 07de 1D0E     		.2byte	0xe1d
 7453 07e0 22040000 		.4byte	0x422
 7454 07e4 00000000 		.4byte	.LFB31
 7455 07e8 46000000 		.4byte	.LFE31-.LFB31
 7456 07ec 01       		.uleb128 0x1
 7457 07ed 9C       		.byte	0x9c
 7458 07ee 2C080000 		.4byte	0x82c
 7459 07f2 15       		.uleb128 0x15
 7460 07f3 6F626A00 		.ascii	"obj\000"
 7461 07f7 01       		.byte	0x1
 7462 07f8 1E0E     		.2byte	0xe1e
 7463 07fa 2C080000 		.4byte	0x82c
 7464 07fe 0A060000 		.4byte	.LLST29
 7465 0802 15       		.uleb128 0x15
 7466 0803 72667300 		.ascii	"rfs\000"
 7467 0807 01       		.byte	0x1
 7468 0808 1F0E     		.2byte	0xe1f
 7469 080a 32080000 		.4byte	0x832
 7470 080e 80060000 		.4byte	.LLST30
 7471 0812 16       		.uleb128 0x16
 7472 0813 72657300 		.ascii	"res\000"
 7473 0817 01       		.byte	0x1
 7474 0818 220E     		.2byte	0xe22
 7475 081a 22040000 		.4byte	0x422
 7476 081e B4060000 		.4byte	.LLST31
 7477 0822 1C       		.uleb128 0x1c
 7478 0823 1E000000 		.4byte	.LVL97
 7479 0827 EA2B0000 		.4byte	0x2bea
 7480 082b 00       		.byte	0
 7481 082c 06       		.uleb128 0x6
 7482 082d 04       		.byte	0x4
 7483 082e 42020000 		.4byte	0x242
 7484 0832 06       		.uleb128 0x6
 7485 0833 04       		.byte	0x4
 7486 0834 3C020000 		.4byte	0x23c
 7487 0838 14       		.uleb128 0x14
 7488 0839 C2060000 		.4byte	.LASF96
 7489 083d 01       		.byte	0x1
 7490 083e 1F04     		.2byte	0x41f
 7491 0840 22040000 		.4byte	0x422
 7492 0844 00000000 		.4byte	.LFB6
 7493 0848 50000000 		.4byte	.LFE6-.LFB6
 7494 084c 01       		.uleb128 0x1
 7495 084d 9C       		.byte	0x9c
 7496 084e A0080000 		.4byte	0x8a0
 7497 0852 15       		.uleb128 0x15
 7498 0853 667300   		.ascii	"fs\000"
 7499 0856 01       		.byte	0x1
 7500 0857 2004     		.2byte	0x420
 7501 0859 3C020000 		.4byte	0x23c
 7502 085d D3060000 		.4byte	.LLST32
 7503 0861 16       		.uleb128 0x16
 7504 0862 72657300 		.ascii	"res\000"
 7505 0866 01       		.byte	0x1
 7506 0867 2304     		.2byte	0x423
 7507 0869 22040000 		.4byte	0x422
 7508 086d 15070000 		.4byte	.LLST33
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 235


 7509 0871 19       		.uleb128 0x19
 7510 0872 18000000 		.4byte	.LVL109
 7511 0876 FF2B0000 		.4byte	0x2bff
 7512 087a 8A080000 		.4byte	0x88a
 7513 087e 1A       		.uleb128 0x1a
 7514 087f 01       		.uleb128 0x1
 7515 0880 53       		.byte	0x53
 7516 0881 01       		.uleb128 0x1
 7517 0882 31       		.byte	0x31
 7518 0883 1A       		.uleb128 0x1a
 7519 0884 01       		.uleb128 0x1
 7520 0885 51       		.byte	0x51
 7521 0886 02       		.uleb128 0x2
 7522 0887 75       		.byte	0x75
 7523 0888 00       		.sleb128 0
 7524 0889 00       		.byte	0
 7525 088a 1B       		.uleb128 0x1b
 7526 088b 3C000000 		.4byte	.LVL110
 7527 088f FF2B0000 		.4byte	0x2bff
 7528 0893 1A       		.uleb128 0x1a
 7529 0894 01       		.uleb128 0x1
 7530 0895 53       		.byte	0x53
 7531 0896 01       		.uleb128 0x1
 7532 0897 31       		.byte	0x31
 7533 0898 1A       		.uleb128 0x1a
 7534 0899 01       		.uleb128 0x1
 7535 089a 51       		.byte	0x51
 7536 089b 02       		.uleb128 0x2
 7537 089c 75       		.byte	0x75
 7538 089d 00       		.sleb128 0
 7539 089e 00       		.byte	0
 7540 089f 00       		.byte	0
 7541 08a0 14       		.uleb128 0x14
 7542 08a1 7D040000 		.4byte	.LASF97
 7543 08a5 01       		.byte	0x1
 7544 08a6 3504     		.2byte	0x435
 7545 08a8 22040000 		.4byte	0x422
 7546 08ac 00000000 		.4byte	.LFB7
 7547 08b0 34000000 		.4byte	.LFE7-.LFB7
 7548 08b4 01       		.uleb128 0x1
 7549 08b5 9C       		.byte	0x9c
 7550 08b6 19090000 		.4byte	0x919
 7551 08ba 15       		.uleb128 0x15
 7552 08bb 667300   		.ascii	"fs\000"
 7553 08be 01       		.byte	0x1
 7554 08bf 3604     		.2byte	0x436
 7555 08c1 3C020000 		.4byte	0x23c
 7556 08c5 4B070000 		.4byte	.LLST34
 7557 08c9 18       		.uleb128 0x18
 7558 08ca CD020000 		.4byte	.LASF45
 7559 08ce 01       		.byte	0x1
 7560 08cf 3704     		.2byte	0x437
 7561 08d1 CE000000 		.4byte	0xce
 7562 08d5 7F070000 		.4byte	.LLST35
 7563 08d9 16       		.uleb128 0x16
 7564 08da 72657300 		.ascii	"res\000"
 7565 08de 01       		.byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 236


 7566 08df 3A04     		.2byte	0x43a
 7567 08e1 22040000 		.4byte	0x422
 7568 08e5 B3070000 		.4byte	.LLST36
 7569 08e9 19       		.uleb128 0x19
 7570 08ea 10000000 		.4byte	.LVL119
 7571 08ee 38080000 		.4byte	0x838
 7572 08f2 FD080000 		.4byte	0x8fd
 7573 08f6 1A       		.uleb128 0x1a
 7574 08f7 01       		.uleb128 0x1
 7575 08f8 50       		.byte	0x50
 7576 08f9 02       		.uleb128 0x2
 7577 08fa 74       		.byte	0x74
 7578 08fb 00       		.sleb128 0
 7579 08fc 00       		.byte	0
 7580 08fd 1B       		.uleb128 0x1b
 7581 08fe 22000000 		.4byte	.LVL121
 7582 0902 232C0000 		.4byte	0x2c23
 7583 0906 1A       		.uleb128 0x1a
 7584 0907 01       		.uleb128 0x1
 7585 0908 53       		.byte	0x53
 7586 0909 01       		.uleb128 0x1
 7587 090a 31       		.byte	0x31
 7588 090b 1A       		.uleb128 0x1a
 7589 090c 01       		.uleb128 0x1
 7590 090d 52       		.byte	0x52
 7591 090e 02       		.uleb128 0x2
 7592 090f 75       		.byte	0x75
 7593 0910 00       		.sleb128 0
 7594 0911 1A       		.uleb128 0x1a
 7595 0912 01       		.uleb128 0x1
 7596 0913 51       		.byte	0x51
 7597 0914 02       		.uleb128 0x2
 7598 0915 74       		.byte	0x74
 7599 0916 30       		.sleb128 48
 7600 0917 00       		.byte	0
 7601 0918 00       		.byte	0
 7602 0919 14       		.uleb128 0x14
 7603 091a E3010000 		.4byte	.LASF98
 7604 091e 01       		.byte	0x1
 7605 091f DB0C     		.2byte	0xcdb
 7606 0921 97000000 		.4byte	0x97
 7607 0925 00000000 		.4byte	.LFB28
 7608 0929 CC000000 		.4byte	.LFE28-.LFB28
 7609 092d 01       		.uleb128 0x1
 7610 092e 9C       		.byte	0x9c
 7611 092f 4A0A0000 		.4byte	0xa4a
 7612 0933 15       		.uleb128 0x15
 7613 0934 667300   		.ascii	"fs\000"
 7614 0937 01       		.byte	0x1
 7615 0938 DC0C     		.2byte	0xcdc
 7616 093a 3C020000 		.4byte	0x23c
 7617 093e F4070000 		.4byte	.LLST37
 7618 0942 18       		.uleb128 0x18
 7619 0943 CD020000 		.4byte	.LASF45
 7620 0947 01       		.byte	0x1
 7621 0948 DD0C     		.2byte	0xcdd
 7622 094a CE000000 		.4byte	0xce
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 237


 7623 094e 20080000 		.4byte	.LLST38
 7624 0952 16       		.uleb128 0x16
 7625 0953 7700     		.ascii	"w\000"
 7626 0955 01       		.byte	0x1
 7627 0956 E00C     		.2byte	0xce0
 7628 0958 AD000000 		.4byte	0xad
 7629 095c 41080000 		.4byte	.LLST39
 7630 0960 1D       		.uleb128 0x1d
 7631 0961 B1040000 		.4byte	.LASF99
 7632 0965 01       		.byte	0x1
 7633 0966 E00C     		.2byte	0xce0
 7634 0968 AD000000 		.4byte	0xad
 7635 096c 54080000 		.4byte	.LLST40
 7636 0970 16       		.uleb128 0x16
 7637 0971 6200     		.ascii	"b\000"
 7638 0973 01       		.byte	0x1
 7639 0974 E10C     		.2byte	0xce1
 7640 0976 A2000000 		.4byte	0xa2
 7641 097a 72080000 		.4byte	.LLST41
 7642 097e 19       		.uleb128 0x19
 7643 097f 12000000 		.4byte	.LVL126
 7644 0983 A0080000 		.4byte	0x8a0
 7645 0987 99090000 		.4byte	0x999
 7646 098b 1A       		.uleb128 0x1a
 7647 098c 01       		.uleb128 0x1
 7648 098d 51       		.byte	0x51
 7649 098e 03       		.uleb128 0x3
 7650 098f F3       		.byte	0xf3
 7651 0990 01       		.uleb128 0x1
 7652 0991 51       		.byte	0x51
 7653 0992 1A       		.uleb128 0x1a
 7654 0993 01       		.uleb128 0x1
 7655 0994 50       		.byte	0x50
 7656 0995 02       		.uleb128 0x2
 7657 0996 74       		.byte	0x74
 7658 0997 00       		.sleb128 0
 7659 0998 00       		.byte	0
 7660 0999 19       		.uleb128 0x19
 7661 099a 1E000000 		.4byte	.LVL127
 7662 099e 6B040000 		.4byte	0x46b
 7663 09a2 AE090000 		.4byte	0x9ae
 7664 09a6 1A       		.uleb128 0x1a
 7665 09a7 01       		.uleb128 0x1
 7666 09a8 50       		.byte	0x50
 7667 09a9 03       		.uleb128 0x3
 7668 09aa 74       		.byte	0x74
 7669 09ab AE04     		.sleb128 558
 7670 09ad 00       		.byte	0
 7671 09ae 19       		.uleb128 0x19
 7672 09af 44000000 		.4byte	.LVL131
 7673 09b3 472C0000 		.4byte	0x2c47
 7674 09b7 D1090000 		.4byte	0x9d1
 7675 09bb 1A       		.uleb128 0x1a
 7676 09bc 01       		.uleb128 0x1
 7677 09bd 52       		.byte	0x52
 7678 09be 01       		.uleb128 0x1
 7679 09bf 38       		.byte	0x38
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 238


 7680 09c0 1A       		.uleb128 0x1a
 7681 09c1 01       		.uleb128 0x1
 7682 09c2 51       		.byte	0x51
 7683 09c3 05       		.uleb128 0x5
 7684 09c4 03       		.byte	0x3
 7685 09c5 00000000 		.4byte	.LC0
 7686 09c9 1A       		.uleb128 0x1a
 7687 09ca 01       		.uleb128 0x1
 7688 09cb 50       		.byte	0x50
 7689 09cc 03       		.uleb128 0x3
 7690 09cd 74       		.byte	0x74
 7691 09ce 8201     		.sleb128 130
 7692 09d0 00       		.byte	0
 7693 09d1 19       		.uleb128 0x19
 7694 09d2 50000000 		.4byte	.LVL132
 7695 09d6 6B040000 		.4byte	0x46b
 7696 09da E5090000 		.4byte	0x9e5
 7697 09de 1A       		.uleb128 0x1a
 7698 09df 01       		.uleb128 0x1
 7699 09e0 50       		.byte	0x50
 7700 09e1 02       		.uleb128 0x2
 7701 09e2 74       		.byte	0x74
 7702 09e3 3B       		.sleb128 59
 7703 09e4 00       		.byte	0
 7704 09e5 19       		.uleb128 0x19
 7705 09e6 72000000 		.4byte	.LVL135
 7706 09ea 6B040000 		.4byte	0x46b
 7707 09ee F9090000 		.4byte	0x9f9
 7708 09f2 1A       		.uleb128 0x1a
 7709 09f3 01       		.uleb128 0x1
 7710 09f4 50       		.byte	0x50
 7711 09f5 02       		.uleb128 0x2
 7712 09f6 74       		.byte	0x74
 7713 09f7 3E       		.sleb128 62
 7714 09f8 00       		.byte	0
 7715 09f9 19       		.uleb128 0x19
 7716 09fa 86000000 		.4byte	.LVL136
 7717 09fe 6B040000 		.4byte	0x46b
 7718 0a02 0E0A0000 		.4byte	0xa0e
 7719 0a06 1A       		.uleb128 0x1a
 7720 0a07 01       		.uleb128 0x1
 7721 0a08 50       		.byte	0x50
 7722 0a09 03       		.uleb128 0x3
 7723 0a0a 74       		.byte	0x74
 7724 0a0b C100     		.sleb128 65
 7725 0a0d 00       		.byte	0
 7726 0a0e 19       		.uleb128 0x19
 7727 0a0f 90000000 		.4byte	.LVL137
 7728 0a13 6B040000 		.4byte	0x46b
 7729 0a17 230A0000 		.4byte	0xa23
 7730 0a1b 1A       		.uleb128 0x1a
 7731 0a1c 01       		.uleb128 0x1
 7732 0a1d 50       		.byte	0x50
 7733 0a1e 03       		.uleb128 0x3
 7734 0a1f 74       		.byte	0x74
 7735 0a20 C300     		.sleb128 67
 7736 0a22 00       		.byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 239


 7737 0a23 19       		.uleb128 0x19
 7738 0a24 9C000000 		.4byte	.LVL138
 7739 0a28 B0040000 		.4byte	0x4b0
 7740 0a2c 380A0000 		.4byte	0xa38
 7741 0a30 1A       		.uleb128 0x1a
 7742 0a31 01       		.uleb128 0x1
 7743 0a32 50       		.byte	0x50
 7744 0a33 03       		.uleb128 0x3
 7745 0a34 74       		.byte	0x74
 7746 0a35 D000     		.sleb128 80
 7747 0a37 00       		.byte	0
 7748 0a38 1B       		.uleb128 0x1b
 7749 0a39 AA000000 		.4byte	.LVL139
 7750 0a3d 6B040000 		.4byte	0x46b
 7751 0a41 1A       		.uleb128 0x1a
 7752 0a42 01       		.uleb128 0x1
 7753 0a43 50       		.byte	0x50
 7754 0a44 03       		.uleb128 0x3
 7755 0a45 74       		.byte	0x74
 7756 0a46 C600     		.sleb128 70
 7757 0a48 00       		.byte	0
 7758 0a49 00       		.byte	0
 7759 0a4a 14       		.uleb128 0x14
 7760 0a4b 96030000 		.4byte	.LASF100
 7761 0a4f 01       		.byte	0x1
 7762 0a50 030D     		.2byte	0xd03
 7763 0a52 97000000 		.4byte	0x97
 7764 0a56 00000000 		.4byte	.LFB29
 7765 0a5a 68000000 		.4byte	.LFE29-.LFB29
 7766 0a5e 01       		.uleb128 0x1
 7767 0a5f 9C       		.byte	0x9c
 7768 0a60 050B0000 		.4byte	0xb05
 7769 0a64 15       		.uleb128 0x15
 7770 0a65 667300   		.ascii	"fs\000"
 7771 0a68 01       		.byte	0x1
 7772 0a69 040D     		.2byte	0xd04
 7773 0a6b 3C020000 		.4byte	0x23c
 7774 0a6f 9C080000 		.4byte	.LLST42
 7775 0a73 18       		.uleb128 0x18
 7776 0a74 4E010000 		.4byte	.LASF101
 7777 0a78 01       		.byte	0x1
 7778 0a79 050D     		.2byte	0xd05
 7779 0a7b 97000000 		.4byte	0x97
 7780 0a7f BA080000 		.4byte	.LLST43
 7781 0a83 16       		.uleb128 0x16
 7782 0a84 666D7400 		.ascii	"fmt\000"
 7783 0a88 01       		.byte	0x1
 7784 0a89 080D     		.2byte	0xd08
 7785 0a8b 97000000 		.4byte	0x97
 7786 0a8f D8080000 		.4byte	.LLST44
 7787 0a93 16       		.uleb128 0x16
 7788 0a94 6900     		.ascii	"i\000"
 7789 0a96 01       		.byte	0x1
 7790 0a97 080D     		.2byte	0xd08
 7791 0a99 97000000 		.4byte	0x97
 7792 0a9d 01090000 		.4byte	.LLST45
 7793 0aa1 1E       		.uleb128 0x1e
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 240


 7794 0aa2 63010000 		.4byte	.LASF102
 7795 0aa6 01       		.byte	0x1
 7796 0aa7 090D     		.2byte	0xd09
 7797 0aa9 050B0000 		.4byte	0xb05
 7798 0aad 02       		.uleb128 0x2
 7799 0aae 91       		.byte	0x91
 7800 0aaf 60       		.sleb128 -32
 7801 0ab0 19       		.uleb128 0x19
 7802 0ab1 0E000000 		.4byte	.LVL147
 7803 0ab5 19090000 		.4byte	0x919
 7804 0ab9 C90A0000 		.4byte	0xac9
 7805 0abd 1A       		.uleb128 0x1a
 7806 0abe 01       		.uleb128 0x1
 7807 0abf 51       		.byte	0x51
 7808 0ac0 01       		.uleb128 0x1
 7809 0ac1 30       		.byte	0x30
 7810 0ac2 1A       		.uleb128 0x1a
 7811 0ac3 01       		.uleb128 0x1
 7812 0ac4 50       		.byte	0x50
 7813 0ac5 02       		.uleb128 0x2
 7814 0ac6 76       		.byte	0x76
 7815 0ac7 00       		.sleb128 0
 7816 0ac8 00       		.byte	0
 7817 0ac9 19       		.uleb128 0x19
 7818 0aca 26000000 		.4byte	.LVL149
 7819 0ace B0040000 		.4byte	0x4b0
 7820 0ad2 E50A0000 		.4byte	0xae5
 7821 0ad6 1A       		.uleb128 0x1a
 7822 0ad7 01       		.uleb128 0x1
 7823 0ad8 50       		.byte	0x50
 7824 0ad9 0A       		.uleb128 0xa
 7825 0ada 74       		.byte	0x74
 7826 0adb 00       		.sleb128 0
 7827 0adc 34       		.byte	0x34
 7828 0add 24       		.byte	0x24
 7829 0ade 76       		.byte	0x76
 7830 0adf 00       		.sleb128 0
 7831 0ae0 22       		.byte	0x22
 7832 0ae1 23       		.byte	0x23
 7833 0ae2 F603     		.uleb128 0x1f6
 7834 0ae4 00       		.byte	0
 7835 0ae5 1B       		.uleb128 0x1b
 7836 0ae6 54000000 		.4byte	.LVL156
 7837 0aea 19090000 		.4byte	0x919
 7838 0aee 1A       		.uleb128 0x1a
 7839 0aef 01       		.uleb128 0x1
 7840 0af0 51       		.byte	0x51
 7841 0af1 0B       		.uleb128 0xb
 7842 0af2 74       		.byte	0x74
 7843 0af3 00       		.sleb128 0
 7844 0af4 32       		.byte	0x32
 7845 0af5 24       		.byte	0x24
 7846 0af6 91       		.byte	0x91
 7847 0af7 00       		.sleb128 0
 7848 0af8 22       		.byte	0x22
 7849 0af9 08       		.byte	0x8
 7850 0afa 20       		.byte	0x20
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 241


 7851 0afb 1C       		.byte	0x1c
 7852 0afc 06       		.byte	0x6
 7853 0afd 1A       		.uleb128 0x1a
 7854 0afe 01       		.uleb128 0x1
 7855 0aff 50       		.byte	0x50
 7856 0b00 02       		.uleb128 0x2
 7857 0b01 76       		.byte	0x76
 7858 0b02 00       		.sleb128 0
 7859 0b03 00       		.byte	0
 7860 0b04 00       		.byte	0
 7861 0b05 0B       		.uleb128 0xb
 7862 0b06 B8000000 		.4byte	0xb8
 7863 0b0a 150B0000 		.4byte	0xb15
 7864 0b0e 0F       		.uleb128 0xf
 7865 0b0f 76000000 		.4byte	0x76
 7866 0b13 03       		.byte	0x3
 7867 0b14 00       		.byte	0
 7868 0b15 14       		.uleb128 0x14
 7869 0b16 D1010000 		.4byte	.LASF103
 7870 0b1a 01       		.byte	0x1
 7871 0b1b 390D     		.2byte	0xd39
 7872 0b1d 22040000 		.4byte	0x422
 7873 0b21 00000000 		.4byte	.LFB30
 7874 0b25 BC020000 		.4byte	.LFE30-.LFB30
 7875 0b29 01       		.uleb128 0x1
 7876 0b2a 9C       		.byte	0x9c
 7877 0b2b 9D0D0000 		.4byte	0xd9d
 7878 0b2f 18       		.uleb128 0x18
 7879 0b30 40020000 		.4byte	.LASF94
 7880 0b34 01       		.byte	0x1
 7881 0b35 3A0D     		.2byte	0xd3a
 7882 0b37 C7070000 		.4byte	0x7c7
 7883 0b3b 2A090000 		.4byte	.LLST46
 7884 0b3f 15       		.uleb128 0x15
 7885 0b40 72667300 		.ascii	"rfs\000"
 7886 0b44 01       		.byte	0x1
 7887 0b45 3B0D     		.2byte	0xd3b
 7888 0b47 32080000 		.4byte	0x832
 7889 0b4b 4B090000 		.4byte	.LLST47
 7890 0b4f 18       		.uleb128 0x18
 7891 0b50 B5000000 		.4byte	.LASF104
 7892 0b54 01       		.byte	0x1
 7893 0b55 3C0D     		.2byte	0xd3c
 7894 0b57 A2000000 		.4byte	0xa2
 7895 0b5b 90090000 		.4byte	.LLST48
 7896 0b5f 16       		.uleb128 0x16
 7897 0b60 766F6C00 		.ascii	"vol\000"
 7898 0b64 01       		.byte	0x1
 7899 0b65 3F0D     		.2byte	0xd3f
 7900 0b67 25000000 		.4byte	0x25
 7901 0b6b D5090000 		.4byte	.LLST49
 7902 0b6f 16       		.uleb128 0x16
 7903 0b70 667300   		.ascii	"fs\000"
 7904 0b73 01       		.byte	0x1
 7905 0b74 400D     		.2byte	0xd40
 7906 0b76 3C020000 		.4byte	0x23c
 7907 0b7a FE090000 		.4byte	.LLST50
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 242


 7908 0b7e 1D       		.uleb128 0x1d
 7909 0b7f A0010000 		.4byte	.LASF38
 7910 0b83 01       		.byte	0x1
 7911 0b84 410D     		.2byte	0xd41
 7912 0b86 2E040000 		.4byte	0x42e
 7913 0b8a 1C0A0000 		.4byte	.LLST51
 7914 0b8e 1D       		.uleb128 0x1d
 7915 0b8f 27050000 		.4byte	.LASF105
 7916 0b93 01       		.byte	0x1
 7917 0b94 420D     		.2byte	0xd42
 7918 0b96 CE000000 		.4byte	0xce
 7919 0b9a 660A0000 		.4byte	.LLST52
 7920 0b9e 1D       		.uleb128 0x1d
 7921 0b9f A9020000 		.4byte	.LASF106
 7922 0ba3 01       		.byte	0x1
 7923 0ba4 430D     		.2byte	0xd43
 7924 0ba6 B8000000 		.4byte	0xb8
 7925 0baa 840A0000 		.4byte	.LLST53
 7926 0bae 1D       		.uleb128 0x1d
 7927 0baf 84060000 		.4byte	.LASF107
 7928 0bb3 01       		.byte	0x1
 7929 0bb4 430D     		.2byte	0xd43
 7930 0bb6 B8000000 		.4byte	0xb8
 7931 0bba C30A0000 		.4byte	.LLST54
 7932 0bbe 1D       		.uleb128 0x1d
 7933 0bbf 51030000 		.4byte	.LASF108
 7934 0bc3 01       		.byte	0x1
 7935 0bc4 430D     		.2byte	0xd43
 7936 0bc6 B8000000 		.4byte	0xb8
 7937 0bca 200B0000 		.4byte	.LLST55
 7938 0bce 1D       		.uleb128 0x1d
 7939 0bcf 11010000 		.4byte	.LASF109
 7940 0bd3 01       		.byte	0x1
 7941 0bd4 430D     		.2byte	0xd43
 7942 0bd6 B8000000 		.4byte	0xb8
 7943 0bda 750B0000 		.4byte	.LLST56
 7944 0bde 1D       		.uleb128 0x1d
 7945 0bdf 6A030000 		.4byte	.LASF110
 7946 0be3 01       		.byte	0x1
 7947 0be4 430D     		.2byte	0xd43
 7948 0be6 B8000000 		.4byte	0xb8
 7949 0bea E70B0000 		.4byte	.LLST57
 7950 0bee 1D       		.uleb128 0x1d
 7951 0bef 45060000 		.4byte	.LASF111
 7952 0bf3 01       		.byte	0x1
 7953 0bf4 440D     		.2byte	0xd44
 7954 0bf6 AD000000 		.4byte	0xad
 7955 0bfa 210C0000 		.4byte	.LLST58
 7956 0bfe 16       		.uleb128 0x16
 7957 0bff 666D7400 		.ascii	"fmt\000"
 7958 0c03 01       		.byte	0x1
 7959 0c04 450D     		.2byte	0xd45
 7960 0c06 97000000 		.4byte	0x97
 7961 0c0a 760C0000 		.4byte	.LLST59
 7962 0c0e 19       		.uleb128 0x19
 7963 0c0f 10000000 		.4byte	.LVL161
 7964 0c13 51070000 		.4byte	0x751
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 243


 7965 0c17 230C0000 		.4byte	0xc23
 7966 0c1b 1A       		.uleb128 0x1a
 7967 0c1c 01       		.uleb128 0x1
 7968 0c1d 50       		.byte	0x50
 7969 0c1e 03       		.uleb128 0x3
 7970 0c1f F3       		.byte	0xf3
 7971 0c20 01       		.uleb128 0x1
 7972 0c21 50       		.byte	0x50
 7973 0c22 00       		.byte	0
 7974 0c23 1C       		.uleb128 0x1c
 7975 0c24 32000000 		.4byte	.LVL165
 7976 0c28 EA2B0000 		.4byte	0x2bea
 7977 0c2c 1C       		.uleb128 0x1c
 7978 0c2d 56000000 		.4byte	.LVL168
 7979 0c31 662C0000 		.4byte	0x2c66
 7980 0c35 19       		.uleb128 0x19
 7981 0c36 70000000 		.4byte	.LVL170
 7982 0c3a 4A0A0000 		.4byte	0xa4a
 7983 0c3e 4E0C0000 		.4byte	0xc4e
 7984 0c42 1A       		.uleb128 0x1a
 7985 0c43 01       		.uleb128 0x1
 7986 0c44 51       		.byte	0x51
 7987 0c45 01       		.uleb128 0x1
 7988 0c46 30       		.byte	0x30
 7989 0c47 1A       		.uleb128 0x1a
 7990 0c48 01       		.uleb128 0x1
 7991 0c49 50       		.byte	0x50
 7992 0c4a 02       		.uleb128 0x2
 7993 0c4b 74       		.byte	0x74
 7994 0c4c 00       		.sleb128 0
 7995 0c4d 00       		.byte	0
 7996 0c4e 19       		.uleb128 0x19
 7997 0c4f 86000000 		.4byte	.LVL173
 7998 0c53 6B040000 		.4byte	0x46b
 7999 0c57 620C0000 		.4byte	0xc62
 8000 0c5b 1A       		.uleb128 0x1a
 8001 0c5c 01       		.uleb128 0x1
 8002 0c5d 50       		.byte	0x50
 8003 0c5e 02       		.uleb128 0x2
 8004 0c5f 74       		.byte	0x74
 8005 0c60 3B       		.sleb128 59
 8006 0c61 00       		.byte	0
 8007 0c62 19       		.uleb128 0x19
 8008 0c63 96000000 		.4byte	.LVL174
 8009 0c67 6B040000 		.4byte	0x46b
 8010 0c6b 770C0000 		.4byte	0xc77
 8011 0c6f 1A       		.uleb128 0x1a
 8012 0c70 01       		.uleb128 0x1
 8013 0c71 50       		.byte	0x50
 8014 0c72 03       		.uleb128 0x3
 8015 0c73 74       		.byte	0x74
 8016 0c74 C600     		.sleb128 70
 8017 0c76 00       		.byte	0
 8018 0c77 19       		.uleb128 0x19
 8019 0c78 A2000000 		.4byte	.LVL177
 8020 0c7c B0040000 		.4byte	0x4b0
 8021 0c80 8C0C0000 		.4byte	0xc8c
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 244


 8022 0c84 1A       		.uleb128 0x1a
 8023 0c85 01       		.uleb128 0x1
 8024 0c86 50       		.byte	0x50
 8025 0c87 03       		.uleb128 0x3
 8026 0c88 74       		.byte	0x74
 8027 0c89 D400     		.sleb128 84
 8028 0c8b 00       		.byte	0
 8029 0c8c 19       		.uleb128 0x19
 8030 0c8d DC000000 		.4byte	.LVL181
 8031 0c91 6B040000 		.4byte	0x46b
 8032 0c95 A10C0000 		.4byte	0xca1
 8033 0c99 1A       		.uleb128 0x1a
 8034 0c9a 01       		.uleb128 0x1
 8035 0c9b 50       		.byte	0x50
 8036 0c9c 03       		.uleb128 0x3
 8037 0c9d 74       		.byte	0x74
 8038 0c9e C100     		.sleb128 65
 8039 0ca0 00       		.byte	0
 8040 0ca1 19       		.uleb128 0x19
 8041 0ca2 F0000000 		.4byte	.LVL182
 8042 0ca6 6B040000 		.4byte	0x46b
 8043 0caa B60C0000 		.4byte	0xcb6
 8044 0cae 1A       		.uleb128 0x1a
 8045 0caf 01       		.uleb128 0x1
 8046 0cb0 50       		.byte	0x50
 8047 0cb1 03       		.uleb128 0x3
 8048 0cb2 74       		.byte	0x74
 8049 0cb3 C300     		.sleb128 67
 8050 0cb5 00       		.byte	0
 8051 0cb6 19       		.uleb128 0x19
 8052 0cb7 FC000000 		.4byte	.LVL185
 8053 0cbb B0040000 		.4byte	0x4b0
 8054 0cbf CB0C0000 		.4byte	0xccb
 8055 0cc3 1A       		.uleb128 0x1a
 8056 0cc4 01       		.uleb128 0x1
 8057 0cc5 50       		.byte	0x50
 8058 0cc6 03       		.uleb128 0x3
 8059 0cc7 74       		.byte	0x74
 8060 0cc8 D000     		.sleb128 80
 8061 0cca 00       		.byte	0
 8062 0ccb 19       		.uleb128 0x19
 8063 0ccc 06010000 		.4byte	.LVL188
 8064 0cd0 6B040000 		.4byte	0x46b
 8065 0cd4 DF0C0000 		.4byte	0xcdf
 8066 0cd8 1A       		.uleb128 0x1a
 8067 0cd9 01       		.uleb128 0x1
 8068 0cda 50       		.byte	0x50
 8069 0cdb 02       		.uleb128 0x2
 8070 0cdc 74       		.byte	0x74
 8071 0cdd 3E       		.sleb128 62
 8072 0cde 00       		.byte	0
 8073 0cdf 19       		.uleb128 0x19
 8074 0ce0 68010000 		.4byte	.LVL199
 8075 0ce4 6B040000 		.4byte	0x46b
 8076 0ce8 F40C0000 		.4byte	0xcf4
 8077 0cec 1A       		.uleb128 0x1a
 8078 0ced 01       		.uleb128 0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 245


 8079 0cee 50       		.byte	0x50
 8080 0cef 03       		.uleb128 0x3
 8081 0cf0 74       		.byte	0x74
 8082 0cf1 DA00     		.sleb128 90
 8083 0cf3 00       		.byte	0
 8084 0cf4 19       		.uleb128 0x19
 8085 0cf5 7E010000 		.4byte	.LVL200
 8086 0cf9 B0040000 		.4byte	0x4b0
 8087 0cfd 090D0000 		.4byte	0xd09
 8088 0d01 1A       		.uleb128 0x1a
 8089 0d02 01       		.uleb128 0x1
 8090 0d03 50       		.byte	0x50
 8091 0d04 03       		.uleb128 0x3
 8092 0d05 74       		.byte	0x74
 8093 0d06 DC00     		.sleb128 92
 8094 0d08 00       		.byte	0
 8095 0d09 19       		.uleb128 0x19
 8096 0d0a C6010000 		.4byte	.LVL208
 8097 0d0e 6B040000 		.4byte	0x46b
 8098 0d12 1E0D0000 		.4byte	0xd1e
 8099 0d16 1A       		.uleb128 0x1a
 8100 0d17 01       		.uleb128 0x1
 8101 0d18 50       		.byte	0x50
 8102 0d19 03       		.uleb128 0x3
 8103 0d1a 74       		.byte	0x74
 8104 0d1b E000     		.sleb128 96
 8105 0d1d 00       		.byte	0
 8106 0d1e 19       		.uleb128 0x19
 8107 0d1f D2010000 		.4byte	.LVL209
 8108 0d23 A0080000 		.4byte	0x8a0
 8109 0d27 380D0000 		.4byte	0xd38
 8110 0d2b 1A       		.uleb128 0x1a
 8111 0d2c 01       		.uleb128 0x1
 8112 0d2d 51       		.byte	0x51
 8113 0d2e 02       		.uleb128 0x2
 8114 0d2f 76       		.byte	0x76
 8115 0d30 01       		.sleb128 1
 8116 0d31 1A       		.uleb128 0x1a
 8117 0d32 01       		.uleb128 0x1
 8118 0d33 50       		.byte	0x50
 8119 0d34 02       		.uleb128 0x2
 8120 0d35 74       		.byte	0x74
 8121 0d36 00       		.sleb128 0
 8122 0d37 00       		.byte	0
 8123 0d38 19       		.uleb128 0x19
 8124 0d39 E0010000 		.4byte	.LVL210
 8125 0d3d 6B040000 		.4byte	0x46b
 8126 0d41 4D0D0000 		.4byte	0xd4d
 8127 0d45 1A       		.uleb128 0x1a
 8128 0d46 01       		.uleb128 0x1
 8129 0d47 50       		.byte	0x50
 8130 0d48 03       		.uleb128 0x3
 8131 0d49 74       		.byte	0x74
 8132 0d4a AE04     		.sleb128 558
 8133 0d4c 00       		.byte	0
 8134 0d4d 19       		.uleb128 0x19
 8135 0d4e F0010000 		.4byte	.LVL211
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 246


 8136 0d52 B0040000 		.4byte	0x4b0
 8137 0d56 610D0000 		.4byte	0xd61
 8138 0d5a 1A       		.uleb128 0x1a
 8139 0d5b 01       		.uleb128 0x1
 8140 0d5c 50       		.byte	0x50
 8141 0d5d 02       		.uleb128 0x2
 8142 0d5e 74       		.byte	0x74
 8143 0d5f 30       		.sleb128 48
 8144 0d60 00       		.byte	0
 8145 0d61 19       		.uleb128 0x19
 8146 0d62 FE010000 		.4byte	.LVL212
 8147 0d66 B0040000 		.4byte	0x4b0
 8148 0d6a 760D0000 		.4byte	0xd76
 8149 0d6e 1A       		.uleb128 0x1a
 8150 0d6f 01       		.uleb128 0x1
 8151 0d70 50       		.byte	0x50
 8152 0d71 03       		.uleb128 0x3
 8153 0d72 74       		.byte	0x74
 8154 0d73 9404     		.sleb128 532
 8155 0d75 00       		.byte	0
 8156 0d76 19       		.uleb128 0x19
 8157 0d77 0C020000 		.4byte	.LVL213
 8158 0d7b B0040000 		.4byte	0x4b0
 8159 0d7f 8B0D0000 		.4byte	0xd8b
 8160 0d83 1A       		.uleb128 0x1a
 8161 0d84 01       		.uleb128 0x1
 8162 0d85 50       		.byte	0x50
 8163 0d86 03       		.uleb128 0x3
 8164 0d87 74       		.byte	0x74
 8165 0d88 9804     		.sleb128 536
 8166 0d8a 00       		.byte	0
 8167 0d8b 1B       		.uleb128 0x1b
 8168 0d8c 16020000 		.4byte	.LVL214
 8169 0d90 B0040000 		.4byte	0x4b0
 8170 0d94 1A       		.uleb128 0x1a
 8171 0d95 01       		.uleb128 0x1
 8172 0d96 50       		.byte	0x50
 8173 0d97 03       		.uleb128 0x3
 8174 0d98 74       		.byte	0x74
 8175 0d99 9C04     		.sleb128 540
 8176 0d9b 00       		.byte	0
 8177 0d9c 00       		.byte	0
 8178 0d9d 14       		.uleb128 0x14
 8179 0d9e 5E020000 		.4byte	.LASF112
 8180 0da2 01       		.byte	0x1
 8181 0da3 D704     		.2byte	0x4d7
 8182 0da5 22040000 		.4byte	0x422
 8183 0da9 00000000 		.4byte	.LFB11
 8184 0dad 0A010000 		.4byte	.LFE11-.LFB11
 8185 0db1 01       		.uleb128 0x1
 8186 0db2 9C       		.byte	0x9c
 8187 0db3 AD0E0000 		.4byte	0xead
 8188 0db7 15       		.uleb128 0x15
 8189 0db8 667300   		.ascii	"fs\000"
 8190 0dbb 01       		.byte	0x1
 8191 0dbc D804     		.2byte	0x4d8
 8192 0dbe 3C020000 		.4byte	0x23c
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 247


 8193 0dc2 C10C0000 		.4byte	.LLST60
 8194 0dc6 18       		.uleb128 0x18
 8195 0dc7 3B000000 		.4byte	.LASF89
 8196 0dcb 01       		.byte	0x1
 8197 0dcc D904     		.2byte	0x4d9
 8198 0dce B8000000 		.4byte	0xb8
 8199 0dd2 240D0000 		.4byte	.LLST61
 8200 0dd6 15       		.uleb128 0x15
 8201 0dd7 76616C00 		.ascii	"val\000"
 8202 0ddb 01       		.byte	0x1
 8203 0ddc DA04     		.2byte	0x4da
 8204 0dde B8000000 		.4byte	0xb8
 8205 0de2 A30D0000 		.4byte	.LLST62
 8206 0de6 16       		.uleb128 0x16
 8207 0de7 626300   		.ascii	"bc\000"
 8208 0dea 01       		.byte	0x1
 8209 0deb DD04     		.2byte	0x4dd
 8210 0ded 97000000 		.4byte	0x97
 8211 0df1 480E0000 		.4byte	.LLST63
 8212 0df5 16       		.uleb128 0x16
 8213 0df6 7000     		.ascii	"p\000"
 8214 0df8 01       		.byte	0x1
 8215 0df9 DE04     		.2byte	0x4de
 8216 0dfb C3020000 		.4byte	0x2c3
 8217 0dff 870E0000 		.4byte	.LLST64
 8218 0e03 16       		.uleb128 0x16
 8219 0e04 72657300 		.ascii	"res\000"
 8220 0e08 01       		.byte	0x1
 8221 0e09 DF04     		.2byte	0x4df
 8222 0e0b 22040000 		.4byte	0x422
 8223 0e0f EC0E0000 		.4byte	.LLST65
 8224 0e13 19       		.uleb128 0x19
 8225 0e14 30000000 		.4byte	.LVL256
 8226 0e18 A0080000 		.4byte	0x8a0
 8227 0e1c 270E0000 		.4byte	0xe27
 8228 0e20 1A       		.uleb128 0x1a
 8229 0e21 01       		.uleb128 0x1
 8230 0e22 50       		.byte	0x50
 8231 0e23 02       		.uleb128 0x2
 8232 0e24 75       		.byte	0x75
 8233 0e25 00       		.sleb128 0
 8234 0e26 00       		.byte	0
 8235 0e27 19       		.uleb128 0x19
 8236 0e28 72000000 		.4byte	.LVL262
 8237 0e2c A0080000 		.4byte	0x8a0
 8238 0e30 3B0E0000 		.4byte	0xe3b
 8239 0e34 1A       		.uleb128 0x1a
 8240 0e35 01       		.uleb128 0x1
 8241 0e36 50       		.byte	0x50
 8242 0e37 02       		.uleb128 0x2
 8243 0e38 75       		.byte	0x75
 8244 0e39 00       		.sleb128 0
 8245 0e3a 00       		.byte	0
 8246 0e3b 19       		.uleb128 0x19
 8247 0e3c AC000000 		.4byte	.LVL270
 8248 0e40 A0080000 		.4byte	0x8a0
 8249 0e44 4F0E0000 		.4byte	0xe4f
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 248


 8250 0e48 1A       		.uleb128 0x1a
 8251 0e49 01       		.uleb128 0x1
 8252 0e4a 50       		.byte	0x50
 8253 0e4b 02       		.uleb128 0x2
 8254 0e4c 75       		.byte	0x75
 8255 0e4d 00       		.sleb128 0
 8256 0e4e 00       		.byte	0
 8257 0e4f 19       		.uleb128 0x19
 8258 0e50 C0000000 		.4byte	.LVL272
 8259 0e54 EA040000 		.4byte	0x4ea
 8260 0e58 740E0000 		.4byte	0xe74
 8261 0e5c 1A       		.uleb128 0x1a
 8262 0e5d 01       		.uleb128 0x1
 8263 0e5e 51       		.byte	0x51
 8264 0e5f 02       		.uleb128 0x2
 8265 0e60 77       		.byte	0x77
 8266 0e61 00       		.sleb128 0
 8267 0e62 1A       		.uleb128 0x1a
 8268 0e63 01       		.uleb128 0x1
 8269 0e64 50       		.byte	0x50
 8270 0e65 0D       		.uleb128 0xd
 8271 0e66 74       		.byte	0x74
 8272 0e67 00       		.sleb128 0
 8273 0e68 31       		.byte	0x31
 8274 0e69 24       		.byte	0x24
 8275 0e6a 0A       		.byte	0xa
 8276 0e6b FE01     		.2byte	0x1fe
 8277 0e6d 1A       		.byte	0x1a
 8278 0e6e 75       		.byte	0x75
 8279 0e6f 00       		.sleb128 0
 8280 0e70 22       		.byte	0x22
 8281 0e71 23       		.byte	0x23
 8282 0e72 30       		.uleb128 0x30
 8283 0e73 00       		.byte	0
 8284 0e74 19       		.uleb128 0x19
 8285 0e75 D0000000 		.4byte	.LVL275
 8286 0e79 A0080000 		.4byte	0x8a0
 8287 0e7d 880E0000 		.4byte	0xe88
 8288 0e81 1A       		.uleb128 0x1a
 8289 0e82 01       		.uleb128 0x1
 8290 0e83 50       		.byte	0x50
 8291 0e84 02       		.uleb128 0x2
 8292 0e85 75       		.byte	0x75
 8293 0e86 00       		.sleb128 0
 8294 0e87 00       		.byte	0
 8295 0e88 19       		.uleb128 0x19
 8296 0e89 E8000000 		.4byte	.LVL279
 8297 0e8d B0040000 		.4byte	0x4b0
 8298 0e91 9C0E0000 		.4byte	0xe9c
 8299 0e95 1A       		.uleb128 0x1a
 8300 0e96 01       		.uleb128 0x1
 8301 0e97 50       		.byte	0x50
 8302 0e98 02       		.uleb128 0x2
 8303 0e99 74       		.byte	0x74
 8304 0e9a 00       		.sleb128 0
 8305 0e9b 00       		.byte	0
 8306 0e9c 1B       		.uleb128 0x1b
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 249


 8307 0e9d F4000000 		.4byte	.LVL282
 8308 0ea1 21050000 		.4byte	0x521
 8309 0ea5 1A       		.uleb128 0x1a
 8310 0ea6 01       		.uleb128 0x1
 8311 0ea7 50       		.byte	0x50
 8312 0ea8 02       		.uleb128 0x2
 8313 0ea9 74       		.byte	0x74
 8314 0eaa 00       		.sleb128 0
 8315 0eab 00       		.byte	0
 8316 0eac 00       		.byte	0
 8317 0ead 14       		.uleb128 0x14
 8318 0eae 66020000 		.4byte	.LASF113
 8319 0eb2 01       		.byte	0x1
 8320 0eb3 8904     		.2byte	0x489
 8321 0eb5 B8000000 		.4byte	0xb8
 8322 0eb9 00000000 		.4byte	.LFB10
 8323 0ebd D0000000 		.4byte	.LFE10-.LFB10
 8324 0ec1 01       		.uleb128 0x1
 8325 0ec2 9C       		.byte	0x9c
 8326 0ec3 AF0F0000 		.4byte	0xfaf
 8327 0ec7 15       		.uleb128 0x15
 8328 0ec8 6F626A00 		.ascii	"obj\000"
 8329 0ecc 01       		.byte	0x1
 8330 0ecd 8A04     		.2byte	0x48a
 8331 0ecf 2C080000 		.4byte	0x82c
 8332 0ed3 5B0F0000 		.4byte	.LLST66
 8333 0ed7 18       		.uleb128 0x18
 8334 0ed8 3B000000 		.4byte	.LASF89
 8335 0edc 01       		.byte	0x1
 8336 0edd 8B04     		.2byte	0x48b
 8337 0edf B8000000 		.4byte	0xb8
 8338 0ee3 F90F0000 		.4byte	.LLST67
 8339 0ee7 16       		.uleb128 0x16
 8340 0ee8 776300   		.ascii	"wc\000"
 8341 0eeb 01       		.byte	0x1
 8342 0eec 8E04     		.2byte	0x48e
 8343 0eee 97000000 		.4byte	0x97
 8344 0ef2 59100000 		.4byte	.LLST68
 8345 0ef6 16       		.uleb128 0x16
 8346 0ef7 626300   		.ascii	"bc\000"
 8347 0efa 01       		.byte	0x1
 8348 0efb 8E04     		.2byte	0x48e
 8349 0efd 97000000 		.4byte	0x97
 8350 0f01 BB100000 		.4byte	.LLST69
 8351 0f05 16       		.uleb128 0x16
 8352 0f06 76616C00 		.ascii	"val\000"
 8353 0f0a 01       		.byte	0x1
 8354 0f0b 8F04     		.2byte	0x48f
 8355 0f0d B8000000 		.4byte	0xb8
 8356 0f11 0E110000 		.4byte	.LLST70
 8357 0f15 16       		.uleb128 0x16
 8358 0f16 667300   		.ascii	"fs\000"
 8359 0f19 01       		.byte	0x1
 8360 0f1a 9004     		.2byte	0x490
 8361 0f1c 3C020000 		.4byte	0x23c
 8362 0f20 76110000 		.4byte	.LLST71
 8363 0f24 19       		.uleb128 0x19
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 250


 8364 0f25 2E000000 		.4byte	.LVL292
 8365 0f29 A0080000 		.4byte	0x8a0
 8366 0f2d 380F0000 		.4byte	0xf38
 8367 0f31 1A       		.uleb128 0x1a
 8368 0f32 01       		.uleb128 0x1
 8369 0f33 50       		.byte	0x50
 8370 0f34 02       		.uleb128 0x2
 8371 0f35 76       		.byte	0x76
 8372 0f36 00       		.sleb128 0
 8373 0f37 00       		.byte	0
 8374 0f38 19       		.uleb128 0x19
 8375 0f39 4A000000 		.4byte	.LVL295
 8376 0f3d A0080000 		.4byte	0x8a0
 8377 0f41 4C0F0000 		.4byte	0xf4c
 8378 0f45 1A       		.uleb128 0x1a
 8379 0f46 01       		.uleb128 0x1
 8380 0f47 50       		.byte	0x50
 8381 0f48 02       		.uleb128 0x2
 8382 0f49 76       		.byte	0x76
 8383 0f4a 00       		.sleb128 0
 8384 0f4b 00       		.byte	0
 8385 0f4c 19       		.uleb128 0x19
 8386 0f4d 78000000 		.4byte	.LVL305
 8387 0f51 A0080000 		.4byte	0x8a0
 8388 0f55 600F0000 		.4byte	0xf60
 8389 0f59 1A       		.uleb128 0x1a
 8390 0f5a 01       		.uleb128 0x1
 8391 0f5b 50       		.byte	0x50
 8392 0f5c 02       		.uleb128 0x2
 8393 0f5d 76       		.byte	0x76
 8394 0f5e 00       		.sleb128 0
 8395 0f5f 00       		.byte	0
 8396 0f60 19       		.uleb128 0x19
 8397 0f61 88000000 		.4byte	.LVL306
 8398 0f65 6B040000 		.4byte	0x46b
 8399 0f69 7F0F0000 		.4byte	0xf7f
 8400 0f6d 1A       		.uleb128 0x1a
 8401 0f6e 01       		.uleb128 0x1
 8402 0f6f 50       		.byte	0x50
 8403 0f70 0D       		.uleb128 0xd
 8404 0f71 74       		.byte	0x74
 8405 0f72 00       		.sleb128 0
 8406 0f73 31       		.byte	0x31
 8407 0f74 24       		.byte	0x24
 8408 0f75 0A       		.byte	0xa
 8409 0f76 FE01     		.2byte	0x1fe
 8410 0f78 1A       		.byte	0x1a
 8411 0f79 76       		.byte	0x76
 8412 0f7a 00       		.sleb128 0
 8413 0f7b 22       		.byte	0x22
 8414 0f7c 23       		.byte	0x23
 8415 0f7d 30       		.uleb128 0x30
 8416 0f7e 00       		.byte	0
 8417 0f7f 19       		.uleb128 0x19
 8418 0f80 96000000 		.4byte	.LVL310
 8419 0f84 A0080000 		.4byte	0x8a0
 8420 0f88 930F0000 		.4byte	0xf93
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 251


 8421 0f8c 1A       		.uleb128 0x1a
 8422 0f8d 01       		.uleb128 0x1
 8423 0f8e 50       		.byte	0x50
 8424 0f8f 02       		.uleb128 0x2
 8425 0f90 76       		.byte	0x76
 8426 0f91 00       		.sleb128 0
 8427 0f92 00       		.byte	0
 8428 0f93 1B       		.uleb128 0x1b
 8429 0f94 A6000000 		.4byte	.LVL311
 8430 0f98 B0040000 		.4byte	0x4b0
 8431 0f9c 1A       		.uleb128 0x1a
 8432 0f9d 01       		.uleb128 0x1
 8433 0f9e 50       		.byte	0x50
 8434 0f9f 0D       		.uleb128 0xd
 8435 0fa0 74       		.byte	0x74
 8436 0fa1 00       		.sleb128 0
 8437 0fa2 32       		.byte	0x32
 8438 0fa3 24       		.byte	0x24
 8439 0fa4 0A       		.byte	0xa
 8440 0fa5 FC01     		.2byte	0x1fc
 8441 0fa7 1A       		.byte	0x1a
 8442 0fa8 76       		.byte	0x76
 8443 0fa9 00       		.sleb128 0
 8444 0faa 22       		.byte	0x22
 8445 0fab 23       		.byte	0x23
 8446 0fac 30       		.uleb128 0x30
 8447 0fad 00       		.byte	0
 8448 0fae 00       		.byte	0
 8449 0faf 14       		.uleb128 0x14
 8450 0fb0 FB050000 		.4byte	.LASF114
 8451 0fb4 01       		.byte	0x1
 8452 0fb5 A106     		.2byte	0x6a1
 8453 0fb7 22040000 		.4byte	0x422
 8454 0fbb 00000000 		.4byte	.LFB15
 8455 0fbf B0000000 		.4byte	.LFE15-.LFB15
 8456 0fc3 01       		.uleb128 0x1
 8457 0fc4 9C       		.byte	0x9c
 8458 0fc5 46100000 		.4byte	0x1046
 8459 0fc9 15       		.uleb128 0x15
 8460 0fca 647000   		.ascii	"dp\000"
 8461 0fcd 01       		.byte	0x1
 8462 0fce A206     		.2byte	0x6a2
 8463 0fd0 45070000 		.4byte	0x745
 8464 0fd4 94110000 		.4byte	.LLST72
 8465 0fd8 15       		.uleb128 0x15
 8466 0fd9 6F667300 		.ascii	"ofs\000"
 8467 0fdd 01       		.byte	0x1
 8468 0fde A306     		.2byte	0x6a3
 8469 0fe0 B8000000 		.4byte	0xb8
 8470 0fe4 F4110000 		.4byte	.LLST73
 8471 0fe8 16       		.uleb128 0x16
 8472 0fe9 63737A00 		.ascii	"csz\000"
 8473 0fed 01       		.byte	0x1
 8474 0fee A606     		.2byte	0x6a6
 8475 0ff0 B8000000 		.4byte	0xb8
 8476 0ff4 28120000 		.4byte	.LLST74
 8477 0ff8 1D       		.uleb128 0x1d
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 252


 8478 0ff9 3B000000 		.4byte	.LASF89
 8479 0ffd 01       		.byte	0x1
 8480 0ffe A606     		.2byte	0x6a6
 8481 1000 B8000000 		.4byte	0xb8
 8482 1004 46120000 		.4byte	.LLST75
 8483 1008 1F       		.uleb128 0x1f
 8484 1009 667300   		.ascii	"fs\000"
 8485 100c 01       		.byte	0x1
 8486 100d A706     		.2byte	0x6a7
 8487 100f 3C020000 		.4byte	0x23c
 8488 1013 01       		.uleb128 0x1
 8489 1014 57       		.byte	0x57
 8490 1015 19       		.uleb128 0x19
 8491 1016 46000000 		.4byte	.LVL330
 8492 101a AD0E0000 		.4byte	0xead
 8493 101e 2F100000 		.4byte	0x102f
 8494 1022 1A       		.uleb128 0x1a
 8495 1023 01       		.uleb128 0x1
 8496 1024 51       		.byte	0x51
 8497 1025 02       		.uleb128 0x2
 8498 1026 75       		.byte	0x75
 8499 1027 00       		.sleb128 0
 8500 1028 1A       		.uleb128 0x1a
 8501 1029 01       		.uleb128 0x1
 8502 102a 50       		.byte	0x50
 8503 102b 02       		.uleb128 0x2
 8504 102c 76       		.byte	0x76
 8505 102d 00       		.sleb128 0
 8506 102e 00       		.byte	0
 8507 102f 1B       		.uleb128 0x1b
 8508 1030 68000000 		.4byte	.LVL333
 8509 1034 AA050000 		.4byte	0x5aa
 8510 1038 1A       		.uleb128 0x1a
 8511 1039 01       		.uleb128 0x1
 8512 103a 51       		.byte	0x51
 8513 103b 02       		.uleb128 0x2
 8514 103c 75       		.byte	0x75
 8515 103d 00       		.sleb128 0
 8516 103e 1A       		.uleb128 0x1a
 8517 103f 01       		.uleb128 0x1
 8518 1040 50       		.byte	0x50
 8519 1041 02       		.uleb128 0x2
 8520 1042 77       		.byte	0x77
 8521 1043 00       		.sleb128 0
 8522 1044 00       		.byte	0
 8523 1045 00       		.byte	0
 8524 1046 14       		.uleb128 0x14
 8525 1047 2D050000 		.4byte	.LASF115
 8526 104b 01       		.byte	0x1
 8527 104c F405     		.2byte	0x5f4
 8528 104e B8000000 		.4byte	0xb8
 8529 1052 00000000 		.4byte	.LFB13
 8530 1056 10010000 		.4byte	.LFE13-.LFB13
 8531 105a 01       		.uleb128 0x1
 8532 105b 9C       		.byte	0x9c
 8533 105c 46110000 		.4byte	0x1146
 8534 1060 15       		.uleb128 0x15
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 253


 8535 1061 6F626A00 		.ascii	"obj\000"
 8536 1065 01       		.byte	0x1
 8537 1066 F505     		.2byte	0x5f5
 8538 1068 2C080000 		.4byte	0x82c
 8539 106c BC120000 		.4byte	.LLST76
 8540 1070 18       		.uleb128 0x18
 8541 1071 3B000000 		.4byte	.LASF89
 8542 1075 01       		.byte	0x1
 8543 1076 F605     		.2byte	0x5f6
 8544 1078 B8000000 		.4byte	0xb8
 8545 107c F0120000 		.4byte	.LLST77
 8546 1080 16       		.uleb128 0x16
 8547 1081 637300   		.ascii	"cs\000"
 8548 1084 01       		.byte	0x1
 8549 1085 F905     		.2byte	0x5f9
 8550 1087 B8000000 		.4byte	0xb8
 8551 108b 24130000 		.4byte	.LLST78
 8552 108f 16       		.uleb128 0x16
 8553 1090 6E636C00 		.ascii	"ncl\000"
 8554 1094 01       		.byte	0x1
 8555 1095 F905     		.2byte	0x5f9
 8556 1097 B8000000 		.4byte	0xb8
 8557 109b 8F130000 		.4byte	.LLST79
 8558 109f 16       		.uleb128 0x16
 8559 10a0 73636C00 		.ascii	"scl\000"
 8560 10a4 01       		.byte	0x1
 8561 10a5 F905     		.2byte	0x5f9
 8562 10a7 B8000000 		.4byte	0xb8
 8563 10ab 09140000 		.4byte	.LLST80
 8564 10af 16       		.uleb128 0x16
 8565 10b0 72657300 		.ascii	"res\000"
 8566 10b4 01       		.byte	0x1
 8567 10b5 FA05     		.2byte	0x5fa
 8568 10b7 22040000 		.4byte	0x422
 8569 10bb 54140000 		.4byte	.LLST81
 8570 10bf 1F       		.uleb128 0x1f
 8571 10c0 667300   		.ascii	"fs\000"
 8572 10c3 01       		.byte	0x1
 8573 10c4 FB05     		.2byte	0x5fb
 8574 10c6 3C020000 		.4byte	0x23c
 8575 10ca 01       		.uleb128 0x1
 8576 10cb 56       		.byte	0x56
 8577 10cc 1C       		.uleb128 0x1c
 8578 10cd 1C000000 		.4byte	.LVL352
 8579 10d1 AD0E0000 		.4byte	0xead
 8580 10d5 19       		.uleb128 0x19
 8581 10d6 52000000 		.4byte	.LVL360
 8582 10da AD0E0000 		.4byte	0xead
 8583 10de EF100000 		.4byte	0x10ef
 8584 10e2 1A       		.uleb128 0x1a
 8585 10e3 01       		.uleb128 0x1
 8586 10e4 51       		.byte	0x51
 8587 10e5 02       		.uleb128 0x2
 8588 10e6 74       		.byte	0x74
 8589 10e7 00       		.sleb128 0
 8590 10e8 1A       		.uleb128 0x1a
 8591 10e9 01       		.uleb128 0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 254


 8592 10ea 50       		.byte	0x50
 8593 10eb 02       		.uleb128 0x2
 8594 10ec 77       		.byte	0x77
 8595 10ed 00       		.sleb128 0
 8596 10ee 00       		.byte	0
 8597 10ef 19       		.uleb128 0x19
 8598 10f0 94000000 		.4byte	.LVL373
 8599 10f4 AD0E0000 		.4byte	0xead
 8600 10f8 09110000 		.4byte	0x1109
 8601 10fc 1A       		.uleb128 0x1a
 8602 10fd 01       		.uleb128 0x1
 8603 10fe 51       		.byte	0x51
 8604 10ff 02       		.uleb128 0x2
 8605 1100 74       		.byte	0x74
 8606 1101 00       		.sleb128 0
 8607 1102 1A       		.uleb128 0x1a
 8608 1103 01       		.uleb128 0x1
 8609 1104 50       		.byte	0x50
 8610 1105 02       		.uleb128 0x2
 8611 1106 77       		.byte	0x77
 8612 1107 00       		.sleb128 0
 8613 1108 00       		.byte	0
 8614 1109 19       		.uleb128 0x19
 8615 110a BA000000 		.4byte	.LVL377
 8616 110e 9D0D0000 		.4byte	0xd9d
 8617 1112 29110000 		.4byte	0x1129
 8618 1116 1A       		.uleb128 0x1a
 8619 1117 01       		.uleb128 0x1
 8620 1118 52       		.byte	0x52
 8621 1119 02       		.uleb128 0x2
 8622 111a 09       		.byte	0x9
 8623 111b FF       		.byte	0xff
 8624 111c 1A       		.uleb128 0x1a
 8625 111d 01       		.uleb128 0x1
 8626 111e 51       		.byte	0x51
 8627 111f 02       		.uleb128 0x2
 8628 1120 74       		.byte	0x74
 8629 1121 00       		.sleb128 0
 8630 1122 1A       		.uleb128 0x1a
 8631 1123 01       		.uleb128 0x1
 8632 1124 50       		.byte	0x50
 8633 1125 02       		.uleb128 0x2
 8634 1126 76       		.byte	0x76
 8635 1127 00       		.sleb128 0
 8636 1128 00       		.byte	0
 8637 1129 1B       		.uleb128 0x1b
 8638 112a CE000000 		.4byte	.LVL379
 8639 112e 9D0D0000 		.4byte	0xd9d
 8640 1132 1A       		.uleb128 0x1a
 8641 1133 01       		.uleb128 0x1
 8642 1134 52       		.byte	0x52
 8643 1135 02       		.uleb128 0x2
 8644 1136 74       		.byte	0x74
 8645 1137 00       		.sleb128 0
 8646 1138 1A       		.uleb128 0x1a
 8647 1139 01       		.uleb128 0x1
 8648 113a 51       		.byte	0x51
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 255


 8649 113b 02       		.uleb128 0x2
 8650 113c 78       		.byte	0x78
 8651 113d 00       		.sleb128 0
 8652 113e 1A       		.uleb128 0x1a
 8653 113f 01       		.uleb128 0x1
 8654 1140 50       		.byte	0x50
 8655 1141 02       		.uleb128 0x2
 8656 1142 76       		.byte	0x76
 8657 1143 00       		.sleb128 0
 8658 1144 00       		.byte	0
 8659 1145 00       		.byte	0
 8660 1146 14       		.uleb128 0x14
 8661 1147 24000000 		.4byte	.LASF116
 8662 114b 01       		.byte	0x1
 8663 114c 9505     		.2byte	0x595
 8664 114e 22040000 		.4byte	0x422
 8665 1152 00000000 		.4byte	.LFB12
 8666 1156 7C000000 		.4byte	.LFE12-.LFB12
 8667 115a 01       		.uleb128 0x1
 8668 115b 9C       		.byte	0x9c
 8669 115c 14120000 		.4byte	0x1214
 8670 1160 15       		.uleb128 0x15
 8671 1161 6F626A00 		.ascii	"obj\000"
 8672 1165 01       		.byte	0x1
 8673 1166 9605     		.2byte	0x596
 8674 1168 2C080000 		.4byte	0x82c
 8675 116c 7D140000 		.4byte	.LLST82
 8676 1170 18       		.uleb128 0x18
 8677 1171 3B000000 		.4byte	.LASF89
 8678 1175 01       		.byte	0x1
 8679 1176 9705     		.2byte	0x597
 8680 1178 B8000000 		.4byte	0xb8
 8681 117c C7140000 		.4byte	.LLST83
 8682 1180 18       		.uleb128 0x18
 8683 1181 4B030000 		.4byte	.LASF117
 8684 1185 01       		.byte	0x1
 8685 1186 9805     		.2byte	0x598
 8686 1188 B8000000 		.4byte	0xb8
 8687 118c 06150000 		.4byte	.LLST84
 8688 1190 16       		.uleb128 0x16
 8689 1191 72657300 		.ascii	"res\000"
 8690 1195 01       		.byte	0x1
 8691 1196 9B05     		.2byte	0x59b
 8692 1198 22040000 		.4byte	0x422
 8693 119c 4B150000 		.4byte	.LLST85
 8694 11a0 16       		.uleb128 0x16
 8695 11a1 6E787400 		.ascii	"nxt\000"
 8696 11a5 01       		.byte	0x1
 8697 11a6 9C05     		.2byte	0x59c
 8698 11a8 B8000000 		.4byte	0xb8
 8699 11ac 8C150000 		.4byte	.LLST86
 8700 11b0 1F       		.uleb128 0x1f
 8701 11b1 667300   		.ascii	"fs\000"
 8702 11b4 01       		.byte	0x1
 8703 11b5 9D05     		.2byte	0x59d
 8704 11b7 3C020000 		.4byte	0x23c
 8705 11bb 01       		.uleb128 0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 256


 8706 11bc 54       		.byte	0x54
 8707 11bd 19       		.uleb128 0x19
 8708 11be 20000000 		.4byte	.LVL397
 8709 11c2 9D0D0000 		.4byte	0xd9d
 8710 11c6 DE110000 		.4byte	0x11de
 8711 11ca 1A       		.uleb128 0x1a
 8712 11cb 01       		.uleb128 0x1
 8713 11cc 52       		.byte	0x52
 8714 11cd 02       		.uleb128 0x2
 8715 11ce 09       		.byte	0x9
 8716 11cf FF       		.byte	0xff
 8717 11d0 1A       		.uleb128 0x1a
 8718 11d1 01       		.uleb128 0x1
 8719 11d2 51       		.byte	0x51
 8720 11d3 03       		.uleb128 0x3
 8721 11d4 F3       		.byte	0xf3
 8722 11d5 01       		.uleb128 0x1
 8723 11d6 52       		.byte	0x52
 8724 11d7 1A       		.uleb128 0x1a
 8725 11d8 01       		.uleb128 0x1
 8726 11d9 50       		.byte	0x50
 8727 11da 02       		.uleb128 0x2
 8728 11db 74       		.byte	0x74
 8729 11dc 00       		.sleb128 0
 8730 11dd 00       		.byte	0
 8731 11de 19       		.uleb128 0x19
 8732 11df 2A000000 		.4byte	.LVL399
 8733 11e3 AD0E0000 		.4byte	0xead
 8734 11e7 F8110000 		.4byte	0x11f8
 8735 11eb 1A       		.uleb128 0x1a
 8736 11ec 01       		.uleb128 0x1
 8737 11ed 51       		.byte	0x51
 8738 11ee 02       		.uleb128 0x2
 8739 11ef 76       		.byte	0x76
 8740 11f0 00       		.sleb128 0
 8741 11f1 1A       		.uleb128 0x1a
 8742 11f2 01       		.uleb128 0x1
 8743 11f3 50       		.byte	0x50
 8744 11f4 02       		.uleb128 0x2
 8745 11f5 77       		.byte	0x77
 8746 11f6 00       		.sleb128 0
 8747 11f7 00       		.byte	0
 8748 11f8 1B       		.uleb128 0x1b
 8749 11f9 42000000 		.4byte	.LVL401
 8750 11fd 9D0D0000 		.4byte	0xd9d
 8751 1201 1A       		.uleb128 0x1a
 8752 1202 01       		.uleb128 0x1
 8753 1203 52       		.byte	0x52
 8754 1204 01       		.uleb128 0x1
 8755 1205 30       		.byte	0x30
 8756 1206 1A       		.uleb128 0x1a
 8757 1207 01       		.uleb128 0x1
 8758 1208 51       		.byte	0x51
 8759 1209 02       		.uleb128 0x2
 8760 120a 76       		.byte	0x76
 8761 120b 00       		.sleb128 0
 8762 120c 1A       		.uleb128 0x1a
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 257


 8763 120d 01       		.uleb128 0x1
 8764 120e 50       		.byte	0x50
 8765 120f 02       		.uleb128 0x2
 8766 1210 74       		.byte	0x74
 8767 1211 00       		.sleb128 0
 8768 1212 00       		.byte	0
 8769 1213 00       		.byte	0
 8770 1214 14       		.uleb128 0x14
 8771 1215 11000000 		.4byte	.LASF118
 8772 1219 01       		.byte	0x1
 8773 121a 0B0A     		.2byte	0xa0b
 8774 121c 22040000 		.4byte	0x422
 8775 1220 00000000 		.4byte	.LFB23
 8776 1224 20000000 		.4byte	.LFE23-.LFB23
 8777 1228 01       		.uleb128 0x1
 8778 1229 9C       		.byte	0x9c
 8779 122a 6B120000 		.4byte	0x126b
 8780 122e 15       		.uleb128 0x15
 8781 122f 647000   		.ascii	"dp\000"
 8782 1232 01       		.byte	0x1
 8783 1233 0C0A     		.2byte	0xa0c
 8784 1235 45070000 		.4byte	0x745
 8785 1239 EC150000 		.4byte	.LLST87
 8786 123d 16       		.uleb128 0x16
 8787 123e 72657300 		.ascii	"res\000"
 8788 1242 01       		.byte	0x1
 8789 1243 0F0A     		.2byte	0xa0f
 8790 1245 22040000 		.4byte	0x422
 8791 1249 0A160000 		.4byte	.LLST88
 8792 124d 1F       		.uleb128 0x1f
 8793 124e 667300   		.ascii	"fs\000"
 8794 1251 01       		.byte	0x1
 8795 1252 100A     		.2byte	0xa10
 8796 1254 3C020000 		.4byte	0x23c
 8797 1258 01       		.uleb128 0x1
 8798 1259 55       		.byte	0x55
 8799 125a 1B       		.uleb128 0x1b
 8800 125b 0E000000 		.4byte	.LVL419
 8801 125f A0080000 		.4byte	0x8a0
 8802 1263 1A       		.uleb128 0x1a
 8803 1264 01       		.uleb128 0x1
 8804 1265 50       		.byte	0x50
 8805 1266 02       		.uleb128 0x2
 8806 1267 75       		.byte	0x75
 8807 1268 00       		.sleb128 0
 8808 1269 00       		.byte	0
 8809 126a 00       		.byte	0
 8810 126b 14       		.uleb128 0x14
 8811 126c 6F010000 		.4byte	.LASF119
 8812 1270 01       		.byte	0x1
 8813 1271 7A06     		.2byte	0x67a
 8814 1273 22040000 		.4byte	0x422
 8815 1277 00000000 		.4byte	.LFB14
 8816 127b 52000000 		.4byte	.LFE14-.LFB14
 8817 127f 01       		.uleb128 0x1
 8818 1280 9C       		.byte	0x9c
 8819 1281 4F130000 		.4byte	0x134f
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 258


 8820 1285 15       		.uleb128 0x15
 8821 1286 667300   		.ascii	"fs\000"
 8822 1289 01       		.byte	0x1
 8823 128a 7B06     		.2byte	0x67b
 8824 128c 3C020000 		.4byte	0x23c
 8825 1290 1D160000 		.4byte	.LLST89
 8826 1294 18       		.uleb128 0x18
 8827 1295 3B000000 		.4byte	.LASF89
 8828 1299 01       		.byte	0x1
 8829 129a 7C06     		.2byte	0x67c
 8830 129c B8000000 		.4byte	0xb8
 8831 12a0 3B160000 		.4byte	.LLST90
 8832 12a4 1D       		.uleb128 0x1d
 8833 12a5 CD020000 		.4byte	.LASF45
 8834 12a9 01       		.byte	0x1
 8835 12aa 7F06     		.2byte	0x67f
 8836 12ac CE000000 		.4byte	0xce
 8837 12b0 72160000 		.4byte	.LLST91
 8838 12b4 16       		.uleb128 0x16
 8839 12b5 6E00     		.ascii	"n\000"
 8840 12b7 01       		.byte	0x1
 8841 12b8 8006     		.2byte	0x680
 8842 12ba 97000000 		.4byte	0x97
 8843 12be 90160000 		.4byte	.LLST92
 8844 12c2 16       		.uleb128 0x16
 8845 12c3 737A6200 		.ascii	"szb\000"
 8846 12c7 01       		.byte	0x1
 8847 12c8 8006     		.2byte	0x680
 8848 12ca 97000000 		.4byte	0x97
 8849 12ce AF160000 		.4byte	.LLST93
 8850 12d2 1D       		.uleb128 0x1d
 8851 12d3 06010000 		.4byte	.LASF120
 8852 12d7 01       		.byte	0x1
 8853 12d8 8106     		.2byte	0x681
 8854 12da C3020000 		.4byte	0x2c3
 8855 12de C3160000 		.4byte	.LLST94
 8856 12e2 19       		.uleb128 0x19
 8857 12e3 0A000000 		.4byte	.LVL422
 8858 12e7 38080000 		.4byte	0x838
 8859 12eb F6120000 		.4byte	0x12f6
 8860 12ef 1A       		.uleb128 0x1a
 8861 12f0 01       		.uleb128 0x1
 8862 12f1 50       		.byte	0x50
 8863 12f2 02       		.uleb128 0x2
 8864 12f3 75       		.byte	0x75
 8865 12f4 00       		.sleb128 0
 8866 12f5 00       		.byte	0
 8867 12f6 19       		.uleb128 0x19
 8868 12f7 14000000 		.4byte	.LVL423
 8869 12fb AA050000 		.4byte	0x5aa
 8870 12ff 10130000 		.4byte	0x1310
 8871 1303 1A       		.uleb128 0x1a
 8872 1304 01       		.uleb128 0x1
 8873 1305 51       		.byte	0x51
 8874 1306 02       		.uleb128 0x2
 8875 1307 74       		.byte	0x74
 8876 1308 00       		.sleb128 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 259


 8877 1309 1A       		.uleb128 0x1a
 8878 130a 01       		.uleb128 0x1
 8879 130b 50       		.byte	0x50
 8880 130c 02       		.uleb128 0x2
 8881 130d 75       		.byte	0x75
 8882 130e 00       		.sleb128 0
 8883 130f 00       		.byte	0
 8884 1310 19       		.uleb128 0x19
 8885 1311 28000000 		.4byte	.LVL426
 8886 1315 7B2C0000 		.4byte	0x2c7b
 8887 1319 30130000 		.4byte	0x1330
 8888 131d 1A       		.uleb128 0x1a
 8889 131e 01       		.uleb128 0x1
 8890 131f 52       		.byte	0x52
 8891 1320 03       		.uleb128 0x3
 8892 1321 0A       		.byte	0xa
 8893 1322 0002     		.2byte	0x200
 8894 1324 1A       		.uleb128 0x1a
 8895 1325 01       		.uleb128 0x1
 8896 1326 51       		.byte	0x51
 8897 1327 01       		.uleb128 0x1
 8898 1328 30       		.byte	0x30
 8899 1329 1A       		.uleb128 0x1a
 8900 132a 01       		.uleb128 0x1
 8901 132b 50       		.byte	0x50
 8902 132c 02       		.uleb128 0x2
 8903 132d 76       		.byte	0x76
 8904 132e 00       		.sleb128 0
 8905 132f 00       		.byte	0
 8906 1330 1B       		.uleb128 0x1b
 8907 1331 40000000 		.4byte	.LVL430
 8908 1335 FF2B0000 		.4byte	0x2bff
 8909 1339 1A       		.uleb128 0x1a
 8910 133a 01       		.uleb128 0x1
 8911 133b 53       		.byte	0x53
 8912 133c 01       		.uleb128 0x1
 8913 133d 31       		.byte	0x31
 8914 133e 1A       		.uleb128 0x1a
 8915 133f 01       		.uleb128 0x1
 8916 1340 52       		.byte	0x52
 8917 1341 05       		.uleb128 0x5
 8918 1342 77       		.byte	0x77
 8919 1343 00       		.sleb128 0
 8920 1344 74       		.byte	0x74
 8921 1345 00       		.sleb128 0
 8922 1346 22       		.byte	0x22
 8923 1347 1A       		.uleb128 0x1a
 8924 1348 01       		.uleb128 0x1
 8925 1349 51       		.byte	0x51
 8926 134a 02       		.uleb128 0x2
 8927 134b 76       		.byte	0x76
 8928 134c 00       		.sleb128 0
 8929 134d 00       		.byte	0
 8930 134e 00       		.byte	0
 8931 134f 14       		.uleb128 0x14
 8932 1350 BE020000 		.4byte	.LASF121
 8933 1354 01       		.byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 260


 8934 1355 D106     		.2byte	0x6d1
 8935 1357 22040000 		.4byte	0x422
 8936 135b 00000000 		.4byte	.LFB16
 8937 135f D6000000 		.4byte	.LFE16-.LFB16
 8938 1363 01       		.uleb128 0x1
 8939 1364 9C       		.byte	0x9c
 8940 1365 01140000 		.4byte	0x1401
 8941 1369 15       		.uleb128 0x15
 8942 136a 647000   		.ascii	"dp\000"
 8943 136d 01       		.byte	0x1
 8944 136e D206     		.2byte	0x6d2
 8945 1370 45070000 		.4byte	0x745
 8946 1374 D6160000 		.4byte	.LLST95
 8947 1378 18       		.uleb128 0x18
 8948 1379 7C060000 		.4byte	.LASF122
 8949 137d 01       		.byte	0x1
 8950 137e D306     		.2byte	0x6d3
 8951 1380 25000000 		.4byte	0x25
 8952 1384 2E170000 		.4byte	.LLST96
 8953 1388 1F       		.uleb128 0x1f
 8954 1389 6F667300 		.ascii	"ofs\000"
 8955 138d 01       		.byte	0x1
 8956 138e D606     		.2byte	0x6d6
 8957 1390 B8000000 		.4byte	0xb8
 8958 1394 01       		.uleb128 0x1
 8959 1395 55       		.byte	0x55
 8960 1396 1D       		.uleb128 0x1d
 8961 1397 3B000000 		.4byte	.LASF89
 8962 139b 01       		.byte	0x1
 8963 139c D606     		.2byte	0x6d6
 8964 139e B8000000 		.4byte	0xb8
 8965 13a2 62170000 		.4byte	.LLST97
 8966 13a6 1F       		.uleb128 0x1f
 8967 13a7 667300   		.ascii	"fs\000"
 8968 13aa 01       		.byte	0x1
 8969 13ab D706     		.2byte	0x6d7
 8970 13ad 3C020000 		.4byte	0x23c
 8971 13b1 01       		.uleb128 0x1
 8972 13b2 57       		.byte	0x57
 8973 13b3 1C       		.uleb128 0x1c
 8974 13b4 4E000000 		.4byte	.LVL438
 8975 13b8 AD0E0000 		.4byte	0xead
 8976 13bc 19       		.uleb128 0x19
 8977 13bd 78000000 		.4byte	.LVL443
 8978 13c1 46100000 		.4byte	0x1046
 8979 13c5 D0130000 		.4byte	0x13d0
 8980 13c9 1A       		.uleb128 0x1a
 8981 13ca 01       		.uleb128 0x1
 8982 13cb 50       		.byte	0x50
 8983 13cc 02       		.uleb128 0x2
 8984 13cd 74       		.byte	0x74
 8985 13ce 00       		.sleb128 0
 8986 13cf 00       		.byte	0
 8987 13d0 19       		.uleb128 0x19
 8988 13d1 8E000000 		.4byte	.LVL445
 8989 13d5 6B120000 		.4byte	0x126b
 8990 13d9 EA130000 		.4byte	0x13ea
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 261


 8991 13dd 1A       		.uleb128 0x1a
 8992 13de 01       		.uleb128 0x1
 8993 13df 51       		.byte	0x51
 8994 13e0 02       		.uleb128 0x2
 8995 13e1 79       		.byte	0x79
 8996 13e2 00       		.sleb128 0
 8997 13e3 1A       		.uleb128 0x1a
 8998 13e4 01       		.uleb128 0x1
 8999 13e5 50       		.byte	0x50
 9000 13e6 02       		.uleb128 0x2
 9001 13e7 77       		.byte	0x77
 9002 13e8 00       		.sleb128 0
 9003 13e9 00       		.byte	0
 9004 13ea 1B       		.uleb128 0x1b
 9005 13eb 9C000000 		.4byte	.LVL446
 9006 13ef AA050000 		.4byte	0x5aa
 9007 13f3 1A       		.uleb128 0x1a
 9008 13f4 01       		.uleb128 0x1
 9009 13f5 51       		.byte	0x51
 9010 13f6 02       		.uleb128 0x2
 9011 13f7 79       		.byte	0x79
 9012 13f8 00       		.sleb128 0
 9013 13f9 1A       		.uleb128 0x1a
 9014 13fa 01       		.uleb128 0x1
 9015 13fb 50       		.byte	0x50
 9016 13fc 02       		.uleb128 0x2
 9017 13fd 77       		.byte	0x77
 9018 13fe 00       		.sleb128 0
 9019 13ff 00       		.byte	0
 9020 1400 00       		.byte	0
 9021 1401 14       		.uleb128 0x14
 9022 1402 08000000 		.4byte	.LASF123
 9023 1406 01       		.byte	0x1
 9024 1407 5009     		.2byte	0x950
 9025 1409 22040000 		.4byte	0x422
 9026 140d 00000000 		.4byte	.LFB21
 9027 1411 54000000 		.4byte	.LFE21-.LFB21
 9028 1415 01       		.uleb128 0x1
 9029 1416 9C       		.byte	0x9c
 9030 1417 B1140000 		.4byte	0x14b1
 9031 141b 15       		.uleb128 0x15
 9032 141c 647000   		.ascii	"dp\000"
 9033 141f 01       		.byte	0x1
 9034 1420 5109     		.2byte	0x951
 9035 1422 45070000 		.4byte	0x745
 9036 1426 1A180000 		.4byte	.LLST98
 9037 142a 16       		.uleb128 0x16
 9038 142b 72657300 		.ascii	"res\000"
 9039 142f 01       		.byte	0x1
 9040 1430 5409     		.2byte	0x954
 9041 1432 22040000 		.4byte	0x422
 9042 1436 38180000 		.4byte	.LLST99
 9043 143a 1F       		.uleb128 0x1f
 9044 143b 667300   		.ascii	"fs\000"
 9045 143e 01       		.byte	0x1
 9046 143f 5509     		.2byte	0x955
 9047 1441 3C020000 		.4byte	0x23c
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 262


 9048 1445 01       		.uleb128 0x1
 9049 1446 56       		.byte	0x56
 9050 1447 16       		.uleb128 0x16
 9051 1448 6300     		.ascii	"c\000"
 9052 144a 01       		.byte	0x1
 9053 144b 5609     		.2byte	0x956
 9054 144d A2000000 		.4byte	0xa2
 9055 1451 77180000 		.4byte	.LLST100
 9056 1455 19       		.uleb128 0x19
 9057 1456 0C000000 		.4byte	.LVL463
 9058 145a AF0F0000 		.4byte	0xfaf
 9059 145e 6E140000 		.4byte	0x146e
 9060 1462 1A       		.uleb128 0x1a
 9061 1463 01       		.uleb128 0x1
 9062 1464 51       		.byte	0x51
 9063 1465 01       		.uleb128 0x1
 9064 1466 30       		.byte	0x30
 9065 1467 1A       		.uleb128 0x1a
 9066 1468 01       		.uleb128 0x1
 9067 1469 50       		.byte	0x50
 9068 146a 02       		.uleb128 0x2
 9069 146b 74       		.byte	0x74
 9070 146c 00       		.sleb128 0
 9071 146d 00       		.byte	0
 9072 146e 19       		.uleb128 0x19
 9073 146f 16000000 		.4byte	.LVL465
 9074 1473 A0080000 		.4byte	0x8a0
 9075 1477 82140000 		.4byte	0x1482
 9076 147b 1A       		.uleb128 0x1a
 9077 147c 01       		.uleb128 0x1
 9078 147d 50       		.byte	0x50
 9079 147e 02       		.uleb128 0x2
 9080 147f 76       		.byte	0x76
 9081 1480 00       		.sleb128 0
 9082 1481 00       		.byte	0
 9083 1482 19       		.uleb128 0x19
 9084 1483 3A000000 		.4byte	.LVL470
 9085 1487 472C0000 		.4byte	0x2c47
 9086 148b 9B140000 		.4byte	0x149b
 9087 148f 1A       		.uleb128 0x1a
 9088 1490 01       		.uleb128 0x1
 9089 1491 52       		.byte	0x52
 9090 1492 01       		.uleb128 0x1
 9091 1493 3B       		.byte	0x3b
 9092 1494 1A       		.uleb128 0x1a
 9093 1495 01       		.uleb128 0x1
 9094 1496 51       		.byte	0x51
 9095 1497 02       		.uleb128 0x2
 9096 1498 74       		.byte	0x74
 9097 1499 20       		.sleb128 32
 9098 149a 00       		.byte	0
 9099 149b 1B       		.uleb128 0x1b
 9100 149c 44000000 		.4byte	.LVL471
 9101 14a0 4F130000 		.4byte	0x134f
 9102 14a4 1A       		.uleb128 0x1a
 9103 14a5 01       		.uleb128 0x1
 9104 14a6 51       		.byte	0x51
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 263


 9105 14a7 01       		.uleb128 0x1
 9106 14a8 30       		.byte	0x30
 9107 14a9 1A       		.uleb128 0x1a
 9108 14aa 01       		.uleb128 0x1
 9109 14ab 50       		.byte	0x50
 9110 14ac 02       		.uleb128 0x2
 9111 14ad 74       		.byte	0x74
 9112 14ae 00       		.sleb128 0
 9113 14af 00       		.byte	0
 9114 14b0 00       		.byte	0
 9115 14b1 14       		.uleb128 0x14
 9116 14b2 EF030000 		.4byte	.LASF124
 9117 14b6 01       		.byte	0x1
 9118 14b7 0E07     		.2byte	0x70e
 9119 14b9 22040000 		.4byte	0x422
 9120 14bd 00000000 		.4byte	.LFB17
 9121 14c1 4C000000 		.4byte	.LFE17-.LFB17
 9122 14c5 01       		.uleb128 0x1
 9123 14c6 9C       		.byte	0x9c
 9124 14c7 58150000 		.4byte	0x1558
 9125 14cb 15       		.uleb128 0x15
 9126 14cc 647000   		.ascii	"dp\000"
 9127 14cf 01       		.byte	0x1
 9128 14d0 0F07     		.2byte	0x70f
 9129 14d2 45070000 		.4byte	0x745
 9130 14d6 A1180000 		.4byte	.LLST101
 9131 14da 18       		.uleb128 0x18
 9132 14db 92010000 		.4byte	.LASF125
 9133 14df 01       		.byte	0x1
 9134 14e0 1007     		.2byte	0x710
 9135 14e2 97000000 		.4byte	0x97
 9136 14e6 BF180000 		.4byte	.LLST102
 9137 14ea 16       		.uleb128 0x16
 9138 14eb 72657300 		.ascii	"res\000"
 9139 14ef 01       		.byte	0x1
 9140 14f0 1307     		.2byte	0x713
 9141 14f2 22040000 		.4byte	0x422
 9142 14f6 DD180000 		.4byte	.LLST103
 9143 14fa 16       		.uleb128 0x16
 9144 14fb 6E00     		.ascii	"n\000"
 9145 14fd 01       		.byte	0x1
 9146 14fe 1407     		.2byte	0x714
 9147 1500 97000000 		.4byte	0x97
 9148 1504 11190000 		.4byte	.LLST104
 9149 1508 1F       		.uleb128 0x1f
 9150 1509 667300   		.ascii	"fs\000"
 9151 150c 01       		.byte	0x1
 9152 150d 1507     		.2byte	0x715
 9153 150f 3C020000 		.4byte	0x23c
 9154 1513 01       		.uleb128 0x1
 9155 1514 56       		.byte	0x56
 9156 1515 19       		.uleb128 0x19
 9157 1516 0E000000 		.4byte	.LVL478
 9158 151a AF0F0000 		.4byte	0xfaf
 9159 151e 2E150000 		.4byte	0x152e
 9160 1522 1A       		.uleb128 0x1a
 9161 1523 01       		.uleb128 0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 264


 9162 1524 51       		.byte	0x51
 9163 1525 01       		.uleb128 0x1
 9164 1526 30       		.byte	0x30
 9165 1527 1A       		.uleb128 0x1a
 9166 1528 01       		.uleb128 0x1
 9167 1529 50       		.byte	0x50
 9168 152a 02       		.uleb128 0x2
 9169 152b 74       		.byte	0x74
 9170 152c 00       		.sleb128 0
 9171 152d 00       		.byte	0
 9172 152e 19       		.uleb128 0x19
 9173 152f 1C000000 		.4byte	.LVL481
 9174 1533 A0080000 		.4byte	0x8a0
 9175 1537 42150000 		.4byte	0x1542
 9176 153b 1A       		.uleb128 0x1a
 9177 153c 01       		.uleb128 0x1
 9178 153d 50       		.byte	0x50
 9179 153e 02       		.uleb128 0x2
 9180 153f 76       		.byte	0x76
 9181 1540 00       		.sleb128 0
 9182 1541 00       		.byte	0
 9183 1542 1B       		.uleb128 0x1b
 9184 1543 3C000000 		.4byte	.LVL485
 9185 1547 4F130000 		.4byte	0x134f
 9186 154b 1A       		.uleb128 0x1a
 9187 154c 01       		.uleb128 0x1
 9188 154d 51       		.byte	0x51
 9189 154e 01       		.uleb128 0x1
 9190 154f 31       		.byte	0x31
 9191 1550 1A       		.uleb128 0x1a
 9192 1551 01       		.uleb128 0x1
 9193 1552 50       		.byte	0x50
 9194 1553 02       		.uleb128 0x2
 9195 1554 74       		.byte	0x74
 9196 1555 00       		.sleb128 0
 9197 1556 00       		.byte	0
 9198 1557 00       		.byte	0
 9199 1558 14       		.uleb128 0x14
 9200 1559 DA020000 		.4byte	.LASF126
 9201 155d 01       		.byte	0x1
 9202 155e 0209     		.2byte	0x902
 9203 1560 22040000 		.4byte	0x422
 9204 1564 00000000 		.4byte	.LFB20
 9205 1568 60000000 		.4byte	.LFE20-.LFB20
 9206 156c 01       		.uleb128 0x1
 9207 156d 9C       		.byte	0x9c
 9208 156e F6150000 		.4byte	0x15f6
 9209 1572 15       		.uleb128 0x15
 9210 1573 647000   		.ascii	"dp\000"
 9211 1576 01       		.byte	0x1
 9212 1577 0309     		.2byte	0x903
 9213 1579 45070000 		.4byte	0x745
 9214 157d 24190000 		.4byte	.LLST105
 9215 1581 15       		.uleb128 0x15
 9216 1582 766F6C00 		.ascii	"vol\000"
 9217 1586 01       		.byte	0x1
 9218 1587 0409     		.2byte	0x904
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 265


 9219 1589 25000000 		.4byte	0x25
 9220 158d 42190000 		.4byte	.LLST106
 9221 1591 16       		.uleb128 0x16
 9222 1592 72657300 		.ascii	"res\000"
 9223 1596 01       		.byte	0x1
 9224 1597 0709     		.2byte	0x907
 9225 1599 22040000 		.4byte	0x422
 9226 159d 60190000 		.4byte	.LLST107
 9227 15a1 1F       		.uleb128 0x1f
 9228 15a2 667300   		.ascii	"fs\000"
 9229 15a5 01       		.byte	0x1
 9230 15a6 0809     		.2byte	0x908
 9231 15a8 3C020000 		.4byte	0x23c
 9232 15ac 01       		.uleb128 0x1
 9233 15ad 55       		.byte	0x55
 9234 15ae 1D       		.uleb128 0x1d
 9235 15af 6A010000 		.4byte	.LASF37
 9236 15b3 01       		.byte	0x1
 9237 15b4 0909     		.2byte	0x909
 9238 15b6 A2000000 		.4byte	0xa2
 9239 15ba B6190000 		.4byte	.LLST108
 9240 15be 16       		.uleb128 0x16
 9241 15bf 6200     		.ascii	"b\000"
 9242 15c1 01       		.byte	0x1
 9243 15c2 0909     		.2byte	0x909
 9244 15c4 A2000000 		.4byte	0xa2
 9245 15c8 D5190000 		.4byte	.LLST109
 9246 15cc 19       		.uleb128 0x19
 9247 15cd 12000000 		.4byte	.LVL492
 9248 15d1 A0080000 		.4byte	0x8a0
 9249 15d5 E0150000 		.4byte	0x15e0
 9250 15d9 1A       		.uleb128 0x1a
 9251 15da 01       		.uleb128 0x1
 9252 15db 50       		.byte	0x50
 9253 15dc 02       		.uleb128 0x2
 9254 15dd 75       		.byte	0x75
 9255 15de 00       		.sleb128 0
 9256 15df 00       		.byte	0
 9257 15e0 1B       		.uleb128 0x1b
 9258 15e1 48000000 		.4byte	.LVL497
 9259 15e5 4F130000 		.4byte	0x134f
 9260 15e9 1A       		.uleb128 0x1a
 9261 15ea 01       		.uleb128 0x1
 9262 15eb 51       		.byte	0x51
 9263 15ec 01       		.uleb128 0x1
 9264 15ed 30       		.byte	0x30
 9265 15ee 1A       		.uleb128 0x1a
 9266 15ef 01       		.uleb128 0x1
 9267 15f0 50       		.byte	0x50
 9268 15f1 02       		.uleb128 0x2
 9269 15f2 74       		.byte	0x74
 9270 15f3 00       		.sleb128 0
 9271 15f4 00       		.byte	0
 9272 15f5 00       		.byte	0
 9273 15f6 14       		.uleb128 0x14
 9274 15f7 DE040000 		.4byte	.LASF127
 9275 15fb 01       		.byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 266


 9276 15fc 1F0B     		.2byte	0xb1f
 9277 15fe 22040000 		.4byte	0x422
 9278 1602 00000000 		.4byte	.LFB25
 9279 1606 0C010000 		.4byte	.LFE25-.LFB25
 9280 160a 01       		.uleb128 0x1
 9281 160b 9C       		.byte	0x9c
 9282 160c F6160000 		.4byte	0x16f6
 9283 1610 15       		.uleb128 0x15
 9284 1611 647000   		.ascii	"dp\000"
 9285 1614 01       		.byte	0x1
 9286 1615 200B     		.2byte	0xb20
 9287 1617 45070000 		.4byte	0x745
 9288 161b F3190000 		.4byte	.LLST110
 9289 161f 18       		.uleb128 0x18
 9290 1620 40020000 		.4byte	.LASF94
 9291 1624 01       		.byte	0x1
 9292 1625 210B     		.2byte	0xb21
 9293 1627 C7070000 		.4byte	0x7c7
 9294 162b 1E1A0000 		.4byte	.LLST111
 9295 162f 16       		.uleb128 0x16
 9296 1630 6300     		.ascii	"c\000"
 9297 1632 01       		.byte	0x1
 9298 1633 A40B     		.2byte	0xba4
 9299 1635 A2000000 		.4byte	0xa2
 9300 1639 4A1A0000 		.4byte	.LLST112
 9301 163d 16       		.uleb128 0x16
 9302 163e 6400     		.ascii	"d\000"
 9303 1640 01       		.byte	0x1
 9304 1641 A40B     		.2byte	0xba4
 9305 1643 A2000000 		.4byte	0xa2
 9306 1647 751A0000 		.4byte	.LLST113
 9307 164b 16       		.uleb128 0x16
 9308 164c 73666E00 		.ascii	"sfn\000"
 9309 1650 01       		.byte	0x1
 9310 1651 A50B     		.2byte	0xba5
 9311 1653 C3020000 		.4byte	0x2c3
 9312 1657 931A0000 		.4byte	.LLST114
 9313 165b 16       		.uleb128 0x16
 9314 165c 6E6900   		.ascii	"ni\000"
 9315 165f 01       		.byte	0x1
 9316 1660 A60B     		.2byte	0xba6
 9317 1662 97000000 		.4byte	0x97
 9318 1666 B61A0000 		.4byte	.LLST115
 9319 166a 16       		.uleb128 0x16
 9320 166b 736900   		.ascii	"si\000"
 9321 166e 01       		.byte	0x1
 9322 166f A60B     		.2byte	0xba6
 9323 1671 97000000 		.4byte	0x97
 9324 1675 E01A0000 		.4byte	.LLST116
 9325 1679 16       		.uleb128 0x16
 9326 167a 6900     		.ascii	"i\000"
 9327 167c 01       		.byte	0x1
 9328 167d A60B     		.2byte	0xba6
 9329 167f 97000000 		.4byte	0x97
 9330 1683 411B0000 		.4byte	.LLST117
 9331 1687 16       		.uleb128 0x16
 9332 1688 7000     		.ascii	"p\000"
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 267


 9333 168a 01       		.byte	0x1
 9334 168b A70B     		.2byte	0xba7
 9335 168d 8C000000 		.4byte	0x8c
 9336 1691 991B0000 		.4byte	.LLST118
 9337 1695 19       		.uleb128 0x19
 9338 1696 1C000000 		.4byte	.LVL506
 9339 169a 982C0000 		.4byte	0x2c98
 9340 169e B4160000 		.4byte	0x16b4
 9341 16a2 1A       		.uleb128 0x1a
 9342 16a3 01       		.uleb128 0x1
 9343 16a4 52       		.byte	0x52
 9344 16a5 01       		.uleb128 0x1
 9345 16a6 3B       		.byte	0x3b
 9346 16a7 1A       		.uleb128 0x1a
 9347 16a8 01       		.uleb128 0x1
 9348 16a9 51       		.byte	0x51
 9349 16aa 02       		.uleb128 0x2
 9350 16ab 08       		.byte	0x8
 9351 16ac 20       		.byte	0x20
 9352 16ad 1A       		.uleb128 0x1a
 9353 16ae 01       		.uleb128 0x1
 9354 16af 50       		.byte	0x50
 9355 16b0 02       		.uleb128 0x2
 9356 16b1 7A       		.byte	0x7a
 9357 16b2 00       		.sleb128 0
 9358 16b3 00       		.byte	0
 9359 16b4 19       		.uleb128 0x19
 9360 16b5 6A000000 		.4byte	.LVL514
 9361 16b9 58050000 		.4byte	0x558
 9362 16bd C8160000 		.4byte	0x16c8
 9363 16c1 1A       		.uleb128 0x1a
 9364 16c2 01       		.uleb128 0x1
 9365 16c3 50       		.byte	0x50
 9366 16c4 02       		.uleb128 0x2
 9367 16c5 74       		.byte	0x74
 9368 16c6 00       		.sleb128 0
 9369 16c7 00       		.byte	0
 9370 16c8 19       		.uleb128 0x19
 9371 16c9 78000000 		.4byte	.LVL517
 9372 16cd 81050000 		.4byte	0x581
 9373 16d1 DC160000 		.4byte	0x16dc
 9374 16d5 1A       		.uleb128 0x1a
 9375 16d6 01       		.uleb128 0x1
 9376 16d7 50       		.byte	0x50
 9377 16d8 02       		.uleb128 0x2
 9378 16d9 75       		.byte	0x75
 9379 16da 00       		.sleb128 0
 9380 16db 00       		.byte	0
 9381 16dc 1B       		.uleb128 0x1b
 9382 16dd 9A000000 		.4byte	.LVL521
 9383 16e1 B72C0000 		.4byte	0x2cb7
 9384 16e5 1A       		.uleb128 0x1a
 9385 16e6 01       		.uleb128 0x1
 9386 16e7 51       		.byte	0x51
 9387 16e8 02       		.uleb128 0x2
 9388 16e9 74       		.byte	0x74
 9389 16ea 00       		.sleb128 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 268


 9390 16eb 1A       		.uleb128 0x1a
 9391 16ec 01       		.uleb128 0x1
 9392 16ed 50       		.byte	0x50
 9393 16ee 05       		.uleb128 0x5
 9394 16ef 03       		.byte	0x3
 9395 16f0 0C000000 		.4byte	.LC1
 9396 16f4 00       		.byte	0
 9397 16f5 00       		.byte	0
 9398 16f6 14       		.uleb128 0x14
 9399 16f7 1C020000 		.4byte	.LASF128
 9400 16fb 01       		.byte	0x1
 9401 16fc EB0B     		.2byte	0xbeb
 9402 16fe 22040000 		.4byte	0x422
 9403 1702 00000000 		.4byte	.LFB26
 9404 1706 8C000000 		.4byte	.LFE26-.LFB26
 9405 170a 01       		.uleb128 0x1
 9406 170b 9C       		.byte	0x9c
 9407 170c B3170000 		.4byte	0x17b3
 9408 1710 15       		.uleb128 0x15
 9409 1711 647000   		.ascii	"dp\000"
 9410 1714 01       		.byte	0x1
 9411 1715 EC0B     		.2byte	0xbec
 9412 1717 45070000 		.4byte	0x745
 9413 171b AC1B0000 		.4byte	.LLST119
 9414 171f 18       		.uleb128 0x18
 9415 1720 40020000 		.4byte	.LASF94
 9416 1724 01       		.byte	0x1
 9417 1725 ED0B     		.2byte	0xbed
 9418 1727 CD070000 		.4byte	0x7cd
 9419 172b CA1B0000 		.4byte	.LLST120
 9420 172f 16       		.uleb128 0x16
 9421 1730 72657300 		.ascii	"res\000"
 9422 1734 01       		.byte	0x1
 9423 1735 F00B     		.2byte	0xbf0
 9424 1737 22040000 		.4byte	0x422
 9425 173b EB1B0000 		.4byte	.LLST121
 9426 173f 16       		.uleb128 0x16
 9427 1740 6E7300   		.ascii	"ns\000"
 9428 1743 01       		.byte	0x1
 9429 1744 F10B     		.2byte	0xbf1
 9430 1746 A2000000 		.4byte	0xa2
 9431 174a 2A1C0000 		.4byte	.LLST122
 9432 174e 1F       		.uleb128 0x1f
 9433 174f 667300   		.ascii	"fs\000"
 9434 1752 01       		.byte	0x1
 9435 1753 F20B     		.2byte	0xbf2
 9436 1755 3C020000 		.4byte	0x23c
 9437 1759 01       		.uleb128 0x1
 9438 175a 55       		.byte	0x55
 9439 175b 19       		.uleb128 0x19
 9440 175c 34000000 		.4byte	.LVL535
 9441 1760 AF0F0000 		.4byte	0xfaf
 9442 1764 74170000 		.4byte	0x1774
 9443 1768 1A       		.uleb128 0x1a
 9444 1769 01       		.uleb128 0x1
 9445 176a 51       		.byte	0x51
 9446 176b 01       		.uleb128 0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 269


 9447 176c 30       		.byte	0x30
 9448 176d 1A       		.uleb128 0x1a
 9449 176e 01       		.uleb128 0x1
 9450 176f 50       		.byte	0x50
 9451 1770 02       		.uleb128 0x2
 9452 1771 74       		.byte	0x74
 9453 1772 00       		.sleb128 0
 9454 1773 00       		.byte	0
 9455 1774 19       		.uleb128 0x19
 9456 1775 40000000 		.4byte	.LVL538
 9457 1779 F6150000 		.4byte	0x15f6
 9458 177d 8E170000 		.4byte	0x178e
 9459 1781 1A       		.uleb128 0x1a
 9460 1782 01       		.uleb128 0x1
 9461 1783 51       		.byte	0x51
 9462 1784 02       		.uleb128 0x2
 9463 1785 91       		.byte	0x91
 9464 1786 6C       		.sleb128 -20
 9465 1787 1A       		.uleb128 0x1a
 9466 1788 01       		.uleb128 0x1
 9467 1789 50       		.byte	0x50
 9468 178a 02       		.uleb128 0x2
 9469 178b 74       		.byte	0x74
 9470 178c 00       		.sleb128 0
 9471 178d 00       		.byte	0
 9472 178e 19       		.uleb128 0x19
 9473 178f 4A000000 		.4byte	.LVL540
 9474 1793 01140000 		.4byte	0x1401
 9475 1797 A2170000 		.4byte	0x17a2
 9476 179b 1A       		.uleb128 0x1a
 9477 179c 01       		.uleb128 0x1
 9478 179d 50       		.byte	0x50
 9479 179e 02       		.uleb128 0x2
 9480 179f 74       		.byte	0x74
 9481 17a0 00       		.sleb128 0
 9482 17a1 00       		.byte	0
 9483 17a2 1B       		.uleb128 0x1b
 9484 17a3 7C000000 		.4byte	.LVL543
 9485 17a7 E4050000 		.4byte	0x5e4
 9486 17ab 1A       		.uleb128 0x1a
 9487 17ac 01       		.uleb128 0x1
 9488 17ad 50       		.byte	0x50
 9489 17ae 02       		.uleb128 0x2
 9490 17af 75       		.byte	0x75
 9491 17b0 00       		.sleb128 0
 9492 17b1 00       		.byte	0
 9493 17b2 00       		.byte	0
 9494 17b3 14       		.uleb128 0x14
 9495 17b4 B5060000 		.4byte	.LASF129
 9496 17b8 01       		.byte	0x1
 9497 17b9 A109     		.2byte	0x9a1
 9498 17bb 22040000 		.4byte	0x422
 9499 17bf 00000000 		.4byte	.LFB22
 9500 17c3 42000000 		.4byte	.LFE22-.LFB22
 9501 17c7 01       		.uleb128 0x1
 9502 17c8 9C       		.byte	0x9c
 9503 17c9 3C180000 		.4byte	0x183c
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 270


 9504 17cd 15       		.uleb128 0x15
 9505 17ce 647000   		.ascii	"dp\000"
 9506 17d1 01       		.byte	0x1
 9507 17d2 A209     		.2byte	0x9a2
 9508 17d4 45070000 		.4byte	0x745
 9509 17d8 481C0000 		.4byte	.LLST123
 9510 17dc 16       		.uleb128 0x16
 9511 17dd 72657300 		.ascii	"res\000"
 9512 17e1 01       		.byte	0x1
 9513 17e2 A509     		.2byte	0x9a5
 9514 17e4 22040000 		.4byte	0x422
 9515 17e8 811C0000 		.4byte	.LLST124
 9516 17ec 1F       		.uleb128 0x1f
 9517 17ed 667300   		.ascii	"fs\000"
 9518 17f0 01       		.byte	0x1
 9519 17f1 A609     		.2byte	0x9a6
 9520 17f3 3C020000 		.4byte	0x23c
 9521 17f7 01       		.uleb128 0x1
 9522 17f8 56       		.byte	0x56
 9523 17f9 19       		.uleb128 0x19
 9524 17fa 0C000000 		.4byte	.LVL548
 9525 17fe B1140000 		.4byte	0x14b1
 9526 1802 12180000 		.4byte	0x1812
 9527 1806 1A       		.uleb128 0x1a
 9528 1807 01       		.uleb128 0x1
 9529 1808 51       		.byte	0x51
 9530 1809 01       		.uleb128 0x1
 9531 180a 31       		.byte	0x31
 9532 180b 1A       		.uleb128 0x1a
 9533 180c 01       		.uleb128 0x1
 9534 180d 50       		.byte	0x50
 9535 180e 02       		.uleb128 0x2
 9536 180f 74       		.byte	0x74
 9537 1810 00       		.sleb128 0
 9538 1811 00       		.byte	0
 9539 1812 19       		.uleb128 0x19
 9540 1813 18000000 		.4byte	.LVL550
 9541 1817 A0080000 		.4byte	0x8a0
 9542 181b 26180000 		.4byte	0x1826
 9543 181f 1A       		.uleb128 0x1a
 9544 1820 01       		.uleb128 0x1
 9545 1821 50       		.byte	0x50
 9546 1822 02       		.uleb128 0x2
 9547 1823 76       		.byte	0x76
 9548 1824 00       		.sleb128 0
 9549 1825 00       		.byte	0
 9550 1826 1B       		.uleb128 0x1b
 9551 1827 26000000 		.4byte	.LVL552
 9552 182b 7B2C0000 		.4byte	0x2c7b
 9553 182f 1A       		.uleb128 0x1a
 9554 1830 01       		.uleb128 0x1
 9555 1831 52       		.byte	0x52
 9556 1832 02       		.uleb128 0x2
 9557 1833 08       		.byte	0x8
 9558 1834 20       		.byte	0x20
 9559 1835 1A       		.uleb128 0x1a
 9560 1836 01       		.uleb128 0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 271


 9561 1837 51       		.byte	0x51
 9562 1838 01       		.uleb128 0x1
 9563 1839 30       		.byte	0x30
 9564 183a 00       		.byte	0
 9565 183b 00       		.byte	0
 9566 183c 14       		.uleb128 0x14
 9567 183d D2020000 		.4byte	.LASF130
 9568 1841 01       		.byte	0x1
 9569 1842 5404     		.2byte	0x454
 9570 1844 22040000 		.4byte	0x422
 9571 1848 00000000 		.4byte	.LFB8
 9572 184c 8C000000 		.4byte	.LFE8-.LFB8
 9573 1850 01       		.uleb128 0x1
 9574 1851 9C       		.byte	0x9c
 9575 1852 58190000 		.4byte	0x1958
 9576 1856 15       		.uleb128 0x15
 9577 1857 667300   		.ascii	"fs\000"
 9578 185a 01       		.byte	0x1
 9579 185b 5504     		.2byte	0x455
 9580 185d 3C020000 		.4byte	0x23c
 9581 1861 AA1C0000 		.4byte	.LLST125
 9582 1865 16       		.uleb128 0x16
 9583 1866 72657300 		.ascii	"res\000"
 9584 186a 01       		.byte	0x1
 9585 186b 5804     		.2byte	0x458
 9586 186d 22040000 		.4byte	0x422
 9587 1871 D61C0000 		.4byte	.LLST126
 9588 1875 19       		.uleb128 0x19
 9589 1876 08000000 		.4byte	.LVL556
 9590 187a 38080000 		.4byte	0x838
 9591 187e 89180000 		.4byte	0x1889
 9592 1882 1A       		.uleb128 0x1a
 9593 1883 01       		.uleb128 0x1
 9594 1884 50       		.byte	0x50
 9595 1885 02       		.uleb128 0x2
 9596 1886 74       		.byte	0x74
 9597 1887 00       		.sleb128 0
 9598 1888 00       		.byte	0
 9599 1889 19       		.uleb128 0x19
 9600 188a 2A000000 		.4byte	.LVL558
 9601 188e 7B2C0000 		.4byte	0x2c7b
 9602 1892 A9180000 		.4byte	0x18a9
 9603 1896 1A       		.uleb128 0x1a
 9604 1897 01       		.uleb128 0x1
 9605 1898 52       		.byte	0x52
 9606 1899 03       		.uleb128 0x3
 9607 189a 0A       		.byte	0xa
 9608 189b 0002     		.2byte	0x200
 9609 189d 1A       		.uleb128 0x1a
 9610 189e 01       		.uleb128 0x1
 9611 189f 51       		.byte	0x51
 9612 18a0 01       		.uleb128 0x1
 9613 18a1 30       		.byte	0x30
 9614 18a2 1A       		.uleb128 0x1a
 9615 18a3 01       		.uleb128 0x1
 9616 18a4 50       		.byte	0x50
 9617 18a5 02       		.uleb128 0x2
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 272


 9618 18a6 76       		.byte	0x76
 9619 18a7 00       		.sleb128 0
 9620 18a8 00       		.byte	0
 9621 18a9 19       		.uleb128 0x19
 9622 18aa 36000000 		.4byte	.LVL559
 9623 18ae EA040000 		.4byte	0x4ea
 9624 18b2 C5180000 		.4byte	0x18c5
 9625 18b6 1A       		.uleb128 0x1a
 9626 18b7 01       		.uleb128 0x1
 9627 18b8 51       		.byte	0x51
 9628 18b9 03       		.uleb128 0x3
 9629 18ba 0B       		.byte	0xb
 9630 18bb 55AA     		.2byte	0xaa55
 9631 18bd 1A       		.uleb128 0x1a
 9632 18be 01       		.uleb128 0x1
 9633 18bf 50       		.byte	0x50
 9634 18c0 03       		.uleb128 0x3
 9635 18c1 74       		.byte	0x74
 9636 18c2 AE04     		.sleb128 558
 9637 18c4 00       		.byte	0
 9638 18c5 19       		.uleb128 0x19
 9639 18c6 3E000000 		.4byte	.LVL560
 9640 18ca 21050000 		.4byte	0x521
 9641 18ce E2180000 		.4byte	0x18e2
 9642 18d2 1A       		.uleb128 0x1a
 9643 18d3 01       		.uleb128 0x1
 9644 18d4 51       		.byte	0x51
 9645 18d5 05       		.uleb128 0x5
 9646 18d6 0C       		.byte	0xc
 9647 18d7 52526141 		.4byte	0x41615252
 9648 18db 1A       		.uleb128 0x1a
 9649 18dc 01       		.uleb128 0x1
 9650 18dd 50       		.byte	0x50
 9651 18de 02       		.uleb128 0x2
 9652 18df 76       		.byte	0x76
 9653 18e0 00       		.sleb128 0
 9654 18e1 00       		.byte	0
 9655 18e2 19       		.uleb128 0x19
 9656 18e3 48000000 		.4byte	.LVL561
 9657 18e7 21050000 		.4byte	0x521
 9658 18eb 00190000 		.4byte	0x1900
 9659 18ef 1A       		.uleb128 0x1a
 9660 18f0 01       		.uleb128 0x1
 9661 18f1 51       		.byte	0x51
 9662 18f2 05       		.uleb128 0x5
 9663 18f3 0C       		.byte	0xc
 9664 18f4 72724161 		.4byte	0x61417272
 9665 18f8 1A       		.uleb128 0x1a
 9666 18f9 01       		.uleb128 0x1
 9667 18fa 50       		.byte	0x50
 9668 18fb 03       		.uleb128 0x3
 9669 18fc 74       		.byte	0x74
 9670 18fd 9404     		.sleb128 532
 9671 18ff 00       		.byte	0
 9672 1900 19       		.uleb128 0x19
 9673 1901 52000000 		.4byte	.LVL562
 9674 1905 21050000 		.4byte	0x521
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 273


 9675 1909 15190000 		.4byte	0x1915
 9676 190d 1A       		.uleb128 0x1a
 9677 190e 01       		.uleb128 0x1
 9678 190f 50       		.byte	0x50
 9679 1910 03       		.uleb128 0x3
 9680 1911 74       		.byte	0x74
 9681 1912 9804     		.sleb128 536
 9682 1914 00       		.byte	0
 9683 1915 19       		.uleb128 0x19
 9684 1916 5C000000 		.4byte	.LVL563
 9685 191a 21050000 		.4byte	0x521
 9686 191e 2A190000 		.4byte	0x192a
 9687 1922 1A       		.uleb128 0x1a
 9688 1923 01       		.uleb128 0x1
 9689 1924 50       		.byte	0x50
 9690 1925 03       		.uleb128 0x3
 9691 1926 74       		.byte	0x74
 9692 1927 9C04     		.sleb128 540
 9693 1929 00       		.byte	0
 9694 192a 19       		.uleb128 0x19
 9695 192b 6C000000 		.4byte	.LVL564
 9696 192f FF2B0000 		.4byte	0x2bff
 9697 1933 43190000 		.4byte	0x1943
 9698 1937 1A       		.uleb128 0x1a
 9699 1938 01       		.uleb128 0x1
 9700 1939 53       		.byte	0x53
 9701 193a 01       		.uleb128 0x1
 9702 193b 31       		.byte	0x31
 9703 193c 1A       		.uleb128 0x1a
 9704 193d 01       		.uleb128 0x1
 9705 193e 51       		.byte	0x51
 9706 193f 02       		.uleb128 0x2
 9707 1940 76       		.byte	0x76
 9708 1941 00       		.sleb128 0
 9709 1942 00       		.byte	0
 9710 1943 1B       		.uleb128 0x1b
 9711 1944 7A000000 		.4byte	.LVL565
 9712 1948 D12C0000 		.4byte	0x2cd1
 9713 194c 1A       		.uleb128 0x1a
 9714 194d 01       		.uleb128 0x1
 9715 194e 52       		.byte	0x52
 9716 194f 01       		.uleb128 0x1
 9717 1950 30       		.byte	0x30
 9718 1951 1A       		.uleb128 0x1a
 9719 1952 01       		.uleb128 0x1
 9720 1953 51       		.byte	0x51
 9721 1954 01       		.uleb128 0x1
 9722 1955 30       		.byte	0x30
 9723 1956 00       		.byte	0
 9724 1957 00       		.byte	0
 9725 1958 20       		.uleb128 0x20
 9726 1959 46040000 		.4byte	.LASF131
 9727 195d 01       		.byte	0x1
 9728 195e 490E     		.2byte	0xe49
 9729 1960 22040000 		.4byte	0x422
 9730 1964 00000000 		.4byte	.LFB32
 9731 1968 5C000000 		.4byte	.LFE32-.LFB32
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 274


 9732 196c 01       		.uleb128 0x1
 9733 196d 9C       		.byte	0x9c
 9734 196e 0F1A0000 		.4byte	0x1a0f
 9735 1972 15       		.uleb128 0x15
 9736 1973 667300   		.ascii	"fs\000"
 9737 1976 01       		.byte	0x1
 9738 1977 4A0E     		.2byte	0xe4a
 9739 1979 3C020000 		.4byte	0x23c
 9740 197d F41C0000 		.4byte	.LLST127
 9741 1981 18       		.uleb128 0x18
 9742 1982 40020000 		.4byte	.LASF94
 9743 1986 01       		.byte	0x1
 9744 1987 4B0E     		.2byte	0xe4b
 9745 1989 CD070000 		.4byte	0x7cd
 9746 198d 371D0000 		.4byte	.LLST128
 9747 1991 15       		.uleb128 0x15
 9748 1992 6F707400 		.ascii	"opt\000"
 9749 1996 01       		.byte	0x1
 9750 1997 4C0E     		.2byte	0xe4c
 9751 1999 A2000000 		.4byte	0xa2
 9752 199d 6E1D0000 		.4byte	.LLST129
 9753 19a1 16       		.uleb128 0x16
 9754 19a2 63667300 		.ascii	"cfs\000"
 9755 19a6 01       		.byte	0x1
 9756 19a7 4F0E     		.2byte	0xe4f
 9757 19a9 3C020000 		.4byte	0x23c
 9758 19ad 8F1D0000 		.4byte	.LLST130
 9759 19b1 16       		.uleb128 0x16
 9760 19b2 766F6C00 		.ascii	"vol\000"
 9761 19b6 01       		.byte	0x1
 9762 19b7 500E     		.2byte	0xe50
 9763 19b9 25000000 		.4byte	0x25
 9764 19bd A21D0000 		.4byte	.LLST131
 9765 19c1 16       		.uleb128 0x16
 9766 19c2 72657300 		.ascii	"res\000"
 9767 19c6 01       		.byte	0x1
 9768 19c7 510E     		.2byte	0xe51
 9769 19c9 22040000 		.4byte	0x422
 9770 19cd CB1D0000 		.4byte	.LLST132
 9771 19d1 1F       		.uleb128 0x1f
 9772 19d2 727000   		.ascii	"rp\000"
 9773 19d5 01       		.byte	0x1
 9774 19d6 520E     		.2byte	0xe52
 9775 19d8 CD070000 		.4byte	0x7cd
 9776 19dc 02       		.uleb128 0x2
 9777 19dd 91       		.byte	0x91
 9778 19de 74       		.sleb128 -12
 9779 19df 19       		.uleb128 0x19
 9780 19e0 14000000 		.4byte	.LVL570
 9781 19e4 51070000 		.4byte	0x751
 9782 19e8 F3190000 		.4byte	0x19f3
 9783 19ec 1A       		.uleb128 0x1a
 9784 19ed 01       		.uleb128 0x1
 9785 19ee 50       		.byte	0x50
 9786 19ef 02       		.uleb128 0x2
 9787 19f0 91       		.byte	0x91
 9788 19f1 74       		.sleb128 -12
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 275


 9789 19f2 00       		.byte	0
 9790 19f3 1B       		.uleb128 0x1b
 9791 19f4 4A000000 		.4byte	.LVL575
 9792 19f8 150B0000 		.4byte	0xb15
 9793 19fc 1A       		.uleb128 0x1a
 9794 19fd 01       		.uleb128 0x1
 9795 19fe 52       		.byte	0x52
 9796 19ff 01       		.uleb128 0x1
 9797 1a00 30       		.byte	0x30
 9798 1a01 1A       		.uleb128 0x1a
 9799 1a02 01       		.uleb128 0x1
 9800 1a03 51       		.byte	0x51
 9801 1a04 02       		.uleb128 0x2
 9802 1a05 91       		.byte	0x91
 9803 1a06 6C       		.sleb128 -20
 9804 1a07 1A       		.uleb128 0x1a
 9805 1a08 01       		.uleb128 0x1
 9806 1a09 50       		.byte	0x50
 9807 1a0a 02       		.uleb128 0x2
 9808 1a0b 7D       		.byte	0x7d
 9809 1a0c 00       		.sleb128 0
 9810 1a0d 00       		.byte	0
 9811 1a0e 00       		.byte	0
 9812 1a0f 20       		.uleb128 0x20
 9813 1a10 03020000 		.4byte	.LASF132
 9814 1a14 01       		.byte	0x1
 9815 1a15 850E     		.2byte	0xe85
 9816 1a17 22040000 		.4byte	0x422
 9817 1a1b 00000000 		.4byte	.LFB33
 9818 1a1f EA010000 		.4byte	.LFE33-.LFB33
 9819 1a23 01       		.uleb128 0x1
 9820 1a24 9C       		.byte	0x9c
 9821 1a25 721C0000 		.4byte	0x1c72
 9822 1a29 15       		.uleb128 0x15
 9823 1a2a 667000   		.ascii	"fp\000"
 9824 1a2d 01       		.byte	0x1
 9825 1a2e 860E     		.2byte	0xe86
 9826 1a30 721C0000 		.4byte	0x1c72
 9827 1a34 DE1D0000 		.4byte	.LLST133
 9828 1a38 18       		.uleb128 0x18
 9829 1a39 40020000 		.4byte	.LASF94
 9830 1a3d 01       		.byte	0x1
 9831 1a3e 870E     		.2byte	0xe87
 9832 1a40 CD070000 		.4byte	0x7cd
 9833 1a44 151E0000 		.4byte	.LLST134
 9834 1a48 18       		.uleb128 0x18
 9835 1a49 B5000000 		.4byte	.LASF104
 9836 1a4d 01       		.byte	0x1
 9837 1a4e 880E     		.2byte	0xe88
 9838 1a50 A2000000 		.4byte	0xa2
 9839 1a54 591E0000 		.4byte	.LLST135
 9840 1a58 16       		.uleb128 0x16
 9841 1a59 72657300 		.ascii	"res\000"
 9842 1a5d 01       		.byte	0x1
 9843 1a5e 8B0E     		.2byte	0xe8b
 9844 1a60 22040000 		.4byte	0x422
 9845 1a64 821E0000 		.4byte	.LLST136
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 276


 9846 1a68 1F       		.uleb128 0x1f
 9847 1a69 646A00   		.ascii	"dj\000"
 9848 1a6c 01       		.byte	0x1
 9849 1a6d 8C0E     		.2byte	0xe8c
 9850 1a6f 34030000 		.4byte	0x334
 9851 1a73 03       		.uleb128 0x3
 9852 1a74 91       		.byte	0x91
 9853 1a75 B47F     		.sleb128 -76
 9854 1a77 1F       		.uleb128 0x1f
 9855 1a78 667300   		.ascii	"fs\000"
 9856 1a7b 01       		.byte	0x1
 9857 1a7c 8D0E     		.2byte	0xe8d
 9858 1a7e 3C020000 		.4byte	0x23c
 9859 1a82 03       		.uleb128 0x3
 9860 1a83 91       		.byte	0x91
 9861 1a84 B07F     		.sleb128 -80
 9862 1a86 16       		.uleb128 0x16
 9863 1a87 636C00   		.ascii	"cl\000"
 9864 1a8a 01       		.byte	0x1
 9865 1a8b 8F0E     		.2byte	0xe8f
 9866 1a8d B8000000 		.4byte	0xb8
 9867 1a91 E21E0000 		.4byte	.LLST137
 9868 1a95 16       		.uleb128 0x16
 9869 1a96 62637300 		.ascii	"bcs\000"
 9870 1a9a 01       		.byte	0x1
 9871 1a9b 8F0E     		.2byte	0xe8f
 9872 1a9d B8000000 		.4byte	0xb8
 9873 1aa1 001F0000 		.4byte	.LLST138
 9874 1aa5 1D       		.uleb128 0x1d
 9875 1aa6 3B000000 		.4byte	.LASF89
 9876 1aaa 01       		.byte	0x1
 9877 1aab 8F0E     		.2byte	0xe8f
 9878 1aad B8000000 		.4byte	0xb8
 9879 1ab1 131F0000 		.4byte	.LLST139
 9880 1ab5 16       		.uleb128 0x16
 9881 1ab6 746D00   		.ascii	"tm\000"
 9882 1ab9 01       		.byte	0x1
 9883 1aba 8F0E     		.2byte	0xe8f
 9884 1abc B8000000 		.4byte	0xb8
 9885 1ac0 3C1F0000 		.4byte	.LLST140
 9886 1ac4 16       		.uleb128 0x16
 9887 1ac5 736300   		.ascii	"sc\000"
 9888 1ac8 01       		.byte	0x1
 9889 1ac9 900E     		.2byte	0xe90
 9890 1acb CE000000 		.4byte	0xce
 9891 1acf 5A1F0000 		.4byte	.LLST141
 9892 1ad3 16       		.uleb128 0x16
 9893 1ad4 6F667300 		.ascii	"ofs\000"
 9894 1ad8 01       		.byte	0x1
 9895 1ad9 910E     		.2byte	0xe91
 9896 1adb C3000000 		.4byte	0xc3
 9897 1adf 831F0000 		.4byte	.LLST142
 9898 1ae3 19       		.uleb128 0x19
 9899 1ae4 20000000 		.4byte	.LVL586
 9900 1ae8 150B0000 		.4byte	0xb15
 9901 1aec 051B0000 		.4byte	0x1b05
 9902 1af0 1A       		.uleb128 0x1a
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 277


 9903 1af1 01       		.uleb128 0x1
 9904 1af2 52       		.byte	0x52
 9905 1af3 02       		.uleb128 0x2
 9906 1af4 77       		.byte	0x77
 9907 1af5 00       		.sleb128 0
 9908 1af6 1A       		.uleb128 0x1a
 9909 1af7 01       		.uleb128 0x1
 9910 1af8 51       		.byte	0x51
 9911 1af9 03       		.uleb128 0x3
 9912 1afa 91       		.byte	0x91
 9913 1afb B07F     		.sleb128 -80
 9914 1afd 1A       		.uleb128 0x1a
 9915 1afe 01       		.uleb128 0x1
 9916 1aff 50       		.byte	0x50
 9917 1b00 03       		.uleb128 0x3
 9918 1b01 91       		.byte	0x91
 9919 1b02 AC7F     		.sleb128 -84
 9920 1b04 00       		.byte	0
 9921 1b05 19       		.uleb128 0x19
 9922 1b06 34000000 		.4byte	.LVL588
 9923 1b0a F6160000 		.4byte	0x16f6
 9924 1b0e 1A1B0000 		.4byte	0x1b1a
 9925 1b12 1A       		.uleb128 0x1a
 9926 1b13 01       		.uleb128 0x1
 9927 1b14 50       		.byte	0x50
 9928 1b15 03       		.uleb128 0x3
 9929 1b16 91       		.byte	0x91
 9930 1b17 B47F     		.sleb128 -76
 9931 1b19 00       		.byte	0
 9932 1b1a 19       		.uleb128 0x19
 9933 1b1b 54000000 		.4byte	.LVL590
 9934 1b1f B3170000 		.4byte	0x17b3
 9935 1b23 2F1B0000 		.4byte	0x1b2f
 9936 1b27 1A       		.uleb128 0x1a
 9937 1b28 01       		.uleb128 0x1
 9938 1b29 50       		.byte	0x50
 9939 1b2a 03       		.uleb128 0x3
 9940 1b2b 91       		.byte	0x91
 9941 1b2c B47F     		.sleb128 -76
 9942 1b2e 00       		.byte	0
 9943 1b2f 1C       		.uleb128 0x1c
 9944 1b30 82000000 		.4byte	.LVL596
 9945 1b34 F02C0000 		.4byte	0x2cf0
 9946 1b38 19       		.uleb128 0x19
 9947 1b39 8E000000 		.4byte	.LVL599
 9948 1b3d 21050000 		.4byte	0x521
 9949 1b41 4C1B0000 		.4byte	0x1b4c
 9950 1b45 1A       		.uleb128 0x1a
 9951 1b46 01       		.uleb128 0x1
 9952 1b47 51       		.byte	0x51
 9953 1b48 02       		.uleb128 0x2
 9954 1b49 75       		.byte	0x75
 9955 1b4a 00       		.sleb128 0
 9956 1b4b 00       		.byte	0
 9957 1b4c 19       		.uleb128 0x19
 9958 1b4d 98000000 		.4byte	.LVL600
 9959 1b51 21050000 		.4byte	0x521
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 278


 9960 1b55 601B0000 		.4byte	0x1b60
 9961 1b59 1A       		.uleb128 0x1a
 9962 1b5a 01       		.uleb128 0x1
 9963 1b5b 51       		.byte	0x51
 9964 1b5c 02       		.uleb128 0x2
 9965 1b5d 75       		.byte	0x75
 9966 1b5e 00       		.sleb128 0
 9967 1b5f 00       		.byte	0
 9968 1b60 19       		.uleb128 0x19
 9969 1b61 A6000000 		.4byte	.LVL602
 9970 1b65 E4050000 		.4byte	0x5e4
 9971 1b69 7A1B0000 		.4byte	0x1b7a
 9972 1b6d 1A       		.uleb128 0x1a
 9973 1b6e 01       		.uleb128 0x1
 9974 1b6f 51       		.byte	0x51
 9975 1b70 02       		.uleb128 0x2
 9976 1b71 78       		.byte	0x78
 9977 1b72 00       		.sleb128 0
 9978 1b73 1A       		.uleb128 0x1a
 9979 1b74 01       		.uleb128 0x1
 9980 1b75 50       		.byte	0x50
 9981 1b76 02       		.uleb128 0x2
 9982 1b77 75       		.byte	0x75
 9983 1b78 00       		.sleb128 0
 9984 1b79 00       		.byte	0
 9985 1b7a 19       		.uleb128 0x19
 9986 1b7b B8000000 		.4byte	.LVL605
 9987 1b7f 51060000 		.4byte	0x651
 9988 1b83 931B0000 		.4byte	0x1b93
 9989 1b87 1A       		.uleb128 0x1a
 9990 1b88 01       		.uleb128 0x1
 9991 1b89 52       		.byte	0x52
 9992 1b8a 01       		.uleb128 0x1
 9993 1b8b 30       		.byte	0x30
 9994 1b8c 1A       		.uleb128 0x1a
 9995 1b8d 01       		.uleb128 0x1
 9996 1b8e 50       		.byte	0x50
 9997 1b8f 02       		.uleb128 0x2
 9998 1b90 75       		.byte	0x75
 9999 1b91 00       		.sleb128 0
 10000 1b92 00       		.byte	0
 10001 1b93 19       		.uleb128 0x19
 10002 1b94 C2000000 		.4byte	.LVL606
 10003 1b98 21050000 		.4byte	0x521
 10004 1b9c A61B0000 		.4byte	0x1ba6
 10005 1ba0 1A       		.uleb128 0x1a
 10006 1ba1 01       		.uleb128 0x1
 10007 1ba2 51       		.byte	0x51
 10008 1ba3 01       		.uleb128 0x1
 10009 1ba4 30       		.byte	0x30
 10010 1ba5 00       		.byte	0
 10011 1ba6 19       		.uleb128 0x19
 10012 1ba7 DA000000 		.4byte	.LVL608
 10013 1bab 46110000 		.4byte	0x1146
 10014 1baf C61B0000 		.4byte	0x1bc6
 10015 1bb3 1A       		.uleb128 0x1a
 10016 1bb4 01       		.uleb128 0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 279


 10017 1bb5 52       		.byte	0x52
 10018 1bb6 01       		.uleb128 0x1
 10019 1bb7 30       		.byte	0x30
 10020 1bb8 1A       		.uleb128 0x1a
 10021 1bb9 01       		.uleb128 0x1
 10022 1bba 51       		.byte	0x51
 10023 1bbb 02       		.uleb128 0x2
 10024 1bbc 79       		.byte	0x79
 10025 1bbd 00       		.sleb128 0
 10026 1bbe 1A       		.uleb128 0x1a
 10027 1bbf 01       		.uleb128 0x1
 10028 1bc0 50       		.byte	0x50
 10029 1bc1 03       		.uleb128 0x3
 10030 1bc2 91       		.byte	0x91
 10031 1bc3 B47F     		.sleb128 -76
 10032 1bc5 00       		.byte	0
 10033 1bc6 19       		.uleb128 0x19
 10034 1bc7 E6000000 		.4byte	.LVL610
 10035 1bcb A0080000 		.4byte	0x8a0
 10036 1bcf DA1B0000 		.4byte	0x1bda
 10037 1bd3 1A       		.uleb128 0x1a
 10038 1bd4 01       		.uleb128 0x1
 10039 1bd5 51       		.byte	0x51
 10040 1bd6 02       		.uleb128 0x2
 10041 1bd7 75       		.byte	0x75
 10042 1bd8 00       		.sleb128 0
 10043 1bd9 00       		.byte	0
 10044 1bda 19       		.uleb128 0x19
 10045 1bdb 3C010000 		.4byte	.LVL617
 10046 1bdf E4050000 		.4byte	0x5e4
 10047 1be3 F41B0000 		.4byte	0x1bf4
 10048 1be7 1A       		.uleb128 0x1a
 10049 1be8 01       		.uleb128 0x1
 10050 1be9 51       		.byte	0x51
 10051 1bea 02       		.uleb128 0x2
 10052 1beb 78       		.byte	0x78
 10053 1bec 00       		.sleb128 0
 10054 1bed 1A       		.uleb128 0x1a
 10055 1bee 01       		.uleb128 0x1
 10056 1bef 50       		.byte	0x50
 10057 1bf0 02       		.uleb128 0x2
 10058 1bf1 7A       		.byte	0x7a
 10059 1bf2 00       		.sleb128 0
 10060 1bf3 00       		.byte	0
 10061 1bf4 19       		.uleb128 0x19
 10062 1bf5 48010000 		.4byte	.LVL618
 10063 1bf9 B0040000 		.4byte	0x4b0
 10064 1bfd 081C0000 		.4byte	0x1c08
 10065 1c01 1A       		.uleb128 0x1a
 10066 1c02 01       		.uleb128 0x1
 10067 1c03 50       		.byte	0x50
 10068 1c04 02       		.uleb128 0x2
 10069 1c05 78       		.byte	0x78
 10070 1c06 1C       		.sleb128 28
 10071 1c07 00       		.byte	0
 10072 1c08 19       		.uleb128 0x19
 10073 1c09 6E010000 		.4byte	.LVL619
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 280


 10074 1c0d 7B2C0000 		.4byte	0x2c7b
 10075 1c11 281C0000 		.4byte	0x1c28
 10076 1c15 1A       		.uleb128 0x1a
 10077 1c16 01       		.uleb128 0x1
 10078 1c17 52       		.byte	0x52
 10079 1c18 03       		.uleb128 0x3
 10080 1c19 0A       		.byte	0xa
 10081 1c1a 0002     		.2byte	0x200
 10082 1c1c 1A       		.uleb128 0x1a
 10083 1c1d 01       		.uleb128 0x1
 10084 1c1e 51       		.byte	0x51
 10085 1c1f 01       		.uleb128 0x1
 10086 1c20 30       		.byte	0x30
 10087 1c21 1A       		.uleb128 0x1a
 10088 1c22 01       		.uleb128 0x1
 10089 1c23 50       		.byte	0x50
 10090 1c24 02       		.uleb128 0x2
 10091 1c25 79       		.byte	0x79
 10092 1c26 00       		.sleb128 0
 10093 1c27 00       		.byte	0
 10094 1c28 19       		.uleb128 0x19
 10095 1c29 8E010000 		.4byte	.LVL622
 10096 1c2d AD0E0000 		.4byte	0xead
 10097 1c31 421C0000 		.4byte	0x1c42
 10098 1c35 1A       		.uleb128 0x1a
 10099 1c36 01       		.uleb128 0x1
 10100 1c37 51       		.byte	0x51
 10101 1c38 02       		.uleb128 0x2
 10102 1c39 75       		.byte	0x75
 10103 1c3a 00       		.sleb128 0
 10104 1c3b 1A       		.uleb128 0x1a
 10105 1c3c 01       		.uleb128 0x1
 10106 1c3d 50       		.byte	0x50
 10107 1c3e 02       		.uleb128 0x2
 10108 1c3f 76       		.byte	0x76
 10109 1c40 00       		.sleb128 0
 10110 1c41 00       		.byte	0
 10111 1c42 19       		.uleb128 0x19
 10112 1c43 BC010000 		.4byte	.LVL628
 10113 1c47 AA050000 		.4byte	0x5aa
 10114 1c4b 5C1C0000 		.4byte	0x1c5c
 10115 1c4f 1A       		.uleb128 0x1a
 10116 1c50 01       		.uleb128 0x1
 10117 1c51 51       		.byte	0x51
 10118 1c52 02       		.uleb128 0x2
 10119 1c53 75       		.byte	0x75
 10120 1c54 00       		.sleb128 0
 10121 1c55 1A       		.uleb128 0x1a
 10122 1c56 01       		.uleb128 0x1
 10123 1c57 50       		.byte	0x50
 10124 1c58 02       		.uleb128 0x2
 10125 1c59 77       		.byte	0x77
 10126 1c5a 00       		.sleb128 0
 10127 1c5b 00       		.byte	0
 10128 1c5c 1B       		.uleb128 0x1b
 10129 1c5d CE010000 		.4byte	.LVL630
 10130 1c61 232C0000 		.4byte	0x2c23
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 281


 10131 1c65 1A       		.uleb128 0x1a
 10132 1c66 01       		.uleb128 0x1
 10133 1c67 53       		.byte	0x53
 10134 1c68 01       		.uleb128 0x1
 10135 1c69 31       		.byte	0x31
 10136 1c6a 1A       		.uleb128 0x1a
 10137 1c6b 01       		.uleb128 0x1
 10138 1c6c 51       		.byte	0x51
 10139 1c6d 02       		.uleb128 0x2
 10140 1c6e 79       		.byte	0x79
 10141 1c6f 00       		.sleb128 0
 10142 1c70 00       		.byte	0
 10143 1c71 00       		.byte	0
 10144 1c72 06       		.uleb128 0x6
 10145 1c73 04       		.byte	0x4
 10146 1c74 C9020000 		.4byte	0x2c9
 10147 1c78 20       		.uleb128 0x20
 10148 1c79 A2020000 		.4byte	.LASF133
 10149 1c7d 01       		.byte	0x1
 10150 1c7e 4A0F     		.2byte	0xf4a
 10151 1c80 22040000 		.4byte	0x422
 10152 1c84 00000000 		.4byte	.LFB34
 10153 1c88 76010000 		.4byte	.LFE34-.LFB34
 10154 1c8c 01       		.uleb128 0x1
 10155 1c8d 9C       		.byte	0x9c
 10156 1c8e 2A1E0000 		.4byte	0x1e2a
 10157 1c92 15       		.uleb128 0x15
 10158 1c93 667000   		.ascii	"fp\000"
 10159 1c96 01       		.byte	0x1
 10160 1c97 4B0F     		.2byte	0xf4b
 10161 1c99 721C0000 		.4byte	0x1c72
 10162 1c9d 961F0000 		.4byte	.LLST143
 10163 1ca1 18       		.uleb128 0x18
 10164 1ca2 DE010000 		.4byte	.LASF134
 10165 1ca6 01       		.byte	0x1
 10166 1ca7 4C0F     		.2byte	0xf4c
 10167 1ca9 7D000000 		.4byte	0x7d
 10168 1cad B41F0000 		.4byte	.LLST144
 10169 1cb1 15       		.uleb128 0x15
 10170 1cb2 62747200 		.ascii	"btr\000"
 10171 1cb6 01       		.byte	0x1
 10172 1cb7 4D0F     		.2byte	0xf4d
 10173 1cb9 97000000 		.4byte	0x97
 10174 1cbd F91F0000 		.4byte	.LLST145
 10175 1cc1 15       		.uleb128 0x15
 10176 1cc2 627200   		.ascii	"br\000"
 10177 1cc5 01       		.byte	0x1
 10178 1cc6 4E0F     		.2byte	0xf4e
 10179 1cc8 2A1E0000 		.4byte	0x1e2a
 10180 1ccc 2D200000 		.4byte	.LLST146
 10181 1cd0 16       		.uleb128 0x16
 10182 1cd1 72657300 		.ascii	"res\000"
 10183 1cd5 01       		.byte	0x1
 10184 1cd6 510F     		.2byte	0xf51
 10185 1cd8 22040000 		.4byte	0x422
 10186 1cdc 4B200000 		.4byte	.LLST147
 10187 1ce0 1F       		.uleb128 0x1f
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 282


 10188 1ce1 667300   		.ascii	"fs\000"
 10189 1ce4 01       		.byte	0x1
 10190 1ce5 520F     		.2byte	0xf52
 10191 1ce7 3C020000 		.4byte	0x23c
 10192 1ceb 02       		.uleb128 0x2
 10193 1cec 91       		.byte	0x91
 10194 1ced 54       		.sleb128 -44
 10195 1cee 1D       		.uleb128 0x1d
 10196 1cef 3B000000 		.4byte	.LASF89
 10197 1cf3 01       		.byte	0x1
 10198 1cf4 530F     		.2byte	0xf53
 10199 1cf6 B8000000 		.4byte	0xb8
 10200 1cfa 81200000 		.4byte	.LLST148
 10201 1cfe 1D       		.uleb128 0x1d
 10202 1cff CD020000 		.4byte	.LASF45
 10203 1d03 01       		.byte	0x1
 10204 1d04 540F     		.2byte	0xf54
 10205 1d06 CE000000 		.4byte	0xce
 10206 1d0a B5200000 		.4byte	.LLST149
 10207 1d0e 1D       		.uleb128 0x1d
 10208 1d0f E8030000 		.4byte	.LASF135
 10209 1d13 01       		.byte	0x1
 10210 1d14 550F     		.2byte	0xf55
 10211 1d16 C3000000 		.4byte	0xc3
 10212 1d1a E9200000 		.4byte	.LLST150
 10213 1d1e 1D       		.uleb128 0x1d
 10214 1d1f 48050000 		.4byte	.LASF136
 10215 1d23 01       		.byte	0x1
 10216 1d24 560F     		.2byte	0xf56
 10217 1d26 97000000 		.4byte	0x97
 10218 1d2a 0D210000 		.4byte	.LLST151
 10219 1d2e 16       		.uleb128 0x16
 10220 1d2f 636300   		.ascii	"cc\000"
 10221 1d32 01       		.byte	0x1
 10222 1d33 560F     		.2byte	0xf56
 10223 1d35 97000000 		.4byte	0x97
 10224 1d39 2B210000 		.4byte	.LLST152
 10225 1d3d 1D       		.uleb128 0x1d
 10226 1d3e C7020000 		.4byte	.LASF137
 10227 1d42 01       		.byte	0x1
 10228 1d43 560F     		.2byte	0xf56
 10229 1d45 97000000 		.4byte	0x97
 10230 1d49 58210000 		.4byte	.LLST153
 10231 1d4d 1D       		.uleb128 0x1d
 10232 1d4e 1B050000 		.4byte	.LASF138
 10233 1d52 01       		.byte	0x1
 10234 1d53 570F     		.2byte	0xf57
 10235 1d55 C3020000 		.4byte	0x2c3
 10236 1d59 7D210000 		.4byte	.LLST154
 10237 1d5d 19       		.uleb128 0x19
 10238 1d5e 1A000000 		.4byte	.LVL641
 10239 1d62 D8070000 		.4byte	0x7d8
 10240 1d66 771D0000 		.4byte	0x1d77
 10241 1d6a 1A       		.uleb128 0x1a
 10242 1d6b 01       		.uleb128 0x1
 10243 1d6c 51       		.byte	0x51
 10244 1d6d 02       		.uleb128 0x2
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 283


 10245 1d6e 91       		.byte	0x91
 10246 1d6f 54       		.sleb128 -44
 10247 1d70 1A       		.uleb128 0x1a
 10248 1d71 01       		.uleb128 0x1
 10249 1d72 50       		.byte	0x50
 10250 1d73 02       		.uleb128 0x2
 10251 1d74 74       		.byte	0x74
 10252 1d75 00       		.sleb128 0
 10253 1d76 00       		.byte	0
 10254 1d77 19       		.uleb128 0x19
 10255 1d78 68000000 		.4byte	.LVL652
 10256 1d7c AD0E0000 		.4byte	0xead
 10257 1d80 8C1D0000 		.4byte	0x1d8c
 10258 1d84 1A       		.uleb128 0x1a
 10259 1d85 01       		.uleb128 0x1
 10260 1d86 50       		.byte	0x50
 10261 1d87 03       		.uleb128 0x3
 10262 1d88 91       		.byte	0x91
 10263 1d89 4C       		.sleb128 -52
 10264 1d8a 06       		.byte	0x6
 10265 1d8b 00       		.byte	0
 10266 1d8c 19       		.uleb128 0x19
 10267 1d8d 90000000 		.4byte	.LVL658
 10268 1d91 AA050000 		.4byte	0x5aa
 10269 1d95 A01D0000 		.4byte	0x1da0
 10270 1d99 1A       		.uleb128 0x1a
 10271 1d9a 01       		.uleb128 0x1
 10272 1d9b 50       		.byte	0x50
 10273 1d9c 02       		.uleb128 0x2
 10274 1d9d 7B       		.byte	0x7b
 10275 1d9e 00       		.sleb128 0
 10276 1d9f 00       		.byte	0
 10277 1da0 19       		.uleb128 0x19
 10278 1da1 BE000000 		.4byte	.LVL664
 10279 1da5 232C0000 		.4byte	0x2c23
 10280 1da9 C01D0000 		.4byte	0x1dc0
 10281 1dad 1A       		.uleb128 0x1a
 10282 1dae 01       		.uleb128 0x1
 10283 1daf 53       		.byte	0x53
 10284 1db0 02       		.uleb128 0x2
 10285 1db1 75       		.byte	0x75
 10286 1db2 00       		.sleb128 0
 10287 1db3 1A       		.uleb128 0x1a
 10288 1db4 01       		.uleb128 0x1
 10289 1db5 52       		.byte	0x52
 10290 1db6 02       		.uleb128 0x2
 10291 1db7 7A       		.byte	0x7a
 10292 1db8 00       		.sleb128 0
 10293 1db9 1A       		.uleb128 0x1a
 10294 1dba 01       		.uleb128 0x1
 10295 1dbb 51       		.byte	0x51
 10296 1dbc 02       		.uleb128 0x2
 10297 1dbd 78       		.byte	0x78
 10298 1dbe 00       		.sleb128 0
 10299 1dbf 00       		.byte	0
 10300 1dc0 19       		.uleb128 0x19
 10301 1dc1 E8000000 		.4byte	.LVL665
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 284


 10302 1dc5 FC2C0000 		.4byte	0x2cfc
 10303 1dc9 DB1D0000 		.4byte	0x1ddb
 10304 1dcd 1A       		.uleb128 0x1a
 10305 1dce 01       		.uleb128 0x1
 10306 1dcf 52       		.byte	0x52
 10307 1dd0 03       		.uleb128 0x3
 10308 1dd1 0A       		.byte	0xa
 10309 1dd2 0002     		.2byte	0x200
 10310 1dd4 1A       		.uleb128 0x1a
 10311 1dd5 01       		.uleb128 0x1
 10312 1dd6 51       		.byte	0x51
 10313 1dd7 02       		.uleb128 0x2
 10314 1dd8 74       		.byte	0x74
 10315 1dd9 28       		.sleb128 40
 10316 1dda 00       		.byte	0
 10317 1ddb 19       		.uleb128 0x19
 10318 1ddc 08010000 		.4byte	.LVL668
 10319 1de0 FF2B0000 		.4byte	0x2bff
 10320 1de4 F41D0000 		.4byte	0x1df4
 10321 1de8 1A       		.uleb128 0x1a
 10322 1de9 01       		.uleb128 0x1
 10323 1dea 53       		.byte	0x53
 10324 1deb 01       		.uleb128 0x1
 10325 1dec 31       		.byte	0x31
 10326 1ded 1A       		.uleb128 0x1a
 10327 1dee 01       		.uleb128 0x1
 10328 1def 51       		.byte	0x51
 10329 1df0 02       		.uleb128 0x2
 10330 1df1 74       		.byte	0x74
 10331 1df2 28       		.sleb128 40
 10332 1df3 00       		.byte	0
 10333 1df4 19       		.uleb128 0x19
 10334 1df5 2A010000 		.4byte	.LVL669
 10335 1df9 232C0000 		.4byte	0x2c23
 10336 1dfd 131E0000 		.4byte	0x1e13
 10337 1e01 1A       		.uleb128 0x1a
 10338 1e02 01       		.uleb128 0x1
 10339 1e03 53       		.byte	0x53
 10340 1e04 01       		.uleb128 0x1
 10341 1e05 31       		.byte	0x31
 10342 1e06 1A       		.uleb128 0x1a
 10343 1e07 01       		.uleb128 0x1
 10344 1e08 52       		.byte	0x52
 10345 1e09 02       		.uleb128 0x2
 10346 1e0a 7A       		.byte	0x7a
 10347 1e0b 00       		.sleb128 0
 10348 1e0c 1A       		.uleb128 0x1a
 10349 1e0d 01       		.uleb128 0x1
 10350 1e0e 51       		.byte	0x51
 10351 1e0f 02       		.uleb128 0x2
 10352 1e10 74       		.byte	0x74
 10353 1e11 28       		.sleb128 40
 10354 1e12 00       		.byte	0
 10355 1e13 1B       		.uleb128 0x1b
 10356 1e14 54010000 		.4byte	.LVL673
 10357 1e18 FC2C0000 		.4byte	0x2cfc
 10358 1e1c 1A       		.uleb128 0x1a
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 285


 10359 1e1d 01       		.uleb128 0x1
 10360 1e1e 52       		.byte	0x52
 10361 1e1f 02       		.uleb128 0x2
 10362 1e20 75       		.byte	0x75
 10363 1e21 00       		.sleb128 0
 10364 1e22 1A       		.uleb128 0x1a
 10365 1e23 01       		.uleb128 0x1
 10366 1e24 50       		.byte	0x50
 10367 1e25 02       		.uleb128 0x2
 10368 1e26 78       		.byte	0x78
 10369 1e27 00       		.sleb128 0
 10370 1e28 00       		.byte	0
 10371 1e29 00       		.byte	0
 10372 1e2a 06       		.uleb128 0x6
 10373 1e2b 04       		.byte	0x4
 10374 1e2c 97000000 		.4byte	0x97
 10375 1e30 20       		.uleb128 0x20
 10376 1e31 BA030000 		.4byte	.LASF139
 10377 1e35 01       		.byte	0x1
 10378 1e36 AE0F     		.2byte	0xfae
 10379 1e38 22040000 		.4byte	0x422
 10380 1e3c 00000000 		.4byte	.LFB35
 10381 1e40 AE010000 		.4byte	.LFE35-.LFB35
 10382 1e44 01       		.uleb128 0x1
 10383 1e45 9C       		.byte	0x9c
 10384 1e46 EC1F0000 		.4byte	0x1fec
 10385 1e4a 15       		.uleb128 0x15
 10386 1e4b 667000   		.ascii	"fp\000"
 10387 1e4e 01       		.byte	0x1
 10388 1e4f AF0F     		.2byte	0xfaf
 10389 1e51 721C0000 		.4byte	0x1c72
 10390 1e55 9B210000 		.4byte	.LLST155
 10391 1e59 18       		.uleb128 0x18
 10392 1e5a DE010000 		.4byte	.LASF134
 10393 1e5e 01       		.byte	0x1
 10394 1e5f B00F     		.2byte	0xfb0
 10395 1e61 EC1F0000 		.4byte	0x1fec
 10396 1e65 B9210000 		.4byte	.LLST156
 10397 1e69 15       		.uleb128 0x15
 10398 1e6a 62747700 		.ascii	"btw\000"
 10399 1e6e 01       		.byte	0x1
 10400 1e6f B10F     		.2byte	0xfb1
 10401 1e71 97000000 		.4byte	0x97
 10402 1e75 FE210000 		.4byte	.LLST157
 10403 1e79 15       		.uleb128 0x15
 10404 1e7a 627700   		.ascii	"bw\000"
 10405 1e7d 01       		.byte	0x1
 10406 1e7e B20F     		.2byte	0xfb2
 10407 1e80 2A1E0000 		.4byte	0x1e2a
 10408 1e84 1C220000 		.4byte	.LLST158
 10409 1e88 16       		.uleb128 0x16
 10410 1e89 72657300 		.ascii	"res\000"
 10411 1e8d 01       		.byte	0x1
 10412 1e8e B50F     		.2byte	0xfb5
 10413 1e90 22040000 		.4byte	0x422
 10414 1e94 3A220000 		.4byte	.LLST159
 10415 1e98 1F       		.uleb128 0x1f
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 286


 10416 1e99 667300   		.ascii	"fs\000"
 10417 1e9c 01       		.byte	0x1
 10418 1e9d B60F     		.2byte	0xfb6
 10419 1e9f 3C020000 		.4byte	0x23c
 10420 1ea3 02       		.uleb128 0x2
 10421 1ea4 91       		.byte	0x91
 10422 1ea5 54       		.sleb128 -44
 10423 1ea6 1D       		.uleb128 0x1d
 10424 1ea7 3B000000 		.4byte	.LASF89
 10425 1eab 01       		.byte	0x1
 10426 1eac B70F     		.2byte	0xfb7
 10427 1eae B8000000 		.4byte	0xb8
 10428 1eb2 70220000 		.4byte	.LLST160
 10429 1eb6 1D       		.uleb128 0x1d
 10430 1eb7 CD020000 		.4byte	.LASF45
 10431 1ebb 01       		.byte	0x1
 10432 1ebc B80F     		.2byte	0xfb8
 10433 1ebe CE000000 		.4byte	0xce
 10434 1ec2 BB220000 		.4byte	.LLST161
 10435 1ec6 1D       		.uleb128 0x1d
 10436 1ec7 8F040000 		.4byte	.LASF140
 10437 1ecb 01       		.byte	0x1
 10438 1ecc B90F     		.2byte	0xfb9
 10439 1ece 97000000 		.4byte	0x97
 10440 1ed2 EF220000 		.4byte	.LLST162
 10441 1ed6 16       		.uleb128 0x16
 10442 1ed7 636300   		.ascii	"cc\000"
 10443 1eda 01       		.byte	0x1
 10444 1edb B90F     		.2byte	0xfb9
 10445 1edd 97000000 		.4byte	0x97
 10446 1ee1 0D230000 		.4byte	.LLST163
 10447 1ee5 1D       		.uleb128 0x1d
 10448 1ee6 C7020000 		.4byte	.LASF137
 10449 1eea 01       		.byte	0x1
 10450 1eeb B90F     		.2byte	0xfb9
 10451 1eed 97000000 		.4byte	0x97
 10452 1ef1 3A230000 		.4byte	.LLST164
 10453 1ef5 1D       		.uleb128 0x1d
 10454 1ef6 92000000 		.4byte	.LASF141
 10455 1efa 01       		.byte	0x1
 10456 1efb BA0F     		.2byte	0xfba
 10457 1efd A5040000 		.4byte	0x4a5
 10458 1f01 5F230000 		.4byte	.LLST165
 10459 1f05 19       		.uleb128 0x19
 10460 1f06 1A000000 		.4byte	.LVL684
 10461 1f0a D8070000 		.4byte	0x7d8
 10462 1f0e 1F1F0000 		.4byte	0x1f1f
 10463 1f12 1A       		.uleb128 0x1a
 10464 1f13 01       		.uleb128 0x1
 10465 1f14 51       		.byte	0x51
 10466 1f15 02       		.uleb128 0x2
 10467 1f16 91       		.byte	0x91
 10468 1f17 54       		.sleb128 -44
 10469 1f18 1A       		.uleb128 0x1a
 10470 1f19 01       		.uleb128 0x1
 10471 1f1a 50       		.byte	0x50
 10472 1f1b 02       		.uleb128 0x2
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 287


 10473 1f1c 74       		.byte	0x74
 10474 1f1d 00       		.sleb128 0
 10475 1f1e 00       		.byte	0
 10476 1f1f 19       		.uleb128 0x19
 10477 1f20 66000000 		.4byte	.LVL694
 10478 1f24 46100000 		.4byte	0x1046
 10479 1f28 391F0000 		.4byte	0x1f39
 10480 1f2c 1A       		.uleb128 0x1a
 10481 1f2d 01       		.uleb128 0x1
 10482 1f2e 51       		.byte	0x51
 10483 1f2f 01       		.uleb128 0x1
 10484 1f30 30       		.byte	0x30
 10485 1f31 1A       		.uleb128 0x1a
 10486 1f32 01       		.uleb128 0x1
 10487 1f33 50       		.byte	0x50
 10488 1f34 03       		.uleb128 0x3
 10489 1f35 91       		.byte	0x91
 10490 1f36 4C       		.sleb128 -52
 10491 1f37 06       		.byte	0x6
 10492 1f38 00       		.byte	0
 10493 1f39 19       		.uleb128 0x19
 10494 1f3a 70000000 		.4byte	.LVL696
 10495 1f3e 46100000 		.4byte	0x1046
 10496 1f42 4E1F0000 		.4byte	0x1f4e
 10497 1f46 1A       		.uleb128 0x1a
 10498 1f47 01       		.uleb128 0x1
 10499 1f48 50       		.byte	0x50
 10500 1f49 03       		.uleb128 0x3
 10501 1f4a 91       		.byte	0x91
 10502 1f4b 4C       		.sleb128 -52
 10503 1f4c 06       		.byte	0x6
 10504 1f4d 00       		.byte	0
 10505 1f4e 19       		.uleb128 0x19
 10506 1f4f B0000000 		.4byte	.LVL702
 10507 1f53 FF2B0000 		.4byte	0x2bff
 10508 1f57 671F0000 		.4byte	0x1f67
 10509 1f5b 1A       		.uleb128 0x1a
 10510 1f5c 01       		.uleb128 0x1
 10511 1f5d 53       		.byte	0x53
 10512 1f5e 01       		.uleb128 0x1
 10513 1f5f 31       		.byte	0x31
 10514 1f60 1A       		.uleb128 0x1a
 10515 1f61 01       		.uleb128 0x1
 10516 1f62 51       		.byte	0x51
 10517 1f63 02       		.uleb128 0x2
 10518 1f64 74       		.byte	0x74
 10519 1f65 28       		.sleb128 40
 10520 1f66 00       		.byte	0
 10521 1f67 19       		.uleb128 0x19
 10522 1f68 CE000000 		.4byte	.LVL703
 10523 1f6c AA050000 		.4byte	0x5aa
 10524 1f70 7B1F0000 		.4byte	0x1f7b
 10525 1f74 1A       		.uleb128 0x1a
 10526 1f75 01       		.uleb128 0x1
 10527 1f76 50       		.byte	0x50
 10528 1f77 02       		.uleb128 0x2
 10529 1f78 7B       		.byte	0x7b
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 288


 10530 1f79 00       		.sleb128 0
 10531 1f7a 00       		.byte	0
 10532 1f7b 19       		.uleb128 0x19
 10533 1f7c FC000000 		.4byte	.LVL709
 10534 1f80 FF2B0000 		.4byte	0x2bff
 10535 1f84 9B1F0000 		.4byte	0x1f9b
 10536 1f88 1A       		.uleb128 0x1a
 10537 1f89 01       		.uleb128 0x1
 10538 1f8a 53       		.byte	0x53
 10539 1f8b 02       		.uleb128 0x2
 10540 1f8c 75       		.byte	0x75
 10541 1f8d 00       		.sleb128 0
 10542 1f8e 1A       		.uleb128 0x1a
 10543 1f8f 01       		.uleb128 0x1
 10544 1f90 52       		.byte	0x52
 10545 1f91 02       		.uleb128 0x2
 10546 1f92 7A       		.byte	0x7a
 10547 1f93 00       		.sleb128 0
 10548 1f94 1A       		.uleb128 0x1a
 10549 1f95 01       		.uleb128 0x1
 10550 1f96 51       		.byte	0x51
 10551 1f97 02       		.uleb128 0x2
 10552 1f98 78       		.byte	0x78
 10553 1f99 00       		.sleb128 0
 10554 1f9a 00       		.byte	0
 10555 1f9b 19       		.uleb128 0x19
 10556 1f9c 1E010000 		.4byte	.LVL710
 10557 1fa0 FC2C0000 		.4byte	0x2cfc
 10558 1fa4 B61F0000 		.4byte	0x1fb6
 10559 1fa8 1A       		.uleb128 0x1a
 10560 1fa9 01       		.uleb128 0x1
 10561 1faa 52       		.byte	0x52
 10562 1fab 03       		.uleb128 0x3
 10563 1fac 0A       		.byte	0xa
 10564 1fad 0002     		.2byte	0x200
 10565 1faf 1A       		.uleb128 0x1a
 10566 1fb0 01       		.uleb128 0x1
 10567 1fb1 50       		.byte	0x50
 10568 1fb2 02       		.uleb128 0x2
 10569 1fb3 74       		.byte	0x74
 10570 1fb4 28       		.sleb128 40
 10571 1fb5 00       		.byte	0
 10572 1fb6 19       		.uleb128 0x19
 10573 1fb7 48010000 		.4byte	.LVL713
 10574 1fbb 232C0000 		.4byte	0x2c23
 10575 1fbf D51F0000 		.4byte	0x1fd5
 10576 1fc3 1A       		.uleb128 0x1a
 10577 1fc4 01       		.uleb128 0x1
 10578 1fc5 53       		.byte	0x53
 10579 1fc6 01       		.uleb128 0x1
 10580 1fc7 31       		.byte	0x31
 10581 1fc8 1A       		.uleb128 0x1a
 10582 1fc9 01       		.uleb128 0x1
 10583 1fca 52       		.byte	0x52
 10584 1fcb 02       		.uleb128 0x2
 10585 1fcc 7A       		.byte	0x7a
 10586 1fcd 00       		.sleb128 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 289


 10587 1fce 1A       		.uleb128 0x1a
 10588 1fcf 01       		.uleb128 0x1
 10589 1fd0 51       		.byte	0x51
 10590 1fd1 02       		.uleb128 0x2
 10591 1fd2 74       		.byte	0x74
 10592 1fd3 28       		.sleb128 40
 10593 1fd4 00       		.byte	0
 10594 1fd5 1B       		.uleb128 0x1b
 10595 1fd6 72010000 		.4byte	.LVL717
 10596 1fda FC2C0000 		.4byte	0x2cfc
 10597 1fde 1A       		.uleb128 0x1a
 10598 1fdf 01       		.uleb128 0x1
 10599 1fe0 52       		.byte	0x52
 10600 1fe1 02       		.uleb128 0x2
 10601 1fe2 75       		.byte	0x75
 10602 1fe3 00       		.sleb128 0
 10603 1fe4 1A       		.uleb128 0x1a
 10604 1fe5 01       		.uleb128 0x1
 10605 1fe6 51       		.byte	0x51
 10606 1fe7 02       		.uleb128 0x2
 10607 1fe8 78       		.byte	0x78
 10608 1fe9 00       		.sleb128 0
 10609 1fea 00       		.byte	0
 10610 1feb 00       		.byte	0
 10611 1fec 06       		.uleb128 0x6
 10612 1fed 04       		.byte	0x4
 10613 1fee F21F0000 		.4byte	0x1ff2
 10614 1ff2 21       		.uleb128 0x21
 10615 1ff3 20       		.uleb128 0x20
 10616 1ff4 05050000 		.4byte	.LASF142
 10617 1ff8 01       		.byte	0x1
 10618 1ff9 2710     		.2byte	0x1027
 10619 1ffb 22040000 		.4byte	0x422
 10620 1fff 00000000 		.4byte	.LFB36
 10621 2003 9C000000 		.4byte	.LFE36-.LFB36
 10622 2007 01       		.uleb128 0x1
 10623 2008 9C       		.byte	0x9c
 10624 2009 03210000 		.4byte	0x2103
 10625 200d 15       		.uleb128 0x15
 10626 200e 667000   		.ascii	"fp\000"
 10627 2011 01       		.byte	0x1
 10628 2012 2810     		.2byte	0x1028
 10629 2014 721C0000 		.4byte	0x1c72
 10630 2018 7D230000 		.4byte	.LLST166
 10631 201c 16       		.uleb128 0x16
 10632 201d 72657300 		.ascii	"res\000"
 10633 2021 01       		.byte	0x1
 10634 2022 2B10     		.2byte	0x102b
 10635 2024 22040000 		.4byte	0x422
 10636 2028 9B230000 		.4byte	.LLST167
 10637 202c 1F       		.uleb128 0x1f
 10638 202d 667300   		.ascii	"fs\000"
 10639 2030 01       		.byte	0x1
 10640 2031 2C10     		.2byte	0x102c
 10641 2033 3C020000 		.4byte	0x23c
 10642 2037 02       		.uleb128 0x2
 10643 2038 91       		.byte	0x91
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 290


 10644 2039 6C       		.sleb128 -20
 10645 203a 16       		.uleb128 0x16
 10646 203b 746D00   		.ascii	"tm\000"
 10647 203e 01       		.byte	0x1
 10648 203f 2D10     		.2byte	0x102d
 10649 2041 B8000000 		.4byte	0xb8
 10650 2045 C4230000 		.4byte	.LLST168
 10651 2049 16       		.uleb128 0x16
 10652 204a 64697200 		.ascii	"dir\000"
 10653 204e 01       		.byte	0x1
 10654 204f 2E10     		.2byte	0x102e
 10655 2051 C3020000 		.4byte	0x2c3
 10656 2055 E2230000 		.4byte	.LLST169
 10657 2059 19       		.uleb128 0x19
 10658 205a 0C000000 		.4byte	.LVL724
 10659 205e D8070000 		.4byte	0x7d8
 10660 2062 73200000 		.4byte	0x2073
 10661 2066 1A       		.uleb128 0x1a
 10662 2067 01       		.uleb128 0x1
 10663 2068 51       		.byte	0x51
 10664 2069 02       		.uleb128 0x2
 10665 206a 91       		.byte	0x91
 10666 206b 6C       		.sleb128 -20
 10667 206c 1A       		.uleb128 0x1a
 10668 206d 01       		.uleb128 0x1
 10669 206e 50       		.byte	0x50
 10670 206f 02       		.uleb128 0x2
 10671 2070 74       		.byte	0x74
 10672 2071 00       		.sleb128 0
 10673 2072 00       		.byte	0
 10674 2073 19       		.uleb128 0x19
 10675 2074 30000000 		.4byte	.LVL726
 10676 2078 FF2B0000 		.4byte	0x2bff
 10677 207c 8C200000 		.4byte	0x208c
 10678 2080 1A       		.uleb128 0x1a
 10679 2081 01       		.uleb128 0x1
 10680 2082 53       		.byte	0x53
 10681 2083 01       		.uleb128 0x1
 10682 2084 31       		.byte	0x31
 10683 2085 1A       		.uleb128 0x1a
 10684 2086 01       		.uleb128 0x1
 10685 2087 51       		.byte	0x51
 10686 2088 02       		.uleb128 0x2
 10687 2089 74       		.byte	0x74
 10688 208a 28       		.sleb128 40
 10689 208b 00       		.byte	0
 10690 208c 1C       		.uleb128 0x1c
 10691 208d 3E000000 		.4byte	.LVL727
 10692 2091 F02C0000 		.4byte	0x2cf0
 10693 2095 1C       		.uleb128 0x1c
 10694 2096 48000000 		.4byte	.LVL730
 10695 209a A0080000 		.4byte	0x8a0
 10696 209e 19       		.uleb128 0x19
 10697 209f 60000000 		.4byte	.LVL733
 10698 20a3 51060000 		.4byte	0x651
 10699 20a7 B2200000 		.4byte	0x20b2
 10700 20ab 1A       		.uleb128 0x1a
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 291


 10701 20ac 01       		.uleb128 0x1
 10702 20ad 51       		.byte	0x51
 10703 20ae 02       		.uleb128 0x2
 10704 20af 75       		.byte	0x75
 10705 20b0 00       		.sleb128 0
 10706 20b1 00       		.byte	0
 10707 20b2 19       		.uleb128 0x19
 10708 20b3 6A000000 		.4byte	.LVL734
 10709 20b7 21050000 		.4byte	0x521
 10710 20bb C6200000 		.4byte	0x20c6
 10711 20bf 1A       		.uleb128 0x1a
 10712 20c0 01       		.uleb128 0x1
 10713 20c1 50       		.byte	0x50
 10714 20c2 02       		.uleb128 0x2
 10715 20c3 75       		.byte	0x75
 10716 20c4 1C       		.sleb128 28
 10717 20c5 00       		.byte	0
 10718 20c6 19       		.uleb128 0x19
 10719 20c7 74000000 		.4byte	.LVL735
 10720 20cb 21050000 		.4byte	0x521
 10721 20cf E0200000 		.4byte	0x20e0
 10722 20d3 1A       		.uleb128 0x1a
 10723 20d4 01       		.uleb128 0x1
 10724 20d5 51       		.byte	0x51
 10725 20d6 02       		.uleb128 0x2
 10726 20d7 76       		.byte	0x76
 10727 20d8 00       		.sleb128 0
 10728 20d9 1A       		.uleb128 0x1a
 10729 20da 01       		.uleb128 0x1
 10730 20db 50       		.byte	0x50
 10731 20dc 02       		.uleb128 0x2
 10732 20dd 75       		.byte	0x75
 10733 20de 16       		.sleb128 22
 10734 20df 00       		.byte	0
 10735 20e0 19       		.uleb128 0x19
 10736 20e1 7E000000 		.4byte	.LVL736
 10737 20e5 EA040000 		.4byte	0x4ea
 10738 20e9 F9200000 		.4byte	0x20f9
 10739 20ed 1A       		.uleb128 0x1a
 10740 20ee 01       		.uleb128 0x1
 10741 20ef 51       		.byte	0x51
 10742 20f0 01       		.uleb128 0x1
 10743 20f1 30       		.byte	0x30
 10744 20f2 1A       		.uleb128 0x1a
 10745 20f3 01       		.uleb128 0x1
 10746 20f4 50       		.byte	0x50
 10747 20f5 02       		.uleb128 0x2
 10748 20f6 75       		.byte	0x75
 10749 20f7 12       		.sleb128 18
 10750 20f8 00       		.byte	0
 10751 20f9 1C       		.uleb128 0x1c
 10752 20fa 88000000 		.4byte	.LVL737
 10753 20fe 3C180000 		.4byte	0x183c
 10754 2102 00       		.byte	0
 10755 2103 20       		.uleb128 0x20
 10756 2104 38020000 		.4byte	.LASF143
 10757 2108 01       		.byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 292


 10758 2109 7810     		.2byte	0x1078
 10759 210b 22040000 		.4byte	0x422
 10760 210f 00000000 		.4byte	.LFB37
 10761 2113 24000000 		.4byte	.LFE37-.LFB37
 10762 2117 01       		.uleb128 0x1
 10763 2118 9C       		.byte	0x9c
 10764 2119 75210000 		.4byte	0x2175
 10765 211d 15       		.uleb128 0x15
 10766 211e 667000   		.ascii	"fp\000"
 10767 2121 01       		.byte	0x1
 10768 2122 7910     		.2byte	0x1079
 10769 2124 721C0000 		.4byte	0x1c72
 10770 2128 F5230000 		.4byte	.LLST170
 10771 212c 16       		.uleb128 0x16
 10772 212d 72657300 		.ascii	"res\000"
 10773 2131 01       		.byte	0x1
 10774 2132 7C10     		.2byte	0x107c
 10775 2134 22040000 		.4byte	0x422
 10776 2138 13240000 		.4byte	.LLST171
 10777 213c 1F       		.uleb128 0x1f
 10778 213d 667300   		.ascii	"fs\000"
 10779 2140 01       		.byte	0x1
 10780 2141 7D10     		.2byte	0x107d
 10781 2143 3C020000 		.4byte	0x23c
 10782 2147 02       		.uleb128 0x2
 10783 2148 91       		.byte	0x91
 10784 2149 74       		.sleb128 -12
 10785 214a 19       		.uleb128 0x19
 10786 214b 0A000000 		.4byte	.LVL742
 10787 214f F31F0000 		.4byte	0x1ff3
 10788 2153 5E210000 		.4byte	0x215e
 10789 2157 1A       		.uleb128 0x1a
 10790 2158 01       		.uleb128 0x1
 10791 2159 50       		.byte	0x50
 10792 215a 02       		.uleb128 0x2
 10793 215b 74       		.byte	0x74
 10794 215c 00       		.sleb128 0
 10795 215d 00       		.byte	0
 10796 215e 1B       		.uleb128 0x1b
 10797 215f 16000000 		.4byte	.LVL744
 10798 2163 D8070000 		.4byte	0x7d8
 10799 2167 1A       		.uleb128 0x1a
 10800 2168 01       		.uleb128 0x1
 10801 2169 51       		.byte	0x51
 10802 216a 02       		.uleb128 0x2
 10803 216b 91       		.byte	0x91
 10804 216c 74       		.sleb128 -12
 10805 216d 1A       		.uleb128 0x1a
 10806 216e 01       		.uleb128 0x1
 10807 216f 50       		.byte	0x50
 10808 2170 02       		.uleb128 0x2
 10809 2171 74       		.byte	0x74
 10810 2172 00       		.sleb128 0
 10811 2173 00       		.byte	0
 10812 2174 00       		.byte	0
 10813 2175 20       		.uleb128 0x20
 10814 2176 A9040000 		.4byte	.LASF144
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 293


 10815 217a 01       		.byte	0x1
 10816 217b 5111     		.2byte	0x1151
 10817 217d 22040000 		.4byte	0x422
 10818 2181 00000000 		.4byte	.LFB38
 10819 2185 72010000 		.4byte	.LFE38-.LFB38
 10820 2189 01       		.uleb128 0x1
 10821 218a 9C       		.byte	0x9c
 10822 218b A0220000 		.4byte	0x22a0
 10823 218f 15       		.uleb128 0x15
 10824 2190 667000   		.ascii	"fp\000"
 10825 2193 01       		.byte	0x1
 10826 2194 5211     		.2byte	0x1152
 10827 2196 721C0000 		.4byte	0x1c72
 10828 219a 3C240000 		.4byte	.LLST172
 10829 219e 15       		.uleb128 0x15
 10830 219f 6F667300 		.ascii	"ofs\000"
 10831 21a3 01       		.byte	0x1
 10832 21a4 5311     		.2byte	0x1153
 10833 21a6 C3000000 		.4byte	0xc3
 10834 21aa 5A240000 		.4byte	.LLST173
 10835 21ae 16       		.uleb128 0x16
 10836 21af 72657300 		.ascii	"res\000"
 10837 21b3 01       		.byte	0x1
 10838 21b4 5611     		.2byte	0x1156
 10839 21b6 22040000 		.4byte	0x422
 10840 21ba A4240000 		.4byte	.LLST174
 10841 21be 1F       		.uleb128 0x1f
 10842 21bf 667300   		.ascii	"fs\000"
 10843 21c2 01       		.byte	0x1
 10844 21c3 5711     		.2byte	0x1157
 10845 21c5 3C020000 		.4byte	0x23c
 10846 21c9 02       		.uleb128 0x2
 10847 21ca 91       		.byte	0x91
 10848 21cb 64       		.sleb128 -28
 10849 21cc 1D       		.uleb128 0x1d
 10850 21cd 3B000000 		.4byte	.LASF89
 10851 21d1 01       		.byte	0x1
 10852 21d2 5811     		.2byte	0x1158
 10853 21d4 B8000000 		.4byte	0xb8
 10854 21d8 0F250000 		.4byte	.LLST175
 10855 21dc 16       		.uleb128 0x16
 10856 21dd 62637300 		.ascii	"bcs\000"
 10857 21e1 01       		.byte	0x1
 10858 21e2 5811     		.2byte	0x1158
 10859 21e4 B8000000 		.4byte	0xb8
 10860 21e8 E8250000 		.4byte	.LLST176
 10861 21ec 1D       		.uleb128 0x1d
 10862 21ed E2030000 		.4byte	.LASF145
 10863 21f1 01       		.byte	0x1
 10864 21f2 5911     		.2byte	0x1159
 10865 21f4 CE000000 		.4byte	0xce
 10866 21f8 06260000 		.4byte	.LLST177
 10867 21fc 1D       		.uleb128 0x1d
 10868 21fd 28020000 		.4byte	.LASF146
 10869 2201 01       		.byte	0x1
 10870 2202 5A11     		.2byte	0x115a
 10871 2204 C3000000 		.4byte	0xc3
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 294


 10872 2208 52260000 		.4byte	.LLST178
 10873 220c 19       		.uleb128 0x19
 10874 220d 12000000 		.4byte	.LVL748
 10875 2211 D8070000 		.4byte	0x7d8
 10876 2215 26220000 		.4byte	0x2226
 10877 2219 1A       		.uleb128 0x1a
 10878 221a 01       		.uleb128 0x1
 10879 221b 51       		.byte	0x51
 10880 221c 02       		.uleb128 0x2
 10881 221d 91       		.byte	0x91
 10882 221e 64       		.sleb128 -28
 10883 221f 1A       		.uleb128 0x1a
 10884 2220 01       		.uleb128 0x1
 10885 2221 50       		.byte	0x50
 10886 2222 02       		.uleb128 0x2
 10887 2223 74       		.byte	0x74
 10888 2224 00       		.sleb128 0
 10889 2225 00       		.byte	0
 10890 2226 19       		.uleb128 0x19
 10891 2227 66000000 		.4byte	.LVL759
 10892 222b 46100000 		.4byte	0x1046
 10893 222f 3A220000 		.4byte	0x223a
 10894 2233 1A       		.uleb128 0x1a
 10895 2234 01       		.uleb128 0x1
 10896 2235 50       		.byte	0x50
 10897 2236 02       		.uleb128 0x2
 10898 2237 74       		.byte	0x74
 10899 2238 00       		.sleb128 0
 10900 2239 00       		.byte	0
 10901 223a 19       		.uleb128 0x19
 10902 223b A2000000 		.4byte	.LVL771
 10903 223f 46100000 		.4byte	0x1046
 10904 2243 4E220000 		.4byte	0x224e
 10905 2247 1A       		.uleb128 0x1a
 10906 2248 01       		.uleb128 0x1
 10907 2249 50       		.byte	0x50
 10908 224a 02       		.uleb128 0x2
 10909 224b 74       		.byte	0x74
 10910 224c 00       		.sleb128 0
 10911 224d 00       		.byte	0
 10912 224e 19       		.uleb128 0x19
 10913 224f AE000000 		.4byte	.LVL773
 10914 2253 AD0E0000 		.4byte	0xead
 10915 2257 62220000 		.4byte	0x2262
 10916 225b 1A       		.uleb128 0x1a
 10917 225c 01       		.uleb128 0x1
 10918 225d 50       		.byte	0x50
 10919 225e 02       		.uleb128 0x2
 10920 225f 74       		.byte	0x74
 10921 2260 00       		.sleb128 0
 10922 2261 00       		.byte	0
 10923 2262 1C       		.uleb128 0x1c
 10924 2263 EE000000 		.4byte	.LVL784
 10925 2267 AA050000 		.4byte	0x5aa
 10926 226b 19       		.uleb128 0x19
 10927 226c 38010000 		.4byte	.LVL793
 10928 2270 FF2B0000 		.4byte	0x2bff
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 295


 10929 2274 84220000 		.4byte	0x2284
 10930 2278 1A       		.uleb128 0x1a
 10931 2279 01       		.uleb128 0x1
 10932 227a 53       		.byte	0x53
 10933 227b 01       		.uleb128 0x1
 10934 227c 31       		.byte	0x31
 10935 227d 1A       		.uleb128 0x1a
 10936 227e 01       		.uleb128 0x1
 10937 227f 51       		.byte	0x51
 10938 2280 02       		.uleb128 0x2
 10939 2281 74       		.byte	0x74
 10940 2282 28       		.sleb128 40
 10941 2283 00       		.byte	0
 10942 2284 1B       		.uleb128 0x1b
 10943 2285 5A010000 		.4byte	.LVL796
 10944 2289 232C0000 		.4byte	0x2c23
 10945 228d 1A       		.uleb128 0x1a
 10946 228e 01       		.uleb128 0x1
 10947 228f 53       		.byte	0x53
 10948 2290 01       		.uleb128 0x1
 10949 2291 31       		.byte	0x31
 10950 2292 1A       		.uleb128 0x1a
 10951 2293 01       		.uleb128 0x1
 10952 2294 52       		.byte	0x52
 10953 2295 02       		.uleb128 0x2
 10954 2296 75       		.byte	0x75
 10955 2297 00       		.sleb128 0
 10956 2298 1A       		.uleb128 0x1a
 10957 2299 01       		.uleb128 0x1
 10958 229a 51       		.byte	0x51
 10959 229b 02       		.uleb128 0x2
 10960 229c 74       		.byte	0x74
 10961 229d 28       		.sleb128 40
 10962 229e 00       		.byte	0
 10963 229f 00       		.byte	0
 10964 22a0 20       		.uleb128 0x20
 10965 22a1 8D020000 		.4byte	.LASF147
 10966 22a5 01       		.byte	0x1
 10967 22a6 F511     		.2byte	0x11f5
 10968 22a8 22040000 		.4byte	0x422
 10969 22ac 00000000 		.4byte	.LFB39
 10970 22b0 6E000000 		.4byte	.LFE39-.LFB39
 10971 22b4 01       		.uleb128 0x1
 10972 22b5 9C       		.byte	0x9c
 10973 22b6 49230000 		.4byte	0x2349
 10974 22ba 15       		.uleb128 0x15
 10975 22bb 647000   		.ascii	"dp\000"
 10976 22be 01       		.byte	0x1
 10977 22bf F611     		.2byte	0x11f6
 10978 22c1 45070000 		.4byte	0x745
 10979 22c5 7D260000 		.4byte	.LLST179
 10980 22c9 18       		.uleb128 0x18
 10981 22ca 40020000 		.4byte	.LASF94
 10982 22ce 01       		.byte	0x1
 10983 22cf F711     		.2byte	0x11f7
 10984 22d1 CD070000 		.4byte	0x7cd
 10985 22d5 B4260000 		.4byte	.LLST180
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 296


 10986 22d9 16       		.uleb128 0x16
 10987 22da 72657300 		.ascii	"res\000"
 10988 22de 01       		.byte	0x1
 10989 22df FA11     		.2byte	0x11fa
 10990 22e1 22040000 		.4byte	0x422
 10991 22e5 F6260000 		.4byte	.LLST181
 10992 22e9 1F       		.uleb128 0x1f
 10993 22ea 667300   		.ascii	"fs\000"
 10994 22ed 01       		.byte	0x1
 10995 22ee FB11     		.2byte	0x11fb
 10996 22f0 3C020000 		.4byte	0x23c
 10997 22f4 02       		.uleb128 0x2
 10998 22f5 91       		.byte	0x91
 10999 22f6 6C       		.sleb128 -20
 11000 22f7 19       		.uleb128 0x19
 11001 22f8 14000000 		.4byte	.LVL804
 11002 22fc 150B0000 		.4byte	0xb15
 11003 2300 16230000 		.4byte	0x2316
 11004 2304 1A       		.uleb128 0x1a
 11005 2305 01       		.uleb128 0x1
 11006 2306 52       		.byte	0x52
 11007 2307 01       		.uleb128 0x1
 11008 2308 30       		.byte	0x30
 11009 2309 1A       		.uleb128 0x1a
 11010 230a 01       		.uleb128 0x1
 11011 230b 51       		.byte	0x51
 11012 230c 02       		.uleb128 0x2
 11013 230d 91       		.byte	0x91
 11014 230e 6C       		.sleb128 -20
 11015 230f 1A       		.uleb128 0x1a
 11016 2310 01       		.uleb128 0x1
 11017 2311 50       		.byte	0x50
 11018 2312 02       		.uleb128 0x2
 11019 2313 91       		.byte	0x91
 11020 2314 64       		.sleb128 -28
 11021 2315 00       		.byte	0
 11022 2316 19       		.uleb128 0x19
 11023 2317 24000000 		.4byte	.LVL806
 11024 231b F6160000 		.4byte	0x16f6
 11025 231f 2A230000 		.4byte	0x232a
 11026 2323 1A       		.uleb128 0x1a
 11027 2324 01       		.uleb128 0x1
 11028 2325 50       		.byte	0x50
 11029 2326 02       		.uleb128 0x2
 11030 2327 75       		.byte	0x75
 11031 2328 00       		.sleb128 0
 11032 2329 00       		.byte	0
 11033 232a 1C       		.uleb128 0x1c
 11034 232b 40000000 		.4byte	.LVL808
 11035 232f E4050000 		.4byte	0x5e4
 11036 2333 1B       		.uleb128 0x1b
 11037 2334 56000000 		.4byte	.LVL811
 11038 2338 AF0F0000 		.4byte	0xfaf
 11039 233c 1A       		.uleb128 0x1a
 11040 233d 01       		.uleb128 0x1
 11041 233e 51       		.byte	0x51
 11042 233f 01       		.uleb128 0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 297


 11043 2340 30       		.byte	0x30
 11044 2341 1A       		.uleb128 0x1a
 11045 2342 01       		.uleb128 0x1
 11046 2343 50       		.byte	0x50
 11047 2344 02       		.uleb128 0x2
 11048 2345 75       		.byte	0x75
 11049 2346 00       		.sleb128 0
 11050 2347 00       		.byte	0
 11051 2348 00       		.byte	0
 11052 2349 20       		.uleb128 0x20
 11053 234a 2F060000 		.4byte	.LASF148
 11054 234e 01       		.byte	0x1
 11055 234f 3712     		.2byte	0x1237
 11056 2351 22040000 		.4byte	0x422
 11057 2355 00000000 		.4byte	.LFB40
 11058 2359 1A000000 		.4byte	.LFE40-.LFB40
 11059 235d 01       		.uleb128 0x1
 11060 235e 9C       		.byte	0x9c
 11061 235f A7230000 		.4byte	0x23a7
 11062 2363 15       		.uleb128 0x15
 11063 2364 647000   		.ascii	"dp\000"
 11064 2367 01       		.byte	0x1
 11065 2368 3812     		.2byte	0x1238
 11066 236a 45070000 		.4byte	0x745
 11067 236e 2A270000 		.4byte	.LLST182
 11068 2372 16       		.uleb128 0x16
 11069 2373 72657300 		.ascii	"res\000"
 11070 2377 01       		.byte	0x1
 11071 2378 3B12     		.2byte	0x123b
 11072 237a 22040000 		.4byte	0x422
 11073 237e 48270000 		.4byte	.LLST183
 11074 2382 1F       		.uleb128 0x1f
 11075 2383 667300   		.ascii	"fs\000"
 11076 2386 01       		.byte	0x1
 11077 2387 3C12     		.2byte	0x123c
 11078 2389 3C020000 		.4byte	0x23c
 11079 238d 02       		.uleb128 0x2
 11080 238e 91       		.byte	0x91
 11081 238f 74       		.sleb128 -12
 11082 2390 1B       		.uleb128 0x1b
 11083 2391 0C000000 		.4byte	.LVL817
 11084 2395 D8070000 		.4byte	0x7d8
 11085 2399 1A       		.uleb128 0x1a
 11086 239a 01       		.uleb128 0x1
 11087 239b 51       		.byte	0x51
 11088 239c 02       		.uleb128 0x2
 11089 239d 91       		.byte	0x91
 11090 239e 74       		.sleb128 -12
 11091 239f 1A       		.uleb128 0x1a
 11092 23a0 01       		.uleb128 0x1
 11093 23a1 50       		.byte	0x50
 11094 23a2 02       		.uleb128 0x2
 11095 23a3 74       		.byte	0x74
 11096 23a4 00       		.sleb128 0
 11097 23a5 00       		.byte	0
 11098 23a6 00       		.byte	0
 11099 23a7 20       		.uleb128 0x20
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 298


 11100 23a8 31000000 		.4byte	.LASF149
 11101 23ac 01       		.byte	0x1
 11102 23ad 5512     		.2byte	0x1255
 11103 23af 22040000 		.4byte	0x422
 11104 23b3 00000000 		.4byte	.LFB41
 11105 23b7 4C000000 		.4byte	.LFE41-.LFB41
 11106 23bb 01       		.uleb128 0x1
 11107 23bc 9C       		.byte	0x9c
 11108 23bd 7A240000 		.4byte	0x247a
 11109 23c1 15       		.uleb128 0x15
 11110 23c2 647000   		.ascii	"dp\000"
 11111 23c5 01       		.byte	0x1
 11112 23c6 5612     		.2byte	0x1256
 11113 23c8 45070000 		.4byte	0x745
 11114 23cc 5B270000 		.4byte	.LLST184
 11115 23d0 15       		.uleb128 0x15
 11116 23d1 666E6F00 		.ascii	"fno\000"
 11117 23d5 01       		.byte	0x1
 11118 23d6 5712     		.2byte	0x1257
 11119 23d8 4B070000 		.4byte	0x74b
 11120 23dc 79270000 		.4byte	.LLST185
 11121 23e0 16       		.uleb128 0x16
 11122 23e1 72657300 		.ascii	"res\000"
 11123 23e5 01       		.byte	0x1
 11124 23e6 5A12     		.2byte	0x125a
 11125 23e8 22040000 		.4byte	0x422
 11126 23ec 97270000 		.4byte	.LLST186
 11127 23f0 1F       		.uleb128 0x1f
 11128 23f1 667300   		.ascii	"fs\000"
 11129 23f4 01       		.byte	0x1
 11130 23f5 5B12     		.2byte	0x125b
 11131 23f7 3C020000 		.4byte	0x23c
 11132 23fb 02       		.uleb128 0x2
 11133 23fc 91       		.byte	0x91
 11134 23fd 6C       		.sleb128 -20
 11135 23fe 19       		.uleb128 0x19
 11136 23ff 0E000000 		.4byte	.LVL821
 11137 2403 D8070000 		.4byte	0x7d8
 11138 2407 18240000 		.4byte	0x2418
 11139 240b 1A       		.uleb128 0x1a
 11140 240c 01       		.uleb128 0x1
 11141 240d 51       		.byte	0x51
 11142 240e 02       		.uleb128 0x2
 11143 240f 91       		.byte	0x91
 11144 2410 6C       		.sleb128 -20
 11145 2411 1A       		.uleb128 0x1a
 11146 2412 01       		.uleb128 0x1
 11147 2413 50       		.byte	0x50
 11148 2414 02       		.uleb128 0x2
 11149 2415 75       		.byte	0x75
 11150 2416 00       		.sleb128 0
 11151 2417 00       		.byte	0
 11152 2418 19       		.uleb128 0x19
 11153 2419 1C000000 		.4byte	.LVL823
 11154 241d AF0F0000 		.4byte	0xfaf
 11155 2421 31240000 		.4byte	0x2431
 11156 2425 1A       		.uleb128 0x1a
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 299


 11157 2426 01       		.uleb128 0x1
 11158 2427 51       		.byte	0x51
 11159 2428 01       		.uleb128 0x1
 11160 2429 30       		.byte	0x30
 11161 242a 1A       		.uleb128 0x1a
 11162 242b 01       		.uleb128 0x1
 11163 242c 50       		.byte	0x50
 11164 242d 02       		.uleb128 0x2
 11165 242e 75       		.byte	0x75
 11166 242f 00       		.sleb128 0
 11167 2430 00       		.byte	0
 11168 2431 19       		.uleb128 0x19
 11169 2432 28000000 		.4byte	.LVL827
 11170 2436 58150000 		.4byte	0x1558
 11171 243a 4A240000 		.4byte	0x244a
 11172 243e 1A       		.uleb128 0x1a
 11173 243f 01       		.uleb128 0x1
 11174 2440 51       		.byte	0x51
 11175 2441 01       		.uleb128 0x1
 11176 2442 30       		.byte	0x30
 11177 2443 1A       		.uleb128 0x1a
 11178 2444 01       		.uleb128 0x1
 11179 2445 50       		.byte	0x50
 11180 2446 02       		.uleb128 0x2
 11181 2447 75       		.byte	0x75
 11182 2448 00       		.sleb128 0
 11183 2449 00       		.byte	0
 11184 244a 19       		.uleb128 0x19
 11185 244b 38000000 		.4byte	.LVL829
 11186 244f C8060000 		.4byte	0x6c8
 11187 2453 64240000 		.4byte	0x2464
 11188 2457 1A       		.uleb128 0x1a
 11189 2458 01       		.uleb128 0x1
 11190 2459 51       		.byte	0x51
 11191 245a 02       		.uleb128 0x2
 11192 245b 76       		.byte	0x76
 11193 245c 00       		.sleb128 0
 11194 245d 1A       		.uleb128 0x1a
 11195 245e 01       		.uleb128 0x1
 11196 245f 50       		.byte	0x50
 11197 2460 02       		.uleb128 0x2
 11198 2461 75       		.byte	0x75
 11199 2462 00       		.sleb128 0
 11200 2463 00       		.byte	0
 11201 2464 1B       		.uleb128 0x1b
 11202 2465 40000000 		.4byte	.LVL830
 11203 2469 4F130000 		.4byte	0x134f
 11204 246d 1A       		.uleb128 0x1a
 11205 246e 01       		.uleb128 0x1
 11206 246f 51       		.byte	0x51
 11207 2470 01       		.uleb128 0x1
 11208 2471 30       		.byte	0x30
 11209 2472 1A       		.uleb128 0x1a
 11210 2473 01       		.uleb128 0x1
 11211 2474 50       		.byte	0x50
 11212 2475 02       		.uleb128 0x2
 11213 2476 75       		.byte	0x75
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 300


 11214 2477 00       		.sleb128 0
 11215 2478 00       		.byte	0
 11216 2479 00       		.byte	0
 11217 247a 20       		.uleb128 0x20
 11218 247b 93060000 		.4byte	.LASF150
 11219 247f 01       		.byte	0x1
 11220 2480 AD12     		.2byte	0x12ad
 11221 2482 22040000 		.4byte	0x422
 11222 2486 00000000 		.4byte	.LFB42
 11223 248a 42000000 		.4byte	.LFE42-.LFB42
 11224 248e 01       		.uleb128 0x1
 11225 248f 9C       		.byte	0x9c
 11226 2490 1D250000 		.4byte	0x251d
 11227 2494 18       		.uleb128 0x18
 11228 2495 40020000 		.4byte	.LASF94
 11229 2499 01       		.byte	0x1
 11230 249a AE12     		.2byte	0x12ae
 11231 249c CD070000 		.4byte	0x7cd
 11232 24a0 EC270000 		.4byte	.LLST187
 11233 24a4 15       		.uleb128 0x15
 11234 24a5 666E6F00 		.ascii	"fno\000"
 11235 24a9 01       		.byte	0x1
 11236 24aa AF12     		.2byte	0x12af
 11237 24ac 4B070000 		.4byte	0x74b
 11238 24b0 18280000 		.4byte	.LLST188
 11239 24b4 16       		.uleb128 0x16
 11240 24b5 72657300 		.ascii	"res\000"
 11241 24b9 01       		.byte	0x1
 11242 24ba B212     		.2byte	0x12b2
 11243 24bc 22040000 		.4byte	0x422
 11244 24c0 36280000 		.4byte	.LLST189
 11245 24c4 1F       		.uleb128 0x1f
 11246 24c5 646A00   		.ascii	"dj\000"
 11247 24c8 01       		.byte	0x1
 11248 24c9 B312     		.2byte	0x12b3
 11249 24cb 34030000 		.4byte	0x334
 11250 24cf 02       		.uleb128 0x2
 11251 24d0 91       		.byte	0x91
 11252 24d1 44       		.sleb128 -60
 11253 24d2 19       		.uleb128 0x19
 11254 24d3 16000000 		.4byte	.LVL835
 11255 24d7 150B0000 		.4byte	0xb15
 11256 24db F2240000 		.4byte	0x24f2
 11257 24df 1A       		.uleb128 0x1a
 11258 24e0 01       		.uleb128 0x1
 11259 24e1 52       		.byte	0x52
 11260 24e2 01       		.uleb128 0x1
 11261 24e3 30       		.byte	0x30
 11262 24e4 1A       		.uleb128 0x1a
 11263 24e5 01       		.uleb128 0x1
 11264 24e6 51       		.byte	0x51
 11265 24e7 02       		.uleb128 0x2
 11266 24e8 91       		.byte	0x91
 11267 24e9 44       		.sleb128 -60
 11268 24ea 1A       		.uleb128 0x1a
 11269 24eb 01       		.uleb128 0x1
 11270 24ec 50       		.byte	0x50
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 301


 11271 24ed 03       		.uleb128 0x3
 11272 24ee 91       		.byte	0x91
 11273 24ef BC7F     		.sleb128 -68
 11274 24f1 00       		.byte	0
 11275 24f2 19       		.uleb128 0x19
 11276 24f3 22000000 		.4byte	.LVL837
 11277 24f7 F6160000 		.4byte	0x16f6
 11278 24fb 06250000 		.4byte	0x2506
 11279 24ff 1A       		.uleb128 0x1a
 11280 2500 01       		.uleb128 0x1
 11281 2501 50       		.byte	0x50
 11282 2502 02       		.uleb128 0x2
 11283 2503 91       		.byte	0x91
 11284 2504 44       		.sleb128 -60
 11285 2505 00       		.byte	0
 11286 2506 1B       		.uleb128 0x1b
 11287 2507 38000000 		.4byte	.LVL839
 11288 250b C8060000 		.4byte	0x6c8
 11289 250f 1A       		.uleb128 0x1a
 11290 2510 01       		.uleb128 0x1
 11291 2511 51       		.byte	0x51
 11292 2512 02       		.uleb128 0x2
 11293 2513 75       		.byte	0x75
 11294 2514 00       		.sleb128 0
 11295 2515 1A       		.uleb128 0x1a
 11296 2516 01       		.uleb128 0x1
 11297 2517 50       		.byte	0x50
 11298 2518 02       		.uleb128 0x2
 11299 2519 91       		.byte	0x91
 11300 251a 44       		.sleb128 -60
 11301 251b 00       		.byte	0
 11302 251c 00       		.byte	0
 11303 251d 20       		.uleb128 0x20
 11304 251e B6040000 		.4byte	.LASF151
 11305 2522 01       		.byte	0x1
 11306 2523 D012     		.2byte	0x12d0
 11307 2525 22040000 		.4byte	0x422
 11308 2529 00000000 		.4byte	.LFB43
 11309 252d DC000000 		.4byte	.LFE43-.LFB43
 11310 2531 01       		.uleb128 0x1
 11311 2532 9C       		.byte	0x9c
 11312 2533 42260000 		.4byte	0x2642
 11313 2537 18       		.uleb128 0x18
 11314 2538 40020000 		.4byte	.LASF94
 11315 253c 01       		.byte	0x1
 11316 253d D112     		.2byte	0x12d1
 11317 253f CD070000 		.4byte	0x7cd
 11318 2543 6A280000 		.4byte	.LLST190
 11319 2547 18       		.uleb128 0x18
 11320 2548 11010000 		.4byte	.LASF109
 11321 254c 01       		.byte	0x1
 11322 254d D212     		.2byte	0x12d2
 11323 254f 42260000 		.4byte	0x2642
 11324 2553 A1280000 		.4byte	.LLST191
 11325 2557 18       		.uleb128 0x18
 11326 2558 EE000000 		.4byte	.LASF152
 11327 255c 01       		.byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 302


 11328 255d D312     		.2byte	0x12d3
 11329 255f 32080000 		.4byte	0x832
 11330 2563 BF280000 		.4byte	.LLST192
 11331 2567 16       		.uleb128 0x16
 11332 2568 72657300 		.ascii	"res\000"
 11333 256c 01       		.byte	0x1
 11334 256d D612     		.2byte	0x12d6
 11335 256f 22040000 		.4byte	0x422
 11336 2573 04290000 		.4byte	.LLST193
 11337 2577 1F       		.uleb128 0x1f
 11338 2578 667300   		.ascii	"fs\000"
 11339 257b 01       		.byte	0x1
 11340 257c D712     		.2byte	0x12d7
 11341 257e 3C020000 		.4byte	0x23c
 11342 2582 02       		.uleb128 0x2
 11343 2583 91       		.byte	0x91
 11344 2584 5C       		.sleb128 -36
 11345 2585 1D       		.uleb128 0x1d
 11346 2586 DC030000 		.4byte	.LASF153
 11347 258a 01       		.byte	0x1
 11348 258b D812     		.2byte	0x12d8
 11349 258d B8000000 		.4byte	0xb8
 11350 2591 4E290000 		.4byte	.LLST194
 11351 2595 1D       		.uleb128 0x1d
 11352 2596 3B000000 		.4byte	.LASF89
 11353 259a 01       		.byte	0x1
 11354 259b D812     		.2byte	0x12d8
 11355 259d B8000000 		.4byte	0xb8
 11356 25a1 84290000 		.4byte	.LLST195
 11357 25a5 1D       		.uleb128 0x1d
 11358 25a6 A0010000 		.4byte	.LASF38
 11359 25aa 01       		.byte	0x1
 11360 25ab D812     		.2byte	0x12d8
 11361 25ad B8000000 		.4byte	0xb8
 11362 25b1 D1290000 		.4byte	.LLST196
 11363 25b5 1D       		.uleb128 0x1d
 11364 25b6 CD020000 		.4byte	.LASF45
 11365 25ba 01       		.byte	0x1
 11366 25bb D912     		.2byte	0x12d9
 11367 25bd CE000000 		.4byte	0xce
 11368 25c1 EF290000 		.4byte	.LLST197
 11369 25c5 16       		.uleb128 0x16
 11370 25c6 6900     		.ascii	"i\000"
 11371 25c8 01       		.byte	0x1
 11372 25c9 DA12     		.2byte	0x12da
 11373 25cb 97000000 		.4byte	0x97
 11374 25cf 182A0000 		.4byte	.LLST198
 11375 25d3 1F       		.uleb128 0x1f
 11376 25d4 6F626A00 		.ascii	"obj\000"
 11377 25d8 01       		.byte	0x1
 11378 25d9 DB12     		.2byte	0x12db
 11379 25db 42020000 		.4byte	0x242
 11380 25df 02       		.uleb128 0x2
 11381 25e0 91       		.byte	0x91
 11382 25e1 4C       		.sleb128 -52
 11383 25e2 19       		.uleb128 0x19
 11384 25e3 1A000000 		.4byte	.LVL846
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 303


 11385 25e7 150B0000 		.4byte	0xb15
 11386 25eb 01260000 		.4byte	0x2601
 11387 25ef 1A       		.uleb128 0x1a
 11388 25f0 01       		.uleb128 0x1
 11389 25f1 52       		.byte	0x52
 11390 25f2 01       		.uleb128 0x1
 11391 25f3 30       		.byte	0x30
 11392 25f4 1A       		.uleb128 0x1a
 11393 25f5 01       		.uleb128 0x1
 11394 25f6 51       		.byte	0x51
 11395 25f7 02       		.uleb128 0x2
 11396 25f8 91       		.byte	0x91
 11397 25f9 5C       		.sleb128 -36
 11398 25fa 1A       		.uleb128 0x1a
 11399 25fb 01       		.uleb128 0x1
 11400 25fc 50       		.byte	0x50
 11401 25fd 02       		.uleb128 0x2
 11402 25fe 91       		.byte	0x91
 11403 25ff 44       		.sleb128 -60
 11404 2600 00       		.byte	0
 11405 2601 19       		.uleb128 0x19
 11406 2602 48000000 		.4byte	.LVL851
 11407 2606 AD0E0000 		.4byte	0xead
 11408 260a 1B260000 		.4byte	0x261b
 11409 260e 1A       		.uleb128 0x1a
 11410 260f 01       		.uleb128 0x1
 11411 2610 51       		.byte	0x51
 11412 2611 02       		.uleb128 0x2
 11413 2612 74       		.byte	0x74
 11414 2613 00       		.sleb128 0
 11415 2614 1A       		.uleb128 0x1a
 11416 2615 01       		.uleb128 0x1
 11417 2616 50       		.byte	0x50
 11418 2617 02       		.uleb128 0x2
 11419 2618 91       		.byte	0x91
 11420 2619 4C       		.sleb128 -52
 11421 261a 00       		.byte	0
 11422 261b 19       		.uleb128 0x19
 11423 261c 76000000 		.4byte	.LVL859
 11424 2620 A0080000 		.4byte	0x8a0
 11425 2624 2F260000 		.4byte	0x262f
 11426 2628 1A       		.uleb128 0x1a
 11427 2629 01       		.uleb128 0x1
 11428 262a 51       		.byte	0x51
 11429 262b 02       		.uleb128 0x2
 11430 262c 77       		.byte	0x77
 11431 262d 00       		.sleb128 0
 11432 262e 00       		.byte	0
 11433 262f 1C       		.uleb128 0x1c
 11434 2630 8E000000 		.4byte	.LVL861
 11435 2634 6B040000 		.4byte	0x46b
 11436 2638 1C       		.uleb128 0x1c
 11437 2639 A0000000 		.4byte	.LVL864
 11438 263d B0040000 		.4byte	0x4b0
 11439 2641 00       		.byte	0
 11440 2642 06       		.uleb128 0x6
 11441 2643 04       		.byte	0x4
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 304


 11442 2644 B8000000 		.4byte	0xb8
 11443 2648 20       		.uleb128 0x20
 11444 2649 DD000000 		.4byte	.LASF154
 11445 264d 01       		.byte	0x1
 11446 264e 3013     		.2byte	0x1330
 11447 2650 22040000 		.4byte	0x422
 11448 2654 00000000 		.4byte	.LFB44
 11449 2658 AC000000 		.4byte	.LFE44-.LFB44
 11450 265c 01       		.uleb128 0x1
 11451 265d 9C       		.byte	0x9c
 11452 265e 10270000 		.4byte	0x2710
 11453 2662 15       		.uleb128 0x15
 11454 2663 667000   		.ascii	"fp\000"
 11455 2666 01       		.byte	0x1
 11456 2667 3113     		.2byte	0x1331
 11457 2669 721C0000 		.4byte	0x1c72
 11458 266d 372A0000 		.4byte	.LLST199
 11459 2671 16       		.uleb128 0x16
 11460 2672 72657300 		.ascii	"res\000"
 11461 2676 01       		.byte	0x1
 11462 2677 3413     		.2byte	0x1334
 11463 2679 22040000 		.4byte	0x422
 11464 267d 552A0000 		.4byte	.LLST200
 11465 2681 1F       		.uleb128 0x1f
 11466 2682 667300   		.ascii	"fs\000"
 11467 2685 01       		.byte	0x1
 11468 2686 3513     		.2byte	0x1335
 11469 2688 3C020000 		.4byte	0x23c
 11470 268c 02       		.uleb128 0x2
 11471 268d 91       		.byte	0x91
 11472 268e 6C       		.sleb128 -20
 11473 268f 16       		.uleb128 0x16
 11474 2690 6E636C00 		.ascii	"ncl\000"
 11475 2694 01       		.byte	0x1
 11476 2695 3613     		.2byte	0x1336
 11477 2697 B8000000 		.4byte	0xb8
 11478 269b 8A2A0000 		.4byte	.LLST201
 11479 269f 19       		.uleb128 0x19
 11480 26a0 0C000000 		.4byte	.LVL874
 11481 26a4 D8070000 		.4byte	0x7d8
 11482 26a8 B9260000 		.4byte	0x26b9
 11483 26ac 1A       		.uleb128 0x1a
 11484 26ad 01       		.uleb128 0x1
 11485 26ae 51       		.byte	0x51
 11486 26af 02       		.uleb128 0x2
 11487 26b0 91       		.byte	0x91
 11488 26b1 6C       		.sleb128 -20
 11489 26b2 1A       		.uleb128 0x1a
 11490 26b3 01       		.uleb128 0x1
 11491 26b4 50       		.byte	0x50
 11492 26b5 02       		.uleb128 0x2
 11493 26b6 75       		.byte	0x75
 11494 26b7 00       		.sleb128 0
 11495 26b8 00       		.byte	0
 11496 26b9 19       		.uleb128 0x19
 11497 26ba 34000000 		.4byte	.LVL877
 11498 26be 46110000 		.4byte	0x1146
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 305


 11499 26c2 D2260000 		.4byte	0x26d2
 11500 26c6 1A       		.uleb128 0x1a
 11501 26c7 01       		.uleb128 0x1
 11502 26c8 52       		.byte	0x52
 11503 26c9 01       		.uleb128 0x1
 11504 26ca 30       		.byte	0x30
 11505 26cb 1A       		.uleb128 0x1a
 11506 26cc 01       		.uleb128 0x1
 11507 26cd 50       		.byte	0x50
 11508 26ce 02       		.uleb128 0x2
 11509 26cf 75       		.byte	0x75
 11510 26d0 00       		.sleb128 0
 11511 26d1 00       		.byte	0
 11512 26d2 19       		.uleb128 0x19
 11513 26d3 44000000 		.4byte	.LVL879
 11514 26d7 AD0E0000 		.4byte	0xead
 11515 26db E6260000 		.4byte	0x26e6
 11516 26df 1A       		.uleb128 0x1a
 11517 26e0 01       		.uleb128 0x1
 11518 26e1 50       		.byte	0x50
 11519 26e2 02       		.uleb128 0x2
 11520 26e3 75       		.byte	0x75
 11521 26e4 00       		.sleb128 0
 11522 26e5 00       		.byte	0
 11523 26e6 19       		.uleb128 0x19
 11524 26e7 66000000 		.4byte	.LVL884
 11525 26eb 46110000 		.4byte	0x1146
 11526 26ef FA260000 		.4byte	0x26fa
 11527 26f3 1A       		.uleb128 0x1a
 11528 26f4 01       		.uleb128 0x1
 11529 26f5 50       		.byte	0x50
 11530 26f6 02       		.uleb128 0x2
 11531 26f7 75       		.byte	0x75
 11532 26f8 00       		.sleb128 0
 11533 26f9 00       		.byte	0
 11534 26fa 1B       		.uleb128 0x1b
 11535 26fb 8C000000 		.4byte	.LVL886
 11536 26ff FF2B0000 		.4byte	0x2bff
 11537 2703 1A       		.uleb128 0x1a
 11538 2704 01       		.uleb128 0x1
 11539 2705 53       		.byte	0x53
 11540 2706 01       		.uleb128 0x1
 11541 2707 31       		.byte	0x31
 11542 2708 1A       		.uleb128 0x1a
 11543 2709 01       		.uleb128 0x1
 11544 270a 51       		.byte	0x51
 11545 270b 02       		.uleb128 0x2
 11546 270c 75       		.byte	0x75
 11547 270d 28       		.sleb128 40
 11548 270e 00       		.byte	0
 11549 270f 00       		.byte	0
 11550 2710 20       		.uleb128 0x20
 11551 2711 79010000 		.4byte	.LASF155
 11552 2715 01       		.byte	0x1
 11553 2716 6213     		.2byte	0x1362
 11554 2718 22040000 		.4byte	0x422
 11555 271c 00000000 		.4byte	.LFB45
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 306


 11556 2720 B0000000 		.4byte	.LFE45-.LFB45
 11557 2724 01       		.uleb128 0x1
 11558 2725 9C       		.byte	0x9c
 11559 2726 3F280000 		.4byte	0x283f
 11560 272a 18       		.uleb128 0x18
 11561 272b 40020000 		.4byte	.LASF94
 11562 272f 01       		.byte	0x1
 11563 2730 6313     		.2byte	0x1363
 11564 2732 CD070000 		.4byte	0x7cd
 11565 2736 A82A0000 		.4byte	.LLST202
 11566 273a 16       		.uleb128 0x16
 11567 273b 72657300 		.ascii	"res\000"
 11568 273f 01       		.byte	0x1
 11569 2740 6613     		.2byte	0x1366
 11570 2742 22040000 		.4byte	0x422
 11571 2746 E12A0000 		.4byte	.LLST203
 11572 274a 1F       		.uleb128 0x1f
 11573 274b 667300   		.ascii	"fs\000"
 11574 274e 01       		.byte	0x1
 11575 274f 6713     		.2byte	0x1367
 11576 2751 3C020000 		.4byte	0x23c
 11577 2755 02       		.uleb128 0x2
 11578 2756 91       		.byte	0x91
 11579 2757 6C       		.sleb128 -20
 11580 2758 1F       		.uleb128 0x1f
 11581 2759 646A00   		.ascii	"dj\000"
 11582 275c 01       		.byte	0x1
 11583 275d 6813     		.2byte	0x1368
 11584 275f 34030000 		.4byte	0x334
 11585 2763 02       		.uleb128 0x2
 11586 2764 91       		.byte	0x91
 11587 2765 40       		.sleb128 -64
 11588 2766 1F       		.uleb128 0x1f
 11589 2767 73646A00 		.ascii	"sdj\000"
 11590 276b 01       		.byte	0x1
 11591 276c 6813     		.2byte	0x1368
 11592 276e 34030000 		.4byte	0x334
 11593 2772 03       		.uleb128 0x3
 11594 2773 91       		.byte	0x91
 11595 2774 947F     		.sleb128 -108
 11596 2776 1D       		.uleb128 0x1d
 11597 2777 89040000 		.4byte	.LASF156
 11598 277b 01       		.byte	0x1
 11599 277c 6913     		.2byte	0x1369
 11600 277e B8000000 		.4byte	0xb8
 11601 2782 4C2B0000 		.4byte	.LLST204
 11602 2786 19       		.uleb128 0x19
 11603 2787 14000000 		.4byte	.LVL891
 11604 278b 150B0000 		.4byte	0xb15
 11605 278f A6270000 		.4byte	0x27a6
 11606 2793 1A       		.uleb128 0x1a
 11607 2794 01       		.uleb128 0x1
 11608 2795 52       		.byte	0x52
 11609 2796 01       		.uleb128 0x1
 11610 2797 32       		.byte	0x32
 11611 2798 1A       		.uleb128 0x1a
 11612 2799 01       		.uleb128 0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 307


 11613 279a 51       		.byte	0x51
 11614 279b 02       		.uleb128 0x2
 11615 279c 91       		.byte	0x91
 11616 279d 6C       		.sleb128 -20
 11617 279e 1A       		.uleb128 0x1a
 11618 279f 01       		.uleb128 0x1
 11619 27a0 50       		.byte	0x50
 11620 27a1 03       		.uleb128 0x3
 11621 27a2 91       		.byte	0x91
 11622 27a3 8C7F     		.sleb128 -116
 11623 27a5 00       		.byte	0
 11624 27a6 19       		.uleb128 0x19
 11625 27a7 26000000 		.4byte	.LVL893
 11626 27ab F6160000 		.4byte	0x16f6
 11627 27af BA270000 		.4byte	0x27ba
 11628 27b3 1A       		.uleb128 0x1a
 11629 27b4 01       		.uleb128 0x1
 11630 27b5 50       		.byte	0x50
 11631 27b6 02       		.uleb128 0x2
 11632 27b7 91       		.byte	0x91
 11633 27b8 40       		.sleb128 -64
 11634 27b9 00       		.byte	0
 11635 27ba 19       		.uleb128 0x19
 11636 27bb 52000000 		.4byte	.LVL895
 11637 27bf E4050000 		.4byte	0x5e4
 11638 27c3 CE270000 		.4byte	0x27ce
 11639 27c7 1A       		.uleb128 0x1a
 11640 27c8 01       		.uleb128 0x1
 11641 27c9 50       		.byte	0x50
 11642 27ca 02       		.uleb128 0x2
 11643 27cb 76       		.byte	0x76
 11644 27cc 00       		.sleb128 0
 11645 27cd 00       		.byte	0
 11646 27ce 19       		.uleb128 0x19
 11647 27cf 6A000000 		.4byte	.LVL898
 11648 27d3 AF0F0000 		.4byte	0xfaf
 11649 27d7 E8270000 		.4byte	0x27e8
 11650 27db 1A       		.uleb128 0x1a
 11651 27dc 01       		.uleb128 0x1
 11652 27dd 51       		.byte	0x51
 11653 27de 01       		.uleb128 0x1
 11654 27df 30       		.byte	0x30
 11655 27e0 1A       		.uleb128 0x1a
 11656 27e1 01       		.uleb128 0x1
 11657 27e2 50       		.byte	0x50
 11658 27e3 03       		.uleb128 0x3
 11659 27e4 91       		.byte	0x91
 11660 27e5 947F     		.sleb128 -108
 11661 27e7 00       		.byte	0
 11662 27e8 19       		.uleb128 0x19
 11663 27e9 76000000 		.4byte	.LVL900
 11664 27ed 58150000 		.4byte	0x1558
 11665 27f1 02280000 		.4byte	0x2802
 11666 27f5 1A       		.uleb128 0x1a
 11667 27f6 01       		.uleb128 0x1
 11668 27f7 51       		.byte	0x51
 11669 27f8 01       		.uleb128 0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 308


 11670 27f9 30       		.byte	0x30
 11671 27fa 1A       		.uleb128 0x1a
 11672 27fb 01       		.uleb128 0x1
 11673 27fc 50       		.byte	0x50
 11674 27fd 03       		.uleb128 0x3
 11675 27fe 91       		.byte	0x91
 11676 27ff 947F     		.sleb128 -108
 11677 2801 00       		.byte	0
 11678 2802 19       		.uleb128 0x19
 11679 2803 8E000000 		.4byte	.LVL904
 11680 2807 14120000 		.4byte	0x1214
 11681 280b 16280000 		.4byte	0x2816
 11682 280f 1A       		.uleb128 0x1a
 11683 2810 01       		.uleb128 0x1
 11684 2811 50       		.byte	0x50
 11685 2812 02       		.uleb128 0x2
 11686 2813 91       		.byte	0x91
 11687 2814 40       		.sleb128 -64
 11688 2815 00       		.byte	0
 11689 2816 19       		.uleb128 0x19
 11690 2817 9E000000 		.4byte	.LVL906
 11691 281b 46110000 		.4byte	0x1146
 11692 281f 35280000 		.4byte	0x2835
 11693 2823 1A       		.uleb128 0x1a
 11694 2824 01       		.uleb128 0x1
 11695 2825 52       		.byte	0x52
 11696 2826 01       		.uleb128 0x1
 11697 2827 30       		.byte	0x30
 11698 2828 1A       		.uleb128 0x1a
 11699 2829 01       		.uleb128 0x1
 11700 282a 51       		.byte	0x51
 11701 282b 02       		.uleb128 0x2
 11702 282c 75       		.byte	0x75
 11703 282d 00       		.sleb128 0
 11704 282e 1A       		.uleb128 0x1a
 11705 282f 01       		.uleb128 0x1
 11706 2830 50       		.byte	0x50
 11707 2831 02       		.uleb128 0x2
 11708 2832 91       		.byte	0x91
 11709 2833 40       		.sleb128 -64
 11710 2834 00       		.byte	0
 11711 2835 1C       		.uleb128 0x1c
 11712 2836 A8000000 		.4byte	.LVL908
 11713 283a 3C180000 		.4byte	0x183c
 11714 283e 00       		.byte	0
 11715 283f 20       		.uleb128 0x20
 11716 2840 98010000 		.4byte	.LASF157
 11717 2844 01       		.byte	0x1
 11718 2845 C013     		.2byte	0x13c0
 11719 2847 22040000 		.4byte	0x422
 11720 284b 00000000 		.4byte	.LFB46
 11721 284f 2C010000 		.4byte	.LFE46-.LFB46
 11722 2853 01       		.uleb128 0x1
 11723 2854 9C       		.byte	0x9c
 11724 2855 FB290000 		.4byte	0x29fb
 11725 2859 18       		.uleb128 0x18
 11726 285a 40020000 		.4byte	.LASF94
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 309


 11727 285e 01       		.byte	0x1
 11728 285f C113     		.2byte	0x13c1
 11729 2861 CD070000 		.4byte	0x7cd
 11730 2865 8D2B0000 		.4byte	.LLST205
 11731 2869 16       		.uleb128 0x16
 11732 286a 72657300 		.ascii	"res\000"
 11733 286e 01       		.byte	0x1
 11734 286f C413     		.2byte	0x13c4
 11735 2871 22040000 		.4byte	0x422
 11736 2875 DF2B0000 		.4byte	.LLST206
 11737 2879 1F       		.uleb128 0x1f
 11738 287a 667300   		.ascii	"fs\000"
 11739 287d 01       		.byte	0x1
 11740 287e C513     		.2byte	0x13c5
 11741 2880 3C020000 		.4byte	0x23c
 11742 2884 02       		.uleb128 0x2
 11743 2885 91       		.byte	0x91
 11744 2886 64       		.sleb128 -28
 11745 2887 1F       		.uleb128 0x1f
 11746 2888 646A00   		.ascii	"dj\000"
 11747 288b 01       		.byte	0x1
 11748 288c C613     		.2byte	0x13c6
 11749 288e 34030000 		.4byte	0x334
 11750 2892 03       		.uleb128 0x3
 11751 2893 91       		.byte	0x91
 11752 2894 B87F     		.sleb128 -72
 11753 2896 1E       		.uleb128 0x1e
 11754 2897 0E060000 		.4byte	.LASF158
 11755 289b 01       		.byte	0x1
 11756 289c C713     		.2byte	0x13c7
 11757 289e 42020000 		.4byte	0x242
 11758 28a2 03       		.uleb128 0x3
 11759 28a3 91       		.byte	0x91
 11760 28a4 A87F     		.sleb128 -88
 11761 28a6 16       		.uleb128 0x16
 11762 28a7 64636C00 		.ascii	"dcl\000"
 11763 28ab 01       		.byte	0x1
 11764 28ac C813     		.2byte	0x13c8
 11765 28ae B8000000 		.4byte	0xb8
 11766 28b2 4B2C0000 		.4byte	.LLST207
 11767 28b6 16       		.uleb128 0x16
 11768 28b7 70636C00 		.ascii	"pcl\000"
 11769 28bb 01       		.byte	0x1
 11770 28bc C813     		.2byte	0x13c8
 11771 28be B8000000 		.4byte	0xb8
 11772 28c2 692C0000 		.4byte	.LLST208
 11773 28c6 16       		.uleb128 0x16
 11774 28c7 746D00   		.ascii	"tm\000"
 11775 28ca 01       		.byte	0x1
 11776 28cb C813     		.2byte	0x13c8
 11777 28cd B8000000 		.4byte	0xb8
 11778 28d1 7D2C0000 		.4byte	.LLST209
 11779 28d5 19       		.uleb128 0x19
 11780 28d6 14000000 		.4byte	.LVL913
 11781 28da 150B0000 		.4byte	0xb15
 11782 28de F5280000 		.4byte	0x28f5
 11783 28e2 1A       		.uleb128 0x1a
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 310


 11784 28e3 01       		.uleb128 0x1
 11785 28e4 52       		.byte	0x52
 11786 28e5 01       		.uleb128 0x1
 11787 28e6 32       		.byte	0x32
 11788 28e7 1A       		.uleb128 0x1a
 11789 28e8 01       		.uleb128 0x1
 11790 28e9 51       		.byte	0x51
 11791 28ea 02       		.uleb128 0x2
 11792 28eb 91       		.byte	0x91
 11793 28ec 64       		.sleb128 -28
 11794 28ed 1A       		.uleb128 0x1a
 11795 28ee 01       		.uleb128 0x1
 11796 28ef 50       		.byte	0x50
 11797 28f0 03       		.uleb128 0x3
 11798 28f1 91       		.byte	0x91
 11799 28f2 A47F     		.sleb128 -92
 11800 28f4 00       		.byte	0
 11801 28f5 19       		.uleb128 0x19
 11802 28f6 28000000 		.4byte	.LVL915
 11803 28fa F6160000 		.4byte	0x16f6
 11804 28fe 0A290000 		.4byte	0x290a
 11805 2902 1A       		.uleb128 0x1a
 11806 2903 01       		.uleb128 0x1
 11807 2904 50       		.byte	0x50
 11808 2905 03       		.uleb128 0x3
 11809 2906 91       		.byte	0x91
 11810 2907 B87F     		.sleb128 -72
 11811 2909 00       		.byte	0
 11812 290a 19       		.uleb128 0x19
 11813 290b 40000000 		.4byte	.LVL920
 11814 290f 46100000 		.4byte	0x1046
 11815 2913 24290000 		.4byte	0x2924
 11816 2917 1A       		.uleb128 0x1a
 11817 2918 01       		.uleb128 0x1
 11818 2919 51       		.byte	0x51
 11819 291a 01       		.uleb128 0x1
 11820 291b 30       		.byte	0x30
 11821 291c 1A       		.uleb128 0x1a
 11822 291d 01       		.uleb128 0x1
 11823 291e 50       		.byte	0x50
 11824 291f 03       		.uleb128 0x3
 11825 2920 91       		.byte	0x91
 11826 2921 A87F     		.sleb128 -88
 11827 2923 00       		.byte	0
 11828 2924 1C       		.uleb128 0x1c
 11829 2925 58000000 		.4byte	.LVL924
 11830 2929 F02C0000 		.4byte	0x2cf0
 11831 292d 19       		.uleb128 0x19
 11832 292e 66000000 		.4byte	.LVL927
 11833 2932 6B120000 		.4byte	0x126b
 11834 2936 41290000 		.4byte	0x2941
 11835 293a 1A       		.uleb128 0x1a
 11836 293b 01       		.uleb128 0x1
 11837 293c 51       		.byte	0x51
 11838 293d 02       		.uleb128 0x2
 11839 293e 75       		.byte	0x75
 11840 293f 00       		.sleb128 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 311


 11841 2940 00       		.byte	0
 11842 2941 19       		.uleb128 0x19
 11843 2942 7A000000 		.4byte	.LVL929
 11844 2946 982C0000 		.4byte	0x2c98
 11845 294a 60290000 		.4byte	0x2960
 11846 294e 1A       		.uleb128 0x1a
 11847 294f 01       		.uleb128 0x1
 11848 2950 52       		.byte	0x52
 11849 2951 01       		.uleb128 0x1
 11850 2952 3B       		.byte	0x3b
 11851 2953 1A       		.uleb128 0x1a
 11852 2954 01       		.uleb128 0x1
 11853 2955 51       		.byte	0x51
 11854 2956 02       		.uleb128 0x2
 11855 2957 08       		.byte	0x8
 11856 2958 20       		.byte	0x20
 11857 2959 1A       		.uleb128 0x1a
 11858 295a 01       		.uleb128 0x1
 11859 295b 50       		.byte	0x50
 11860 295c 02       		.uleb128 0x2
 11861 295d 74       		.byte	0x74
 11862 295e 30       		.sleb128 48
 11863 295f 00       		.byte	0
 11864 2960 19       		.uleb128 0x19
 11865 2961 90000000 		.4byte	.LVL930
 11866 2965 21050000 		.4byte	0x521
 11867 2969 7B290000 		.4byte	0x297b
 11868 296d 1A       		.uleb128 0x1a
 11869 296e 01       		.uleb128 0x1
 11870 296f 51       		.byte	0x51
 11871 2970 02       		.uleb128 0x2
 11872 2971 76       		.byte	0x76
 11873 2972 00       		.sleb128 0
 11874 2973 1A       		.uleb128 0x1a
 11875 2974 01       		.uleb128 0x1
 11876 2975 50       		.byte	0x50
 11877 2976 03       		.uleb128 0x3
 11878 2977 74       		.byte	0x74
 11879 2978 C600     		.sleb128 70
 11880 297a 00       		.byte	0
 11881 297b 19       		.uleb128 0x19
 11882 297c 9C000000 		.4byte	.LVL931
 11883 2980 51060000 		.4byte	0x651
 11884 2984 8F290000 		.4byte	0x298f
 11885 2988 1A       		.uleb128 0x1a
 11886 2989 01       		.uleb128 0x1
 11887 298a 52       		.byte	0x52
 11888 298b 02       		.uleb128 0x2
 11889 298c 75       		.byte	0x75
 11890 298d 00       		.sleb128 0
 11891 298e 00       		.byte	0
 11892 298f 1C       		.uleb128 0x1c
 11893 2990 DE000000 		.4byte	.LVL933
 11894 2994 51060000 		.4byte	0x651
 11895 2998 19       		.uleb128 0x19
 11896 2999 EA000000 		.4byte	.LVL934
 11897 299d B3170000 		.4byte	0x17b3
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 312


 11898 29a1 AD290000 		.4byte	0x29ad
 11899 29a5 1A       		.uleb128 0x1a
 11900 29a6 01       		.uleb128 0x1
 11901 29a7 50       		.byte	0x50
 11902 29a8 03       		.uleb128 0x3
 11903 29a9 91       		.byte	0x91
 11904 29aa B87F     		.sleb128 -72
 11905 29ac 00       		.byte	0
 11906 29ad 19       		.uleb128 0x19
 11907 29ae F8000000 		.4byte	.LVL936
 11908 29b2 21050000 		.4byte	0x521
 11909 29b6 C1290000 		.4byte	0x29c1
 11910 29ba 1A       		.uleb128 0x1a
 11911 29bb 01       		.uleb128 0x1
 11912 29bc 51       		.byte	0x51
 11913 29bd 02       		.uleb128 0x2
 11914 29be 76       		.byte	0x76
 11915 29bf 00       		.sleb128 0
 11916 29c0 00       		.byte	0
 11917 29c1 19       		.uleb128 0x19
 11918 29c2 02010000 		.4byte	.LVL937
 11919 29c6 51060000 		.4byte	0x651
 11920 29ca D5290000 		.4byte	0x29d5
 11921 29ce 1A       		.uleb128 0x1a
 11922 29cf 01       		.uleb128 0x1
 11923 29d0 52       		.byte	0x52
 11924 29d1 02       		.uleb128 0x2
 11925 29d2 75       		.byte	0x75
 11926 29d3 00       		.sleb128 0
 11927 29d4 00       		.byte	0
 11928 29d5 1C       		.uleb128 0x1c
 11929 29d6 14010000 		.4byte	.LVL938
 11930 29da 3C180000 		.4byte	0x183c
 11931 29de 1B       		.uleb128 0x1b
 11932 29df 22010000 		.4byte	.LVL940
 11933 29e3 46110000 		.4byte	0x1146
 11934 29e7 1A       		.uleb128 0x1a
 11935 29e8 01       		.uleb128 0x1
 11936 29e9 52       		.byte	0x52
 11937 29ea 01       		.uleb128 0x1
 11938 29eb 30       		.byte	0x30
 11939 29ec 1A       		.uleb128 0x1a
 11940 29ed 01       		.uleb128 0x1
 11941 29ee 51       		.byte	0x51
 11942 29ef 02       		.uleb128 0x2
 11943 29f0 75       		.byte	0x75
 11944 29f1 00       		.sleb128 0
 11945 29f2 1A       		.uleb128 0x1a
 11946 29f3 01       		.uleb128 0x1
 11947 29f4 50       		.byte	0x50
 11948 29f5 03       		.uleb128 0x3
 11949 29f6 91       		.byte	0x91
 11950 29f7 A87F     		.sleb128 -88
 11951 29f9 00       		.byte	0
 11952 29fa 00       		.byte	0
 11953 29fb 20       		.uleb128 0x20
 11954 29fc 08030000 		.4byte	.LASF159
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 313


 11955 2a00 01       		.byte	0x1
 11956 2a01 1414     		.2byte	0x1414
 11957 2a03 22040000 		.4byte	0x422
 11958 2a07 00000000 		.4byte	.LFB47
 11959 2a0b 4C010000 		.4byte	.LFE47-.LFB47
 11960 2a0f 01       		.uleb128 0x1
 11961 2a10 9C       		.byte	0x9c
 11962 2a11 7A2B0000 		.4byte	0x2b7a
 11963 2a15 18       		.uleb128 0x18
 11964 2a16 23010000 		.4byte	.LASF160
 11965 2a1a 01       		.byte	0x1
 11966 2a1b 1514     		.2byte	0x1415
 11967 2a1d CD070000 		.4byte	0x7cd
 11968 2a21 9B2C0000 		.4byte	.LLST210
 11969 2a25 18       		.uleb128 0x18
 11970 2a26 77020000 		.4byte	.LASF161
 11971 2a2a 01       		.byte	0x1
 11972 2a2b 1614     		.2byte	0x1416
 11973 2a2d CD070000 		.4byte	0x7cd
 11974 2a31 D42C0000 		.4byte	.LLST211
 11975 2a35 16       		.uleb128 0x16
 11976 2a36 72657300 		.ascii	"res\000"
 11977 2a3a 01       		.byte	0x1
 11978 2a3b 1914     		.2byte	0x1419
 11979 2a3d 22040000 		.4byte	0x422
 11980 2a41 1A2D0000 		.4byte	.LLST212
 11981 2a45 1F       		.uleb128 0x1f
 11982 2a46 667300   		.ascii	"fs\000"
 11983 2a49 01       		.byte	0x1
 11984 2a4a 1A14     		.2byte	0x141a
 11985 2a4c 3C020000 		.4byte	0x23c
 11986 2a50 02       		.uleb128 0x2
 11987 2a51 91       		.byte	0x91
 11988 2a52 64       		.sleb128 -28
 11989 2a53 1F       		.uleb128 0x1f
 11990 2a54 646A6F00 		.ascii	"djo\000"
 11991 2a58 01       		.byte	0x1
 11992 2a59 1B14     		.2byte	0x141b
 11993 2a5b 34030000 		.4byte	0x334
 11994 2a5f 03       		.uleb128 0x3
 11995 2a60 91       		.byte	0x91
 11996 2a61 B87F     		.sleb128 -72
 11997 2a63 1F       		.uleb128 0x1f
 11998 2a64 646A6E00 		.ascii	"djn\000"
 11999 2a68 01       		.byte	0x1
 12000 2a69 1B14     		.2byte	0x141b
 12001 2a6b 34030000 		.4byte	0x334
 12002 2a6f 03       		.uleb128 0x3
 12003 2a70 91       		.byte	0x91
 12004 2a71 8C7F     		.sleb128 -116
 12005 2a73 1F       		.uleb128 0x1f
 12006 2a74 62756600 		.ascii	"buf\000"
 12007 2a78 01       		.byte	0x1
 12008 2a79 1C14     		.2byte	0x141c
 12009 2a7b 7A2B0000 		.4byte	0x2b7a
 12010 2a7f 03       		.uleb128 0x3
 12011 2a80 91       		.byte	0x91
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 314


 12012 2a81 EC7E     		.sleb128 -148
 12013 2a83 16       		.uleb128 0x16
 12014 2a84 64697200 		.ascii	"dir\000"
 12015 2a88 01       		.byte	0x1
 12016 2a89 1C14     		.2byte	0x141c
 12017 2a8b C3020000 		.4byte	0x2c3
 12018 2a8f 902D0000 		.4byte	.LLST213
 12019 2a93 1D       		.uleb128 0x1d
 12020 2a94 CD020000 		.4byte	.LASF45
 12021 2a98 01       		.byte	0x1
 12022 2a99 1D14     		.2byte	0x141d
 12023 2a9b CE000000 		.4byte	0xce
 12024 2a9f AE2D0000 		.4byte	.LLST214
 12025 2aa3 19       		.uleb128 0x19
 12026 2aa4 10000000 		.4byte	.LVL945
 12027 2aa8 51070000 		.4byte	0x751
 12028 2aac B82A0000 		.4byte	0x2ab8
 12029 2ab0 1A       		.uleb128 0x1a
 12030 2ab1 01       		.uleb128 0x1
 12031 2ab2 50       		.byte	0x50
 12032 2ab3 03       		.uleb128 0x3
 12033 2ab4 91       		.byte	0x91
 12034 2ab5 E07E     		.sleb128 -160
 12035 2ab7 00       		.byte	0
 12036 2ab8 19       		.uleb128 0x19
 12037 2ab9 1A000000 		.4byte	.LVL947
 12038 2abd 150B0000 		.4byte	0xb15
 12039 2ac1 D82A0000 		.4byte	0x2ad8
 12040 2ac5 1A       		.uleb128 0x1a
 12041 2ac6 01       		.uleb128 0x1
 12042 2ac7 52       		.byte	0x52
 12043 2ac8 01       		.uleb128 0x1
 12044 2ac9 32       		.byte	0x32
 12045 2aca 1A       		.uleb128 0x1a
 12046 2acb 01       		.uleb128 0x1
 12047 2acc 51       		.byte	0x51
 12048 2acd 02       		.uleb128 0x2
 12049 2ace 91       		.byte	0x91
 12050 2acf 64       		.sleb128 -28
 12051 2ad0 1A       		.uleb128 0x1a
 12052 2ad1 01       		.uleb128 0x1
 12053 2ad2 50       		.byte	0x50
 12054 2ad3 03       		.uleb128 0x3
 12055 2ad4 91       		.byte	0x91
 12056 2ad5 E47E     		.sleb128 -156
 12057 2ad7 00       		.byte	0
 12058 2ad8 19       		.uleb128 0x19
 12059 2ad9 2E000000 		.4byte	.LVL949
 12060 2add F6160000 		.4byte	0x16f6
 12061 2ae1 ED2A0000 		.4byte	0x2aed
 12062 2ae5 1A       		.uleb128 0x1a
 12063 2ae6 01       		.uleb128 0x1
 12064 2ae7 50       		.byte	0x50
 12065 2ae8 03       		.uleb128 0x3
 12066 2ae9 91       		.byte	0x91
 12067 2aea B87F     		.sleb128 -72
 12068 2aec 00       		.byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 315


 12069 2aed 19       		.uleb128 0x19
 12070 2aee 78000000 		.4byte	.LVL952
 12071 2af2 F6160000 		.4byte	0x16f6
 12072 2af6 012B0000 		.4byte	0x2b01
 12073 2afa 1A       		.uleb128 0x1a
 12074 2afb 01       		.uleb128 0x1
 12075 2afc 50       		.byte	0x50
 12076 2afd 02       		.uleb128 0x2
 12077 2afe 74       		.byte	0x74
 12078 2aff 60       		.sleb128 -32
 12079 2b00 00       		.byte	0
 12080 2b01 19       		.uleb128 0x19
 12081 2b02 A0000000 		.4byte	.LVL954
 12082 2b06 B3170000 		.4byte	0x17b3
 12083 2b0a 162B0000 		.4byte	0x2b16
 12084 2b0e 1A       		.uleb128 0x1a
 12085 2b0f 01       		.uleb128 0x1
 12086 2b10 50       		.byte	0x50
 12087 2b11 03       		.uleb128 0x3
 12088 2b12 91       		.byte	0x91
 12089 2b13 8C7F     		.sleb128 -116
 12090 2b15 00       		.byte	0
 12091 2b16 19       		.uleb128 0x19
 12092 2b17 FC000000 		.4byte	.LVL960
 12093 2b1b E4050000 		.4byte	0x5e4
 12094 2b1f 2A2B0000 		.4byte	0x2b2a
 12095 2b23 1A       		.uleb128 0x1a
 12096 2b24 01       		.uleb128 0x1
 12097 2b25 50       		.byte	0x50
 12098 2b26 02       		.uleb128 0x2
 12099 2b27 75       		.byte	0x75
 12100 2b28 00       		.sleb128 0
 12101 2b29 00       		.byte	0
 12102 2b2a 19       		.uleb128 0x19
 12103 2b2b 04010000 		.4byte	.LVL961
 12104 2b2f AA050000 		.4byte	0x5aa
 12105 2b33 3E2B0000 		.4byte	0x2b3e
 12106 2b37 1A       		.uleb128 0x1a
 12107 2b38 01       		.uleb128 0x1
 12108 2b39 50       		.byte	0x50
 12109 2b3a 02       		.uleb128 0x2
 12110 2b3b 75       		.byte	0x75
 12111 2b3c 00       		.sleb128 0
 12112 2b3d 00       		.byte	0
 12113 2b3e 19       		.uleb128 0x19
 12114 2b3f 0E010000 		.4byte	.LVL963
 12115 2b43 A0080000 		.4byte	0x8a0
 12116 2b47 522B0000 		.4byte	0x2b52
 12117 2b4b 1A       		.uleb128 0x1a
 12118 2b4c 01       		.uleb128 0x1
 12119 2b4d 50       		.byte	0x50
 12120 2b4e 02       		.uleb128 0x2
 12121 2b4f 75       		.byte	0x75
 12122 2b50 00       		.sleb128 0
 12123 2b51 00       		.byte	0
 12124 2b52 1C       		.uleb128 0x1c
 12125 2b53 28010000 		.4byte	.LVL966
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 316


 12126 2b57 51060000 		.4byte	0x651
 12127 2b5b 19       		.uleb128 0x19
 12128 2b5c 3A010000 		.4byte	.LVL969
 12129 2b60 14120000 		.4byte	0x1214
 12130 2b64 702B0000 		.4byte	0x2b70
 12131 2b68 1A       		.uleb128 0x1a
 12132 2b69 01       		.uleb128 0x1
 12133 2b6a 50       		.byte	0x50
 12134 2b6b 03       		.uleb128 0x3
 12135 2b6c 91       		.byte	0x91
 12136 2b6d B87F     		.sleb128 -72
 12137 2b6f 00       		.byte	0
 12138 2b70 1C       		.uleb128 0x1c
 12139 2b71 44010000 		.4byte	.LVL971
 12140 2b75 3C180000 		.4byte	0x183c
 12141 2b79 00       		.byte	0
 12142 2b7a 0B       		.uleb128 0xb
 12143 2b7b A2000000 		.4byte	0xa2
 12144 2b7f 8A2B0000 		.4byte	0x2b8a
 12145 2b83 0F       		.uleb128 0xf
 12146 2b84 76000000 		.4byte	0x76
 12147 2b88 1F       		.byte	0x1f
 12148 2b89 00       		.byte	0
 12149 2b8a 0B       		.uleb128 0xb
 12150 2b8b 3C020000 		.4byte	0x23c
 12151 2b8f 9A2B0000 		.4byte	0x2b9a
 12152 2b93 0F       		.uleb128 0xf
 12153 2b94 76000000 		.4byte	0x76
 12154 2b98 00       		.byte	0
 12155 2b99 00       		.byte	0
 12156 2b9a 1E       		.uleb128 0x1e
 12157 2b9b D6030000 		.4byte	.LASF162
 12158 2b9f 01       		.byte	0x1
 12159 2ba0 D001     		.2byte	0x1d0
 12160 2ba2 8A2B0000 		.4byte	0x2b8a
 12161 2ba6 05       		.uleb128 0x5
 12162 2ba7 03       		.byte	0x3
 12163 2ba8 00000000 		.4byte	FatFs
 12164 2bac 1E       		.uleb128 0x1e
 12165 2bad 78030000 		.4byte	.LASF163
 12166 2bb1 01       		.byte	0x1
 12167 2bb2 D101     		.2byte	0x1d1
 12168 2bb4 AD000000 		.4byte	0xad
 12169 2bb8 05       		.uleb128 0x5
 12170 2bb9 03       		.byte	0x3
 12171 2bba 04000000 		.4byte	Fsid
 12172 2bbe 0B       		.uleb128 0xb
 12173 2bbf A2000000 		.4byte	0xa2
 12174 2bc3 CE2B0000 		.4byte	0x2bce
 12175 2bc7 0F       		.uleb128 0xf
 12176 2bc8 76000000 		.4byte	0x76
 12177 2bcc 09       		.byte	0x9
 12178 2bcd 00       		.byte	0
 12179 2bce 22       		.uleb128 0x22
 12180 2bcf 11030000 		.4byte	.LASF164
 12181 2bd3 01       		.byte	0x1
 12182 2bd4 5802     		.2byte	0x258
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 317


 12183 2bd6 E52B0000 		.4byte	0x2be5
 12184 2bda 0A       		.byte	0xa
 12185 2bdb 81       		.byte	0x81
 12186 2bdc 9F       		.byte	0x9f
 12187 2bdd E0       		.byte	0xe0
 12188 2bde FC       		.byte	0xfc
 12189 2bdf 40       		.byte	0x40
 12190 2be0 7E       		.byte	0x7e
 12191 2be1 80       		.byte	0x80
 12192 2be2 FC       		.byte	0xfc
 12193 2be3 00       		.byte	0
 12194 2be4 00       		.byte	0
 12195 2be5 07       		.uleb128 0x7
 12196 2be6 BE2B0000 		.4byte	0x2bbe
 12197 2bea 23       		.uleb128 0x23
 12198 2beb D1000000 		.4byte	.LASF165
 12199 2bef 04       		.byte	0x4
 12200 2bf0 1E       		.byte	0x1e
 12201 2bf1 2E040000 		.4byte	0x42e
 12202 2bf5 FF2B0000 		.4byte	0x2bff
 12203 2bf9 24       		.uleb128 0x24
 12204 2bfa A2000000 		.4byte	0xa2
 12205 2bfe 00       		.byte	0
 12206 2bff 23       		.uleb128 0x23
 12207 2c00 F9030000 		.4byte	.LASF166
 12208 2c04 04       		.byte	0x4
 12209 2c05 20       		.byte	0x20
 12210 2c06 60040000 		.4byte	0x460
 12211 2c0a 232C0000 		.4byte	0x2c23
 12212 2c0e 24       		.uleb128 0x24
 12213 2c0f A2000000 		.4byte	0xa2
 12214 2c13 24       		.uleb128 0x24
 12215 2c14 A5040000 		.4byte	0x4a5
 12216 2c18 24       		.uleb128 0x24
 12217 2c19 CE000000 		.4byte	0xce
 12218 2c1d 24       		.uleb128 0x24
 12219 2c1e 97000000 		.4byte	0x97
 12220 2c22 00       		.byte	0
 12221 2c23 23       		.uleb128 0x23
 12222 2c24 56060000 		.4byte	.LASF167
 12223 2c28 04       		.byte	0x4
 12224 2c29 1F       		.byte	0x1f
 12225 2c2a 60040000 		.4byte	0x460
 12226 2c2e 472C0000 		.4byte	0x2c47
 12227 2c32 24       		.uleb128 0x24
 12228 2c33 A2000000 		.4byte	0xa2
 12229 2c37 24       		.uleb128 0x24
 12230 2c38 C3020000 		.4byte	0x2c3
 12231 2c3c 24       		.uleb128 0x24
 12232 2c3d CE000000 		.4byte	0xce
 12233 2c41 24       		.uleb128 0x24
 12234 2c42 97000000 		.4byte	0x97
 12235 2c46 00       		.byte	0
 12236 2c47 23       		.uleb128 0x23
 12237 2c48 FC010000 		.4byte	.LASF168
 12238 2c4c 05       		.byte	0x5
 12239 2c4d 16       		.byte	0x16
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 318


 12240 2c4e 25000000 		.4byte	0x25
 12241 2c52 662C0000 		.4byte	0x2c66
 12242 2c56 24       		.uleb128 0x24
 12243 2c57 EC1F0000 		.4byte	0x1fec
 12244 2c5b 24       		.uleb128 0x24
 12245 2c5c EC1F0000 		.4byte	0x1fec
 12246 2c60 24       		.uleb128 0x24
 12247 2c61 2C000000 		.4byte	0x2c
 12248 2c65 00       		.byte	0
 12249 2c66 23       		.uleb128 0x23
 12250 2c67 53010000 		.4byte	.LASF169
 12251 2c6b 04       		.byte	0x4
 12252 2c6c 1D       		.byte	0x1d
 12253 2c6d 2E040000 		.4byte	0x42e
 12254 2c71 7B2C0000 		.4byte	0x2c7b
 12255 2c75 24       		.uleb128 0x24
 12256 2c76 A2000000 		.4byte	0xa2
 12257 2c7a 00       		.byte	0
 12258 2c7b 25       		.uleb128 0x25
 12259 2c7c 5D030000 		.4byte	.LASF170
 12260 2c80 7D000000 		.4byte	0x7d
 12261 2c84 982C0000 		.4byte	0x2c98
 12262 2c88 24       		.uleb128 0x24
 12263 2c89 7D000000 		.4byte	0x7d
 12264 2c8d 24       		.uleb128 0x24
 12265 2c8e 25000000 		.4byte	0x25
 12266 2c92 24       		.uleb128 0x24
 12267 2c93 76000000 		.4byte	0x76
 12268 2c97 00       		.byte	0
 12269 2c98 23       		.uleb128 0x23
 12270 2c99 5D030000 		.4byte	.LASF170
 12271 2c9d 05       		.byte	0x5
 12272 2c9e 19       		.byte	0x19
 12273 2c9f 7D000000 		.4byte	0x7d
 12274 2ca3 B72C0000 		.4byte	0x2cb7
 12275 2ca7 24       		.uleb128 0x24
 12276 2ca8 7D000000 		.4byte	0x7d
 12277 2cac 24       		.uleb128 0x24
 12278 2cad 25000000 		.4byte	0x25
 12279 2cb1 24       		.uleb128 0x24
 12280 2cb2 2C000000 		.4byte	0x2c
 12281 2cb6 00       		.byte	0
 12282 2cb7 23       		.uleb128 0x23
 12283 2cb8 14050000 		.4byte	.LASF171
 12284 2cbc 05       		.byte	0x5
 12285 2cbd 1B       		.byte	0x1b
 12286 2cbe 7F000000 		.4byte	0x7f
 12287 2cc2 D12C0000 		.4byte	0x2cd1
 12288 2cc6 24       		.uleb128 0x24
 12289 2cc7 8C000000 		.4byte	0x8c
 12290 2ccb 24       		.uleb128 0x24
 12291 2ccc 25000000 		.4byte	0x25
 12292 2cd0 00       		.byte	0
 12293 2cd1 23       		.uleb128 0x23
 12294 2cd2 97020000 		.4byte	.LASF172
 12295 2cd6 04       		.byte	0x4
 12296 2cd7 21       		.byte	0x21
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 319


 12297 2cd8 60040000 		.4byte	0x460
 12298 2cdc F02C0000 		.4byte	0x2cf0
 12299 2ce0 24       		.uleb128 0x24
 12300 2ce1 A2000000 		.4byte	0xa2
 12301 2ce5 24       		.uleb128 0x24
 12302 2ce6 A2000000 		.4byte	0xa2
 12303 2cea 24       		.uleb128 0x24
 12304 2ceb 7D000000 		.4byte	0x7d
 12305 2cef 00       		.byte	0
 12306 2cf0 26       		.uleb128 0x26
 12307 2cf1 45020000 		.4byte	.LASF176
 12308 2cf5 03       		.byte	0x3
 12309 2cf6 6701     		.2byte	0x167
 12310 2cf8 B8000000 		.4byte	0xb8
 12311 2cfc 27       		.uleb128 0x27
 12312 2cfd 71030000 		.4byte	.LASF177
 12313 2d01 7D000000 		.4byte	0x7d
 12314 2d05 24       		.uleb128 0x24
 12315 2d06 7D000000 		.4byte	0x7d
 12316 2d0a 24       		.uleb128 0x24
 12317 2d0b EC1F0000 		.4byte	0x1fec
 12318 2d0f 24       		.uleb128 0x24
 12319 2d10 76000000 		.4byte	0x76
 12320 2d14 00       		.byte	0
 12321 2d15 00       		.byte	0
 12322              		.section	.debug_abbrev,"",%progbits
 12323              	.Ldebug_abbrev0:
 12324 0000 01       		.uleb128 0x1
 12325 0001 11       		.uleb128 0x11
 12326 0002 01       		.byte	0x1
 12327 0003 25       		.uleb128 0x25
 12328 0004 0E       		.uleb128 0xe
 12329 0005 13       		.uleb128 0x13
 12330 0006 0B       		.uleb128 0xb
 12331 0007 03       		.uleb128 0x3
 12332 0008 0E       		.uleb128 0xe
 12333 0009 1B       		.uleb128 0x1b
 12334 000a 0E       		.uleb128 0xe
 12335 000b 55       		.uleb128 0x55
 12336 000c 17       		.uleb128 0x17
 12337 000d 11       		.uleb128 0x11
 12338 000e 01       		.uleb128 0x1
 12339 000f 10       		.uleb128 0x10
 12340 0010 17       		.uleb128 0x17
 12341 0011 00       		.byte	0
 12342 0012 00       		.byte	0
 12343 0013 02       		.uleb128 0x2
 12344 0014 24       		.uleb128 0x24
 12345 0015 00       		.byte	0
 12346 0016 0B       		.uleb128 0xb
 12347 0017 0B       		.uleb128 0xb
 12348 0018 3E       		.uleb128 0x3e
 12349 0019 0B       		.uleb128 0xb
 12350 001a 03       		.uleb128 0x3
 12351 001b 08       		.uleb128 0x8
 12352 001c 00       		.byte	0
 12353 001d 00       		.byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 320


 12354 001e 03       		.uleb128 0x3
 12355 001f 16       		.uleb128 0x16
 12356 0020 00       		.byte	0
 12357 0021 03       		.uleb128 0x3
 12358 0022 0E       		.uleb128 0xe
 12359 0023 3A       		.uleb128 0x3a
 12360 0024 0B       		.uleb128 0xb
 12361 0025 3B       		.uleb128 0x3b
 12362 0026 0B       		.uleb128 0xb
 12363 0027 49       		.uleb128 0x49
 12364 0028 13       		.uleb128 0x13
 12365 0029 00       		.byte	0
 12366 002a 00       		.byte	0
 12367 002b 04       		.uleb128 0x4
 12368 002c 24       		.uleb128 0x24
 12369 002d 00       		.byte	0
 12370 002e 0B       		.uleb128 0xb
 12371 002f 0B       		.uleb128 0xb
 12372 0030 3E       		.uleb128 0x3e
 12373 0031 0B       		.uleb128 0xb
 12374 0032 03       		.uleb128 0x3
 12375 0033 0E       		.uleb128 0xe
 12376 0034 00       		.byte	0
 12377 0035 00       		.byte	0
 12378 0036 05       		.uleb128 0x5
 12379 0037 0F       		.uleb128 0xf
 12380 0038 00       		.byte	0
 12381 0039 0B       		.uleb128 0xb
 12382 003a 0B       		.uleb128 0xb
 12383 003b 00       		.byte	0
 12384 003c 00       		.byte	0
 12385 003d 06       		.uleb128 0x6
 12386 003e 0F       		.uleb128 0xf
 12387 003f 00       		.byte	0
 12388 0040 0B       		.uleb128 0xb
 12389 0041 0B       		.uleb128 0xb
 12390 0042 49       		.uleb128 0x49
 12391 0043 13       		.uleb128 0x13
 12392 0044 00       		.byte	0
 12393 0045 00       		.byte	0
 12394 0046 07       		.uleb128 0x7
 12395 0047 26       		.uleb128 0x26
 12396 0048 00       		.byte	0
 12397 0049 49       		.uleb128 0x49
 12398 004a 13       		.uleb128 0x13
 12399 004b 00       		.byte	0
 12400 004c 00       		.byte	0
 12401 004d 08       		.uleb128 0x8
 12402 004e 13       		.uleb128 0x13
 12403 004f 01       		.byte	0x1
 12404 0050 0B       		.uleb128 0xb
 12405 0051 05       		.uleb128 0x5
 12406 0052 3A       		.uleb128 0x3a
 12407 0053 0B       		.uleb128 0xb
 12408 0054 3B       		.uleb128 0x3b
 12409 0055 0B       		.uleb128 0xb
 12410 0056 01       		.uleb128 0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 321


 12411 0057 13       		.uleb128 0x13
 12412 0058 00       		.byte	0
 12413 0059 00       		.byte	0
 12414 005a 09       		.uleb128 0x9
 12415 005b 0D       		.uleb128 0xd
 12416 005c 00       		.byte	0
 12417 005d 03       		.uleb128 0x3
 12418 005e 0E       		.uleb128 0xe
 12419 005f 3A       		.uleb128 0x3a
 12420 0060 0B       		.uleb128 0xb
 12421 0061 3B       		.uleb128 0x3b
 12422 0062 0B       		.uleb128 0xb
 12423 0063 49       		.uleb128 0x49
 12424 0064 13       		.uleb128 0x13
 12425 0065 38       		.uleb128 0x38
 12426 0066 0B       		.uleb128 0xb
 12427 0067 00       		.byte	0
 12428 0068 00       		.byte	0
 12429 0069 0A       		.uleb128 0xa
 12430 006a 0D       		.uleb128 0xd
 12431 006b 00       		.byte	0
 12432 006c 03       		.uleb128 0x3
 12433 006d 08       		.uleb128 0x8
 12434 006e 3A       		.uleb128 0x3a
 12435 006f 0B       		.uleb128 0xb
 12436 0070 3B       		.uleb128 0x3b
 12437 0071 0B       		.uleb128 0xb
 12438 0072 49       		.uleb128 0x49
 12439 0073 13       		.uleb128 0x13
 12440 0074 38       		.uleb128 0x38
 12441 0075 0B       		.uleb128 0xb
 12442 0076 00       		.byte	0
 12443 0077 00       		.byte	0
 12444 0078 0B       		.uleb128 0xb
 12445 0079 01       		.uleb128 0x1
 12446 007a 01       		.byte	0x1
 12447 007b 49       		.uleb128 0x49
 12448 007c 13       		.uleb128 0x13
 12449 007d 01       		.uleb128 0x1
 12450 007e 13       		.uleb128 0x13
 12451 007f 00       		.byte	0
 12452 0080 00       		.byte	0
 12453 0081 0C       		.uleb128 0xc
 12454 0082 21       		.uleb128 0x21
 12455 0083 00       		.byte	0
 12456 0084 49       		.uleb128 0x49
 12457 0085 13       		.uleb128 0x13
 12458 0086 2F       		.uleb128 0x2f
 12459 0087 05       		.uleb128 0x5
 12460 0088 00       		.byte	0
 12461 0089 00       		.byte	0
 12462 008a 0D       		.uleb128 0xd
 12463 008b 13       		.uleb128 0x13
 12464 008c 01       		.byte	0x1
 12465 008d 0B       		.uleb128 0xb
 12466 008e 0B       		.uleb128 0xb
 12467 008f 3A       		.uleb128 0x3a
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 322


 12468 0090 0B       		.uleb128 0xb
 12469 0091 3B       		.uleb128 0x3b
 12470 0092 0B       		.uleb128 0xb
 12471 0093 01       		.uleb128 0x1
 12472 0094 13       		.uleb128 0x13
 12473 0095 00       		.byte	0
 12474 0096 00       		.byte	0
 12475 0097 0E       		.uleb128 0xe
 12476 0098 16       		.uleb128 0x16
 12477 0099 00       		.byte	0
 12478 009a 03       		.uleb128 0x3
 12479 009b 08       		.uleb128 0x8
 12480 009c 3A       		.uleb128 0x3a
 12481 009d 0B       		.uleb128 0xb
 12482 009e 3B       		.uleb128 0x3b
 12483 009f 0B       		.uleb128 0xb
 12484 00a0 49       		.uleb128 0x49
 12485 00a1 13       		.uleb128 0x13
 12486 00a2 00       		.byte	0
 12487 00a3 00       		.byte	0
 12488 00a4 0F       		.uleb128 0xf
 12489 00a5 21       		.uleb128 0x21
 12490 00a6 00       		.byte	0
 12491 00a7 49       		.uleb128 0x49
 12492 00a8 13       		.uleb128 0x13
 12493 00a9 2F       		.uleb128 0x2f
 12494 00aa 0B       		.uleb128 0xb
 12495 00ab 00       		.byte	0
 12496 00ac 00       		.byte	0
 12497 00ad 10       		.uleb128 0x10
 12498 00ae 16       		.uleb128 0x16
 12499 00af 00       		.byte	0
 12500 00b0 03       		.uleb128 0x3
 12501 00b1 0E       		.uleb128 0xe
 12502 00b2 3A       		.uleb128 0x3a
 12503 00b3 0B       		.uleb128 0xb
 12504 00b4 3B       		.uleb128 0x3b
 12505 00b5 05       		.uleb128 0x5
 12506 00b6 49       		.uleb128 0x49
 12507 00b7 13       		.uleb128 0x13
 12508 00b8 00       		.byte	0
 12509 00b9 00       		.byte	0
 12510 00ba 11       		.uleb128 0x11
 12511 00bb 04       		.uleb128 0x4
 12512 00bc 01       		.byte	0x1
 12513 00bd 0B       		.uleb128 0xb
 12514 00be 0B       		.uleb128 0xb
 12515 00bf 3A       		.uleb128 0x3a
 12516 00c0 0B       		.uleb128 0xb
 12517 00c1 3B       		.uleb128 0x3b
 12518 00c2 05       		.uleb128 0x5
 12519 00c3 01       		.uleb128 0x1
 12520 00c4 13       		.uleb128 0x13
 12521 00c5 00       		.byte	0
 12522 00c6 00       		.byte	0
 12523 00c7 12       		.uleb128 0x12
 12524 00c8 28       		.uleb128 0x28
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 323


 12525 00c9 00       		.byte	0
 12526 00ca 03       		.uleb128 0x3
 12527 00cb 0E       		.uleb128 0xe
 12528 00cc 1C       		.uleb128 0x1c
 12529 00cd 0D       		.uleb128 0xd
 12530 00ce 00       		.byte	0
 12531 00cf 00       		.byte	0
 12532 00d0 13       		.uleb128 0x13
 12533 00d1 04       		.uleb128 0x4
 12534 00d2 01       		.byte	0x1
 12535 00d3 0B       		.uleb128 0xb
 12536 00d4 0B       		.uleb128 0xb
 12537 00d5 3A       		.uleb128 0x3a
 12538 00d6 0B       		.uleb128 0xb
 12539 00d7 3B       		.uleb128 0x3b
 12540 00d8 0B       		.uleb128 0xb
 12541 00d9 01       		.uleb128 0x1
 12542 00da 13       		.uleb128 0x13
 12543 00db 00       		.byte	0
 12544 00dc 00       		.byte	0
 12545 00dd 14       		.uleb128 0x14
 12546 00de 2E       		.uleb128 0x2e
 12547 00df 01       		.byte	0x1
 12548 00e0 03       		.uleb128 0x3
 12549 00e1 0E       		.uleb128 0xe
 12550 00e2 3A       		.uleb128 0x3a
 12551 00e3 0B       		.uleb128 0xb
 12552 00e4 3B       		.uleb128 0x3b
 12553 00e5 05       		.uleb128 0x5
 12554 00e6 27       		.uleb128 0x27
 12555 00e7 19       		.uleb128 0x19
 12556 00e8 49       		.uleb128 0x49
 12557 00e9 13       		.uleb128 0x13
 12558 00ea 11       		.uleb128 0x11
 12559 00eb 01       		.uleb128 0x1
 12560 00ec 12       		.uleb128 0x12
 12561 00ed 06       		.uleb128 0x6
 12562 00ee 40       		.uleb128 0x40
 12563 00ef 18       		.uleb128 0x18
 12564 00f0 9742     		.uleb128 0x2117
 12565 00f2 19       		.uleb128 0x19
 12566 00f3 01       		.uleb128 0x1
 12567 00f4 13       		.uleb128 0x13
 12568 00f5 00       		.byte	0
 12569 00f6 00       		.byte	0
 12570 00f7 15       		.uleb128 0x15
 12571 00f8 05       		.uleb128 0x5
 12572 00f9 00       		.byte	0
 12573 00fa 03       		.uleb128 0x3
 12574 00fb 08       		.uleb128 0x8
 12575 00fc 3A       		.uleb128 0x3a
 12576 00fd 0B       		.uleb128 0xb
 12577 00fe 3B       		.uleb128 0x3b
 12578 00ff 05       		.uleb128 0x5
 12579 0100 49       		.uleb128 0x49
 12580 0101 13       		.uleb128 0x13
 12581 0102 02       		.uleb128 0x2
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 324


 12582 0103 17       		.uleb128 0x17
 12583 0104 00       		.byte	0
 12584 0105 00       		.byte	0
 12585 0106 16       		.uleb128 0x16
 12586 0107 34       		.uleb128 0x34
 12587 0108 00       		.byte	0
 12588 0109 03       		.uleb128 0x3
 12589 010a 08       		.uleb128 0x8
 12590 010b 3A       		.uleb128 0x3a
 12591 010c 0B       		.uleb128 0xb
 12592 010d 3B       		.uleb128 0x3b
 12593 010e 05       		.uleb128 0x5
 12594 010f 49       		.uleb128 0x49
 12595 0110 13       		.uleb128 0x13
 12596 0111 02       		.uleb128 0x2
 12597 0112 17       		.uleb128 0x17
 12598 0113 00       		.byte	0
 12599 0114 00       		.byte	0
 12600 0115 17       		.uleb128 0x17
 12601 0116 2E       		.uleb128 0x2e
 12602 0117 01       		.byte	0x1
 12603 0118 03       		.uleb128 0x3
 12604 0119 0E       		.uleb128 0xe
 12605 011a 3A       		.uleb128 0x3a
 12606 011b 0B       		.uleb128 0xb
 12607 011c 3B       		.uleb128 0x3b
 12608 011d 05       		.uleb128 0x5
 12609 011e 27       		.uleb128 0x27
 12610 011f 19       		.uleb128 0x19
 12611 0120 11       		.uleb128 0x11
 12612 0121 01       		.uleb128 0x1
 12613 0122 12       		.uleb128 0x12
 12614 0123 06       		.uleb128 0x6
 12615 0124 40       		.uleb128 0x40
 12616 0125 18       		.uleb128 0x18
 12617 0126 9742     		.uleb128 0x2117
 12618 0128 19       		.uleb128 0x19
 12619 0129 01       		.uleb128 0x1
 12620 012a 13       		.uleb128 0x13
 12621 012b 00       		.byte	0
 12622 012c 00       		.byte	0
 12623 012d 18       		.uleb128 0x18
 12624 012e 05       		.uleb128 0x5
 12625 012f 00       		.byte	0
 12626 0130 03       		.uleb128 0x3
 12627 0131 0E       		.uleb128 0xe
 12628 0132 3A       		.uleb128 0x3a
 12629 0133 0B       		.uleb128 0xb
 12630 0134 3B       		.uleb128 0x3b
 12631 0135 05       		.uleb128 0x5
 12632 0136 49       		.uleb128 0x49
 12633 0137 13       		.uleb128 0x13
 12634 0138 02       		.uleb128 0x2
 12635 0139 17       		.uleb128 0x17
 12636 013a 00       		.byte	0
 12637 013b 00       		.byte	0
 12638 013c 19       		.uleb128 0x19
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 325


 12639 013d 898201   		.uleb128 0x4109
 12640 0140 01       		.byte	0x1
 12641 0141 11       		.uleb128 0x11
 12642 0142 01       		.uleb128 0x1
 12643 0143 31       		.uleb128 0x31
 12644 0144 13       		.uleb128 0x13
 12645 0145 01       		.uleb128 0x1
 12646 0146 13       		.uleb128 0x13
 12647 0147 00       		.byte	0
 12648 0148 00       		.byte	0
 12649 0149 1A       		.uleb128 0x1a
 12650 014a 8A8201   		.uleb128 0x410a
 12651 014d 00       		.byte	0
 12652 014e 02       		.uleb128 0x2
 12653 014f 18       		.uleb128 0x18
 12654 0150 9142     		.uleb128 0x2111
 12655 0152 18       		.uleb128 0x18
 12656 0153 00       		.byte	0
 12657 0154 00       		.byte	0
 12658 0155 1B       		.uleb128 0x1b
 12659 0156 898201   		.uleb128 0x4109
 12660 0159 01       		.byte	0x1
 12661 015a 11       		.uleb128 0x11
 12662 015b 01       		.uleb128 0x1
 12663 015c 31       		.uleb128 0x31
 12664 015d 13       		.uleb128 0x13
 12665 015e 00       		.byte	0
 12666 015f 00       		.byte	0
 12667 0160 1C       		.uleb128 0x1c
 12668 0161 898201   		.uleb128 0x4109
 12669 0164 00       		.byte	0
 12670 0165 11       		.uleb128 0x11
 12671 0166 01       		.uleb128 0x1
 12672 0167 31       		.uleb128 0x31
 12673 0168 13       		.uleb128 0x13
 12674 0169 00       		.byte	0
 12675 016a 00       		.byte	0
 12676 016b 1D       		.uleb128 0x1d
 12677 016c 34       		.uleb128 0x34
 12678 016d 00       		.byte	0
 12679 016e 03       		.uleb128 0x3
 12680 016f 0E       		.uleb128 0xe
 12681 0170 3A       		.uleb128 0x3a
 12682 0171 0B       		.uleb128 0xb
 12683 0172 3B       		.uleb128 0x3b
 12684 0173 05       		.uleb128 0x5
 12685 0174 49       		.uleb128 0x49
 12686 0175 13       		.uleb128 0x13
 12687 0176 02       		.uleb128 0x2
 12688 0177 17       		.uleb128 0x17
 12689 0178 00       		.byte	0
 12690 0179 00       		.byte	0
 12691 017a 1E       		.uleb128 0x1e
 12692 017b 34       		.uleb128 0x34
 12693 017c 00       		.byte	0
 12694 017d 03       		.uleb128 0x3
 12695 017e 0E       		.uleb128 0xe
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 326


 12696 017f 3A       		.uleb128 0x3a
 12697 0180 0B       		.uleb128 0xb
 12698 0181 3B       		.uleb128 0x3b
 12699 0182 05       		.uleb128 0x5
 12700 0183 49       		.uleb128 0x49
 12701 0184 13       		.uleb128 0x13
 12702 0185 02       		.uleb128 0x2
 12703 0186 18       		.uleb128 0x18
 12704 0187 00       		.byte	0
 12705 0188 00       		.byte	0
 12706 0189 1F       		.uleb128 0x1f
 12707 018a 34       		.uleb128 0x34
 12708 018b 00       		.byte	0
 12709 018c 03       		.uleb128 0x3
 12710 018d 08       		.uleb128 0x8
 12711 018e 3A       		.uleb128 0x3a
 12712 018f 0B       		.uleb128 0xb
 12713 0190 3B       		.uleb128 0x3b
 12714 0191 05       		.uleb128 0x5
 12715 0192 49       		.uleb128 0x49
 12716 0193 13       		.uleb128 0x13
 12717 0194 02       		.uleb128 0x2
 12718 0195 18       		.uleb128 0x18
 12719 0196 00       		.byte	0
 12720 0197 00       		.byte	0
 12721 0198 20       		.uleb128 0x20
 12722 0199 2E       		.uleb128 0x2e
 12723 019a 01       		.byte	0x1
 12724 019b 3F       		.uleb128 0x3f
 12725 019c 19       		.uleb128 0x19
 12726 019d 03       		.uleb128 0x3
 12727 019e 0E       		.uleb128 0xe
 12728 019f 3A       		.uleb128 0x3a
 12729 01a0 0B       		.uleb128 0xb
 12730 01a1 3B       		.uleb128 0x3b
 12731 01a2 05       		.uleb128 0x5
 12732 01a3 27       		.uleb128 0x27
 12733 01a4 19       		.uleb128 0x19
 12734 01a5 49       		.uleb128 0x49
 12735 01a6 13       		.uleb128 0x13
 12736 01a7 11       		.uleb128 0x11
 12737 01a8 01       		.uleb128 0x1
 12738 01a9 12       		.uleb128 0x12
 12739 01aa 06       		.uleb128 0x6
 12740 01ab 40       		.uleb128 0x40
 12741 01ac 18       		.uleb128 0x18
 12742 01ad 9742     		.uleb128 0x2117
 12743 01af 19       		.uleb128 0x19
 12744 01b0 01       		.uleb128 0x1
 12745 01b1 13       		.uleb128 0x13
 12746 01b2 00       		.byte	0
 12747 01b3 00       		.byte	0
 12748 01b4 21       		.uleb128 0x21
 12749 01b5 26       		.uleb128 0x26
 12750 01b6 00       		.byte	0
 12751 01b7 00       		.byte	0
 12752 01b8 00       		.byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 327


 12753 01b9 22       		.uleb128 0x22
 12754 01ba 34       		.uleb128 0x34
 12755 01bb 00       		.byte	0
 12756 01bc 03       		.uleb128 0x3
 12757 01bd 0E       		.uleb128 0xe
 12758 01be 3A       		.uleb128 0x3a
 12759 01bf 0B       		.uleb128 0xb
 12760 01c0 3B       		.uleb128 0x3b
 12761 01c1 05       		.uleb128 0x5
 12762 01c2 49       		.uleb128 0x49
 12763 01c3 13       		.uleb128 0x13
 12764 01c4 1C       		.uleb128 0x1c
 12765 01c5 0A       		.uleb128 0xa
 12766 01c6 00       		.byte	0
 12767 01c7 00       		.byte	0
 12768 01c8 23       		.uleb128 0x23
 12769 01c9 2E       		.uleb128 0x2e
 12770 01ca 01       		.byte	0x1
 12771 01cb 3F       		.uleb128 0x3f
 12772 01cc 19       		.uleb128 0x19
 12773 01cd 03       		.uleb128 0x3
 12774 01ce 0E       		.uleb128 0xe
 12775 01cf 3A       		.uleb128 0x3a
 12776 01d0 0B       		.uleb128 0xb
 12777 01d1 3B       		.uleb128 0x3b
 12778 01d2 0B       		.uleb128 0xb
 12779 01d3 27       		.uleb128 0x27
 12780 01d4 19       		.uleb128 0x19
 12781 01d5 49       		.uleb128 0x49
 12782 01d6 13       		.uleb128 0x13
 12783 01d7 3C       		.uleb128 0x3c
 12784 01d8 19       		.uleb128 0x19
 12785 01d9 01       		.uleb128 0x1
 12786 01da 13       		.uleb128 0x13
 12787 01db 00       		.byte	0
 12788 01dc 00       		.byte	0
 12789 01dd 24       		.uleb128 0x24
 12790 01de 05       		.uleb128 0x5
 12791 01df 00       		.byte	0
 12792 01e0 49       		.uleb128 0x49
 12793 01e1 13       		.uleb128 0x13
 12794 01e2 00       		.byte	0
 12795 01e3 00       		.byte	0
 12796 01e4 25       		.uleb128 0x25
 12797 01e5 2E       		.uleb128 0x2e
 12798 01e6 01       		.byte	0x1
 12799 01e7 3F       		.uleb128 0x3f
 12800 01e8 19       		.uleb128 0x19
 12801 01e9 03       		.uleb128 0x3
 12802 01ea 0E       		.uleb128 0xe
 12803 01eb 27       		.uleb128 0x27
 12804 01ec 19       		.uleb128 0x19
 12805 01ed 49       		.uleb128 0x49
 12806 01ee 13       		.uleb128 0x13
 12807 01ef 34       		.uleb128 0x34
 12808 01f0 19       		.uleb128 0x19
 12809 01f1 3C       		.uleb128 0x3c
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 328


 12810 01f2 19       		.uleb128 0x19
 12811 01f3 01       		.uleb128 0x1
 12812 01f4 13       		.uleb128 0x13
 12813 01f5 00       		.byte	0
 12814 01f6 00       		.byte	0
 12815 01f7 26       		.uleb128 0x26
 12816 01f8 2E       		.uleb128 0x2e
 12817 01f9 00       		.byte	0
 12818 01fa 3F       		.uleb128 0x3f
 12819 01fb 19       		.uleb128 0x19
 12820 01fc 03       		.uleb128 0x3
 12821 01fd 0E       		.uleb128 0xe
 12822 01fe 3A       		.uleb128 0x3a
 12823 01ff 0B       		.uleb128 0xb
 12824 0200 3B       		.uleb128 0x3b
 12825 0201 05       		.uleb128 0x5
 12826 0202 27       		.uleb128 0x27
 12827 0203 19       		.uleb128 0x19
 12828 0204 49       		.uleb128 0x49
 12829 0205 13       		.uleb128 0x13
 12830 0206 3C       		.uleb128 0x3c
 12831 0207 19       		.uleb128 0x19
 12832 0208 00       		.byte	0
 12833 0209 00       		.byte	0
 12834 020a 27       		.uleb128 0x27
 12835 020b 2E       		.uleb128 0x2e
 12836 020c 01       		.byte	0x1
 12837 020d 3F       		.uleb128 0x3f
 12838 020e 19       		.uleb128 0x19
 12839 020f 03       		.uleb128 0x3
 12840 0210 0E       		.uleb128 0xe
 12841 0211 27       		.uleb128 0x27
 12842 0212 19       		.uleb128 0x19
 12843 0213 49       		.uleb128 0x49
 12844 0214 13       		.uleb128 0x13
 12845 0215 34       		.uleb128 0x34
 12846 0216 19       		.uleb128 0x19
 12847 0217 3C       		.uleb128 0x3c
 12848 0218 19       		.uleb128 0x19
 12849 0219 00       		.byte	0
 12850 021a 00       		.byte	0
 12851 021b 00       		.byte	0
 12852              		.section	.debug_loc,"",%progbits
 12853              	.Ldebug_loc0:
 12854              	.LLST0:
 12855 0000 00000000 		.4byte	.LVL0
 12856 0004 04000000 		.4byte	.LVL2
 12857 0008 0100     		.2byte	0x1
 12858 000a 50       		.byte	0x50
 12859 000b 04000000 		.4byte	.LVL2
 12860 000f 0A000000 		.4byte	.LFE0
 12861 0013 0400     		.2byte	0x4
 12862 0015 F3       		.byte	0xf3
 12863 0016 01       		.uleb128 0x1
 12864 0017 50       		.byte	0x50
 12865 0018 9F       		.byte	0x9f
 12866 0019 00000000 		.4byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 329


 12867 001d 00000000 		.4byte	0
 12868              	.LLST1:
 12869 0021 02000000 		.4byte	.LVL1
 12870 0025 04000000 		.4byte	.LVL2
 12871 0029 0600     		.2byte	0x6
 12872 002b 72       		.byte	0x72
 12873 002c 00       		.sleb128 0
 12874 002d 08       		.byte	0x8
 12875 002e FF       		.byte	0xff
 12876 002f 1A       		.byte	0x1a
 12877 0030 9F       		.byte	0x9f
 12878 0031 04000000 		.4byte	.LVL2
 12879 0035 08000000 		.4byte	.LVL3
 12880 0039 0800     		.2byte	0x8
 12881 003b 72       		.byte	0x72
 12882 003c 00       		.sleb128 0
 12883 003d 38       		.byte	0x38
 12884 003e 24       		.byte	0x24
 12885 003f 70       		.byte	0x70
 12886 0040 00       		.sleb128 0
 12887 0041 21       		.byte	0x21
 12888 0042 9F       		.byte	0x9f
 12889 0043 08000000 		.4byte	.LVL3
 12890 0047 0A000000 		.4byte	.LFE0
 12891 004b 0E00     		.2byte	0xe
 12892 004d 72       		.byte	0x72
 12893 004e 00       		.sleb128 0
 12894 004f 38       		.byte	0x38
 12895 0050 24       		.byte	0x24
 12896 0051 F3       		.byte	0xf3
 12897 0052 01       		.uleb128 0x1
 12898 0053 50       		.byte	0x50
 12899 0054 94       		.byte	0x94
 12900 0055 01       		.byte	0x1
 12901 0056 08       		.byte	0x8
 12902 0057 FF       		.byte	0xff
 12903 0058 1A       		.byte	0x1a
 12904 0059 21       		.byte	0x21
 12905 005a 9F       		.byte	0x9f
 12906 005b 00000000 		.4byte	0
 12907 005f 00000000 		.4byte	0
 12908              	.LLST2:
 12909 0063 00000000 		.4byte	.LVL4
 12910 0067 10000000 		.4byte	.LVL8
 12911 006b 0100     		.2byte	0x1
 12912 006d 50       		.byte	0x50
 12913 006e 10000000 		.4byte	.LVL8
 12914 0072 16000000 		.4byte	.LFE1
 12915 0076 0400     		.2byte	0x4
 12916 0078 F3       		.byte	0xf3
 12917 0079 01       		.uleb128 0x1
 12918 007a 50       		.byte	0x50
 12919 007b 9F       		.byte	0x9f
 12920 007c 00000000 		.4byte	0
 12921 0080 00000000 		.4byte	0
 12922              	.LLST3:
 12923 0084 02000000 		.4byte	.LVL5
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 330


 12924 0088 0E000000 		.4byte	.LVL7
 12925 008c 0100     		.2byte	0x1
 12926 008e 52       		.byte	0x52
 12927 008f 0E000000 		.4byte	.LVL7
 12928 0093 10000000 		.4byte	.LVL8
 12929 0097 0100     		.2byte	0x1
 12930 0099 53       		.byte	0x53
 12931 009a 10000000 		.4byte	.LVL8
 12932 009e 14000000 		.4byte	.LVL9
 12933 00a2 0800     		.2byte	0x8
 12934 00a4 73       		.byte	0x73
 12935 00a5 00       		.sleb128 0
 12936 00a6 38       		.byte	0x38
 12937 00a7 24       		.byte	0x24
 12938 00a8 70       		.byte	0x70
 12939 00a9 00       		.sleb128 0
 12940 00aa 21       		.byte	0x21
 12941 00ab 9F       		.byte	0x9f
 12942 00ac 14000000 		.4byte	.LVL9
 12943 00b0 16000000 		.4byte	.LFE1
 12944 00b4 0100     		.2byte	0x1
 12945 00b6 50       		.byte	0x50
 12946 00b7 00000000 		.4byte	0
 12947 00bb 00000000 		.4byte	0
 12948              	.LLST4:
 12949 00bf 00000000 		.4byte	.LVL10
 12950 00c3 00000000 		.4byte	.LVL10
 12951 00c7 0100     		.2byte	0x1
 12952 00c9 50       		.byte	0x50
 12953 00ca 00000000 		.4byte	.LVL10
 12954 00ce 02000000 		.4byte	.LVL11
 12955 00d2 0300     		.2byte	0x3
 12956 00d4 70       		.byte	0x70
 12957 00d5 01       		.sleb128 1
 12958 00d6 9F       		.byte	0x9f
 12959 00d7 02000000 		.4byte	.LVL11
 12960 00db 08000000 		.4byte	.LFE2
 12961 00df 0300     		.2byte	0x3
 12962 00e1 70       		.byte	0x70
 12963 00e2 02       		.sleb128 2
 12964 00e3 9F       		.byte	0x9f
 12965 00e4 00000000 		.4byte	0
 12966 00e8 00000000 		.4byte	0
 12967              	.LLST5:
 12968 00ec 00000000 		.4byte	.LVL10
 12969 00f0 02000000 		.4byte	.LVL11
 12970 00f4 0100     		.2byte	0x1
 12971 00f6 51       		.byte	0x51
 12972 00f7 02000000 		.4byte	.LVL11
 12973 00fb 04000000 		.4byte	.LVL12
 12974 00ff 0500     		.2byte	0x5
 12975 0101 71       		.byte	0x71
 12976 0102 00       		.sleb128 0
 12977 0103 38       		.byte	0x38
 12978 0104 25       		.byte	0x25
 12979 0105 9F       		.byte	0x9f
 12980 0106 00000000 		.4byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 331


 12981 010a 00000000 		.4byte	0
 12982              	.LLST6:
 12983 010e 00000000 		.4byte	.LVL13
 12984 0112 00000000 		.4byte	.LVL13
 12985 0116 0100     		.2byte	0x1
 12986 0118 50       		.byte	0x50
 12987 0119 00000000 		.4byte	.LVL13
 12988 011d 02000000 		.4byte	.LVL14
 12989 0121 0300     		.2byte	0x3
 12990 0123 70       		.byte	0x70
 12991 0124 01       		.sleb128 1
 12992 0125 9F       		.byte	0x9f
 12993 0126 02000000 		.4byte	.LVL14
 12994 012a 08000000 		.4byte	.LVL15
 12995 012e 0300     		.2byte	0x3
 12996 0130 70       		.byte	0x70
 12997 0131 02       		.sleb128 2
 12998 0132 9F       		.byte	0x9f
 12999 0133 08000000 		.4byte	.LVL15
 13000 0137 0E000000 		.4byte	.LVL16
 13001 013b 0300     		.2byte	0x3
 13002 013d 70       		.byte	0x70
 13003 013e 03       		.sleb128 3
 13004 013f 9F       		.byte	0x9f
 13005 0140 0E000000 		.4byte	.LVL16
 13006 0144 14000000 		.4byte	.LFE3
 13007 0148 0300     		.2byte	0x3
 13008 014a 70       		.byte	0x70
 13009 014b 04       		.sleb128 4
 13010 014c 9F       		.byte	0x9f
 13011 014d 00000000 		.4byte	0
 13012 0151 00000000 		.4byte	0
 13013              	.LLST7:
 13014 0155 00000000 		.4byte	.LVL13
 13015 0159 02000000 		.4byte	.LVL14
 13016 015d 0100     		.2byte	0x1
 13017 015f 51       		.byte	0x51
 13018 0160 02000000 		.4byte	.LVL14
 13019 0164 08000000 		.4byte	.LVL15
 13020 0168 0500     		.2byte	0x5
 13021 016a 71       		.byte	0x71
 13022 016b 00       		.sleb128 0
 13023 016c 38       		.byte	0x38
 13024 016d 25       		.byte	0x25
 13025 016e 9F       		.byte	0x9f
 13026 016f 08000000 		.4byte	.LVL15
 13027 0173 0E000000 		.4byte	.LVL16
 13028 0177 0500     		.2byte	0x5
 13029 0179 71       		.byte	0x71
 13030 017a 00       		.sleb128 0
 13031 017b 40       		.byte	0x40
 13032 017c 25       		.byte	0x25
 13033 017d 9F       		.byte	0x9f
 13034 017e 0E000000 		.4byte	.LVL16
 13035 0182 10000000 		.4byte	.LVL17
 13036 0186 0500     		.2byte	0x5
 13037 0188 71       		.byte	0x71
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 332


 13038 0189 00       		.sleb128 0
 13039 018a 48       		.byte	0x48
 13040 018b 25       		.byte	0x25
 13041 018c 9F       		.byte	0x9f
 13042 018d 10000000 		.4byte	.LVL17
 13043 0191 14000000 		.4byte	.LFE3
 13044 0195 0100     		.2byte	0x1
 13045 0197 51       		.byte	0x51
 13046 0198 00000000 		.4byte	0
 13047 019c 00000000 		.4byte	0
 13048              	.LLST8:
 13049 01a0 00000000 		.4byte	.LVL18
 13050 01a4 12000000 		.4byte	.LVL19
 13051 01a8 0100     		.2byte	0x1
 13052 01aa 50       		.byte	0x50
 13053 01ab 12000000 		.4byte	.LVL19
 13054 01af 14000000 		.4byte	.LVL20
 13055 01b3 0400     		.2byte	0x4
 13056 01b5 F3       		.byte	0xf3
 13057 01b6 01       		.uleb128 0x1
 13058 01b7 50       		.byte	0x50
 13059 01b8 9F       		.byte	0x9f
 13060 01b9 14000000 		.4byte	.LVL20
 13061 01bd 16000000 		.4byte	.LVL21
 13062 01c1 0100     		.2byte	0x1
 13063 01c3 50       		.byte	0x50
 13064 01c4 16000000 		.4byte	.LVL21
 13065 01c8 18000000 		.4byte	.LVL22
 13066 01cc 0400     		.2byte	0x4
 13067 01ce F3       		.byte	0xf3
 13068 01cf 01       		.uleb128 0x1
 13069 01d0 50       		.byte	0x50
 13070 01d1 9F       		.byte	0x9f
 13071 01d2 18000000 		.4byte	.LVL22
 13072 01d6 1A000000 		.4byte	.LVL23
 13073 01da 0100     		.2byte	0x1
 13074 01dc 50       		.byte	0x50
 13075 01dd 1A000000 		.4byte	.LVL23
 13076 01e1 1C000000 		.4byte	.LVL24
 13077 01e5 0400     		.2byte	0x4
 13078 01e7 F3       		.byte	0xf3
 13079 01e8 01       		.uleb128 0x1
 13080 01e9 50       		.byte	0x50
 13081 01ea 9F       		.byte	0x9f
 13082 01eb 1C000000 		.4byte	.LVL24
 13083 01ef 1E000000 		.4byte	.LVL25
 13084 01f3 0100     		.2byte	0x1
 13085 01f5 50       		.byte	0x50
 13086 01f6 1E000000 		.4byte	.LVL25
 13087 01fa 20000000 		.4byte	.LVL26
 13088 01fe 0400     		.2byte	0x4
 13089 0200 F3       		.byte	0xf3
 13090 0201 01       		.uleb128 0x1
 13091 0202 50       		.byte	0x50
 13092 0203 9F       		.byte	0x9f
 13093 0204 20000000 		.4byte	.LVL26
 13094 0208 22000000 		.4byte	.LVL27
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 333


 13095 020c 0100     		.2byte	0x1
 13096 020e 50       		.byte	0x50
 13097 020f 22000000 		.4byte	.LVL27
 13098 0213 24000000 		.4byte	.LFE4
 13099 0217 0400     		.2byte	0x4
 13100 0219 F3       		.byte	0xf3
 13101 021a 01       		.uleb128 0x1
 13102 021b 50       		.byte	0x50
 13103 021c 9F       		.byte	0x9f
 13104 021d 00000000 		.4byte	0
 13105 0221 00000000 		.4byte	0
 13106              	.LLST9:
 13107 0225 00000000 		.4byte	.LVL28
 13108 0229 14000000 		.4byte	.LVL29
 13109 022d 0100     		.2byte	0x1
 13110 022f 50       		.byte	0x50
 13111 0230 14000000 		.4byte	.LVL29
 13112 0234 16000000 		.4byte	.LVL30
 13113 0238 0400     		.2byte	0x4
 13114 023a F3       		.byte	0xf3
 13115 023b 01       		.uleb128 0x1
 13116 023c 50       		.byte	0x50
 13117 023d 9F       		.byte	0x9f
 13118 023e 16000000 		.4byte	.LVL30
 13119 0242 18000000 		.4byte	.LVL31
 13120 0246 0100     		.2byte	0x1
 13121 0248 50       		.byte	0x50
 13122 0249 18000000 		.4byte	.LVL31
 13123 024d 1A000000 		.4byte	.LVL32
 13124 0251 0400     		.2byte	0x4
 13125 0253 F3       		.byte	0xf3
 13126 0254 01       		.uleb128 0x1
 13127 0255 50       		.byte	0x50
 13128 0256 9F       		.byte	0x9f
 13129 0257 1A000000 		.4byte	.LVL32
 13130 025b 1C000000 		.4byte	.LVL33
 13131 025f 0100     		.2byte	0x1
 13132 0261 50       		.byte	0x50
 13133 0262 1C000000 		.4byte	.LVL33
 13134 0266 1E000000 		.4byte	.LVL34
 13135 026a 0400     		.2byte	0x4
 13136 026c F3       		.byte	0xf3
 13137 026d 01       		.uleb128 0x1
 13138 026e 50       		.byte	0x50
 13139 026f 9F       		.byte	0x9f
 13140 0270 1E000000 		.4byte	.LVL34
 13141 0274 20000000 		.4byte	.LVL35
 13142 0278 0100     		.2byte	0x1
 13143 027a 50       		.byte	0x50
 13144 027b 20000000 		.4byte	.LVL35
 13145 027f 22000000 		.4byte	.LVL36
 13146 0283 0400     		.2byte	0x4
 13147 0285 F3       		.byte	0xf3
 13148 0286 01       		.uleb128 0x1
 13149 0287 50       		.byte	0x50
 13150 0288 9F       		.byte	0x9f
 13151 0289 22000000 		.4byte	.LVL36
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 334


 13152 028d 24000000 		.4byte	.LVL37
 13153 0291 0100     		.2byte	0x1
 13154 0293 50       		.byte	0x50
 13155 0294 24000000 		.4byte	.LVL37
 13156 0298 26000000 		.4byte	.LFE5
 13157 029c 0400     		.2byte	0x4
 13158 029e F3       		.byte	0xf3
 13159 029f 01       		.uleb128 0x1
 13160 02a0 50       		.byte	0x50
 13161 02a1 9F       		.byte	0x9f
 13162 02a2 00000000 		.4byte	0
 13163 02a6 00000000 		.4byte	0
 13164              	.LLST10:
 13165 02aa 00000000 		.4byte	.LVL38
 13166 02ae 12000000 		.4byte	.LVL40
 13167 02b2 0100     		.2byte	0x1
 13168 02b4 50       		.byte	0x50
 13169 02b5 12000000 		.4byte	.LVL40
 13170 02b9 14000000 		.4byte	.LVL41
 13171 02bd 0400     		.2byte	0x4
 13172 02bf F3       		.byte	0xf3
 13173 02c0 01       		.uleb128 0x1
 13174 02c1 50       		.byte	0x50
 13175 02c2 9F       		.byte	0x9f
 13176 02c3 14000000 		.4byte	.LVL41
 13177 02c7 16000000 		.4byte	.LVL42
 13178 02cb 0100     		.2byte	0x1
 13179 02cd 50       		.byte	0x50
 13180 02ce 16000000 		.4byte	.LVL42
 13181 02d2 18000000 		.4byte	.LFE9
 13182 02d6 0400     		.2byte	0x4
 13183 02d8 F3       		.byte	0xf3
 13184 02d9 01       		.uleb128 0x1
 13185 02da 50       		.byte	0x50
 13186 02db 9F       		.byte	0x9f
 13187 02dc 00000000 		.4byte	0
 13188 02e0 00000000 		.4byte	0
 13189              	.LLST11:
 13190 02e4 00000000 		.4byte	.LVL38
 13191 02e8 02000000 		.4byte	.LVL39
 13192 02ec 0100     		.2byte	0x1
 13193 02ee 51       		.byte	0x51
 13194 02ef 02000000 		.4byte	.LVL39
 13195 02f3 18000000 		.4byte	.LFE9
 13196 02f7 0100     		.2byte	0x1
 13197 02f9 51       		.byte	0x51
 13198 02fa 00000000 		.4byte	0
 13199 02fe 00000000 		.4byte	0
 13200              	.LLST12:
 13201 0302 00000000 		.4byte	.LVL43
 13202 0306 0A000000 		.4byte	.LVL44
 13203 030a 0100     		.2byte	0x1
 13204 030c 50       		.byte	0x50
 13205 030d 0A000000 		.4byte	.LVL44
 13206 0311 24000000 		.4byte	.LFE18
 13207 0315 0100     		.2byte	0x1
 13208 0317 56       		.byte	0x56
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 335


 13209 0318 00000000 		.4byte	0
 13210 031c 00000000 		.4byte	0
 13211              	.LLST13:
 13212 0320 00000000 		.4byte	.LVL43
 13213 0324 0D000000 		.4byte	.LVL45-1
 13214 0328 0100     		.2byte	0x1
 13215 032a 51       		.byte	0x51
 13216 032b 0D000000 		.4byte	.LVL45-1
 13217 032f 24000000 		.4byte	.LFE18
 13218 0333 0100     		.2byte	0x1
 13219 0335 55       		.byte	0x55
 13220 0336 00000000 		.4byte	0
 13221 033a 00000000 		.4byte	0
 13222              	.LLST14:
 13223 033e 10000000 		.4byte	.LVL46
 13224 0342 1A000000 		.4byte	.LVL47
 13225 0346 0100     		.2byte	0x1
 13226 0348 50       		.byte	0x50
 13227 0349 1A000000 		.4byte	.LVL47
 13228 034d 22000000 		.4byte	.LVL49
 13229 0351 0100     		.2byte	0x1
 13230 0353 54       		.byte	0x54
 13231 0354 22000000 		.4byte	.LVL49
 13232 0358 24000000 		.4byte	.LFE18
 13233 035c 0100     		.2byte	0x1
 13234 035e 50       		.byte	0x50
 13235 035f 00000000 		.4byte	0
 13236 0363 00000000 		.4byte	0
 13237              	.LLST15:
 13238 0367 00000000 		.4byte	.LVL50
 13239 036b 0C000000 		.4byte	.LVL51
 13240 036f 0100     		.2byte	0x1
 13241 0371 50       		.byte	0x50
 13242 0372 0C000000 		.4byte	.LVL51
 13243 0376 24000000 		.4byte	.LFE19
 13244 037a 0100     		.2byte	0x1
 13245 037c 56       		.byte	0x56
 13246 037d 00000000 		.4byte	0
 13247 0381 00000000 		.4byte	0
 13248              	.LLST16:
 13249 0385 00000000 		.4byte	.LVL50
 13250 0389 0E000000 		.4byte	.LVL52
 13251 038d 0100     		.2byte	0x1
 13252 038f 51       		.byte	0x51
 13253 0390 0E000000 		.4byte	.LVL52
 13254 0394 24000000 		.4byte	.LFE19
 13255 0398 0100     		.2byte	0x1
 13256 039a 55       		.byte	0x55
 13257 039b 00000000 		.4byte	0
 13258 039f 00000000 		.4byte	0
 13259              	.LLST17:
 13260 03a3 00000000 		.4byte	.LVL50
 13261 03a7 11000000 		.4byte	.LVL53-1
 13262 03ab 0100     		.2byte	0x1
 13263 03ad 52       		.byte	0x52
 13264 03ae 11000000 		.4byte	.LVL53-1
 13265 03b2 24000000 		.4byte	.LFE19
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 336


 13266 03b6 0100     		.2byte	0x1
 13267 03b8 54       		.byte	0x54
 13268 03b9 00000000 		.4byte	0
 13269 03bd 00000000 		.4byte	0
 13270              	.LLST18:
 13271 03c1 00000000 		.4byte	.LVL55
 13272 03c5 4E000000 		.4byte	.LVL66
 13273 03c9 0100     		.2byte	0x1
 13274 03cb 50       		.byte	0x50
 13275 03cc 4E000000 		.4byte	.LVL66
 13276 03d0 6C000000 		.4byte	.LVL70
 13277 03d4 0100     		.2byte	0x1
 13278 03d6 55       		.byte	0x55
 13279 03d7 6C000000 		.4byte	.LVL70
 13280 03db 6E000000 		.4byte	.LFE24
 13281 03df 0100     		.2byte	0x1
 13282 03e1 50       		.byte	0x50
 13283 03e2 00000000 		.4byte	0
 13284 03e6 00000000 		.4byte	0
 13285              	.LLST19:
 13286 03ea 00000000 		.4byte	.LVL55
 13287 03ee 53000000 		.4byte	.LVL67-1
 13288 03f2 0100     		.2byte	0x1
 13289 03f4 51       		.byte	0x51
 13290 03f5 53000000 		.4byte	.LVL67-1
 13291 03f9 6C000000 		.4byte	.LVL70
 13292 03fd 0100     		.2byte	0x1
 13293 03ff 56       		.byte	0x56
 13294 0400 6C000000 		.4byte	.LVL70
 13295 0404 6E000000 		.4byte	.LFE24
 13296 0408 0100     		.2byte	0x1
 13297 040a 51       		.byte	0x51
 13298 040b 00000000 		.4byte	0
 13299 040f 00000000 		.4byte	0
 13300              	.LLST20:
 13301 0413 10000000 		.4byte	.LVL56
 13302 0417 14000000 		.4byte	.LVL57
 13303 041b 0100     		.2byte	0x1
 13304 041d 53       		.byte	0x53
 13305 041e 14000000 		.4byte	.LVL57
 13306 0422 34000000 		.4byte	.LVL63
 13307 0426 0100     		.2byte	0x1
 13308 0428 52       		.byte	0x52
 13309 0429 34000000 		.4byte	.LVL63
 13310 042d 40000000 		.4byte	.LVL65
 13311 0431 0100     		.2byte	0x1
 13312 0433 53       		.byte	0x53
 13313 0434 00000000 		.4byte	0
 13314 0438 00000000 		.4byte	0
 13315              	.LLST21:
 13316 043c 10000000 		.4byte	.LVL56
 13317 0440 24000000 		.4byte	.LVL60
 13318 0444 0100     		.2byte	0x1
 13319 0446 54       		.byte	0x54
 13320 0447 24000000 		.4byte	.LVL60
 13321 044b 32000000 		.4byte	.LVL62
 13322 044f 0300     		.2byte	0x3
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 337


 13323 0451 74       		.byte	0x74
 13324 0452 01       		.sleb128 1
 13325 0453 9F       		.byte	0x9f
 13326 0454 32000000 		.4byte	.LVL62
 13327 0458 3E000000 		.4byte	.LVL64
 13328 045c 0100     		.2byte	0x1
 13329 045e 54       		.byte	0x54
 13330 045f 00000000 		.4byte	0
 13331 0463 00000000 		.4byte	0
 13332              	.LLST22:
 13333 0467 16000000 		.4byte	.LVL58
 13334 046b 34000000 		.4byte	.LVL63
 13335 046f 0100     		.2byte	0x1
 13336 0471 53       		.byte	0x53
 13337 0472 00000000 		.4byte	0
 13338 0476 00000000 		.4byte	0
 13339              	.LLST23:
 13340 047a 00000000 		.4byte	.LVL71
 13341 047e 44000000 		.4byte	.LVL88
 13342 0482 0100     		.2byte	0x1
 13343 0484 50       		.byte	0x50
 13344 0485 44000000 		.4byte	.LVL88
 13345 0489 46000000 		.4byte	.LVL89
 13346 048d 0400     		.2byte	0x4
 13347 048f F3       		.byte	0xf3
 13348 0490 01       		.uleb128 0x1
 13349 0491 50       		.byte	0x50
 13350 0492 9F       		.byte	0x9f
 13351 0493 46000000 		.4byte	.LVL89
 13352 0497 4A000000 		.4byte	.LVL90
 13353 049b 0100     		.2byte	0x1
 13354 049d 50       		.byte	0x50
 13355 049e 4A000000 		.4byte	.LVL90
 13356 04a2 4C000000 		.4byte	.LVL91
 13357 04a6 0400     		.2byte	0x4
 13358 04a8 F3       		.byte	0xf3
 13359 04a9 01       		.uleb128 0x1
 13360 04aa 50       		.byte	0x50
 13361 04ab 9F       		.byte	0x9f
 13362 04ac 4C000000 		.4byte	.LVL91
 13363 04b0 4E000000 		.4byte	.LVL92
 13364 04b4 0100     		.2byte	0x1
 13365 04b6 50       		.byte	0x50
 13366 04b7 4E000000 		.4byte	.LVL92
 13367 04bb 54000000 		.4byte	.LFE27
 13368 04bf 0400     		.2byte	0x4
 13369 04c1 F3       		.byte	0xf3
 13370 04c2 01       		.uleb128 0x1
 13371 04c3 50       		.byte	0x50
 13372 04c4 9F       		.byte	0x9f
 13373 04c5 00000000 		.4byte	0
 13374 04c9 00000000 		.4byte	0
 13375              	.LLST24:
 13376 04cd 04000000 		.4byte	.LVL73
 13377 04d1 28000000 		.4byte	.LVL79
 13378 04d5 0100     		.2byte	0x1
 13379 04d7 54       		.byte	0x54
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 338


 13380 04d8 28000000 		.4byte	.LVL79
 13381 04dc 30000000 		.4byte	.LVL81
 13382 04e0 0200     		.2byte	0x2
 13383 04e2 70       		.byte	0x70
 13384 04e3 00       		.sleb128 0
 13385 04e4 30000000 		.4byte	.LVL81
 13386 04e8 34000000 		.4byte	.LVL82
 13387 04ec 0100     		.2byte	0x1
 13388 04ee 54       		.byte	0x54
 13389 04ef 34000000 		.4byte	.LVL82
 13390 04f3 3C000000 		.4byte	.LVL85
 13391 04f7 0200     		.2byte	0x2
 13392 04f9 70       		.byte	0x70
 13393 04fa 00       		.sleb128 0
 13394 04fb 3E000000 		.4byte	.LVL86
 13395 04ff 42000000 		.4byte	.LVL87
 13396 0503 0200     		.2byte	0x2
 13397 0505 70       		.byte	0x70
 13398 0506 00       		.sleb128 0
 13399 0507 46000000 		.4byte	.LVL89
 13400 050b 4E000000 		.4byte	.LVL92
 13401 050f 0100     		.2byte	0x1
 13402 0511 54       		.byte	0x54
 13403 0512 00000000 		.4byte	0
 13404 0516 00000000 		.4byte	0
 13405              	.LLST25:
 13406 051a 04000000 		.4byte	.LVL73
 13407 051e 08000000 		.4byte	.LVL74
 13408 0522 0100     		.2byte	0x1
 13409 0524 54       		.byte	0x54
 13410 0525 08000000 		.4byte	.LVL74
 13411 0529 0A000000 		.4byte	.LVL75
 13412 052d 0100     		.2byte	0x1
 13413 052f 52       		.byte	0x52
 13414 0530 0A000000 		.4byte	.LVL75
 13415 0534 46000000 		.4byte	.LVL89
 13416 0538 0100     		.2byte	0x1
 13417 053a 51       		.byte	0x51
 13418 053b 46000000 		.4byte	.LVL89
 13419 053f 4C000000 		.4byte	.LVL91
 13420 0543 0100     		.2byte	0x1
 13421 0545 54       		.byte	0x54
 13422 0546 4C000000 		.4byte	.LVL91
 13423 054a 4E000000 		.4byte	.LVL92
 13424 054e 0100     		.2byte	0x1
 13425 0550 51       		.byte	0x51
 13426 0551 00000000 		.4byte	0
 13427 0555 00000000 		.4byte	0
 13428              	.LLST26:
 13429 0559 0C000000 		.4byte	.LVL76
 13430 055d 1C000000 		.4byte	.LVL78
 13431 0561 0100     		.2byte	0x1
 13432 0563 53       		.byte	0x53
 13433 0564 1C000000 		.4byte	.LVL78
 13434 0568 3C000000 		.4byte	.LVL85
 13435 056c 0200     		.2byte	0x2
 13436 056e 71       		.byte	0x71
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 339


 13437 056f 7F       		.sleb128 -1
 13438 0570 3E000000 		.4byte	.LVL86
 13439 0574 42000000 		.4byte	.LVL87
 13440 0578 0200     		.2byte	0x2
 13441 057a 71       		.byte	0x71
 13442 057b 7F       		.sleb128 -1
 13443 057c 4C000000 		.4byte	.LVL91
 13444 0580 4E000000 		.4byte	.LVL92
 13445 0584 0100     		.2byte	0x1
 13446 0586 53       		.byte	0x53
 13447 0587 00000000 		.4byte	0
 13448 058b 00000000 		.4byte	0
 13449              	.LLST27:
 13450 058f 1A000000 		.4byte	.LVL77
 13451 0593 2E000000 		.4byte	.LVL80
 13452 0597 0200     		.2byte	0x2
 13453 0599 31       		.byte	0x31
 13454 059a 9F       		.byte	0x9f
 13455 059b 2E000000 		.4byte	.LVL80
 13456 059f 30000000 		.4byte	.LVL81
 13457 05a3 0100     		.2byte	0x1
 13458 05a5 53       		.byte	0x53
 13459 05a6 30000000 		.4byte	.LVL81
 13460 05aa 36000000 		.4byte	.LVL83
 13461 05ae 0200     		.2byte	0x2
 13462 05b0 31       		.byte	0x31
 13463 05b1 9F       		.byte	0x9f
 13464 05b2 36000000 		.4byte	.LVL83
 13465 05b6 42000000 		.4byte	.LVL87
 13466 05ba 0100     		.2byte	0x1
 13467 05bc 53       		.byte	0x53
 13468 05bd 00000000 		.4byte	0
 13469 05c1 00000000 		.4byte	0
 13470              	.LLST28:
 13471 05c5 02000000 		.4byte	.LVL72
 13472 05c9 3A000000 		.4byte	.LVL84
 13473 05cd 0300     		.2byte	0x3
 13474 05cf 09       		.byte	0x9
 13475 05d0 FF       		.byte	0xff
 13476 05d1 9F       		.byte	0x9f
 13477 05d2 3A000000 		.4byte	.LVL84
 13478 05d6 3E000000 		.4byte	.LVL86
 13479 05da 0100     		.2byte	0x1
 13480 05dc 53       		.byte	0x53
 13481 05dd 3E000000 		.4byte	.LVL86
 13482 05e1 42000000 		.4byte	.LVL87
 13483 05e5 0300     		.2byte	0x3
 13484 05e7 09       		.byte	0x9
 13485 05e8 FF       		.byte	0xff
 13486 05e9 9F       		.byte	0x9f
 13487 05ea 42000000 		.4byte	.LVL87
 13488 05ee 46000000 		.4byte	.LVL89
 13489 05f2 0100     		.2byte	0x1
 13490 05f4 53       		.byte	0x53
 13491 05f5 46000000 		.4byte	.LVL89
 13492 05f9 4E000000 		.4byte	.LVL92
 13493 05fd 0300     		.2byte	0x3
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 340


 13494 05ff 09       		.byte	0x9
 13495 0600 FF       		.byte	0xff
 13496 0601 9F       		.byte	0x9f
 13497 0602 00000000 		.4byte	0
 13498 0606 00000000 		.4byte	0
 13499              	.LLST29:
 13500 060a 00000000 		.4byte	.LVL93
 13501 060e 1A000000 		.4byte	.LVL96
 13502 0612 0100     		.2byte	0x1
 13503 0614 50       		.byte	0x50
 13504 0615 1A000000 		.4byte	.LVL96
 13505 0619 28000000 		.4byte	.LVL98
 13506 061d 0100     		.2byte	0x1
 13507 061f 54       		.byte	0x54
 13508 0620 28000000 		.4byte	.LVL98
 13509 0624 2A000000 		.4byte	.LVL99
 13510 0628 0100     		.2byte	0x1
 13511 062a 50       		.byte	0x50
 13512 062b 2A000000 		.4byte	.LVL99
 13513 062f 2C000000 		.4byte	.LVL100
 13514 0633 0100     		.2byte	0x1
 13515 0635 54       		.byte	0x54
 13516 0636 2C000000 		.4byte	.LVL100
 13517 063a 2E000000 		.4byte	.LVL101
 13518 063e 0100     		.2byte	0x1
 13519 0640 50       		.byte	0x50
 13520 0641 2E000000 		.4byte	.LVL101
 13521 0645 30000000 		.4byte	.LVL102
 13522 0649 0100     		.2byte	0x1
 13523 064b 54       		.byte	0x54
 13524 064c 30000000 		.4byte	.LVL102
 13525 0650 32000000 		.4byte	.LVL103
 13526 0654 0100     		.2byte	0x1
 13527 0656 50       		.byte	0x50
 13528 0657 32000000 		.4byte	.LVL103
 13529 065b 34000000 		.4byte	.LVL104
 13530 065f 0100     		.2byte	0x1
 13531 0661 54       		.byte	0x54
 13532 0662 34000000 		.4byte	.LVL104
 13533 0666 36000000 		.4byte	.LVL105
 13534 066a 0100     		.2byte	0x1
 13535 066c 50       		.byte	0x50
 13536 066d 36000000 		.4byte	.LVL105
 13537 0671 46000000 		.4byte	.LFE31
 13538 0675 0100     		.2byte	0x1
 13539 0677 54       		.byte	0x54
 13540 0678 00000000 		.4byte	0
 13541 067c 00000000 		.4byte	0
 13542              	.LLST30:
 13543 0680 00000000 		.4byte	.LVL93
 13544 0684 12000000 		.4byte	.LVL95
 13545 0688 0100     		.2byte	0x1
 13546 068a 51       		.byte	0x51
 13547 068b 12000000 		.4byte	.LVL95
 13548 068f 28000000 		.4byte	.LVL98
 13549 0693 0100     		.2byte	0x1
 13550 0695 55       		.byte	0x55
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 341


 13551 0696 28000000 		.4byte	.LVL98
 13552 069a 34000000 		.4byte	.LVL104
 13553 069e 0100     		.2byte	0x1
 13554 06a0 51       		.byte	0x51
 13555 06a1 34000000 		.4byte	.LVL104
 13556 06a5 46000000 		.4byte	.LFE31
 13557 06a9 0100     		.2byte	0x1
 13558 06ab 55       		.byte	0x55
 13559 06ac 00000000 		.4byte	0
 13560 06b0 00000000 		.4byte	0
 13561              	.LLST31:
 13562 06b4 04000000 		.4byte	.LVL94
 13563 06b8 3A000000 		.4byte	.LVL106
 13564 06bc 0200     		.2byte	0x2
 13565 06be 39       		.byte	0x39
 13566 06bf 9F       		.byte	0x9f
 13567 06c0 3A000000 		.4byte	.LVL106
 13568 06c4 46000000 		.4byte	.LFE31
 13569 06c8 0100     		.2byte	0x1
 13570 06ca 50       		.byte	0x50
 13571 06cb 00000000 		.4byte	0
 13572 06cf 00000000 		.4byte	0
 13573              	.LLST32:
 13574 06d3 00000000 		.4byte	.LVL107
 13575 06d7 0E000000 		.4byte	.LVL108
 13576 06db 0100     		.2byte	0x1
 13577 06dd 50       		.byte	0x50
 13578 06de 0E000000 		.4byte	.LVL108
 13579 06e2 40000000 		.4byte	.LVL111
 13580 06e6 0100     		.2byte	0x1
 13581 06e8 54       		.byte	0x54
 13582 06e9 40000000 		.4byte	.LVL111
 13583 06ed 42000000 		.4byte	.LVL112
 13584 06f1 0100     		.2byte	0x1
 13585 06f3 50       		.byte	0x50
 13586 06f4 42000000 		.4byte	.LVL112
 13587 06f8 44000000 		.4byte	.LVL113
 13588 06fc 0400     		.2byte	0x4
 13589 06fe F3       		.byte	0xf3
 13590 06ff 01       		.uleb128 0x1
 13591 0700 50       		.byte	0x50
 13592 0701 9F       		.byte	0x9f
 13593 0702 44000000 		.4byte	.LVL113
 13594 0706 50000000 		.4byte	.LFE6
 13595 070a 0100     		.2byte	0x1
 13596 070c 54       		.byte	0x54
 13597 070d 00000000 		.4byte	0
 13598 0711 00000000 		.4byte	0
 13599              	.LLST33:
 13600 0715 00000000 		.4byte	.LVL107
 13601 0719 42000000 		.4byte	.LVL112
 13602 071d 0200     		.2byte	0x2
 13603 071f 30       		.byte	0x30
 13604 0720 9F       		.byte	0x9f
 13605 0721 42000000 		.4byte	.LVL112
 13606 0725 44000000 		.4byte	.LVL113
 13607 0729 0100     		.2byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 342


 13608 072b 50       		.byte	0x50
 13609 072c 44000000 		.4byte	.LVL113
 13610 0730 4E000000 		.4byte	.LVL116
 13611 0734 0200     		.2byte	0x2
 13612 0736 30       		.byte	0x30
 13613 0737 9F       		.byte	0x9f
 13614 0738 4E000000 		.4byte	.LVL116
 13615 073c 50000000 		.4byte	.LFE6
 13616 0740 0100     		.2byte	0x1
 13617 0742 50       		.byte	0x50
 13618 0743 00000000 		.4byte	0
 13619 0747 00000000 		.4byte	0
 13620              	.LLST34:
 13621 074b 00000000 		.4byte	.LVL117
 13622 074f 0F000000 		.4byte	.LVL119-1
 13623 0753 0100     		.2byte	0x1
 13624 0755 50       		.byte	0x50
 13625 0756 0F000000 		.4byte	.LVL119-1
 13626 075a 2E000000 		.4byte	.LVL123
 13627 075e 0100     		.2byte	0x1
 13628 0760 54       		.byte	0x54
 13629 0761 2E000000 		.4byte	.LVL123
 13630 0765 30000000 		.4byte	.LVL124
 13631 0769 0100     		.2byte	0x1
 13632 076b 50       		.byte	0x50
 13633 076c 30000000 		.4byte	.LVL124
 13634 0770 34000000 		.4byte	.LFE7
 13635 0774 0100     		.2byte	0x1
 13636 0776 54       		.byte	0x54
 13637 0777 00000000 		.4byte	0
 13638 077b 00000000 		.4byte	0
 13639              	.LLST35:
 13640 077f 00000000 		.4byte	.LVL117
 13641 0783 0F000000 		.4byte	.LVL119-1
 13642 0787 0100     		.2byte	0x1
 13643 0789 51       		.byte	0x51
 13644 078a 0F000000 		.4byte	.LVL119-1
 13645 078e 2E000000 		.4byte	.LVL123
 13646 0792 0100     		.2byte	0x1
 13647 0794 55       		.byte	0x55
 13648 0795 2E000000 		.4byte	.LVL123
 13649 0799 30000000 		.4byte	.LVL124
 13650 079d 0100     		.2byte	0x1
 13651 079f 51       		.byte	0x51
 13652 07a0 30000000 		.4byte	.LVL124
 13653 07a4 34000000 		.4byte	.LFE7
 13654 07a8 0100     		.2byte	0x1
 13655 07aa 55       		.byte	0x55
 13656 07ab 00000000 		.4byte	0
 13657 07af 00000000 		.4byte	0
 13658              	.LLST36:
 13659 07b3 06000000 		.4byte	.LVL118
 13660 07b7 10000000 		.4byte	.LVL119
 13661 07bb 0200     		.2byte	0x2
 13662 07bd 30       		.byte	0x30
 13663 07be 9F       		.byte	0x9f
 13664 07bf 10000000 		.4byte	.LVL119
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 343


 13665 07c3 16000000 		.4byte	.LVL120
 13666 07c7 0100     		.2byte	0x1
 13667 07c9 50       		.byte	0x50
 13668 07ca 2A000000 		.4byte	.LVL122
 13669 07ce 2E000000 		.4byte	.LVL123
 13670 07d2 0100     		.2byte	0x1
 13671 07d4 56       		.byte	0x56
 13672 07d5 2E000000 		.4byte	.LVL123
 13673 07d9 30000000 		.4byte	.LVL124
 13674 07dd 0200     		.2byte	0x2
 13675 07df 30       		.byte	0x30
 13676 07e0 9F       		.byte	0x9f
 13677 07e1 30000000 		.4byte	.LVL124
 13678 07e5 34000000 		.4byte	.LFE7
 13679 07e9 0100     		.2byte	0x1
 13680 07eb 56       		.byte	0x56
 13681 07ec 00000000 		.4byte	0
 13682 07f0 00000000 		.4byte	0
 13683              	.LLST37:
 13684 07f4 00000000 		.4byte	.LVL125
 13685 07f8 11000000 		.4byte	.LVL126-1
 13686 07fc 0100     		.2byte	0x1
 13687 07fe 50       		.byte	0x50
 13688 07ff 11000000 		.4byte	.LVL126-1
 13689 0803 C8000000 		.4byte	.LVL144
 13690 0807 0100     		.2byte	0x1
 13691 0809 54       		.byte	0x54
 13692 080a C8000000 		.4byte	.LVL144
 13693 080e CC000000 		.4byte	.LFE28
 13694 0812 0400     		.2byte	0x4
 13695 0814 F3       		.byte	0xf3
 13696 0815 01       		.uleb128 0x1
 13697 0816 50       		.byte	0x50
 13698 0817 9F       		.byte	0x9f
 13699 0818 00000000 		.4byte	0
 13700 081c 00000000 		.4byte	0
 13701              	.LLST38:
 13702 0820 00000000 		.4byte	.LVL125
 13703 0824 11000000 		.4byte	.LVL126-1
 13704 0828 0100     		.2byte	0x1
 13705 082a 51       		.byte	0x51
 13706 082b 11000000 		.4byte	.LVL126-1
 13707 082f CC000000 		.4byte	.LFE28
 13708 0833 0400     		.2byte	0x4
 13709 0835 F3       		.byte	0xf3
 13710 0836 01       		.uleb128 0x1
 13711 0837 51       		.byte	0x51
 13712 0838 9F       		.byte	0x9f
 13713 0839 00000000 		.4byte	0
 13714 083d 00000000 		.4byte	0
 13715              	.LLST39:
 13716 0841 50000000 		.4byte	.LVL132
 13717 0845 6E000000 		.4byte	.LVL134
 13718 0849 0100     		.2byte	0x1
 13719 084b 50       		.byte	0x50
 13720 084c 00000000 		.4byte	0
 13721 0850 00000000 		.4byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 344


 13722              	.LLST40:
 13723 0854 20000000 		.4byte	.LVL128
 13724 0858 BC000000 		.4byte	.LVL141
 13725 085c 0100     		.2byte	0x1
 13726 085e 55       		.byte	0x55
 13727 085f C0000000 		.4byte	.LVL142
 13728 0863 C8000000 		.4byte	.LVL144
 13729 0867 0100     		.2byte	0x1
 13730 0869 55       		.byte	0x55
 13731 086a 00000000 		.4byte	0
 13732 086e 00000000 		.4byte	0
 13733              	.LLST41:
 13734 0872 24000000 		.4byte	.LVL129
 13735 0876 34000000 		.4byte	.LVL130
 13736 087a 0100     		.2byte	0x1
 13737 087c 53       		.byte	0x53
 13738 087d 34000000 		.4byte	.LVL130
 13739 0881 43000000 		.4byte	.LVL131-1
 13740 0885 0200     		.2byte	0x2
 13741 0887 74       		.byte	0x74
 13742 0888 30       		.sleb128 48
 13743 0889 54000000 		.4byte	.LVL133
 13744 088d 71000000 		.4byte	.LVL135-1
 13745 0891 0100     		.2byte	0x1
 13746 0893 52       		.byte	0x52
 13747 0894 00000000 		.4byte	0
 13748 0898 00000000 		.4byte	0
 13749              	.LLST42:
 13750 089c 00000000 		.4byte	.LVL145
 13751 08a0 0D000000 		.4byte	.LVL147-1
 13752 08a4 0100     		.2byte	0x1
 13753 08a6 50       		.byte	0x50
 13754 08a7 0D000000 		.4byte	.LVL147-1
 13755 08ab 68000000 		.4byte	.LFE29
 13756 08af 0100     		.2byte	0x1
 13757 08b1 56       		.byte	0x56
 13758 08b2 00000000 		.4byte	0
 13759 08b6 00000000 		.4byte	0
 13760              	.LLST43:
 13761 08ba 00000000 		.4byte	.LVL145
 13762 08be 0A000000 		.4byte	.LVL146
 13763 08c2 0100     		.2byte	0x1
 13764 08c4 51       		.byte	0x51
 13765 08c5 0A000000 		.4byte	.LVL146
 13766 08c9 68000000 		.4byte	.LFE29
 13767 08cd 0100     		.2byte	0x1
 13768 08cf 55       		.byte	0x55
 13769 08d0 00000000 		.4byte	0
 13770 08d4 00000000 		.4byte	0
 13771              	.LLST44:
 13772 08d8 0E000000 		.4byte	.LVL147
 13773 08dc 1A000000 		.4byte	.LVL148
 13774 08e0 0100     		.2byte	0x1
 13775 08e2 50       		.byte	0x50
 13776 08e3 34000000 		.4byte	.LVL151
 13777 08e7 36000000 		.4byte	.LVL152
 13778 08eb 0100     		.2byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 345


 13779 08ed 50       		.byte	0x50
 13780 08ee 58000000 		.4byte	.LVL157
 13781 08f2 68000000 		.4byte	.LFE29
 13782 08f6 0100     		.2byte	0x1
 13783 08f8 50       		.byte	0x50
 13784 08f9 00000000 		.4byte	0
 13785 08fd 00000000 		.4byte	0
 13786              	.LLST45:
 13787 0901 1A000000 		.4byte	.LVL148
 13788 0905 34000000 		.4byte	.LVL151
 13789 0909 0100     		.2byte	0x1
 13790 090b 54       		.byte	0x54
 13791 090c 36000000 		.4byte	.LVL152
 13792 0910 3E000000 		.4byte	.LVL153
 13793 0914 0100     		.2byte	0x1
 13794 0916 54       		.byte	0x54
 13795 0917 40000000 		.4byte	.LVL154
 13796 091b 64000000 		.4byte	.LVL159
 13797 091f 0100     		.2byte	0x1
 13798 0921 54       		.byte	0x54
 13799 0922 00000000 		.4byte	0
 13800 0926 00000000 		.4byte	0
 13801              	.LLST46:
 13802 092a 00000000 		.4byte	.LVL160
 13803 092e 0F000000 		.4byte	.LVL161-1
 13804 0932 0100     		.2byte	0x1
 13805 0934 50       		.byte	0x50
 13806 0935 0F000000 		.4byte	.LVL161-1
 13807 0939 BC020000 		.4byte	.LFE30
 13808 093d 0400     		.2byte	0x4
 13809 093f F3       		.byte	0xf3
 13810 0940 01       		.uleb128 0x1
 13811 0941 50       		.byte	0x50
 13812 0942 9F       		.byte	0x9f
 13813 0943 00000000 		.4byte	0
 13814 0947 00000000 		.4byte	0
 13815              	.LLST47:
 13816 094b 00000000 		.4byte	.LVL160
 13817 094f 0F000000 		.4byte	.LVL161-1
 13818 0953 0100     		.2byte	0x1
 13819 0955 51       		.byte	0x51
 13820 0956 0F000000 		.4byte	.LVL161-1
 13821 095a C4000000 		.4byte	.LVL180
 13822 095e 0100     		.2byte	0x1
 13823 0960 55       		.byte	0x55
 13824 0961 C4000000 		.4byte	.LVL180
 13825 0965 2C020000 		.4byte	.LVL215
 13826 0969 0400     		.2byte	0x4
 13827 096b F3       		.byte	0xf3
 13828 096c 01       		.uleb128 0x1
 13829 096d 51       		.byte	0x51
 13830 096e 9F       		.byte	0x9f
 13831 096f 2C020000 		.4byte	.LVL215
 13832 0973 68020000 		.4byte	.LVL234
 13833 0977 0100     		.2byte	0x1
 13834 0979 55       		.byte	0x55
 13835 097a 68020000 		.4byte	.LVL234
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 346


 13836 097e BC020000 		.4byte	.LFE30
 13837 0982 0400     		.2byte	0x4
 13838 0984 F3       		.byte	0xf3
 13839 0985 01       		.uleb128 0x1
 13840 0986 51       		.byte	0x51
 13841 0987 9F       		.byte	0x9f
 13842 0988 00000000 		.4byte	0
 13843 098c 00000000 		.4byte	0
 13844              	.LLST48:
 13845 0990 00000000 		.4byte	.LVL160
 13846 0994 0F000000 		.4byte	.LVL161-1
 13847 0998 0100     		.2byte	0x1
 13848 099a 52       		.byte	0x52
 13849 099b 0F000000 		.4byte	.LVL161-1
 13850 099f 28000000 		.4byte	.LVL163
 13851 09a3 0400     		.2byte	0x4
 13852 09a5 F3       		.byte	0xf3
 13853 09a6 01       		.uleb128 0x1
 13854 09a7 52       		.byte	0x52
 13855 09a8 9F       		.byte	0x9f
 13856 09a9 28000000 		.4byte	.LVL163
 13857 09ad 7E000000 		.4byte	.LVL171
 13858 09b1 0100     		.2byte	0x1
 13859 09b3 56       		.byte	0x56
 13860 09b4 2C020000 		.4byte	.LVL215
 13861 09b8 38020000 		.4byte	.LVL219
 13862 09bc 0400     		.2byte	0x4
 13863 09be F3       		.byte	0xf3
 13864 09bf 01       		.uleb128 0x1
 13865 09c0 52       		.byte	0x52
 13866 09c1 9F       		.byte	0x9f
 13867 09c2 38020000 		.4byte	.LVL219
 13868 09c6 5C020000 		.4byte	.LVL231
 13869 09ca 0100     		.2byte	0x1
 13870 09cc 56       		.byte	0x56
 13871 09cd 00000000 		.4byte	0
 13872 09d1 00000000 		.4byte	0
 13873              	.LLST49:
 13874 09d5 10000000 		.4byte	.LVL161
 13875 09d9 2E000000 		.4byte	.LVL164
 13876 09dd 0100     		.2byte	0x1
 13877 09df 50       		.byte	0x50
 13878 09e0 2C020000 		.4byte	.LVL215
 13879 09e4 2E020000 		.4byte	.LVL216
 13880 09e8 0100     		.2byte	0x1
 13881 09ea 50       		.byte	0x50
 13882 09eb 32020000 		.4byte	.LVL217
 13883 09ef 34020000 		.4byte	.LVL218
 13884 09f3 0100     		.2byte	0x1
 13885 09f5 50       		.byte	0x50
 13886 09f6 00000000 		.4byte	0
 13887 09fa 00000000 		.4byte	0
 13888              	.LLST50:
 13889 09fe 1C000000 		.4byte	.LVL162
 13890 0a02 2C020000 		.4byte	.LVL215
 13891 0a06 0100     		.2byte	0x1
 13892 0a08 54       		.byte	0x54
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 347


 13893 0a09 32020000 		.4byte	.LVL217
 13894 0a0d AA020000 		.4byte	.LVL250
 13895 0a11 0100     		.2byte	0x1
 13896 0a13 54       		.byte	0x54
 13897 0a14 00000000 		.4byte	0
 13898 0a18 00000000 		.4byte	0
 13899              	.LLST51:
 13900 0a1c 32000000 		.4byte	.LVL165
 13901 0a20 48000000 		.4byte	.LVL166
 13902 0a24 0100     		.2byte	0x1
 13903 0a26 50       		.byte	0x50
 13904 0a27 56000000 		.4byte	.LVL168
 13905 0a2b 6A000000 		.4byte	.LVL169
 13906 0a2f 0100     		.2byte	0x1
 13907 0a31 50       		.byte	0x50
 13908 0a32 38020000 		.4byte	.LVL219
 13909 0a36 3A020000 		.4byte	.LVL220
 13910 0a3a 0100     		.2byte	0x1
 13911 0a3c 50       		.byte	0x50
 13912 0a3d 3E020000 		.4byte	.LVL221
 13913 0a41 40020000 		.4byte	.LVL222
 13914 0a45 0100     		.2byte	0x1
 13915 0a47 50       		.byte	0x50
 13916 0a48 44020000 		.4byte	.LVL223
 13917 0a4c 46020000 		.4byte	.LVL224
 13918 0a50 0100     		.2byte	0x1
 13919 0a52 50       		.byte	0x50
 13920 0a53 4A020000 		.4byte	.LVL225
 13921 0a57 4C020000 		.4byte	.LVL226
 13922 0a5b 0100     		.2byte	0x1
 13923 0a5d 50       		.byte	0x50
 13924 0a5e 00000000 		.4byte	0
 13925 0a62 00000000 		.4byte	0
 13926              	.LLST52:
 13927 0a66 7E000000 		.4byte	.LVL171
 13928 0a6a 2C020000 		.4byte	.LVL215
 13929 0a6e 0100     		.2byte	0x1
 13930 0a70 56       		.byte	0x56
 13931 0a71 5C020000 		.4byte	.LVL231
 13932 0a75 AA020000 		.4byte	.LVL250
 13933 0a79 0100     		.2byte	0x1
 13934 0a7b 56       		.byte	0x56
 13935 0a7c 00000000 		.4byte	0
 13936 0a80 00000000 		.4byte	0
 13937              	.LLST53:
 13938 0a84 F2000000 		.4byte	.LVL183
 13939 0a88 F8000000 		.4byte	.LVL184
 13940 0a8c 0100     		.2byte	0x1
 13941 0a8e 50       		.byte	0x50
 13942 0a8f F8000000 		.4byte	.LVL184
 13943 0a93 FE000000 		.4byte	.LVL186
 13944 0a97 0100     		.2byte	0x1
 13945 0a99 57       		.byte	0x57
 13946 0a9a FE000000 		.4byte	.LVL186
 13947 0a9e 02010000 		.4byte	.LVL187
 13948 0aa2 0100     		.2byte	0x1
 13949 0aa4 50       		.byte	0x50
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 348


 13950 0aa5 02010000 		.4byte	.LVL187
 13951 0aa9 1E010000 		.4byte	.LVL190
 13952 0aad 0100     		.2byte	0x1
 13953 0aaf 57       		.byte	0x57
 13954 0ab0 7A020000 		.4byte	.LVL237
 13955 0ab4 86020000 		.4byte	.LVL241
 13956 0ab8 0100     		.2byte	0x1
 13957 0aba 57       		.byte	0x57
 13958 0abb 00000000 		.4byte	0
 13959 0abf 00000000 		.4byte	0
 13960              	.LLST54:
 13961 0ac3 16010000 		.4byte	.LVL189
 13962 0ac7 5A010000 		.4byte	.LVL197
 13963 0acb 0100     		.2byte	0x1
 13964 0acd 52       		.byte	0x52
 13965 0ace 5A010000 		.4byte	.LVL197
 13966 0ad2 64010000 		.4byte	.LVL198
 13967 0ad6 0B00     		.2byte	0xb
 13968 0ad8 7A       		.byte	0x7a
 13969 0ad9 00       		.sleb128 0
 13970 0ada 34       		.byte	0x34
 13971 0adb 25       		.byte	0x25
 13972 0adc 70       		.byte	0x70
 13973 0add 00       		.sleb128 0
 13974 0ade 22       		.byte	0x22
 13975 0adf 79       		.byte	0x79
 13976 0ae0 00       		.sleb128 0
 13977 0ae1 22       		.byte	0x22
 13978 0ae2 9F       		.byte	0x9f
 13979 0ae3 84010000 		.4byte	.LVL202
 13980 0ae7 A4010000 		.4byte	.LVL206
 13981 0aeb 0B00     		.2byte	0xb
 13982 0aed 7A       		.byte	0x7a
 13983 0aee 00       		.sleb128 0
 13984 0aef 34       		.byte	0x34
 13985 0af0 25       		.byte	0x25
 13986 0af1 70       		.byte	0x70
 13987 0af2 00       		.sleb128 0
 13988 0af3 22       		.byte	0x22
 13989 0af4 79       		.byte	0x79
 13990 0af5 00       		.sleb128 0
 13991 0af6 22       		.byte	0x22
 13992 0af7 9F       		.byte	0x9f
 13993 0af8 80020000 		.4byte	.LVL239
 13994 0afc 92020000 		.4byte	.LVL245
 13995 0b00 0100     		.2byte	0x1
 13996 0b02 52       		.byte	0x52
 13997 0b03 9E020000 		.4byte	.LVL247
 13998 0b07 A0020000 		.4byte	.LVL248
 13999 0b0b 0B00     		.2byte	0xb
 14000 0b0d 7A       		.byte	0x7a
 14001 0b0e 00       		.sleb128 0
 14002 0b0f 34       		.byte	0x34
 14003 0b10 25       		.byte	0x25
 14004 0b11 70       		.byte	0x70
 14005 0b12 00       		.sleb128 0
 14006 0b13 22       		.byte	0x22
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 349


 14007 0b14 79       		.byte	0x79
 14008 0b15 00       		.sleb128 0
 14009 0b16 22       		.byte	0x22
 14010 0b17 9F       		.byte	0x9f
 14011 0b18 00000000 		.4byte	0
 14012 0b1c 00000000 		.4byte	0
 14013              	.LLST55:
 14014 0b20 98000000 		.4byte	.LVL175
 14015 0b24 9E000000 		.4byte	.LVL176
 14016 0b28 0100     		.2byte	0x1
 14017 0b2a 50       		.byte	0x50
 14018 0b2b 9E000000 		.4byte	.LVL176
 14019 0b2f A4000000 		.4byte	.LVL178
 14020 0b33 0100     		.2byte	0x1
 14021 0b35 58       		.byte	0x58
 14022 0b36 A4000000 		.4byte	.LVL178
 14023 0b3a C0000000 		.4byte	.LVL179
 14024 0b3e 0100     		.2byte	0x1
 14025 0b40 50       		.byte	0x50
 14026 0b41 C0000000 		.4byte	.LVL179
 14027 0b45 2C020000 		.4byte	.LVL215
 14028 0b49 0100     		.2byte	0x1
 14029 0b4b 59       		.byte	0x59
 14030 0b4c 62020000 		.4byte	.LVL232
 14031 0b50 64020000 		.4byte	.LVL233
 14032 0b54 0100     		.2byte	0x1
 14033 0b56 50       		.byte	0x50
 14034 0b57 64020000 		.4byte	.LVL233
 14035 0b5b 68020000 		.4byte	.LVL234
 14036 0b5f 0100     		.2byte	0x1
 14037 0b61 58       		.byte	0x58
 14038 0b62 68020000 		.4byte	.LVL234
 14039 0b66 AA020000 		.4byte	.LVL250
 14040 0b6a 0100     		.2byte	0x1
 14041 0b6c 59       		.byte	0x59
 14042 0b6d 00000000 		.4byte	0
 14043 0b71 00000000 		.4byte	0
 14044              	.LLST56:
 14045 0b75 22010000 		.4byte	.LVL191
 14046 0b79 50010000 		.4byte	.LVL196
 14047 0b7d 0100     		.2byte	0x1
 14048 0b7f 55       		.byte	0x55
 14049 0b80 50010000 		.4byte	.LVL196
 14050 0b84 82010000 		.4byte	.LVL201
 14051 0b88 0300     		.2byte	0x3
 14052 0b8a 75       		.byte	0x75
 14053 0b8b 7E       		.sleb128 -2
 14054 0b8c 9F       		.byte	0x9f
 14055 0b8d 84010000 		.4byte	.LVL202
 14056 0b91 96010000 		.4byte	.LVL203
 14057 0b95 0300     		.2byte	0x3
 14058 0b97 75       		.byte	0x75
 14059 0b98 7E       		.sleb128 -2
 14060 0b99 9F       		.byte	0x9f
 14061 0b9a 96010000 		.4byte	.LVL203
 14062 0b9e 98010000 		.4byte	.LVL204
 14063 0ba2 0600     		.2byte	0x6
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 350


 14064 0ba4 74       		.byte	0x74
 14065 0ba5 14       		.sleb128 20
 14066 0ba6 06       		.byte	0x6
 14067 0ba7 32       		.byte	0x32
 14068 0ba8 1C       		.byte	0x1c
 14069 0ba9 9F       		.byte	0x9f
 14070 0baa 98010000 		.4byte	.LVL204
 14071 0bae A0010000 		.4byte	.LVL205
 14072 0bb2 0300     		.2byte	0x3
 14073 0bb4 75       		.byte	0x75
 14074 0bb5 7E       		.sleb128 -2
 14075 0bb6 9F       		.byte	0x9f
 14076 0bb7 A0010000 		.4byte	.LVL205
 14077 0bbb A4010000 		.4byte	.LVL206
 14078 0bbf 0600     		.2byte	0x6
 14079 0bc1 74       		.byte	0x74
 14080 0bc2 14       		.sleb128 20
 14081 0bc3 06       		.byte	0x6
 14082 0bc4 32       		.byte	0x32
 14083 0bc5 1C       		.byte	0x1c
 14084 0bc6 9F       		.byte	0x9f
 14085 0bc7 86020000 		.4byte	.LVL241
 14086 0bcb 92020000 		.4byte	.LVL245
 14087 0bcf 0100     		.2byte	0x1
 14088 0bd1 55       		.byte	0x55
 14089 0bd2 92020000 		.4byte	.LVL245
 14090 0bd6 A4020000 		.4byte	.LVL249
 14091 0bda 0300     		.2byte	0x3
 14092 0bdc 75       		.byte	0x75
 14093 0bdd 7E       		.sleb128 -2
 14094 0bde 9F       		.byte	0x9f
 14095 0bdf 00000000 		.4byte	0
 14096 0be3 00000000 		.4byte	0
 14097              	.LLST57:
 14098 0be7 82010000 		.4byte	.LVL201
 14099 0beb 84010000 		.4byte	.LVL202
 14100 0bef 0100     		.2byte	0x1
 14101 0bf1 55       		.byte	0x55
 14102 0bf2 A4010000 		.4byte	.LVL206
 14103 0bf6 A8010000 		.4byte	.LVL207
 14104 0bfa 0100     		.2byte	0x1
 14105 0bfc 55       		.byte	0x55
 14106 0bfd A8010000 		.4byte	.LVL207
 14107 0c01 2C020000 		.4byte	.LVL215
 14108 0c05 0400     		.2byte	0x4
 14109 0c07 75       		.byte	0x75
 14110 0c08 817C     		.sleb128 -511
 14111 0c0a 9F       		.byte	0x9f
 14112 0c0b A4020000 		.4byte	.LVL249
 14113 0c0f AA020000 		.4byte	.LVL250
 14114 0c13 0400     		.2byte	0x4
 14115 0c15 75       		.byte	0x75
 14116 0c16 817C     		.sleb128 -511
 14117 0c18 9F       		.byte	0x9f
 14118 0c19 00000000 		.4byte	0
 14119 0c1d 00000000 		.4byte	0
 14120              	.LLST58:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 351


 14121 0c21 06010000 		.4byte	.LVL188
 14122 0c25 64010000 		.4byte	.LVL198
 14123 0c29 0100     		.2byte	0x1
 14124 0c2b 50       		.byte	0x50
 14125 0c2c 84010000 		.4byte	.LVL202
 14126 0c30 A4010000 		.4byte	.LVL206
 14127 0c34 0100     		.2byte	0x1
 14128 0c36 50       		.byte	0x50
 14129 0c37 7A020000 		.4byte	.LVL237
 14130 0c3b 7C020000 		.4byte	.LVL238
 14131 0c3f 0100     		.2byte	0x1
 14132 0c41 50       		.byte	0x50
 14133 0c42 80020000 		.4byte	.LVL239
 14134 0c46 82020000 		.4byte	.LVL240
 14135 0c4a 0100     		.2byte	0x1
 14136 0c4c 50       		.byte	0x50
 14137 0c4d 86020000 		.4byte	.LVL241
 14138 0c51 88020000 		.4byte	.LVL242
 14139 0c55 0100     		.2byte	0x1
 14140 0c57 50       		.byte	0x50
 14141 0c58 8C020000 		.4byte	.LVL243
 14142 0c5c 8E020000 		.4byte	.LVL244
 14143 0c60 0100     		.2byte	0x1
 14144 0c62 50       		.byte	0x50
 14145 0c63 9E020000 		.4byte	.LVL247
 14146 0c67 A0020000 		.4byte	.LVL248
 14147 0c6b 0100     		.2byte	0x1
 14148 0c6d 50       		.byte	0x50
 14149 0c6e 00000000 		.4byte	0
 14150 0c72 00000000 		.4byte	0
 14151              	.LLST59:
 14152 0c76 70000000 		.4byte	.LVL170
 14153 0c7a 82000000 		.4byte	.LVL172
 14154 0c7e 0100     		.2byte	0x1
 14155 0c80 50       		.byte	0x50
 14156 0c81 28010000 		.4byte	.LVL192
 14157 0c85 34010000 		.4byte	.LVL193
 14158 0c89 0200     		.2byte	0x2
 14159 0c8b 30       		.byte	0x30
 14160 0c8c 9F       		.byte	0x9f
 14161 0c8d 34010000 		.4byte	.LVL193
 14162 0c91 2C020000 		.4byte	.LVL215
 14163 0c95 0100     		.2byte	0x1
 14164 0c97 57       		.byte	0x57
 14165 0c98 50020000 		.4byte	.LVL227
 14166 0c9c 52020000 		.4byte	.LVL228
 14167 0ca0 0100     		.2byte	0x1
 14168 0ca2 50       		.byte	0x50
 14169 0ca3 56020000 		.4byte	.LVL229
 14170 0ca7 58020000 		.4byte	.LVL230
 14171 0cab 0100     		.2byte	0x1
 14172 0cad 50       		.byte	0x50
 14173 0cae 8C020000 		.4byte	.LVL243
 14174 0cb2 AA020000 		.4byte	.LVL250
 14175 0cb6 0100     		.2byte	0x1
 14176 0cb8 57       		.byte	0x57
 14177 0cb9 00000000 		.4byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 352


 14178 0cbd 00000000 		.4byte	0
 14179              	.LLST60:
 14180 0cc1 00000000 		.4byte	.LVL251
 14181 0cc5 2F000000 		.4byte	.LVL256-1
 14182 0cc9 0100     		.2byte	0x1
 14183 0ccb 50       		.byte	0x50
 14184 0ccc 2F000000 		.4byte	.LVL256-1
 14185 0cd0 A2000000 		.4byte	.LVL268
 14186 0cd4 0100     		.2byte	0x1
 14187 0cd6 55       		.byte	0x55
 14188 0cd7 A2000000 		.4byte	.LVL268
 14189 0cdb AB000000 		.4byte	.LVL270-1
 14190 0cdf 0100     		.2byte	0x1
 14191 0ce1 50       		.byte	0x50
 14192 0ce2 AB000000 		.4byte	.LVL270-1
 14193 0ce6 C6000000 		.4byte	.LVL273
 14194 0cea 0100     		.2byte	0x1
 14195 0cec 55       		.byte	0x55
 14196 0ced C6000000 		.4byte	.LVL273
 14197 0cf1 CF000000 		.4byte	.LVL275-1
 14198 0cf5 0100     		.2byte	0x1
 14199 0cf7 50       		.byte	0x50
 14200 0cf8 CF000000 		.4byte	.LVL275-1
 14201 0cfc FA000000 		.4byte	.LVL283
 14202 0d00 0100     		.2byte	0x1
 14203 0d02 55       		.byte	0x55
 14204 0d03 FA000000 		.4byte	.LVL283
 14205 0d07 04010000 		.4byte	.LVL284
 14206 0d0b 0100     		.2byte	0x1
 14207 0d0d 50       		.byte	0x50
 14208 0d0e 04010000 		.4byte	.LVL284
 14209 0d12 0A010000 		.4byte	.LFE11
 14210 0d16 0400     		.2byte	0x4
 14211 0d18 F3       		.byte	0xf3
 14212 0d19 01       		.uleb128 0x1
 14213 0d1a 50       		.byte	0x50
 14214 0d1b 9F       		.byte	0x9f
 14215 0d1c 00000000 		.4byte	0
 14216 0d20 00000000 		.4byte	0
 14217              	.LLST61:
 14218 0d24 00000000 		.4byte	.LVL251
 14219 0d28 28000000 		.4byte	.LVL255
 14220 0d2c 0100     		.2byte	0x1
 14221 0d2e 51       		.byte	0x51
 14222 0d2f 28000000 		.4byte	.LVL255
 14223 0d33 42000000 		.4byte	.LVL259
 14224 0d37 0100     		.2byte	0x1
 14225 0d39 54       		.byte	0x54
 14226 0d3a 42000000 		.4byte	.LVL259
 14227 0d3e A2000000 		.4byte	.LVL268
 14228 0d42 0400     		.2byte	0x4
 14229 0d44 F3       		.byte	0xf3
 14230 0d45 01       		.uleb128 0x1
 14231 0d46 51       		.byte	0x51
 14232 0d47 9F       		.byte	0x9f
 14233 0d48 A2000000 		.4byte	.LVL268
 14234 0d4c A4000000 		.4byte	.LVL269
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 353


 14235 0d50 0100     		.2byte	0x1
 14236 0d52 51       		.byte	0x51
 14237 0d53 A4000000 		.4byte	.LVL269
 14238 0d57 C6000000 		.4byte	.LVL273
 14239 0d5b 0100     		.2byte	0x1
 14240 0d5d 54       		.byte	0x54
 14241 0d5e C6000000 		.4byte	.LVL273
 14242 0d62 C8000000 		.4byte	.LVL274
 14243 0d66 0100     		.2byte	0x1
 14244 0d68 51       		.byte	0x51
 14245 0d69 C8000000 		.4byte	.LVL274
 14246 0d6d DA000000 		.4byte	.LVL277
 14247 0d71 0100     		.2byte	0x1
 14248 0d73 54       		.byte	0x54
 14249 0d74 DA000000 		.4byte	.LVL277
 14250 0d78 FA000000 		.4byte	.LVL283
 14251 0d7c 0400     		.2byte	0x4
 14252 0d7e F3       		.byte	0xf3
 14253 0d7f 01       		.uleb128 0x1
 14254 0d80 51       		.byte	0x51
 14255 0d81 9F       		.byte	0x9f
 14256 0d82 FA000000 		.4byte	.LVL283
 14257 0d86 04010000 		.4byte	.LVL284
 14258 0d8a 0100     		.2byte	0x1
 14259 0d8c 51       		.byte	0x51
 14260 0d8d 04010000 		.4byte	.LVL284
 14261 0d91 0A010000 		.4byte	.LFE11
 14262 0d95 0400     		.2byte	0x4
 14263 0d97 F3       		.byte	0xf3
 14264 0d98 01       		.uleb128 0x1
 14265 0d99 51       		.byte	0x51
 14266 0d9a 9F       		.byte	0x9f
 14267 0d9b 00000000 		.4byte	0
 14268 0d9f 00000000 		.4byte	0
 14269              	.LLST62:
 14270 0da3 00000000 		.4byte	.LVL251
 14271 0da7 2F000000 		.4byte	.LVL256-1
 14272 0dab 0100     		.2byte	0x1
 14273 0dad 52       		.byte	0x52
 14274 0dae 2F000000 		.4byte	.LVL256-1
 14275 0db2 82000000 		.4byte	.LVL264
 14276 0db6 0100     		.2byte	0x1
 14277 0db8 57       		.byte	0x57
 14278 0db9 82000000 		.4byte	.LVL264
 14279 0dbd 84000000 		.4byte	.LVL265
 14280 0dc1 0400     		.2byte	0x4
 14281 0dc3 F3       		.byte	0xf3
 14282 0dc4 01       		.uleb128 0x1
 14283 0dc5 52       		.byte	0x52
 14284 0dc6 9F       		.byte	0x9f
 14285 0dc7 84000000 		.4byte	.LVL265
 14286 0dcb 94000000 		.4byte	.LVL266
 14287 0dcf 0100     		.2byte	0x1
 14288 0dd1 57       		.byte	0x57
 14289 0dd2 94000000 		.4byte	.LVL266
 14290 0dd6 A2000000 		.4byte	.LVL268
 14291 0dda 0400     		.2byte	0x4
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 354


 14292 0ddc F3       		.byte	0xf3
 14293 0ddd 01       		.uleb128 0x1
 14294 0dde 52       		.byte	0x52
 14295 0ddf 9F       		.byte	0x9f
 14296 0de0 A2000000 		.4byte	.LVL268
 14297 0de4 AB000000 		.4byte	.LVL270-1
 14298 0de8 0100     		.2byte	0x1
 14299 0dea 52       		.byte	0x52
 14300 0deb AB000000 		.4byte	.LVL270-1
 14301 0def C6000000 		.4byte	.LVL273
 14302 0df3 0100     		.2byte	0x1
 14303 0df5 57       		.byte	0x57
 14304 0df6 C6000000 		.4byte	.LVL273
 14305 0dfa CF000000 		.4byte	.LVL275-1
 14306 0dfe 0100     		.2byte	0x1
 14307 0e00 52       		.byte	0x52
 14308 0e01 CF000000 		.4byte	.LVL275-1
 14309 0e05 D8000000 		.4byte	.LVL276
 14310 0e09 0100     		.2byte	0x1
 14311 0e0b 57       		.byte	0x57
 14312 0e0c D8000000 		.4byte	.LVL276
 14313 0e10 EC000000 		.4byte	.LVL280
 14314 0e14 0400     		.2byte	0x4
 14315 0e16 F3       		.byte	0xf3
 14316 0e17 01       		.uleb128 0x1
 14317 0e18 52       		.byte	0x52
 14318 0e19 9F       		.byte	0x9f
 14319 0e1a EC000000 		.4byte	.LVL280
 14320 0e1e F0000000 		.4byte	.LVL281
 14321 0e22 0600     		.2byte	0x6
 14322 0e24 77       		.byte	0x77
 14323 0e25 00       		.sleb128 0
 14324 0e26 71       		.byte	0x71
 14325 0e27 00       		.sleb128 0
 14326 0e28 21       		.byte	0x21
 14327 0e29 9F       		.byte	0x9f
 14328 0e2a F0000000 		.4byte	.LVL281
 14329 0e2e F3000000 		.4byte	.LVL282-1
 14330 0e32 0100     		.2byte	0x1
 14331 0e34 51       		.byte	0x51
 14332 0e35 FA000000 		.4byte	.LVL283
 14333 0e39 04010000 		.4byte	.LVL284
 14334 0e3d 0100     		.2byte	0x1
 14335 0e3f 52       		.byte	0x52
 14336 0e40 00000000 		.4byte	0
 14337 0e44 00000000 		.4byte	0
 14338              	.LLST63:
 14339 0e48 22000000 		.4byte	.LVL253
 14340 0e4c 26000000 		.4byte	.LVL254
 14341 0e50 0100     		.2byte	0x1
 14342 0e52 51       		.byte	0x51
 14343 0e53 26000000 		.4byte	.LVL254
 14344 0e57 3A000000 		.4byte	.LVL257
 14345 0e5b 0100     		.2byte	0x1
 14346 0e5d 58       		.byte	0x58
 14347 0e5e 3A000000 		.4byte	.LVL257
 14348 0e62 7C000000 		.4byte	.LVL263
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 355


 14349 0e66 0100     		.2byte	0x1
 14350 0e68 59       		.byte	0x59
 14351 0e69 7C000000 		.4byte	.LVL263
 14352 0e6d A2000000 		.4byte	.LVL268
 14353 0e71 0C00     		.2byte	0xc
 14354 0e73 F3       		.byte	0xf3
 14355 0e74 01       		.uleb128 0x1
 14356 0e75 51       		.byte	0x51
 14357 0e76 31       		.byte	0x31
 14358 0e77 25       		.byte	0x25
 14359 0e78 F3       		.byte	0xf3
 14360 0e79 01       		.uleb128 0x1
 14361 0e7a 51       		.byte	0x51
 14362 0e7b 22       		.byte	0x22
 14363 0e7c 23       		.byte	0x23
 14364 0e7d 01       		.uleb128 0x1
 14365 0e7e 9F       		.byte	0x9f
 14366 0e7f 00000000 		.4byte	0
 14367 0e83 00000000 		.4byte	0
 14368              	.LLST64:
 14369 0e87 3E000000 		.4byte	.LVL258
 14370 0e8b 5E000000 		.4byte	.LVL260
 14371 0e8f 0800     		.2byte	0x8
 14372 0e91 75       		.byte	0x75
 14373 0e92 00       		.sleb128 0
 14374 0e93 78       		.byte	0x78
 14375 0e94 00       		.sleb128 0
 14376 0e95 22       		.byte	0x22
 14377 0e96 23       		.byte	0x23
 14378 0e97 30       		.uleb128 0x30
 14379 0e98 9F       		.byte	0x9f
 14380 0e99 5E000000 		.4byte	.LVL260
 14381 0e9d 7C000000 		.4byte	.LVL263
 14382 0ea1 0E00     		.2byte	0xe
 14383 0ea3 79       		.byte	0x79
 14384 0ea4 7F       		.sleb128 -1
 14385 0ea5 09       		.byte	0x9
 14386 0ea6 FB       		.byte	0xfb
 14387 0ea7 24       		.byte	0x24
 14388 0ea8 09       		.byte	0x9
 14389 0ea9 FB       		.byte	0xfb
 14390 0eaa 25       		.byte	0x25
 14391 0eab 75       		.byte	0x75
 14392 0eac 00       		.sleb128 0
 14393 0ead 22       		.byte	0x22
 14394 0eae 23       		.byte	0x23
 14395 0eaf 30       		.uleb128 0x30
 14396 0eb0 9F       		.byte	0x9f
 14397 0eb1 7C000000 		.4byte	.LVL263
 14398 0eb5 98000000 		.4byte	.LVL267
 14399 0eb9 0800     		.2byte	0x8
 14400 0ebb 75       		.byte	0x75
 14401 0ebc 00       		.sleb128 0
 14402 0ebd 79       		.byte	0x79
 14403 0ebe 00       		.sleb128 0
 14404 0ebf 22       		.byte	0x22
 14405 0ec0 23       		.byte	0x23
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 356


 14406 0ec1 30       		.uleb128 0x30
 14407 0ec2 9F       		.byte	0x9f
 14408 0ec3 98000000 		.4byte	.LVL267
 14409 0ec7 A2000000 		.4byte	.LVL268
 14410 0ecb 1700     		.2byte	0x17
 14411 0ecd F3       		.byte	0xf3
 14412 0ece 01       		.uleb128 0x1
 14413 0ecf 51       		.byte	0x51
 14414 0ed0 31       		.byte	0x31
 14415 0ed1 25       		.byte	0x25
 14416 0ed2 F3       		.byte	0xf3
 14417 0ed3 01       		.uleb128 0x1
 14418 0ed4 51       		.byte	0x51
 14419 0ed5 22       		.byte	0x22
 14420 0ed6 23       		.byte	0x23
 14421 0ed7 01       		.uleb128 0x1
 14422 0ed8 09       		.byte	0x9
 14423 0ed9 FB       		.byte	0xfb
 14424 0eda 24       		.byte	0x24
 14425 0edb 09       		.byte	0x9
 14426 0edc FB       		.byte	0xfb
 14427 0edd 25       		.byte	0x25
 14428 0ede 75       		.byte	0x75
 14429 0edf 00       		.sleb128 0
 14430 0ee0 22       		.byte	0x22
 14431 0ee1 23       		.byte	0x23
 14432 0ee2 30       		.uleb128 0x30
 14433 0ee3 9F       		.byte	0x9f
 14434 0ee4 00000000 		.4byte	0
 14435 0ee8 00000000 		.4byte	0
 14436              	.LLST65:
 14437 0eec 06000000 		.4byte	.LVL252
 14438 0ef0 30000000 		.4byte	.LVL256
 14439 0ef4 0200     		.2byte	0x2
 14440 0ef6 32       		.byte	0x32
 14441 0ef7 9F       		.byte	0x9f
 14442 0ef8 30000000 		.4byte	.LVL256
 14443 0efc 6A000000 		.4byte	.LVL261
 14444 0f00 0100     		.2byte	0x1
 14445 0f02 50       		.byte	0x50
 14446 0f03 72000000 		.4byte	.LVL262
 14447 0f07 A2000000 		.4byte	.LVL268
 14448 0f0b 0100     		.2byte	0x1
 14449 0f0d 50       		.byte	0x50
 14450 0f0e A2000000 		.4byte	.LVL268
 14451 0f12 AC000000 		.4byte	.LVL270
 14452 0f16 0200     		.2byte	0x2
 14453 0f18 32       		.byte	0x32
 14454 0f19 9F       		.byte	0x9f
 14455 0f1a AC000000 		.4byte	.LVL270
 14456 0f1e B2000000 		.4byte	.LVL271
 14457 0f22 0100     		.2byte	0x1
 14458 0f24 50       		.byte	0x50
 14459 0f25 C6000000 		.4byte	.LVL273
 14460 0f29 D0000000 		.4byte	.LVL275
 14461 0f2d 0200     		.2byte	0x2
 14462 0f2f 32       		.byte	0x32
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 357


 14463 0f30 9F       		.byte	0x9f
 14464 0f31 D0000000 		.4byte	.LVL275
 14465 0f35 E4000000 		.4byte	.LVL278
 14466 0f39 0100     		.2byte	0x1
 14467 0f3b 50       		.byte	0x50
 14468 0f3c FA000000 		.4byte	.LVL283
 14469 0f40 04010000 		.4byte	.LVL284
 14470 0f44 0200     		.2byte	0x2
 14471 0f46 32       		.byte	0x32
 14472 0f47 9F       		.byte	0x9f
 14473 0f48 04010000 		.4byte	.LVL284
 14474 0f4c 0A010000 		.4byte	.LFE11
 14475 0f50 0100     		.2byte	0x1
 14476 0f52 56       		.byte	0x56
 14477 0f53 00000000 		.4byte	0
 14478 0f57 00000000 		.4byte	0
 14479              	.LLST66:
 14480 0f5b 00000000 		.4byte	.LVL285
 14481 0f5f 26000000 		.4byte	.LVL291
 14482 0f63 0100     		.2byte	0x1
 14483 0f65 50       		.byte	0x50
 14484 0f66 26000000 		.4byte	.LVL291
 14485 0f6a 6C000000 		.4byte	.LVL302
 14486 0f6e 0400     		.2byte	0x4
 14487 0f70 F3       		.byte	0xf3
 14488 0f71 01       		.uleb128 0x1
 14489 0f72 50       		.byte	0x50
 14490 0f73 9F       		.byte	0x9f
 14491 0f74 6C000000 		.4byte	.LVL302
 14492 0f78 70000000 		.4byte	.LVL304
 14493 0f7c 0100     		.2byte	0x1
 14494 0f7e 50       		.byte	0x50
 14495 0f7f 70000000 		.4byte	.LVL304
 14496 0f83 8A000000 		.4byte	.LVL307
 14497 0f87 0400     		.2byte	0x4
 14498 0f89 F3       		.byte	0xf3
 14499 0f8a 01       		.uleb128 0x1
 14500 0f8b 50       		.byte	0x50
 14501 0f8c 9F       		.byte	0x9f
 14502 0f8d 8A000000 		.4byte	.LVL307
 14503 0f91 8E000000 		.4byte	.LVL309
 14504 0f95 0100     		.2byte	0x1
 14505 0f97 50       		.byte	0x50
 14506 0f98 8E000000 		.4byte	.LVL309
 14507 0f9c AC000000 		.4byte	.LVL313
 14508 0fa0 0400     		.2byte	0x4
 14509 0fa2 F3       		.byte	0xf3
 14510 0fa3 01       		.uleb128 0x1
 14511 0fa4 50       		.byte	0x50
 14512 0fa5 9F       		.byte	0x9f
 14513 0fa6 AC000000 		.4byte	.LVL313
 14514 0faa AE000000 		.4byte	.LVL314
 14515 0fae 0100     		.2byte	0x1
 14516 0fb0 50       		.byte	0x50
 14517 0fb1 AE000000 		.4byte	.LVL314
 14518 0fb5 B0000000 		.4byte	.LVL315
 14519 0fb9 0400     		.2byte	0x4
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 358


 14520 0fbb F3       		.byte	0xf3
 14521 0fbc 01       		.uleb128 0x1
 14522 0fbd 50       		.byte	0x50
 14523 0fbe 9F       		.byte	0x9f
 14524 0fbf B0000000 		.4byte	.LVL315
 14525 0fc3 B2000000 		.4byte	.LVL316
 14526 0fc7 0100     		.2byte	0x1
 14527 0fc9 50       		.byte	0x50
 14528 0fca B2000000 		.4byte	.LVL316
 14529 0fce B4000000 		.4byte	.LVL317
 14530 0fd2 0400     		.2byte	0x4
 14531 0fd4 F3       		.byte	0xf3
 14532 0fd5 01       		.uleb128 0x1
 14533 0fd6 50       		.byte	0x50
 14534 0fd7 9F       		.byte	0x9f
 14535 0fd8 B4000000 		.4byte	.LVL317
 14536 0fdc B6000000 		.4byte	.LVL318
 14537 0fe0 0100     		.2byte	0x1
 14538 0fe2 50       		.byte	0x50
 14539 0fe3 B6000000 		.4byte	.LVL318
 14540 0fe7 D0000000 		.4byte	.LFE10
 14541 0feb 0400     		.2byte	0x4
 14542 0fed F3       		.byte	0xf3
 14543 0fee 01       		.uleb128 0x1
 14544 0fef 50       		.byte	0x50
 14545 0ff0 9F       		.byte	0x9f
 14546 0ff1 00000000 		.4byte	0
 14547 0ff5 00000000 		.4byte	0
 14548              	.LLST67:
 14549 0ff9 00000000 		.4byte	.LVL285
 14550 0ffd 24000000 		.4byte	.LVL290
 14551 1001 0100     		.2byte	0x1
 14552 1003 51       		.byte	0x51
 14553 1004 24000000 		.4byte	.LVL290
 14554 1008 6C000000 		.4byte	.LVL302
 14555 100c 0100     		.2byte	0x1
 14556 100e 54       		.byte	0x54
 14557 100f 6C000000 		.4byte	.LVL302
 14558 1013 6E000000 		.4byte	.LVL303
 14559 1017 0100     		.2byte	0x1
 14560 1019 51       		.byte	0x51
 14561 101a 6E000000 		.4byte	.LVL303
 14562 101e 8A000000 		.4byte	.LVL307
 14563 1022 0100     		.2byte	0x1
 14564 1024 54       		.byte	0x54
 14565 1025 8A000000 		.4byte	.LVL307
 14566 1029 8C000000 		.4byte	.LVL308
 14567 102d 0100     		.2byte	0x1
 14568 102f 51       		.byte	0x51
 14569 1030 8C000000 		.4byte	.LVL308
 14570 1034 AC000000 		.4byte	.LVL313
 14571 1038 0100     		.2byte	0x1
 14572 103a 54       		.byte	0x54
 14573 103b AC000000 		.4byte	.LVL313
 14574 103f B8000000 		.4byte	.LVL319
 14575 1043 0100     		.2byte	0x1
 14576 1045 51       		.byte	0x51
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 359


 14577 1046 B8000000 		.4byte	.LVL319
 14578 104a D0000000 		.4byte	.LFE10
 14579 104e 0100     		.2byte	0x1
 14580 1050 54       		.byte	0x54
 14581 1051 00000000 		.4byte	0
 14582 1055 00000000 		.4byte	0
 14583              	.LLST68:
 14584 1059 3E000000 		.4byte	.LVL294
 14585 105d 5C000000 		.4byte	.LVL298
 14586 1061 0100     		.2byte	0x1
 14587 1063 55       		.byte	0x55
 14588 1064 5C000000 		.4byte	.LVL298
 14589 1068 64000000 		.4byte	.LVL299
 14590 106c 0100     		.2byte	0x1
 14591 106e 50       		.byte	0x50
 14592 106f 64000000 		.4byte	.LVL299
 14593 1073 66000000 		.4byte	.LVL300
 14594 1077 0D00     		.2byte	0xd
 14595 1079 76       		.byte	0x76
 14596 107a 30       		.sleb128 48
 14597 107b 94       		.byte	0x94
 14598 107c 01       		.byte	0x1
 14599 107d 08       		.byte	0x8
 14600 107e FF       		.byte	0xff
 14601 107f 1A       		.byte	0x1a
 14602 1080 38       		.byte	0x38
 14603 1081 24       		.byte	0x24
 14604 1082 75       		.byte	0x75
 14605 1083 00       		.sleb128 0
 14606 1084 21       		.byte	0x21
 14607 1085 9F       		.byte	0x9f
 14608 1086 66000000 		.4byte	.LVL300
 14609 108a 6A000000 		.4byte	.LVL301
 14610 108e 0100     		.2byte	0x1
 14611 1090 50       		.byte	0x50
 14612 1091 6A000000 		.4byte	.LVL301
 14613 1095 6C000000 		.4byte	.LVL302
 14614 1099 0D00     		.2byte	0xd
 14615 109b 76       		.byte	0x76
 14616 109c 30       		.sleb128 48
 14617 109d 94       		.byte	0x94
 14618 109e 01       		.byte	0x1
 14619 109f 08       		.byte	0x8
 14620 10a0 FF       		.byte	0xff
 14621 10a1 1A       		.byte	0x1a
 14622 10a2 38       		.byte	0x38
 14623 10a3 24       		.byte	0x24
 14624 10a4 75       		.byte	0x75
 14625 10a5 00       		.sleb128 0
 14626 10a6 21       		.byte	0x21
 14627 10a7 9F       		.byte	0x9f
 14628 10a8 BE000000 		.4byte	.LVL320
 14629 10ac C4000000 		.4byte	.LVL321
 14630 10b0 0100     		.2byte	0x1
 14631 10b2 55       		.byte	0x55
 14632 10b3 00000000 		.4byte	0
 14633 10b7 00000000 		.4byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 360


 14634              	.LLST69:
 14635 10bb 1E000000 		.4byte	.LVL288
 14636 10bf 22000000 		.4byte	.LVL289
 14637 10c3 0100     		.2byte	0x1
 14638 10c5 51       		.byte	0x51
 14639 10c6 22000000 		.4byte	.LVL289
 14640 10ca 34000000 		.4byte	.LVL293
 14641 10ce 0100     		.2byte	0x1
 14642 10d0 55       		.byte	0x55
 14643 10d1 34000000 		.4byte	.LVL293
 14644 10d5 52000000 		.4byte	.LVL296
 14645 10d9 0100     		.2byte	0x1
 14646 10db 57       		.byte	0x57
 14647 10dc 52000000 		.4byte	.LVL296
 14648 10e0 6C000000 		.4byte	.LVL302
 14649 10e4 0A00     		.2byte	0xa
 14650 10e6 74       		.byte	0x74
 14651 10e7 00       		.sleb128 0
 14652 10e8 31       		.byte	0x31
 14653 10e9 25       		.byte	0x25
 14654 10ea 74       		.byte	0x74
 14655 10eb 00       		.sleb128 0
 14656 10ec 22       		.byte	0x22
 14657 10ed 23       		.byte	0x23
 14658 10ee 01       		.uleb128 0x1
 14659 10ef 9F       		.byte	0x9f
 14660 10f0 B8000000 		.4byte	.LVL319
 14661 10f4 BE000000 		.4byte	.LVL320
 14662 10f8 0100     		.2byte	0x1
 14663 10fa 55       		.byte	0x55
 14664 10fb BE000000 		.4byte	.LVL320
 14665 10ff C4000000 		.4byte	.LVL321
 14666 1103 0100     		.2byte	0x1
 14667 1105 57       		.byte	0x57
 14668 1106 00000000 		.4byte	0
 14669 110a 00000000 		.4byte	0
 14670              	.LLST70:
 14671 110e 10000000 		.4byte	.LVL287
 14672 1112 6A000000 		.4byte	.LVL301
 14673 1116 0300     		.2byte	0x3
 14674 1118 09       		.byte	0x9
 14675 1119 FF       		.byte	0xff
 14676 111a 9F       		.byte	0x9f
 14677 111b 6A000000 		.4byte	.LVL301
 14678 111f 6C000000 		.4byte	.LVL302
 14679 1123 0100     		.2byte	0x1
 14680 1125 50       		.byte	0x50
 14681 1126 6C000000 		.4byte	.LVL302
 14682 112a 88000000 		.4byte	.LVL306
 14683 112e 0300     		.2byte	0x3
 14684 1130 09       		.byte	0x9
 14685 1131 FF       		.byte	0xff
 14686 1132 9F       		.byte	0x9f
 14687 1133 88000000 		.4byte	.LVL306
 14688 1137 8A000000 		.4byte	.LVL307
 14689 113b 0100     		.2byte	0x1
 14690 113d 50       		.byte	0x50
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 361


 14691 113e 8A000000 		.4byte	.LVL307
 14692 1142 AA000000 		.4byte	.LVL312
 14693 1146 0300     		.2byte	0x3
 14694 1148 09       		.byte	0x9
 14695 1149 FF       		.byte	0xff
 14696 114a 9F       		.byte	0x9f
 14697 114b AA000000 		.4byte	.LVL312
 14698 114f AC000000 		.4byte	.LVL313
 14699 1153 0100     		.2byte	0x1
 14700 1155 50       		.byte	0x50
 14701 1156 B4000000 		.4byte	.LVL317
 14702 115a CE000000 		.4byte	.LVL323
 14703 115e 0300     		.2byte	0x3
 14704 1160 09       		.byte	0x9
 14705 1161 FF       		.byte	0xff
 14706 1162 9F       		.byte	0x9f
 14707 1163 CE000000 		.4byte	.LVL323
 14708 1167 D0000000 		.4byte	.LFE10
 14709 116b 0100     		.2byte	0x1
 14710 116d 50       		.byte	0x50
 14711 116e 00000000 		.4byte	0
 14712 1172 00000000 		.4byte	0
 14713              	.LLST71:
 14714 1176 04000000 		.4byte	.LVL286
 14715 117a 54000000 		.4byte	.LVL297
 14716 117e 0100     		.2byte	0x1
 14717 1180 56       		.byte	0x56
 14718 1181 6C000000 		.4byte	.LVL302
 14719 1185 D0000000 		.4byte	.LFE10
 14720 1189 0100     		.2byte	0x1
 14721 118b 56       		.byte	0x56
 14722 118c 00000000 		.4byte	0
 14723 1190 00000000 		.4byte	0
 14724              	.LLST72:
 14725 1194 00000000 		.4byte	.LVL324
 14726 1198 3E000000 		.4byte	.LVL329
 14727 119c 0100     		.2byte	0x1
 14728 119e 50       		.byte	0x50
 14729 119f 3E000000 		.4byte	.LVL329
 14730 11a3 86000000 		.4byte	.LVL335
 14731 11a7 0100     		.2byte	0x1
 14732 11a9 56       		.byte	0x56
 14733 11aa 86000000 		.4byte	.LVL335
 14734 11ae 88000000 		.4byte	.LVL336
 14735 11b2 0100     		.2byte	0x1
 14736 11b4 50       		.byte	0x50
 14737 11b5 88000000 		.4byte	.LVL336
 14738 11b9 8C000000 		.4byte	.LVL337
 14739 11bd 0100     		.2byte	0x1
 14740 11bf 56       		.byte	0x56
 14741 11c0 8C000000 		.4byte	.LVL337
 14742 11c4 8E000000 		.4byte	.LVL338
 14743 11c8 0100     		.2byte	0x1
 14744 11ca 50       		.byte	0x50
 14745 11cb 8E000000 		.4byte	.LVL338
 14746 11cf 92000000 		.4byte	.LVL339
 14747 11d3 0100     		.2byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 362


 14748 11d5 56       		.byte	0x56
 14749 11d6 92000000 		.4byte	.LVL339
 14750 11da 94000000 		.4byte	.LVL340
 14751 11de 0100     		.2byte	0x1
 14752 11e0 50       		.byte	0x50
 14753 11e1 94000000 		.4byte	.LVL340
 14754 11e5 B0000000 		.4byte	.LFE15
 14755 11e9 0100     		.2byte	0x1
 14756 11eb 56       		.byte	0x56
 14757 11ec 00000000 		.4byte	0
 14758 11f0 00000000 		.4byte	0
 14759              	.LLST73:
 14760 11f4 00000000 		.4byte	.LVL324
 14761 11f8 3E000000 		.4byte	.LVL329
 14762 11fc 0100     		.2byte	0x1
 14763 11fe 51       		.byte	0x51
 14764 11ff 3E000000 		.4byte	.LVL329
 14765 1203 86000000 		.4byte	.LVL335
 14766 1207 0100     		.2byte	0x1
 14767 1209 54       		.byte	0x54
 14768 120a 86000000 		.4byte	.LVL335
 14769 120e 98000000 		.4byte	.LVL341
 14770 1212 0100     		.2byte	0x1
 14771 1214 51       		.byte	0x51
 14772 1215 98000000 		.4byte	.LVL341
 14773 1219 B0000000 		.4byte	.LFE15
 14774 121d 0100     		.2byte	0x1
 14775 121f 54       		.byte	0x54
 14776 1220 00000000 		.4byte	0
 14777 1224 00000000 		.4byte	0
 14778              	.LLST74:
 14779 1228 3C000000 		.4byte	.LVL328
 14780 122c 6A000000 		.4byte	.LVL334
 14781 1230 0100     		.2byte	0x1
 14782 1232 58       		.byte	0x58
 14783 1233 98000000 		.4byte	.LVL341
 14784 1237 AA000000 		.4byte	.LVL347
 14785 123b 0100     		.2byte	0x1
 14786 123d 58       		.byte	0x58
 14787 123e 00000000 		.4byte	0
 14788 1242 00000000 		.4byte	0
 14789              	.LLST75:
 14790 1246 1A000000 		.4byte	.LVL326
 14791 124a 48000000 		.4byte	.LVL331
 14792 124e 0100     		.2byte	0x1
 14793 1250 55       		.byte	0x55
 14794 1251 48000000 		.4byte	.LVL331
 14795 1255 5C000000 		.4byte	.LVL332
 14796 1259 0100     		.2byte	0x1
 14797 125b 50       		.byte	0x50
 14798 125c 5C000000 		.4byte	.LVL332
 14799 1260 86000000 		.4byte	.LVL335
 14800 1264 0100     		.2byte	0x1
 14801 1266 55       		.byte	0x55
 14802 1267 92000000 		.4byte	.LVL339
 14803 126b 98000000 		.4byte	.LVL341
 14804 126f 0100     		.2byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 363


 14805 1271 55       		.byte	0x55
 14806 1272 98000000 		.4byte	.LVL341
 14807 1276 9A000000 		.4byte	.LVL342
 14808 127a 0100     		.2byte	0x1
 14809 127c 50       		.byte	0x50
 14810 127d 9A000000 		.4byte	.LVL342
 14811 1281 9E000000 		.4byte	.LVL343
 14812 1285 0100     		.2byte	0x1
 14813 1287 55       		.byte	0x55
 14814 1288 9E000000 		.4byte	.LVL343
 14815 128c A0000000 		.4byte	.LVL344
 14816 1290 0100     		.2byte	0x1
 14817 1292 50       		.byte	0x50
 14818 1293 A0000000 		.4byte	.LVL344
 14819 1297 A4000000 		.4byte	.LVL345
 14820 129b 0100     		.2byte	0x1
 14821 129d 55       		.byte	0x55
 14822 129e A4000000 		.4byte	.LVL345
 14823 12a2 A6000000 		.4byte	.LVL346
 14824 12a6 0100     		.2byte	0x1
 14825 12a8 50       		.byte	0x50
 14826 12a9 A6000000 		.4byte	.LVL346
 14827 12ad B0000000 		.4byte	.LFE15
 14828 12b1 0100     		.2byte	0x1
 14829 12b3 55       		.byte	0x55
 14830 12b4 00000000 		.4byte	0
 14831 12b8 00000000 		.4byte	0
 14832              	.LLST76:
 14833 12bc 00000000 		.4byte	.LVL348
 14834 12c0 1B000000 		.4byte	.LVL352-1
 14835 12c4 0100     		.2byte	0x1
 14836 12c6 50       		.byte	0x50
 14837 12c7 1B000000 		.4byte	.LVL352-1
 14838 12cb 30000000 		.4byte	.LVL353
 14839 12cf 0100     		.2byte	0x1
 14840 12d1 57       		.byte	0x57
 14841 12d2 30000000 		.4byte	.LVL353
 14842 12d6 36000000 		.4byte	.LVL356
 14843 12da 0100     		.2byte	0x1
 14844 12dc 50       		.byte	0x50
 14845 12dd 36000000 		.4byte	.LVL356
 14846 12e1 10010000 		.4byte	.LFE13
 14847 12e5 0100     		.2byte	0x1
 14848 12e7 57       		.byte	0x57
 14849 12e8 00000000 		.4byte	0
 14850 12ec 00000000 		.4byte	0
 14851              	.LLST77:
 14852 12f0 00000000 		.4byte	.LVL348
 14853 12f4 1B000000 		.4byte	.LVL352-1
 14854 12f8 0100     		.2byte	0x1
 14855 12fa 51       		.byte	0x51
 14856 12fb 1B000000 		.4byte	.LVL352-1
 14857 12ff 30000000 		.4byte	.LVL353
 14858 1303 0100     		.2byte	0x1
 14859 1305 58       		.byte	0x58
 14860 1306 30000000 		.4byte	.LVL353
 14861 130a 36000000 		.4byte	.LVL356
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 364


 14862 130e 0100     		.2byte	0x1
 14863 1310 51       		.byte	0x51
 14864 1311 36000000 		.4byte	.LVL356
 14865 1315 10010000 		.4byte	.LFE13
 14866 1319 0100     		.2byte	0x1
 14867 131b 58       		.byte	0x58
 14868 131c 00000000 		.4byte	0
 14869 1320 00000000 		.4byte	0
 14870              	.LLST78:
 14871 1324 1C000000 		.4byte	.LVL352
 14872 1328 30000000 		.4byte	.LVL353
 14873 132c 0100     		.2byte	0x1
 14874 132e 50       		.byte	0x50
 14875 132f 52000000 		.4byte	.LVL360
 14876 1333 60000000 		.4byte	.LVL361
 14877 1337 0100     		.2byte	0x1
 14878 1339 50       		.byte	0x50
 14879 133a 60000000 		.4byte	.LVL361
 14880 133e 6E000000 		.4byte	.LVL363
 14881 1342 0100     		.2byte	0x1
 14882 1344 53       		.byte	0x53
 14883 1345 72000000 		.4byte	.LVL364
 14884 1349 7A000000 		.4byte	.LVL368
 14885 134d 0100     		.2byte	0x1
 14886 134f 53       		.byte	0x53
 14887 1350 94000000 		.4byte	.LVL373
 14888 1354 A4000000 		.4byte	.LVL374
 14889 1358 0100     		.2byte	0x1
 14890 135a 50       		.byte	0x50
 14891 135b A4000000 		.4byte	.LVL374
 14892 135f A8000000 		.4byte	.LVL375
 14893 1363 0100     		.2byte	0x1
 14894 1365 53       		.byte	0x53
 14895 1366 A8000000 		.4byte	.LVL375
 14896 136a AE000000 		.4byte	.LVL376
 14897 136e 0100     		.2byte	0x1
 14898 1370 50       		.byte	0x50
 14899 1371 FE000000 		.4byte	.LVL386
 14900 1375 00010000 		.4byte	.LVL387
 14901 1379 0100     		.2byte	0x1
 14902 137b 50       		.byte	0x50
 14903 137c 0A010000 		.4byte	.LVL389
 14904 1380 0C010000 		.4byte	.LVL390
 14905 1384 0100     		.2byte	0x1
 14906 1386 50       		.byte	0x50
 14907 1387 00000000 		.4byte	0
 14908 138b 00000000 		.4byte	0
 14909              	.LLST79:
 14910 138f 3C000000 		.4byte	.LVL357
 14911 1393 42000000 		.4byte	.LVL358
 14912 1397 0200     		.2byte	0x2
 14913 1399 30       		.byte	0x30
 14914 139a 9F       		.byte	0x9f
 14915 139b 42000000 		.4byte	.LVL358
 14916 139f 6C000000 		.4byte	.LVL362
 14917 13a3 0100     		.2byte	0x1
 14918 13a5 54       		.byte	0x54
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 365


 14919 13a6 6E000000 		.4byte	.LVL363
 14920 13aa 72000000 		.4byte	.LVL364
 14921 13ae 0200     		.2byte	0x2
 14922 13b0 30       		.byte	0x30
 14923 13b1 9F       		.byte	0x9f
 14924 13b2 72000000 		.4byte	.LVL364
 14925 13b6 74000000 		.4byte	.LVL365
 14926 13ba 0100     		.2byte	0x1
 14927 13bc 54       		.byte	0x54
 14928 13bd 76000000 		.4byte	.LVL366
 14929 13c1 86000000 		.4byte	.LVL371
 14930 13c5 0100     		.2byte	0x1
 14931 13c7 54       		.byte	0x54
 14932 13c8 86000000 		.4byte	.LVL371
 14933 13cc 8C000000 		.4byte	.LVL372
 14934 13d0 0200     		.2byte	0x2
 14935 13d2 32       		.byte	0x32
 14936 13d3 9F       		.byte	0x9f
 14937 13d4 8C000000 		.4byte	.LVL372
 14938 13d8 F4000000 		.4byte	.LVL383
 14939 13dc 0100     		.2byte	0x1
 14940 13de 54       		.byte	0x54
 14941 13df F6000000 		.4byte	.LVL384
 14942 13e3 FE000000 		.4byte	.LVL386
 14943 13e7 0100     		.2byte	0x1
 14944 13e9 54       		.byte	0x54
 14945 13ea 04010000 		.4byte	.LVL388
 14946 13ee 0A010000 		.4byte	.LVL389
 14947 13f2 0200     		.2byte	0x2
 14948 13f4 32       		.byte	0x32
 14949 13f5 9F       		.byte	0x9f
 14950 13f6 0A010000 		.4byte	.LVL389
 14951 13fa 0C010000 		.4byte	.LVL390
 14952 13fe 0100     		.2byte	0x1
 14953 1400 54       		.byte	0x54
 14954 1401 00000000 		.4byte	0
 14955 1405 00000000 		.4byte	0
 14956              	.LLST80:
 14957 1409 0E000000 		.4byte	.LVL350
 14958 140d 18000000 		.4byte	.LVL351
 14959 1411 0100     		.2byte	0x1
 14960 1413 55       		.byte	0x55
 14961 1414 30000000 		.4byte	.LVL353
 14962 1418 32000000 		.4byte	.LVL354
 14963 141c 0100     		.2byte	0x1
 14964 141e 55       		.byte	0x55
 14965 141f 32000000 		.4byte	.LVL354
 14966 1423 34000000 		.4byte	.LVL355
 14967 1427 0200     		.2byte	0x2
 14968 1429 76       		.byte	0x76
 14969 142a 0C       		.sleb128 12
 14970 142b 34000000 		.4byte	.LVL355
 14971 142f 78000000 		.4byte	.LVL367
 14972 1433 0100     		.2byte	0x1
 14973 1435 55       		.byte	0x55
 14974 1436 7A000000 		.4byte	.LVL368
 14975 143a FE000000 		.4byte	.LVL386
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 366


 14976 143e 0100     		.2byte	0x1
 14977 1440 55       		.byte	0x55
 14978 1441 04010000 		.4byte	.LVL388
 14979 1445 0C010000 		.4byte	.LVL390
 14980 1449 0100     		.2byte	0x1
 14981 144b 55       		.byte	0x55
 14982 144c 00000000 		.4byte	0
 14983 1450 00000000 		.4byte	0
 14984              	.LLST81:
 14985 1454 BA000000 		.4byte	.LVL377
 14986 1458 C6000000 		.4byte	.LVL378
 14987 145c 0100     		.2byte	0x1
 14988 145e 50       		.byte	0x50
 14989 145f D0000000 		.4byte	.LVL380
 14990 1463 D8000000 		.4byte	.LVL381
 14991 1467 0100     		.2byte	0x1
 14992 1469 53       		.byte	0x53
 14993 146a EC000000 		.4byte	.LVL382
 14994 146e F8000000 		.4byte	.LVL385
 14995 1472 0100     		.2byte	0x1
 14996 1474 53       		.byte	0x53
 14997 1475 00000000 		.4byte	0
 14998 1479 00000000 		.4byte	0
 14999              	.LLST82:
 15000 147d 00000000 		.4byte	.LVL391
 15001 1481 16000000 		.4byte	.LVL394
 15002 1485 0100     		.2byte	0x1
 15003 1487 50       		.byte	0x50
 15004 1488 16000000 		.4byte	.LVL394
 15005 148c 66000000 		.4byte	.LVL405
 15006 1490 0100     		.2byte	0x1
 15007 1492 57       		.byte	0x57
 15008 1493 66000000 		.4byte	.LVL405
 15009 1497 68000000 		.4byte	.LVL406
 15010 149b 0100     		.2byte	0x1
 15011 149d 50       		.byte	0x50
 15012 149e 68000000 		.4byte	.LVL406
 15013 14a2 6A000000 		.4byte	.LVL407
 15014 14a6 0100     		.2byte	0x1
 15015 14a8 57       		.byte	0x57
 15016 14a9 6A000000 		.4byte	.LVL407
 15017 14ad 6C000000 		.4byte	.LVL408
 15018 14b1 0100     		.2byte	0x1
 15019 14b3 50       		.byte	0x50
 15020 14b4 6C000000 		.4byte	.LVL408
 15021 14b8 7C000000 		.4byte	.LFE12
 15022 14bc 0100     		.2byte	0x1
 15023 14be 57       		.byte	0x57
 15024 14bf 00000000 		.4byte	0
 15025 14c3 00000000 		.4byte	0
 15026              	.LLST83:
 15027 14c7 00000000 		.4byte	.LVL391
 15028 14cb 18000000 		.4byte	.LVL395
 15029 14cf 0100     		.2byte	0x1
 15030 14d1 51       		.byte	0x51
 15031 14d2 18000000 		.4byte	.LVL395
 15032 14d6 5C000000 		.4byte	.LVL403
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 367


 15033 14da 0100     		.2byte	0x1
 15034 14dc 56       		.byte	0x56
 15035 14dd 5C000000 		.4byte	.LVL403
 15036 14e1 66000000 		.4byte	.LVL405
 15037 14e5 0100     		.2byte	0x1
 15038 14e7 55       		.byte	0x55
 15039 14e8 66000000 		.4byte	.LVL405
 15040 14ec 6E000000 		.4byte	.LVL409
 15041 14f0 0100     		.2byte	0x1
 15042 14f2 51       		.byte	0x51
 15043 14f3 6E000000 		.4byte	.LVL409
 15044 14f7 7C000000 		.4byte	.LFE12
 15045 14fb 0100     		.2byte	0x1
 15046 14fd 56       		.byte	0x56
 15047 14fe 00000000 		.4byte	0
 15048 1502 00000000 		.4byte	0
 15049              	.LLST84:
 15050 1506 00000000 		.4byte	.LVL391
 15051 150a 1C000000 		.4byte	.LVL396
 15052 150e 0100     		.2byte	0x1
 15053 1510 52       		.byte	0x52
 15054 1511 1C000000 		.4byte	.LVL396
 15055 1515 1F000000 		.4byte	.LVL397-1
 15056 1519 0100     		.2byte	0x1
 15057 151b 51       		.byte	0x51
 15058 151c 1F000000 		.4byte	.LVL397-1
 15059 1520 66000000 		.4byte	.LVL405
 15060 1524 0400     		.2byte	0x4
 15061 1526 F3       		.byte	0xf3
 15062 1527 01       		.uleb128 0x1
 15063 1528 52       		.byte	0x52
 15064 1529 9F       		.byte	0x9f
 15065 152a 66000000 		.4byte	.LVL405
 15066 152e 6E000000 		.4byte	.LVL409
 15067 1532 0100     		.2byte	0x1
 15068 1534 52       		.byte	0x52
 15069 1535 6E000000 		.4byte	.LVL409
 15070 1539 7C000000 		.4byte	.LFE12
 15071 153d 0400     		.2byte	0x4
 15072 153f F3       		.byte	0xf3
 15073 1540 01       		.uleb128 0x1
 15074 1541 52       		.byte	0x52
 15075 1542 9F       		.byte	0x9f
 15076 1543 00000000 		.4byte	0
 15077 1547 00000000 		.4byte	0
 15078              	.LLST85:
 15079 154b 06000000 		.4byte	.LVL392
 15080 154f 20000000 		.4byte	.LVL397
 15081 1553 0200     		.2byte	0x2
 15082 1555 30       		.byte	0x30
 15083 1556 9F       		.byte	0x9f
 15084 1557 20000000 		.4byte	.LVL397
 15085 155b 22000000 		.4byte	.LVL398
 15086 155f 0100     		.2byte	0x1
 15087 1561 50       		.byte	0x50
 15088 1562 42000000 		.4byte	.LVL401
 15089 1566 64000000 		.4byte	.LVL404
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 368


 15090 156a 0100     		.2byte	0x1
 15091 156c 50       		.byte	0x50
 15092 156d 66000000 		.4byte	.LVL405
 15093 1571 6E000000 		.4byte	.LVL409
 15094 1575 0200     		.2byte	0x2
 15095 1577 30       		.byte	0x30
 15096 1578 9F       		.byte	0x9f
 15097 1579 6E000000 		.4byte	.LVL409
 15098 157d 70000000 		.4byte	.LVL410
 15099 1581 0100     		.2byte	0x1
 15100 1583 50       		.byte	0x50
 15101 1584 00000000 		.4byte	0
 15102 1588 00000000 		.4byte	0
 15103              	.LLST86:
 15104 158c 2A000000 		.4byte	.LVL399
 15105 1590 3A000000 		.4byte	.LVL400
 15106 1594 0100     		.2byte	0x1
 15107 1596 50       		.byte	0x50
 15108 1597 3A000000 		.4byte	.LVL400
 15109 159b 66000000 		.4byte	.LVL405
 15110 159f 0100     		.2byte	0x1
 15111 15a1 55       		.byte	0x55
 15112 15a2 70000000 		.4byte	.LVL410
 15113 15a6 72000000 		.4byte	.LVL411
 15114 15aa 0100     		.2byte	0x1
 15115 15ac 50       		.byte	0x50
 15116 15ad 72000000 		.4byte	.LVL411
 15117 15b1 74000000 		.4byte	.LVL412
 15118 15b5 0100     		.2byte	0x1
 15119 15b7 55       		.byte	0x55
 15120 15b8 74000000 		.4byte	.LVL412
 15121 15bc 76000000 		.4byte	.LVL413
 15122 15c0 0100     		.2byte	0x1
 15123 15c2 50       		.byte	0x50
 15124 15c3 76000000 		.4byte	.LVL413
 15125 15c7 78000000 		.4byte	.LVL414
 15126 15cb 0100     		.2byte	0x1
 15127 15cd 55       		.byte	0x55
 15128 15ce 78000000 		.4byte	.LVL414
 15129 15d2 7A000000 		.4byte	.LVL415
 15130 15d6 0100     		.2byte	0x1
 15131 15d8 50       		.byte	0x50
 15132 15d9 7A000000 		.4byte	.LVL415
 15133 15dd 7C000000 		.4byte	.LFE12
 15134 15e1 0100     		.2byte	0x1
 15135 15e3 55       		.byte	0x55
 15136 15e4 00000000 		.4byte	0
 15137 15e8 00000000 		.4byte	0
 15138              	.LLST87:
 15139 15ec 00000000 		.4byte	.LVL416
 15140 15f0 08000000 		.4byte	.LVL418
 15141 15f4 0100     		.2byte	0x1
 15142 15f6 50       		.byte	0x50
 15143 15f7 08000000 		.4byte	.LVL418
 15144 15fb 20000000 		.4byte	.LFE23
 15145 15ff 0100     		.2byte	0x1
 15146 1601 54       		.byte	0x54
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 369


 15147 1602 00000000 		.4byte	0
 15148 1606 00000000 		.4byte	0
 15149              	.LLST88:
 15150 160a 0E000000 		.4byte	.LVL419
 15151 160e 1E000000 		.4byte	.LVL420
 15152 1612 0100     		.2byte	0x1
 15153 1614 50       		.byte	0x50
 15154 1615 00000000 		.4byte	0
 15155 1619 00000000 		.4byte	0
 15156              	.LLST89:
 15157 161d 00000000 		.4byte	.LVL421
 15158 1621 09000000 		.4byte	.LVL422-1
 15159 1625 0100     		.2byte	0x1
 15160 1627 50       		.byte	0x50
 15161 1628 09000000 		.4byte	.LVL422-1
 15162 162c 52000000 		.4byte	.LFE14
 15163 1630 0100     		.2byte	0x1
 15164 1632 55       		.byte	0x55
 15165 1633 00000000 		.4byte	0
 15166 1637 00000000 		.4byte	0
 15167              	.LLST90:
 15168 163b 00000000 		.4byte	.LVL421
 15169 163f 09000000 		.4byte	.LVL422-1
 15170 1643 0100     		.2byte	0x1
 15171 1645 51       		.byte	0x51
 15172 1646 09000000 		.4byte	.LVL422-1
 15173 164a 2A000000 		.4byte	.LVL427
 15174 164e 0100     		.2byte	0x1
 15175 1650 54       		.byte	0x54
 15176 1651 2A000000 		.4byte	.LVL427
 15177 1655 4E000000 		.4byte	.LVL431
 15178 1659 0400     		.2byte	0x4
 15179 165b F3       		.byte	0xf3
 15180 165c 01       		.uleb128 0x1
 15181 165d 51       		.byte	0x51
 15182 165e 9F       		.byte	0x9f
 15183 165f 4E000000 		.4byte	.LVL431
 15184 1663 52000000 		.4byte	.LFE14
 15185 1667 0100     		.2byte	0x1
 15186 1669 54       		.byte	0x54
 15187 166a 00000000 		.4byte	0
 15188 166e 00000000 		.4byte	0
 15189              	.LLST91:
 15190 1672 16000000 		.4byte	.LVL424
 15191 1676 1E000000 		.4byte	.LVL425
 15192 167a 0100     		.2byte	0x1
 15193 167c 50       		.byte	0x50
 15194 167d 1E000000 		.4byte	.LVL425
 15195 1681 4E000000 		.4byte	.LVL431
 15196 1685 0100     		.2byte	0x1
 15197 1687 57       		.byte	0x57
 15198 1688 00000000 		.4byte	0
 15199 168c 00000000 		.4byte	0
 15200              	.LLST92:
 15201 1690 28000000 		.4byte	.LVL426
 15202 1694 2C000000 		.4byte	.LVL428
 15203 1698 0200     		.2byte	0x2
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 370


 15204 169a 30       		.byte	0x30
 15205 169b 9F       		.byte	0x9f
 15206 169c 2C000000 		.4byte	.LVL428
 15207 16a0 4E000000 		.4byte	.LVL431
 15208 16a4 0100     		.2byte	0x1
 15209 16a6 54       		.byte	0x54
 15210 16a7 00000000 		.4byte	0
 15211 16ab 00000000 		.4byte	0
 15212              	.LLST93:
 15213 16af 28000000 		.4byte	.LVL426
 15214 16b3 4E000000 		.4byte	.LVL431
 15215 16b7 0200     		.2byte	0x2
 15216 16b9 31       		.byte	0x31
 15217 16ba 9F       		.byte	0x9f
 15218 16bb 00000000 		.4byte	0
 15219 16bf 00000000 		.4byte	0
 15220              	.LLST94:
 15221 16c3 28000000 		.4byte	.LVL426
 15222 16c7 4E000000 		.4byte	.LVL431
 15223 16cb 0100     		.2byte	0x1
 15224 16cd 56       		.byte	0x56
 15225 16ce 00000000 		.4byte	0
 15226 16d2 00000000 		.4byte	0
 15227              	.LLST95:
 15228 16d6 00000000 		.4byte	.LVL432
 15229 16da 3C000000 		.4byte	.LVL436
 15230 16de 0100     		.2byte	0x1
 15231 16e0 50       		.byte	0x50
 15232 16e1 3C000000 		.4byte	.LVL436
 15233 16e5 40000000 		.4byte	.LVL437
 15234 16e9 0100     		.2byte	0x1
 15235 16eb 54       		.byte	0x54
 15236 16ec 40000000 		.4byte	.LVL437
 15237 16f0 4D000000 		.4byte	.LVL438-1
 15238 16f4 0100     		.2byte	0x1
 15239 16f6 50       		.byte	0x50
 15240 16f7 4D000000 		.4byte	.LVL438-1
 15241 16fb AC000000 		.4byte	.LVL448
 15242 16ff 0100     		.2byte	0x1
 15243 1701 54       		.byte	0x54
 15244 1702 AC000000 		.4byte	.LVL448
 15245 1706 AE000000 		.4byte	.LVL449
 15246 170a 0100     		.2byte	0x1
 15247 170c 50       		.byte	0x50
 15248 170d AE000000 		.4byte	.LVL449
 15249 1711 B2000000 		.4byte	.LVL450
 15250 1715 0400     		.2byte	0x4
 15251 1717 F3       		.byte	0xf3
 15252 1718 01       		.uleb128 0x1
 15253 1719 50       		.byte	0x50
 15254 171a 9F       		.byte	0x9f
 15255 171b B2000000 		.4byte	.LVL450
 15256 171f D6000000 		.4byte	.LFE16
 15257 1723 0100     		.2byte	0x1
 15258 1725 54       		.byte	0x54
 15259 1726 00000000 		.4byte	0
 15260 172a 00000000 		.4byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 371


 15261              	.LLST96:
 15262 172e 00000000 		.4byte	.LVL432
 15263 1732 2C000000 		.4byte	.LVL435
 15264 1736 0100     		.2byte	0x1
 15265 1738 51       		.byte	0x51
 15266 1739 2C000000 		.4byte	.LVL435
 15267 173d AC000000 		.4byte	.LVL448
 15268 1741 0100     		.2byte	0x1
 15269 1743 58       		.byte	0x58
 15270 1744 AC000000 		.4byte	.LVL448
 15271 1748 B2000000 		.4byte	.LVL450
 15272 174c 0100     		.2byte	0x1
 15273 174e 51       		.byte	0x51
 15274 174f B2000000 		.4byte	.LVL450
 15275 1753 D6000000 		.4byte	.LFE16
 15276 1757 0100     		.2byte	0x1
 15277 1759 58       		.byte	0x58
 15278 175a 00000000 		.4byte	0
 15279 175e 00000000 		.4byte	0
 15280              	.LLST97:
 15281 1762 50000000 		.4byte	.LVL439
 15282 1766 6C000000 		.4byte	.LVL440
 15283 176a 0100     		.2byte	0x1
 15284 176c 50       		.byte	0x50
 15285 176d 6C000000 		.4byte	.LVL440
 15286 1771 70000000 		.4byte	.LVL441
 15287 1775 0100     		.2byte	0x1
 15288 1777 59       		.byte	0x59
 15289 1778 70000000 		.4byte	.LVL441
 15290 177c 72000000 		.4byte	.LVL442
 15291 1780 0100     		.2byte	0x1
 15292 1782 50       		.byte	0x50
 15293 1783 72000000 		.4byte	.LVL442
 15294 1787 78000000 		.4byte	.LVL443
 15295 178b 0100     		.2byte	0x1
 15296 178d 59       		.byte	0x59
 15297 178e 78000000 		.4byte	.LVL443
 15298 1792 88000000 		.4byte	.LVL444
 15299 1796 0100     		.2byte	0x1
 15300 1798 50       		.byte	0x50
 15301 1799 88000000 		.4byte	.LVL444
 15302 179d 9E000000 		.4byte	.LVL447
 15303 17a1 0100     		.2byte	0x1
 15304 17a3 59       		.byte	0x59
 15305 17a4 B2000000 		.4byte	.LVL450
 15306 17a8 B4000000 		.4byte	.LVL451
 15307 17ac 0100     		.2byte	0x1
 15308 17ae 50       		.byte	0x50
 15309 17af B4000000 		.4byte	.LVL451
 15310 17b3 B8000000 		.4byte	.LVL452
 15311 17b7 0100     		.2byte	0x1
 15312 17b9 59       		.byte	0x59
 15313 17ba B8000000 		.4byte	.LVL452
 15314 17be BA000000 		.4byte	.LVL453
 15315 17c2 0100     		.2byte	0x1
 15316 17c4 50       		.byte	0x50
 15317 17c5 BA000000 		.4byte	.LVL453
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 372


 15318 17c9 BE000000 		.4byte	.LVL454
 15319 17cd 0100     		.2byte	0x1
 15320 17cf 59       		.byte	0x59
 15321 17d0 BE000000 		.4byte	.LVL454
 15322 17d4 C0000000 		.4byte	.LVL455
 15323 17d8 0100     		.2byte	0x1
 15324 17da 50       		.byte	0x50
 15325 17db C0000000 		.4byte	.LVL455
 15326 17df C4000000 		.4byte	.LVL456
 15327 17e3 0100     		.2byte	0x1
 15328 17e5 59       		.byte	0x59
 15329 17e6 C4000000 		.4byte	.LVL456
 15330 17ea C6000000 		.4byte	.LVL457
 15331 17ee 0100     		.2byte	0x1
 15332 17f0 50       		.byte	0x50
 15333 17f1 C6000000 		.4byte	.LVL457
 15334 17f5 CA000000 		.4byte	.LVL458
 15335 17f9 0100     		.2byte	0x1
 15336 17fb 59       		.byte	0x59
 15337 17fc CA000000 		.4byte	.LVL458
 15338 1800 CC000000 		.4byte	.LVL459
 15339 1804 0100     		.2byte	0x1
 15340 1806 50       		.byte	0x50
 15341 1807 CC000000 		.4byte	.LVL459
 15342 180b D6000000 		.4byte	.LFE16
 15343 180f 0100     		.2byte	0x1
 15344 1811 59       		.byte	0x59
 15345 1812 00000000 		.4byte	0
 15346 1816 00000000 		.4byte	0
 15347              	.LLST98:
 15348 181a 00000000 		.4byte	.LVL461
 15349 181e 0B000000 		.4byte	.LVL463-1
 15350 1822 0100     		.2byte	0x1
 15351 1824 50       		.byte	0x50
 15352 1825 0B000000 		.4byte	.LVL463-1
 15353 1829 54000000 		.4byte	.LFE21
 15354 182d 0100     		.2byte	0x1
 15355 182f 54       		.byte	0x54
 15356 1830 00000000 		.4byte	0
 15357 1834 00000000 		.4byte	0
 15358              	.LLST99:
 15359 1838 0C000000 		.4byte	.LVL463
 15360 183c 10000000 		.4byte	.LVL464
 15361 1840 0100     		.2byte	0x1
 15362 1842 50       		.byte	0x50
 15363 1843 16000000 		.4byte	.LVL465
 15364 1847 1C000000 		.4byte	.LVL466
 15365 184b 0100     		.2byte	0x1
 15366 184d 50       		.byte	0x50
 15367 184e 44000000 		.4byte	.LVL471
 15368 1852 4C000000 		.4byte	.LVL472
 15369 1856 0100     		.2byte	0x1
 15370 1858 50       		.byte	0x50
 15371 1859 4E000000 		.4byte	.LVL473
 15372 185d 52000000 		.4byte	.LVL474
 15373 1861 0100     		.2byte	0x1
 15374 1863 55       		.byte	0x55
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 373


 15375 1864 52000000 		.4byte	.LVL474
 15376 1868 54000000 		.4byte	.LFE21
 15377 186c 0100     		.2byte	0x1
 15378 186e 50       		.byte	0x50
 15379 186f 00000000 		.4byte	0
 15380 1873 00000000 		.4byte	0
 15381              	.LLST100:
 15382 1877 1E000000 		.4byte	.LVL467
 15383 187b 22000000 		.4byte	.LVL468
 15384 187f 0100     		.2byte	0x1
 15385 1881 53       		.byte	0x53
 15386 1882 22000000 		.4byte	.LVL468
 15387 1886 28000000 		.4byte	.LVL469
 15388 188a 0200     		.2byte	0x2
 15389 188c 70       		.byte	0x70
 15390 188d 00       		.sleb128 0
 15391 188e 4C000000 		.4byte	.LVL472
 15392 1892 4E000000 		.4byte	.LVL473
 15393 1896 0100     		.2byte	0x1
 15394 1898 53       		.byte	0x53
 15395 1899 00000000 		.4byte	0
 15396 189d 00000000 		.4byte	0
 15397              	.LLST101:
 15398 18a1 00000000 		.4byte	.LVL475
 15399 18a5 0D000000 		.4byte	.LVL478-1
 15400 18a9 0100     		.2byte	0x1
 15401 18ab 50       		.byte	0x50
 15402 18ac 0D000000 		.4byte	.LVL478-1
 15403 18b0 4C000000 		.4byte	.LFE17
 15404 18b4 0100     		.2byte	0x1
 15405 18b6 54       		.byte	0x54
 15406 18b7 00000000 		.4byte	0
 15407 18bb 00000000 		.4byte	0
 15408              	.LLST102:
 15409 18bf 00000000 		.4byte	.LVL475
 15410 18c3 0A000000 		.4byte	.LVL477
 15411 18c7 0100     		.2byte	0x1
 15412 18c9 51       		.byte	0x51
 15413 18ca 0A000000 		.4byte	.LVL477
 15414 18ce 4C000000 		.4byte	.LFE17
 15415 18d2 0100     		.2byte	0x1
 15416 18d4 57       		.byte	0x57
 15417 18d5 00000000 		.4byte	0
 15418 18d9 00000000 		.4byte	0
 15419              	.LLST103:
 15420 18dd 0E000000 		.4byte	.LVL478
 15421 18e1 16000000 		.4byte	.LVL480
 15422 18e5 0100     		.2byte	0x1
 15423 18e7 50       		.byte	0x50
 15424 18e8 1C000000 		.4byte	.LVL481
 15425 18ec 36000000 		.4byte	.LVL484
 15426 18f0 0100     		.2byte	0x1
 15427 18f2 50       		.byte	0x50
 15428 18f3 3C000000 		.4byte	.LVL485
 15429 18f7 42000000 		.4byte	.LVL486
 15430 18fb 0100     		.2byte	0x1
 15431 18fd 50       		.byte	0x50
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 374


 15432 18fe 42000000 		.4byte	.LVL486
 15433 1902 4C000000 		.4byte	.LFE17
 15434 1906 0100     		.2byte	0x1
 15435 1908 52       		.byte	0x52
 15436 1909 00000000 		.4byte	0
 15437 190d 00000000 		.4byte	0
 15438              	.LLST104:
 15439 1911 14000000 		.4byte	.LVL479
 15440 1915 42000000 		.4byte	.LVL486
 15441 1919 0100     		.2byte	0x1
 15442 191b 55       		.byte	0x55
 15443 191c 00000000 		.4byte	0
 15444 1920 00000000 		.4byte	0
 15445              	.LLST105:
 15446 1924 00000000 		.4byte	.LVL488
 15447 1928 0C000000 		.4byte	.LVL491
 15448 192c 0100     		.2byte	0x1
 15449 192e 50       		.byte	0x50
 15450 192f 0C000000 		.4byte	.LVL491
 15451 1933 60000000 		.4byte	.LFE20
 15452 1937 0100     		.2byte	0x1
 15453 1939 54       		.byte	0x54
 15454 193a 00000000 		.4byte	0
 15455 193e 00000000 		.4byte	0
 15456              	.LLST106:
 15457 1942 00000000 		.4byte	.LVL488
 15458 1946 0C000000 		.4byte	.LVL491
 15459 194a 0100     		.2byte	0x1
 15460 194c 51       		.byte	0x51
 15461 194d 0C000000 		.4byte	.LVL491
 15462 1951 60000000 		.4byte	.LFE20
 15463 1955 0100     		.2byte	0x1
 15464 1957 56       		.byte	0x56
 15465 1958 00000000 		.4byte	0
 15466 195c 00000000 		.4byte	0
 15467              	.LLST107:
 15468 1960 06000000 		.4byte	.LVL489
 15469 1964 0C000000 		.4byte	.LVL491
 15470 1968 0200     		.2byte	0x2
 15471 196a 34       		.byte	0x34
 15472 196b 9F       		.byte	0x9f
 15473 196c 0C000000 		.4byte	.LVL491
 15474 1970 12000000 		.4byte	.LVL492
 15475 1974 0100     		.2byte	0x1
 15476 1976 57       		.byte	0x57
 15477 1977 12000000 		.4byte	.LVL492
 15478 197b 42000000 		.4byte	.LVL496
 15479 197f 0100     		.2byte	0x1
 15480 1981 50       		.byte	0x50
 15481 1982 48000000 		.4byte	.LVL497
 15482 1986 4C000000 		.4byte	.LVL498
 15483 198a 0100     		.2byte	0x1
 15484 198c 50       		.byte	0x50
 15485 198d 4C000000 		.4byte	.LVL498
 15486 1991 54000000 		.4byte	.LVL499
 15487 1995 0100     		.2byte	0x1
 15488 1997 57       		.byte	0x57
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 375


 15489 1998 54000000 		.4byte	.LVL499
 15490 199c 56000000 		.4byte	.LVL500
 15491 19a0 0100     		.2byte	0x1
 15492 19a2 50       		.byte	0x50
 15493 19a3 56000000 		.4byte	.LVL500
 15494 19a7 60000000 		.4byte	.LFE20
 15495 19ab 0100     		.2byte	0x1
 15496 19ad 57       		.byte	0x57
 15497 19ae 00000000 		.4byte	0
 15498 19b2 00000000 		.4byte	0
 15499              	.LLST108:
 15500 19b6 22000000 		.4byte	.LVL494
 15501 19ba 34000000 		.4byte	.LVL495
 15502 19be 0100     		.2byte	0x1
 15503 19c0 53       		.byte	0x53
 15504 19c1 34000000 		.4byte	.LVL495
 15505 19c5 47000000 		.4byte	.LVL497-1
 15506 19c9 0200     		.2byte	0x2
 15507 19cb 74       		.byte	0x74
 15508 19cc 06       		.sleb128 6
 15509 19cd 00000000 		.4byte	0
 15510 19d1 00000000 		.4byte	0
 15511              	.LLST109:
 15512 19d5 1A000000 		.4byte	.LVL493
 15513 19d9 47000000 		.4byte	.LVL497-1
 15514 19dd 0100     		.2byte	0x1
 15515 19df 52       		.byte	0x52
 15516 19e0 54000000 		.4byte	.LVL499
 15517 19e4 56000000 		.4byte	.LVL500
 15518 19e8 0100     		.2byte	0x1
 15519 19ea 52       		.byte	0x52
 15520 19eb 00000000 		.4byte	0
 15521 19ef 00000000 		.4byte	0
 15522              	.LLST110:
 15523 19f3 00000000 		.4byte	.LVL501
 15524 19f7 14000000 		.4byte	.LVL504
 15525 19fb 0100     		.2byte	0x1
 15526 19fd 50       		.byte	0x50
 15527 19fe 14000000 		.4byte	.LVL504
 15528 1a02 08010000 		.4byte	.LVL530
 15529 1a06 0200     		.2byte	0x2
 15530 1a08 91       		.byte	0x91
 15531 1a09 54       		.sleb128 -44
 15532 1a0a 08010000 		.4byte	.LVL530
 15533 1a0e 0C010000 		.4byte	.LFE25
 15534 1a12 0200     		.2byte	0x2
 15535 1a14 7D       		.byte	0x7d
 15536 1a15 54       		.sleb128 -44
 15537 1a16 00000000 		.4byte	0
 15538 1a1a 00000000 		.4byte	0
 15539              	.LLST111:
 15540 1a1e 00000000 		.4byte	.LVL501
 15541 1a22 16000000 		.4byte	.LVL505
 15542 1a26 0100     		.2byte	0x1
 15543 1a28 51       		.byte	0x51
 15544 1a29 16000000 		.4byte	.LVL505
 15545 1a2d 08010000 		.4byte	.LVL530
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 376


 15546 1a31 0100     		.2byte	0x1
 15547 1a33 5B       		.byte	0x5b
 15548 1a34 08010000 		.4byte	.LVL530
 15549 1a38 0C010000 		.4byte	.LFE25
 15550 1a3c 0400     		.2byte	0x4
 15551 1a3e F3       		.byte	0xf3
 15552 1a3f 01       		.uleb128 0x1
 15553 1a40 51       		.byte	0x51
 15554 1a41 9F       		.byte	0x9f
 15555 1a42 00000000 		.4byte	0
 15556 1a46 00000000 		.4byte	0
 15557              	.LLST112:
 15558 1a4a 2A000000 		.4byte	.LVL509
 15559 1a4e A8000000 		.4byte	.LVL522
 15560 1a52 0100     		.2byte	0x1
 15561 1a54 54       		.byte	0x54
 15562 1a55 A8000000 		.4byte	.LVL522
 15563 1a59 AA000000 		.4byte	.LVL523
 15564 1a5d 0300     		.2byte	0x3
 15565 1a5f 74       		.byte	0x74
 15566 1a60 20       		.sleb128 32
 15567 1a61 9F       		.byte	0x9f
 15568 1a62 AA000000 		.4byte	.LVL523
 15569 1a66 08010000 		.4byte	.LVL530
 15570 1a6a 0100     		.2byte	0x1
 15571 1a6c 54       		.byte	0x54
 15572 1a6d 00000000 		.4byte	0
 15573 1a71 00000000 		.4byte	0
 15574              	.LLST113:
 15575 1a75 72000000 		.4byte	.LVL516
 15576 1a79 92000000 		.4byte	.LVL520
 15577 1a7d 0100     		.2byte	0x1
 15578 1a7f 55       		.byte	0x55
 15579 1a80 F4000000 		.4byte	.LVL527
 15580 1a84 FC000000 		.4byte	.LVL528
 15581 1a88 0100     		.2byte	0x1
 15582 1a8a 55       		.byte	0x55
 15583 1a8b 00000000 		.4byte	0
 15584 1a8f 00000000 		.4byte	0
 15585              	.LLST114:
 15586 1a93 12000000 		.4byte	.LVL503
 15587 1a97 08010000 		.4byte	.LVL530
 15588 1a9b 0100     		.2byte	0x1
 15589 1a9d 5A       		.byte	0x5a
 15590 1a9e 08010000 		.4byte	.LVL530
 15591 1aa2 0C010000 		.4byte	.LFE25
 15592 1aa6 0600     		.2byte	0x6
 15593 1aa8 7D       		.byte	0x7d
 15594 1aa9 54       		.sleb128 -44
 15595 1aaa 06       		.byte	0x6
 15596 1aab 23       		.byte	0x23
 15597 1aac 20       		.uleb128 0x20
 15598 1aad 9F       		.byte	0x9f
 15599 1aae 00000000 		.4byte	0
 15600 1ab2 00000000 		.4byte	0
 15601              	.LLST115:
 15602 1ab6 1C000000 		.4byte	.LVL506
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 377


 15603 1aba 24000000 		.4byte	.LVL507
 15604 1abe 0200     		.2byte	0x2
 15605 1ac0 38       		.byte	0x38
 15606 1ac1 9F       		.byte	0x9f
 15607 1ac2 24000000 		.4byte	.LVL507
 15608 1ac6 62000000 		.4byte	.LVL512
 15609 1aca 0100     		.2byte	0x1
 15610 1acc 59       		.byte	0x59
 15611 1acd 64000000 		.4byte	.LVL513
 15612 1ad1 08010000 		.4byte	.LVL530
 15613 1ad5 0100     		.2byte	0x1
 15614 1ad7 59       		.byte	0x59
 15615 1ad8 00000000 		.4byte	0
 15616 1adc 00000000 		.4byte	0
 15617              	.LLST116:
 15618 1ae0 1C000000 		.4byte	.LVL506
 15619 1ae4 24000000 		.4byte	.LVL507
 15620 1ae8 0200     		.2byte	0x2
 15621 1aea 30       		.byte	0x30
 15622 1aeb 9F       		.byte	0x9f
 15623 1aec 24000000 		.4byte	.LVL507
 15624 1af0 26000000 		.4byte	.LVL508
 15625 1af4 0100     		.2byte	0x1
 15626 1af6 57       		.byte	0x57
 15627 1af7 26000000 		.4byte	.LVL508
 15628 1afb 6E000000 		.4byte	.LVL515
 15629 1aff 0100     		.2byte	0x1
 15630 1b01 55       		.byte	0x55
 15631 1b02 6E000000 		.4byte	.LVL515
 15632 1b06 92000000 		.4byte	.LVL520
 15633 1b0a 0100     		.2byte	0x1
 15634 1b0c 57       		.byte	0x57
 15635 1b0d 92000000 		.4byte	.LVL520
 15636 1b11 B6000000 		.4byte	.LVL525
 15637 1b15 0100     		.2byte	0x1
 15638 1b17 55       		.byte	0x55
 15639 1b18 EC000000 		.4byte	.LVL526
 15640 1b1c F4000000 		.4byte	.LVL527
 15641 1b20 0100     		.2byte	0x1
 15642 1b22 55       		.byte	0x55
 15643 1b23 F4000000 		.4byte	.LVL527
 15644 1b27 FC000000 		.4byte	.LVL528
 15645 1b2b 0100     		.2byte	0x1
 15646 1b2d 57       		.byte	0x57
 15647 1b2e FC000000 		.4byte	.LVL528
 15648 1b32 00010000 		.4byte	.LVL529
 15649 1b36 0100     		.2byte	0x1
 15650 1b38 55       		.byte	0x55
 15651 1b39 00000000 		.4byte	0
 15652 1b3d 00000000 		.4byte	0
 15653              	.LLST117:
 15654 1b41 1C000000 		.4byte	.LVL506
 15655 1b45 24000000 		.4byte	.LVL507
 15656 1b49 0200     		.2byte	0x2
 15657 1b4b 30       		.byte	0x30
 15658 1b4c 9F       		.byte	0x9f
 15659 1b4d 24000000 		.4byte	.LVL507
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 378


 15660 1b51 5E000000 		.4byte	.LVL511
 15661 1b55 0100     		.2byte	0x1
 15662 1b57 56       		.byte	0x56
 15663 1b58 64000000 		.4byte	.LVL513
 15664 1b5c 86000000 		.4byte	.LVL518
 15665 1b60 0100     		.2byte	0x1
 15666 1b62 56       		.byte	0x56
 15667 1b63 86000000 		.4byte	.LVL518
 15668 1b67 8C000000 		.4byte	.LVL519
 15669 1b6b 0100     		.2byte	0x1
 15670 1b6d 53       		.byte	0x53
 15671 1b6e 8C000000 		.4byte	.LVL519
 15672 1b72 AA000000 		.4byte	.LVL523
 15673 1b76 0100     		.2byte	0x1
 15674 1b78 56       		.byte	0x56
 15675 1b79 AA000000 		.4byte	.LVL523
 15676 1b7d B0000000 		.4byte	.LVL524
 15677 1b81 0300     		.2byte	0x3
 15678 1b83 76       		.byte	0x76
 15679 1b84 01       		.sleb128 1
 15680 1b85 9F       		.byte	0x9f
 15681 1b86 B0000000 		.4byte	.LVL524
 15682 1b8a 08010000 		.4byte	.LVL530
 15683 1b8e 0100     		.2byte	0x1
 15684 1b90 56       		.byte	0x56
 15685 1b91 00000000 		.4byte	0
 15686 1b95 00000000 		.4byte	0
 15687              	.LLST118:
 15688 1b99 0E000000 		.4byte	.LVL502
 15689 1b9d 08010000 		.4byte	.LVL530
 15690 1ba1 0100     		.2byte	0x1
 15691 1ba3 58       		.byte	0x58
 15692 1ba4 00000000 		.4byte	0
 15693 1ba8 00000000 		.4byte	0
 15694              	.LLST119:
 15695 1bac 00000000 		.4byte	.LVL531
 15696 1bb0 2E000000 		.4byte	.LVL533
 15697 1bb4 0100     		.2byte	0x1
 15698 1bb6 50       		.byte	0x50
 15699 1bb7 2E000000 		.4byte	.LVL533
 15700 1bbb 8C000000 		.4byte	.LFE26
 15701 1bbf 0100     		.2byte	0x1
 15702 1bc1 54       		.byte	0x54
 15703 1bc2 00000000 		.4byte	0
 15704 1bc6 00000000 		.4byte	0
 15705              	.LLST120:
 15706 1bca 00000000 		.4byte	.LVL531
 15707 1bce 30000000 		.4byte	.LVL534
 15708 1bd2 0100     		.2byte	0x1
 15709 1bd4 51       		.byte	0x51
 15710 1bd5 30000000 		.4byte	.LVL534
 15711 1bd9 38000000 		.4byte	.LVL537
 15712 1bdd 0400     		.2byte	0x4
 15713 1bdf F3       		.byte	0xf3
 15714 1be0 01       		.uleb128 0x1
 15715 1be1 51       		.byte	0x51
 15716 1be2 9F       		.byte	0x9f
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 379


 15717 1be3 00000000 		.4byte	0
 15718 1be7 00000000 		.4byte	0
 15719              	.LLST121:
 15720 1beb 36000000 		.4byte	.LVL536
 15721 1bef 38000000 		.4byte	.LVL537
 15722 1bf3 0100     		.2byte	0x1
 15723 1bf5 53       		.byte	0x53
 15724 1bf6 40000000 		.4byte	.LVL538
 15725 1bfa 46000000 		.4byte	.LVL539
 15726 1bfe 0100     		.2byte	0x1
 15727 1c00 50       		.byte	0x50
 15728 1c01 4A000000 		.4byte	.LVL540
 15729 1c05 76000000 		.4byte	.LVL542
 15730 1c09 0100     		.2byte	0x1
 15731 1c0b 50       		.byte	0x50
 15732 1c0c 80000000 		.4byte	.LVL544
 15733 1c10 86000000 		.4byte	.LVL545
 15734 1c14 0100     		.2byte	0x1
 15735 1c16 50       		.byte	0x50
 15736 1c17 86000000 		.4byte	.LVL545
 15737 1c1b 8C000000 		.4byte	.LFE26
 15738 1c1f 0100     		.2byte	0x1
 15739 1c21 53       		.byte	0x53
 15740 1c22 00000000 		.4byte	0
 15741 1c26 00000000 		.4byte	0
 15742              	.LLST122:
 15743 1c2a 4E000000 		.4byte	.LVL541
 15744 1c2e 7B000000 		.4byte	.LVL543-1
 15745 1c32 0100     		.2byte	0x1
 15746 1c34 52       		.byte	0x52
 15747 1c35 80000000 		.4byte	.LVL544
 15748 1c39 86000000 		.4byte	.LVL545
 15749 1c3d 0100     		.2byte	0x1
 15750 1c3f 52       		.byte	0x52
 15751 1c40 00000000 		.4byte	0
 15752 1c44 00000000 		.4byte	0
 15753              	.LLST123:
 15754 1c48 00000000 		.4byte	.LVL546
 15755 1c4c 0B000000 		.4byte	.LVL548-1
 15756 1c50 0100     		.2byte	0x1
 15757 1c52 50       		.byte	0x50
 15758 1c53 0B000000 		.4byte	.LVL548-1
 15759 1c57 2C000000 		.4byte	.LVL553
 15760 1c5b 0100     		.2byte	0x1
 15761 1c5d 54       		.byte	0x54
 15762 1c5e 2C000000 		.4byte	.LVL553
 15763 1c62 3E000000 		.4byte	.LVL554
 15764 1c66 0300     		.2byte	0x3
 15765 1c68 74       		.byte	0x74
 15766 1c69 60       		.sleb128 -32
 15767 1c6a 9F       		.byte	0x9f
 15768 1c6b 3E000000 		.4byte	.LVL554
 15769 1c6f 42000000 		.4byte	.LFE22
 15770 1c73 0400     		.2byte	0x4
 15771 1c75 F3       		.byte	0xf3
 15772 1c76 01       		.uleb128 0x1
 15773 1c77 50       		.byte	0x50
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 380


 15774 1c78 9F       		.byte	0x9f
 15775 1c79 00000000 		.4byte	0
 15776 1c7d 00000000 		.4byte	0
 15777              	.LLST124:
 15778 1c81 0C000000 		.4byte	.LVL548
 15779 1c85 12000000 		.4byte	.LVL549
 15780 1c89 0100     		.2byte	0x1
 15781 1c8b 50       		.byte	0x50
 15782 1c8c 18000000 		.4byte	.LVL550
 15783 1c90 1E000000 		.4byte	.LVL551
 15784 1c94 0100     		.2byte	0x1
 15785 1c96 50       		.byte	0x50
 15786 1c97 3E000000 		.4byte	.LVL554
 15787 1c9b 42000000 		.4byte	.LFE22
 15788 1c9f 0100     		.2byte	0x1
 15789 1ca1 55       		.byte	0x55
 15790 1ca2 00000000 		.4byte	0
 15791 1ca6 00000000 		.4byte	0
 15792              	.LLST125:
 15793 1caa 00000000 		.4byte	.LVL555
 15794 1cae 07000000 		.4byte	.LVL556-1
 15795 1cb2 0100     		.2byte	0x1
 15796 1cb4 50       		.byte	0x50
 15797 1cb5 07000000 		.4byte	.LVL556-1
 15798 1cb9 82000000 		.4byte	.LVL567
 15799 1cbd 0100     		.2byte	0x1
 15800 1cbf 54       		.byte	0x54
 15801 1cc0 82000000 		.4byte	.LVL567
 15802 1cc4 8C000000 		.4byte	.LFE8
 15803 1cc8 0400     		.2byte	0x4
 15804 1cca F3       		.byte	0xf3
 15805 1ccb 01       		.uleb128 0x1
 15806 1ccc 50       		.byte	0x50
 15807 1ccd 9F       		.byte	0x9f
 15808 1cce 00000000 		.4byte	0
 15809 1cd2 00000000 		.4byte	0
 15810              	.LLST126:
 15811 1cd6 08000000 		.4byte	.LVL556
 15812 1cda 20000000 		.4byte	.LVL557
 15813 1cde 0100     		.2byte	0x1
 15814 1ce0 50       		.byte	0x50
 15815 1ce1 7E000000 		.4byte	.LVL566
 15816 1ce5 82000000 		.4byte	.LVL567
 15817 1ce9 0100     		.2byte	0x1
 15818 1ceb 55       		.byte	0x55
 15819 1cec 00000000 		.4byte	0
 15820 1cf0 00000000 		.4byte	0
 15821              	.LLST127:
 15822 1cf4 00000000 		.4byte	.LVL568
 15823 1cf8 0C000000 		.4byte	.LVL569
 15824 1cfc 0100     		.2byte	0x1
 15825 1cfe 50       		.byte	0x50
 15826 1cff 0C000000 		.4byte	.LVL569
 15827 1d03 44000000 		.4byte	.LVL574
 15828 1d07 0200     		.2byte	0x2
 15829 1d09 91       		.byte	0x91
 15830 1d0a 6C       		.sleb128 -20
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 381


 15831 1d0b 44000000 		.4byte	.LVL574
 15832 1d0f 49000000 		.4byte	.LVL575-1
 15833 1d13 0200     		.2byte	0x2
 15834 1d15 71       		.byte	0x71
 15835 1d16 00       		.sleb128 0
 15836 1d17 49000000 		.4byte	.LVL575-1
 15837 1d1b 56000000 		.4byte	.LVL581
 15838 1d1f 0200     		.2byte	0x2
 15839 1d21 91       		.byte	0x91
 15840 1d22 6C       		.sleb128 -20
 15841 1d23 56000000 		.4byte	.LVL581
 15842 1d27 5C000000 		.4byte	.LFE32
 15843 1d2b 0200     		.2byte	0x2
 15844 1d2d 7D       		.byte	0x7d
 15845 1d2e 6C       		.sleb128 -20
 15846 1d2f 00000000 		.4byte	0
 15847 1d33 00000000 		.4byte	0
 15848              	.LLST128:
 15849 1d37 00000000 		.4byte	.LVL568
 15850 1d3b 13000000 		.4byte	.LVL570-1
 15851 1d3f 0100     		.2byte	0x1
 15852 1d41 51       		.byte	0x51
 15853 1d42 13000000 		.4byte	.LVL570-1
 15854 1d46 54000000 		.4byte	.LVL580
 15855 1d4a 0200     		.2byte	0x2
 15856 1d4c 7D       		.byte	0x7d
 15857 1d4d 00       		.sleb128 0
 15858 1d4e 54000000 		.4byte	.LVL580
 15859 1d52 56000000 		.4byte	.LVL581
 15860 1d56 0200     		.2byte	0x2
 15861 1d58 91       		.byte	0x91
 15862 1d59 68       		.sleb128 -24
 15863 1d5a 56000000 		.4byte	.LVL581
 15864 1d5e 5C000000 		.4byte	.LFE32
 15865 1d62 0200     		.2byte	0x2
 15866 1d64 7D       		.byte	0x7d
 15867 1d65 68       		.sleb128 -24
 15868 1d66 00000000 		.4byte	0
 15869 1d6a 00000000 		.4byte	0
 15870              	.LLST129:
 15871 1d6e 00000000 		.4byte	.LVL568
 15872 1d72 13000000 		.4byte	.LVL570-1
 15873 1d76 0100     		.2byte	0x1
 15874 1d78 52       		.byte	0x52
 15875 1d79 13000000 		.4byte	.LVL570-1
 15876 1d7d 5C000000 		.4byte	.LFE32
 15877 1d81 0400     		.2byte	0x4
 15878 1d83 F3       		.byte	0xf3
 15879 1d84 01       		.uleb128 0x1
 15880 1d85 52       		.byte	0x52
 15881 1d86 9F       		.byte	0x9f
 15882 1d87 00000000 		.4byte	0
 15883 1d8b 00000000 		.4byte	0
 15884              	.LLST130:
 15885 1d8f 1E000000 		.4byte	.LVL571
 15886 1d93 2C000000 		.4byte	.LVL572
 15887 1d97 0100     		.2byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 382


 15888 1d99 53       		.byte	0x53
 15889 1d9a 00000000 		.4byte	0
 15890 1d9e 00000000 		.4byte	0
 15891              	.LLST131:
 15892 1da2 14000000 		.4byte	.LVL570
 15893 1da6 42000000 		.4byte	.LVL573
 15894 1daa 0100     		.2byte	0x1
 15895 1dac 50       		.byte	0x50
 15896 1dad 4C000000 		.4byte	.LVL576
 15897 1db1 4E000000 		.4byte	.LVL577
 15898 1db5 0100     		.2byte	0x1
 15899 1db7 50       		.byte	0x50
 15900 1db8 50000000 		.4byte	.LVL578
 15901 1dbc 52000000 		.4byte	.LVL579
 15902 1dc0 0100     		.2byte	0x1
 15903 1dc2 50       		.byte	0x50
 15904 1dc3 00000000 		.4byte	0
 15905 1dc7 00000000 		.4byte	0
 15906              	.LLST132:
 15907 1dcb 4A000000 		.4byte	.LVL575
 15908 1dcf 4C000000 		.4byte	.LVL576
 15909 1dd3 0100     		.2byte	0x1
 15910 1dd5 50       		.byte	0x50
 15911 1dd6 00000000 		.4byte	0
 15912 1dda 00000000 		.4byte	0
 15913              	.LLST133:
 15914 1dde 00000000 		.4byte	.LVL582
 15915 1de2 18000000 		.4byte	.LVL584
 15916 1de6 0100     		.2byte	0x1
 15917 1de8 50       		.byte	0x50
 15918 1de9 18000000 		.4byte	.LVL584
 15919 1ded E2010000 		.4byte	.LVL635
 15920 1df1 0100     		.2byte	0x1
 15921 1df3 56       		.byte	0x56
 15922 1df4 E2010000 		.4byte	.LVL635
 15923 1df8 E4010000 		.4byte	.LVL636
 15924 1dfc 0100     		.2byte	0x1
 15925 1dfe 50       		.byte	0x50
 15926 1dff E4010000 		.4byte	.LVL636
 15927 1e03 EA010000 		.4byte	.LFE33
 15928 1e07 0400     		.2byte	0x4
 15929 1e09 F3       		.byte	0xf3
 15930 1e0a 01       		.uleb128 0x1
 15931 1e0b 50       		.byte	0x50
 15932 1e0c 9F       		.byte	0x9f
 15933 1e0d 00000000 		.4byte	0
 15934 1e11 00000000 		.4byte	0
 15935              	.LLST134:
 15936 1e15 00000000 		.4byte	.LVL582
 15937 1e19 1A000000 		.4byte	.LVL585
 15938 1e1d 0100     		.2byte	0x1
 15939 1e1f 51       		.byte	0x51
 15940 1e20 1A000000 		.4byte	.LVL585
 15941 1e24 1F000000 		.4byte	.LVL586-1
 15942 1e28 0200     		.2byte	0x2
 15943 1e2a 70       		.byte	0x70
 15944 1e2b 00       		.sleb128 0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 383


 15945 1e2c 1F000000 		.4byte	.LVL586-1
 15946 1e30 E2010000 		.4byte	.LVL635
 15947 1e34 0300     		.2byte	0x3
 15948 1e36 91       		.byte	0x91
 15949 1e37 AC7F     		.sleb128 -84
 15950 1e39 E2010000 		.4byte	.LVL635
 15951 1e3d E4010000 		.4byte	.LVL636
 15952 1e41 0100     		.2byte	0x1
 15953 1e43 51       		.byte	0x51
 15954 1e44 E4010000 		.4byte	.LVL636
 15955 1e48 EA010000 		.4byte	.LFE33
 15956 1e4c 0300     		.2byte	0x3
 15957 1e4e 91       		.byte	0x91
 15958 1e4f AC7F     		.sleb128 -84
 15959 1e51 00000000 		.4byte	0
 15960 1e55 00000000 		.4byte	0
 15961              	.LLST135:
 15962 1e59 00000000 		.4byte	.LVL582
 15963 1e5d 16000000 		.4byte	.LVL583
 15964 1e61 0100     		.2byte	0x1
 15965 1e63 52       		.byte	0x52
 15966 1e64 16000000 		.4byte	.LVL583
 15967 1e68 82010000 		.4byte	.LVL620
 15968 1e6c 0100     		.2byte	0x1
 15969 1e6e 57       		.byte	0x57
 15970 1e6f E2010000 		.4byte	.LVL635
 15971 1e73 E4010000 		.4byte	.LVL636
 15972 1e77 0100     		.2byte	0x1
 15973 1e79 52       		.byte	0x52
 15974 1e7a 00000000 		.4byte	0
 15975 1e7e 00000000 		.4byte	0
 15976              	.LLST136:
 15977 1e82 20000000 		.4byte	.LVL586
 15978 1e86 2E000000 		.4byte	.LVL587
 15979 1e8a 0100     		.2byte	0x1
 15980 1e8c 50       		.byte	0x50
 15981 1e8d 34000000 		.4byte	.LVL588
 15982 1e91 42000000 		.4byte	.LVL589
 15983 1e95 0100     		.2byte	0x1
 15984 1e97 50       		.byte	0x50
 15985 1e98 42000000 		.4byte	.LVL589
 15986 1e9c 70000000 		.4byte	.LVL593
 15987 1ea0 0100     		.2byte	0x1
 15988 1ea2 54       		.byte	0x54
 15989 1ea3 72000000 		.4byte	.LVL594
 15990 1ea7 DA000000 		.4byte	.LVL608
 15991 1eab 0100     		.2byte	0x1
 15992 1ead 54       		.byte	0x54
 15993 1eae DA000000 		.4byte	.LVL608
 15994 1eb2 E0000000 		.4byte	.LVL609
 15995 1eb6 0100     		.2byte	0x1
 15996 1eb8 50       		.byte	0x50
 15997 1eb9 E8000000 		.4byte	.LVL611
 15998 1ebd 0E010000 		.4byte	.LVL613
 15999 1ec1 0100     		.2byte	0x1
 16000 1ec3 54       		.byte	0x54
 16001 1ec4 10010000 		.4byte	.LVL614
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 384


 16002 1ec8 D4010000 		.4byte	.LVL632
 16003 1ecc 0100     		.2byte	0x1
 16004 1ece 54       		.byte	0x54
 16005 1ecf D6010000 		.4byte	.LVL633
 16006 1ed3 E2010000 		.4byte	.LVL635
 16007 1ed7 0100     		.2byte	0x1
 16008 1ed9 54       		.byte	0x54
 16009 1eda 00000000 		.4byte	0
 16010 1ede 00000000 		.4byte	0
 16011              	.LLST137:
 16012 1ee2 A8000000 		.4byte	.LVL603
 16013 1ee6 B0000000 		.4byte	.LVL604
 16014 1eea 0100     		.2byte	0x1
 16015 1eec 50       		.byte	0x50
 16016 1eed B0000000 		.4byte	.LVL604
 16017 1ef1 F2000000 		.4byte	.LVL612
 16018 1ef5 0100     		.2byte	0x1
 16019 1ef7 59       		.byte	0x59
 16020 1ef8 00000000 		.4byte	0
 16021 1efc 00000000 		.4byte	0
 16022              	.LLST138:
 16023 1f00 84010000 		.4byte	.LVL621
 16024 1f04 B4010000 		.4byte	.LVL627
 16025 1f08 0100     		.2byte	0x1
 16026 1f0a 57       		.byte	0x57
 16027 1f0b 00000000 		.4byte	0
 16028 1f0f 00000000 		.4byte	0
 16029              	.LLST139:
 16030 1f13 84010000 		.4byte	.LVL621
 16031 1f17 90010000 		.4byte	.LVL623
 16032 1f1b 0100     		.2byte	0x1
 16033 1f1d 55       		.byte	0x55
 16034 1f1e 90010000 		.4byte	.LVL623
 16035 1f22 A2010000 		.4byte	.LVL626
 16036 1f26 0100     		.2byte	0x1
 16037 1f28 50       		.byte	0x50
 16038 1f29 A2010000 		.4byte	.LVL626
 16039 1f2d D8010000 		.4byte	.LVL634
 16040 1f31 0100     		.2byte	0x1
 16041 1f33 55       		.byte	0x55
 16042 1f34 00000000 		.4byte	0
 16043 1f38 00000000 		.4byte	0
 16044              	.LLST140:
 16045 1f3c 84000000 		.4byte	.LVL597
 16046 1f40 86000000 		.4byte	.LVL598
 16047 1f44 0100     		.2byte	0x1
 16048 1f46 50       		.byte	0x50
 16049 1f47 86000000 		.4byte	.LVL598
 16050 1f4b 9A000000 		.4byte	.LVL601
 16051 1f4f 0100     		.2byte	0x1
 16052 1f51 55       		.byte	0x55
 16053 1f52 00000000 		.4byte	0
 16054 1f56 00000000 		.4byte	0
 16055              	.LLST141:
 16056 1f5a D0000000 		.4byte	.LVL607
 16057 1f5e F2000000 		.4byte	.LVL612
 16058 1f62 0100     		.2byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 385


 16059 1f64 55       		.byte	0x55
 16060 1f65 BC010000 		.4byte	.LVL628
 16061 1f69 C6010000 		.4byte	.LVL629
 16062 1f6d 0100     		.2byte	0x1
 16063 1f6f 50       		.byte	0x50
 16064 1f70 D2010000 		.4byte	.LVL631
 16065 1f74 D6010000 		.4byte	.LVL633
 16066 1f78 0100     		.2byte	0x1
 16067 1f7a 50       		.byte	0x50
 16068 1f7b 00000000 		.4byte	0
 16069 1f7f 00000000 		.4byte	0
 16070              	.LLST142:
 16071 1f83 84010000 		.4byte	.LVL621
 16072 1f87 D8010000 		.4byte	.LVL634
 16073 1f8b 0100     		.2byte	0x1
 16074 1f8d 58       		.byte	0x58
 16075 1f8e 00000000 		.4byte	0
 16076 1f92 00000000 		.4byte	0
 16077              	.LLST143:
 16078 1f96 00000000 		.4byte	.LVL637
 16079 1f9a 19000000 		.4byte	.LVL641-1
 16080 1f9e 0100     		.2byte	0x1
 16081 1fa0 50       		.byte	0x50
 16082 1fa1 19000000 		.4byte	.LVL641-1
 16083 1fa5 76010000 		.4byte	.LFE34
 16084 1fa9 0100     		.2byte	0x1
 16085 1fab 54       		.byte	0x54
 16086 1fac 00000000 		.4byte	0
 16087 1fb0 00000000 		.4byte	0
 16088              	.LLST144:
 16089 1fb4 00000000 		.4byte	.LVL637
 16090 1fb8 16000000 		.4byte	.LVL640
 16091 1fbc 0100     		.2byte	0x1
 16092 1fbe 51       		.byte	0x51
 16093 1fbf 16000000 		.4byte	.LVL640
 16094 1fc3 40000000 		.4byte	.LVL647
 16095 1fc7 0100     		.2byte	0x1
 16096 1fc9 58       		.byte	0x58
 16097 1fca 40000000 		.4byte	.LVL647
 16098 1fce 6E010000 		.4byte	.LVL678
 16099 1fd2 0400     		.2byte	0x4
 16100 1fd4 F3       		.byte	0xf3
 16101 1fd5 01       		.uleb128 0x1
 16102 1fd6 51       		.byte	0x51
 16103 1fd7 9F       		.byte	0x9f
 16104 1fd8 6E010000 		.4byte	.LVL678
 16105 1fdc 70010000 		.4byte	.LVL679
 16106 1fe0 0100     		.2byte	0x1
 16107 1fe2 58       		.byte	0x58
 16108 1fe3 70010000 		.4byte	.LVL679
 16109 1fe7 76010000 		.4byte	.LFE34
 16110 1feb 0400     		.2byte	0x4
 16111 1fed F3       		.byte	0xf3
 16112 1fee 01       		.uleb128 0x1
 16113 1fef 51       		.byte	0x51
 16114 1ff0 9F       		.byte	0x9f
 16115 1ff1 00000000 		.4byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 386


 16116 1ff5 00000000 		.4byte	0
 16117              	.LLST145:
 16118 1ff9 00000000 		.4byte	.LVL637
 16119 1ffd 19000000 		.4byte	.LVL641-1
 16120 2001 0100     		.2byte	0x1
 16121 2003 52       		.byte	0x52
 16122 2004 19000000 		.4byte	.LVL641-1
 16123 2008 40000000 		.4byte	.LVL647
 16124 200c 0100     		.2byte	0x1
 16125 200e 55       		.byte	0x55
 16126 200f 40000000 		.4byte	.LVL647
 16127 2013 6E010000 		.4byte	.LVL678
 16128 2017 0100     		.2byte	0x1
 16129 2019 56       		.byte	0x56
 16130 201a 6E010000 		.4byte	.LVL678
 16131 201e 70010000 		.4byte	.LVL679
 16132 2022 0100     		.2byte	0x1
 16133 2024 55       		.byte	0x55
 16134 2025 00000000 		.4byte	0
 16135 2029 00000000 		.4byte	0
 16136              	.LLST146:
 16137 202d 00000000 		.4byte	.LVL637
 16138 2031 10000000 		.4byte	.LVL639
 16139 2035 0100     		.2byte	0x1
 16140 2037 53       		.byte	0x53
 16141 2038 10000000 		.4byte	.LVL639
 16142 203c 76010000 		.4byte	.LFE34
 16143 2040 0100     		.2byte	0x1
 16144 2042 57       		.byte	0x57
 16145 2043 00000000 		.4byte	0
 16146 2047 00000000 		.4byte	0
 16147              	.LLST147:
 16148 204b 1A000000 		.4byte	.LVL641
 16149 204f 20000000 		.4byte	.LVL642
 16150 2053 0100     		.2byte	0x1
 16151 2055 50       		.byte	0x50
 16152 2056 20000000 		.4byte	.LVL642
 16153 205a 28000000 		.4byte	.LVL644
 16154 205e 0100     		.2byte	0x1
 16155 2060 53       		.byte	0x53
 16156 2061 28000000 		.4byte	.LVL644
 16157 2065 40000000 		.4byte	.LVL647
 16158 2069 0200     		.2byte	0x2
 16159 206b 74       		.byte	0x74
 16160 206c 11       		.sleb128 17
 16161 206d 6E010000 		.4byte	.LVL678
 16162 2071 70010000 		.4byte	.LVL679
 16163 2075 0200     		.2byte	0x2
 16164 2077 74       		.byte	0x74
 16165 2078 11       		.sleb128 17
 16166 2079 00000000 		.4byte	0
 16167 207d 00000000 		.4byte	0
 16168              	.LLST148:
 16169 2081 5E000000 		.4byte	.LVL650
 16170 2085 60000000 		.4byte	.LVL651
 16171 2089 0100     		.2byte	0x1
 16172 208b 50       		.byte	0x50
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 387


 16173 208c 68000000 		.4byte	.LVL652
 16174 2090 72000000 		.4byte	.LVL653
 16175 2094 0100     		.2byte	0x1
 16176 2096 50       		.byte	0x50
 16177 2097 74000000 		.4byte	.LVL654
 16178 209b 80000000 		.4byte	.LVL655
 16179 209f 0100     		.2byte	0x1
 16180 20a1 50       		.byte	0x50
 16181 20a2 82000000 		.4byte	.LVL656
 16182 20a6 84000000 		.4byte	.LVL657
 16183 20aa 0100     		.2byte	0x1
 16184 20ac 50       		.byte	0x50
 16185 20ad 00000000 		.4byte	0
 16186 20b1 00000000 		.4byte	0
 16187              	.LLST149:
 16188 20b5 90000000 		.4byte	.LVL658
 16189 20b9 96000000 		.4byte	.LVL659
 16190 20bd 0100     		.2byte	0x1
 16191 20bf 50       		.byte	0x50
 16192 20c0 96000000 		.4byte	.LVL659
 16193 20c4 9A000000 		.4byte	.LVL660
 16194 20c8 0100     		.2byte	0x1
 16195 20ca 5A       		.byte	0x5a
 16196 20cb 9A000000 		.4byte	.LVL660
 16197 20cf 9C000000 		.4byte	.LVL661
 16198 20d3 0100     		.2byte	0x1
 16199 20d5 50       		.byte	0x50
 16200 20d6 9C000000 		.4byte	.LVL661
 16201 20da 38010000 		.4byte	.LVL670
 16202 20de 0100     		.2byte	0x1
 16203 20e0 5A       		.byte	0x5a
 16204 20e1 00000000 		.4byte	0
 16205 20e5 00000000 		.4byte	0
 16206              	.LLST150:
 16207 20e9 36000000 		.4byte	.LVL645
 16208 20ed 3E000000 		.4byte	.LVL646
 16209 20f1 0100     		.2byte	0x1
 16210 20f3 56       		.byte	0x56
 16211 20f4 3E000000 		.4byte	.LVL646
 16212 20f8 40000000 		.4byte	.LVL647
 16213 20fc 0700     		.2byte	0x7
 16214 20fe 74       		.byte	0x74
 16215 20ff 0C       		.sleb128 12
 16216 2100 06       		.byte	0x6
 16217 2101 73       		.byte	0x73
 16218 2102 00       		.sleb128 0
 16219 2103 1C       		.byte	0x1c
 16220 2104 9F       		.byte	0x9f
 16221 2105 00000000 		.4byte	0
 16222 2109 00000000 		.4byte	0
 16223              	.LLST151:
 16224 210d EA000000 		.4byte	.LVL666
 16225 2111 EC000000 		.4byte	.LVL667
 16226 2115 0100     		.2byte	0x1
 16227 2117 55       		.byte	0x55
 16228 2118 42010000 		.4byte	.LVL671
 16229 211c 62010000 		.4byte	.LVL676
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 388


 16230 2120 0100     		.2byte	0x1
 16231 2122 55       		.byte	0x55
 16232 2123 00000000 		.4byte	0
 16233 2127 00000000 		.4byte	0
 16234              	.LLST152:
 16235 212b 9C000000 		.4byte	.LVL661
 16236 212f 9E000000 		.4byte	.LVL662
 16237 2133 0500     		.2byte	0x5
 16238 2135 76       		.byte	0x76
 16239 2136 00       		.sleb128 0
 16240 2137 39       		.byte	0x39
 16241 2138 25       		.byte	0x25
 16242 2139 9F       		.byte	0x9f
 16243 213a 9E000000 		.4byte	.LVL662
 16244 213e EA000000 		.4byte	.LVL666
 16245 2142 0100     		.2byte	0x1
 16246 2144 55       		.byte	0x55
 16247 2145 EC000000 		.4byte	.LVL667
 16248 2149 38010000 		.4byte	.LVL670
 16249 214d 0100     		.2byte	0x1
 16250 214f 55       		.byte	0x55
 16251 2150 00000000 		.4byte	0
 16252 2154 00000000 		.4byte	0
 16253              	.LLST153:
 16254 2158 54000000 		.4byte	.LVL648
 16255 215c 58000000 		.4byte	.LVL649
 16256 2160 0800     		.2byte	0x8
 16257 2162 73       		.byte	0x73
 16258 2163 00       		.sleb128 0
 16259 2164 39       		.byte	0x39
 16260 2165 25       		.byte	0x25
 16261 2166 79       		.byte	0x79
 16262 2167 00       		.sleb128 0
 16263 2168 1A       		.byte	0x1a
 16264 2169 9F       		.byte	0x9f
 16265 216a 58000000 		.4byte	.LVL649
 16266 216e 38010000 		.4byte	.LVL670
 16267 2172 0100     		.2byte	0x1
 16268 2174 59       		.byte	0x59
 16269 2175 00000000 		.4byte	0
 16270 2179 00000000 		.4byte	0
 16271              	.LLST154:
 16272 217d 0E000000 		.4byte	.LVL638
 16273 2181 16000000 		.4byte	.LVL640
 16274 2185 0100     		.2byte	0x1
 16275 2187 51       		.byte	0x51
 16276 2188 16000000 		.4byte	.LVL640
 16277 218c 76010000 		.4byte	.LFE34
 16278 2190 0100     		.2byte	0x1
 16279 2192 58       		.byte	0x58
 16280 2193 00000000 		.4byte	0
 16281 2197 00000000 		.4byte	0
 16282              	.LLST155:
 16283 219b 00000000 		.4byte	.LVL680
 16284 219f 19000000 		.4byte	.LVL684-1
 16285 21a3 0100     		.2byte	0x1
 16286 21a5 50       		.byte	0x50
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 389


 16287 21a6 19000000 		.4byte	.LVL684-1
 16288 21aa AE010000 		.4byte	.LFE35
 16289 21ae 0100     		.2byte	0x1
 16290 21b0 54       		.byte	0x54
 16291 21b1 00000000 		.4byte	0
 16292 21b5 00000000 		.4byte	0
 16293              	.LLST156:
 16294 21b9 00000000 		.4byte	.LVL680
 16295 21bd 16000000 		.4byte	.LVL683
 16296 21c1 0100     		.2byte	0x1
 16297 21c3 51       		.byte	0x51
 16298 21c4 16000000 		.4byte	.LVL683
 16299 21c8 3C000000 		.4byte	.LVL689
 16300 21cc 0100     		.2byte	0x1
 16301 21ce 58       		.byte	0x58
 16302 21cf 3C000000 		.4byte	.LVL689
 16303 21d3 A6010000 		.4byte	.LVL721
 16304 21d7 0400     		.2byte	0x4
 16305 21d9 F3       		.byte	0xf3
 16306 21da 01       		.uleb128 0x1
 16307 21db 51       		.byte	0x51
 16308 21dc 9F       		.byte	0x9f
 16309 21dd A6010000 		.4byte	.LVL721
 16310 21e1 A8010000 		.4byte	.LVL722
 16311 21e5 0100     		.2byte	0x1
 16312 21e7 58       		.byte	0x58
 16313 21e8 A8010000 		.4byte	.LVL722
 16314 21ec AE010000 		.4byte	.LFE35
 16315 21f0 0400     		.2byte	0x4
 16316 21f2 F3       		.byte	0xf3
 16317 21f3 01       		.uleb128 0x1
 16318 21f4 51       		.byte	0x51
 16319 21f5 9F       		.byte	0x9f
 16320 21f6 00000000 		.4byte	0
 16321 21fa 00000000 		.4byte	0
 16322              	.LLST157:
 16323 21fe 00000000 		.4byte	.LVL680
 16324 2202 19000000 		.4byte	.LVL684-1
 16325 2206 0100     		.2byte	0x1
 16326 2208 52       		.byte	0x52
 16327 2209 19000000 		.4byte	.LVL684-1
 16328 220d AE010000 		.4byte	.LFE35
 16329 2211 0100     		.2byte	0x1
 16330 2213 56       		.byte	0x56
 16331 2214 00000000 		.4byte	0
 16332 2218 00000000 		.4byte	0
 16333              	.LLST158:
 16334 221c 00000000 		.4byte	.LVL680
 16335 2220 10000000 		.4byte	.LVL682
 16336 2224 0100     		.2byte	0x1
 16337 2226 53       		.byte	0x53
 16338 2227 10000000 		.4byte	.LVL682
 16339 222b AE010000 		.4byte	.LFE35
 16340 222f 0100     		.2byte	0x1
 16341 2231 57       		.byte	0x57
 16342 2232 00000000 		.4byte	0
 16343 2236 00000000 		.4byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 390


 16344              	.LLST159:
 16345 223a 1A000000 		.4byte	.LVL684
 16346 223e 20000000 		.4byte	.LVL685
 16347 2242 0100     		.2byte	0x1
 16348 2244 50       		.byte	0x50
 16349 2245 20000000 		.4byte	.LVL685
 16350 2249 28000000 		.4byte	.LVL687
 16351 224d 0100     		.2byte	0x1
 16352 224f 53       		.byte	0x53
 16353 2250 28000000 		.4byte	.LVL687
 16354 2254 3C000000 		.4byte	.LVL689
 16355 2258 0200     		.2byte	0x2
 16356 225a 74       		.byte	0x74
 16357 225b 11       		.sleb128 17
 16358 225c A6010000 		.4byte	.LVL721
 16359 2260 A8010000 		.4byte	.LVL722
 16360 2264 0200     		.2byte	0x2
 16361 2266 74       		.byte	0x74
 16362 2267 11       		.sleb128 17
 16363 2268 00000000 		.4byte	0
 16364 226c 00000000 		.4byte	0
 16365              	.LLST160:
 16366 2270 5C000000 		.4byte	.LVL692
 16367 2274 60000000 		.4byte	.LVL693
 16368 2278 0100     		.2byte	0x1
 16369 227a 50       		.byte	0x50
 16370 227b 60000000 		.4byte	.LVL693
 16371 227f 65000000 		.4byte	.LVL694-1
 16372 2283 0200     		.2byte	0x2
 16373 2285 74       		.byte	0x74
 16374 2286 08       		.sleb128 8
 16375 2287 66000000 		.4byte	.LVL694
 16376 228b 68000000 		.4byte	.LVL695
 16377 228f 0100     		.2byte	0x1
 16378 2291 50       		.byte	0x50
 16379 2292 70000000 		.4byte	.LVL696
 16380 2296 80000000 		.4byte	.LVL697
 16381 229a 0100     		.2byte	0x1
 16382 229c 50       		.byte	0x50
 16383 229d 82000000 		.4byte	.LVL698
 16384 22a1 8E000000 		.4byte	.LVL699
 16385 22a5 0100     		.2byte	0x1
 16386 22a7 50       		.byte	0x50
 16387 22a8 90000000 		.4byte	.LVL700
 16388 22ac 98000000 		.4byte	.LVL701
 16389 22b0 0100     		.2byte	0x1
 16390 22b2 50       		.byte	0x50
 16391 22b3 00000000 		.4byte	0
 16392 22b7 00000000 		.4byte	0
 16393              	.LLST161:
 16394 22bb CE000000 		.4byte	.LVL703
 16395 22bf D4000000 		.4byte	.LVL704
 16396 22c3 0100     		.2byte	0x1
 16397 22c5 50       		.byte	0x50
 16398 22c6 D4000000 		.4byte	.LVL704
 16399 22ca D8000000 		.4byte	.LVL705
 16400 22ce 0100     		.2byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 391


 16401 22d0 5A       		.byte	0x5a
 16402 22d1 D8000000 		.4byte	.LVL705
 16403 22d5 DA000000 		.4byte	.LVL706
 16404 22d9 0100     		.2byte	0x1
 16405 22db 50       		.byte	0x50
 16406 22dc DA000000 		.4byte	.LVL706
 16407 22e0 56010000 		.4byte	.LVL714
 16408 22e4 0100     		.2byte	0x1
 16409 22e6 5A       		.byte	0x5a
 16410 22e7 00000000 		.4byte	0
 16411 22eb 00000000 		.4byte	0
 16412              	.LLST162:
 16413 22ef 28010000 		.4byte	.LVL711
 16414 22f3 2A010000 		.4byte	.LVL712
 16415 22f7 0100     		.2byte	0x1
 16416 22f9 55       		.byte	0x55
 16417 22fa 60010000 		.4byte	.LVL715
 16418 22fe 88010000 		.4byte	.LVL720
 16419 2302 0100     		.2byte	0x1
 16420 2304 55       		.byte	0x55
 16421 2305 00000000 		.4byte	0
 16422 2309 00000000 		.4byte	0
 16423              	.LLST163:
 16424 230d DA000000 		.4byte	.LVL706
 16425 2311 DC000000 		.4byte	.LVL707
 16426 2315 0500     		.2byte	0x5
 16427 2317 76       		.byte	0x76
 16428 2318 00       		.sleb128 0
 16429 2319 39       		.byte	0x39
 16430 231a 25       		.byte	0x25
 16431 231b 9F       		.byte	0x9f
 16432 231c DC000000 		.4byte	.LVL707
 16433 2320 28010000 		.4byte	.LVL711
 16434 2324 0100     		.2byte	0x1
 16435 2326 55       		.byte	0x55
 16436 2327 2A010000 		.4byte	.LVL712
 16437 232b 56010000 		.4byte	.LVL714
 16438 232f 0100     		.2byte	0x1
 16439 2331 55       		.byte	0x55
 16440 2332 00000000 		.4byte	0
 16441 2336 00000000 		.4byte	0
 16442              	.LLST164:
 16443 233a 52000000 		.4byte	.LVL690
 16444 233e 56000000 		.4byte	.LVL691
 16445 2342 0800     		.2byte	0x8
 16446 2344 73       		.byte	0x73
 16447 2345 00       		.sleb128 0
 16448 2346 39       		.byte	0x39
 16449 2347 25       		.byte	0x25
 16450 2348 79       		.byte	0x79
 16451 2349 00       		.sleb128 0
 16452 234a 1A       		.byte	0x1a
 16453 234b 9F       		.byte	0x9f
 16454 234c 56000000 		.4byte	.LVL691
 16455 2350 56010000 		.4byte	.LVL714
 16456 2354 0100     		.2byte	0x1
 16457 2356 59       		.byte	0x59
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 392


 16458 2357 00000000 		.4byte	0
 16459 235b 00000000 		.4byte	0
 16460              	.LLST165:
 16461 235f 0E000000 		.4byte	.LVL681
 16462 2363 16000000 		.4byte	.LVL683
 16463 2367 0100     		.2byte	0x1
 16464 2369 51       		.byte	0x51
 16465 236a 16000000 		.4byte	.LVL683
 16466 236e AE010000 		.4byte	.LFE35
 16467 2372 0100     		.2byte	0x1
 16468 2374 58       		.byte	0x58
 16469 2375 00000000 		.4byte	0
 16470 2379 00000000 		.4byte	0
 16471              	.LLST166:
 16472 237d 00000000 		.4byte	.LVL723
 16473 2381 0B000000 		.4byte	.LVL724-1
 16474 2385 0100     		.2byte	0x1
 16475 2387 50       		.byte	0x50
 16476 2388 0B000000 		.4byte	.LVL724-1
 16477 238c 9C000000 		.4byte	.LFE36
 16478 2390 0100     		.2byte	0x1
 16479 2392 54       		.byte	0x54
 16480 2393 00000000 		.4byte	0
 16481 2397 00000000 		.4byte	0
 16482              	.LLST167:
 16483 239b 0C000000 		.4byte	.LVL724
 16484 239f 24000000 		.4byte	.LVL725
 16485 23a3 0100     		.2byte	0x1
 16486 23a5 50       		.byte	0x50
 16487 23a6 48000000 		.4byte	.LVL730
 16488 23aa 58000000 		.4byte	.LVL732
 16489 23ae 0100     		.2byte	0x1
 16490 23b0 50       		.byte	0x50
 16491 23b1 8A000000 		.4byte	.LVL738
 16492 23b5 96000000 		.4byte	.LVL740
 16493 23b9 0100     		.2byte	0x1
 16494 23bb 53       		.byte	0x53
 16495 23bc 00000000 		.4byte	0
 16496 23c0 00000000 		.4byte	0
 16497              	.LLST168:
 16498 23c4 40000000 		.4byte	.LVL728
 16499 23c8 42000000 		.4byte	.LVL729
 16500 23cc 0100     		.2byte	0x1
 16501 23ce 50       		.byte	0x50
 16502 23cf 42000000 		.4byte	.LVL729
 16503 23d3 92000000 		.4byte	.LVL739
 16504 23d7 0100     		.2byte	0x1
 16505 23d9 56       		.byte	0x56
 16506 23da 00000000 		.4byte	0
 16507 23de 00000000 		.4byte	0
 16508              	.LLST169:
 16509 23e2 4E000000 		.4byte	.LVL731
 16510 23e6 92000000 		.4byte	.LVL739
 16511 23ea 0100     		.2byte	0x1
 16512 23ec 55       		.byte	0x55
 16513 23ed 00000000 		.4byte	0
 16514 23f1 00000000 		.4byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 393


 16515              	.LLST170:
 16516 23f5 00000000 		.4byte	.LVL741
 16517 23f9 09000000 		.4byte	.LVL742-1
 16518 23fd 0100     		.2byte	0x1
 16519 23ff 50       		.byte	0x50
 16520 2400 09000000 		.4byte	.LVL742-1
 16521 2404 24000000 		.4byte	.LFE37
 16522 2408 0100     		.2byte	0x1
 16523 240a 54       		.byte	0x54
 16524 240b 00000000 		.4byte	0
 16525 240f 00000000 		.4byte	0
 16526              	.LLST171:
 16527 2413 0A000000 		.4byte	.LVL742
 16528 2417 10000000 		.4byte	.LVL743
 16529 241b 0100     		.2byte	0x1
 16530 241d 50       		.byte	0x50
 16531 241e 16000000 		.4byte	.LVL744
 16532 2422 1E000000 		.4byte	.LVL745
 16533 2426 0100     		.2byte	0x1
 16534 2428 50       		.byte	0x50
 16535 2429 1E000000 		.4byte	.LVL745
 16536 242d 24000000 		.4byte	.LFE37
 16537 2431 0100     		.2byte	0x1
 16538 2433 53       		.byte	0x53
 16539 2434 00000000 		.4byte	0
 16540 2438 00000000 		.4byte	0
 16541              	.LLST172:
 16542 243c 00000000 		.4byte	.LVL746
 16543 2440 11000000 		.4byte	.LVL748-1
 16544 2444 0100     		.2byte	0x1
 16545 2446 50       		.byte	0x50
 16546 2447 11000000 		.4byte	.LVL748-1
 16547 244b 72010000 		.4byte	.LFE38
 16548 244f 0100     		.2byte	0x1
 16549 2451 54       		.byte	0x54
 16550 2452 00000000 		.4byte	0
 16551 2456 00000000 		.4byte	0
 16552              	.LLST173:
 16553 245a 00000000 		.4byte	.LVL746
 16554 245e 0E000000 		.4byte	.LVL747
 16555 2462 0100     		.2byte	0x1
 16556 2464 51       		.byte	0x51
 16557 2465 0E000000 		.4byte	.LVL747
 16558 2469 8A000000 		.4byte	.LVL768
 16559 246d 0100     		.2byte	0x1
 16560 246f 55       		.byte	0x55
 16561 2470 8C000000 		.4byte	.LVL769
 16562 2474 FC000000 		.4byte	.LVL788
 16563 2478 0100     		.2byte	0x1
 16564 247a 55       		.byte	0x55
 16565 247b FE000000 		.4byte	.LVL789
 16566 247f 00010000 		.4byte	.LVL790
 16567 2483 0100     		.2byte	0x1
 16568 2485 55       		.byte	0x55
 16569 2486 02010000 		.4byte	.LVL791
 16570 248a 04010000 		.4byte	.LVL792
 16571 248e 0100     		.2byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 394


 16572 2490 55       		.byte	0x55
 16573 2491 6A010000 		.4byte	.LVL799
 16574 2495 6C010000 		.4byte	.LVL800
 16575 2499 0100     		.2byte	0x1
 16576 249b 55       		.byte	0x55
 16577 249c 00000000 		.4byte	0
 16578 24a0 00000000 		.4byte	0
 16579              	.LLST174:
 16580 24a4 12000000 		.4byte	.LVL748
 16581 24a8 18000000 		.4byte	.LVL749
 16582 24ac 0100     		.2byte	0x1
 16583 24ae 50       		.byte	0x50
 16584 24af 18000000 		.4byte	.LVL749
 16585 24b3 6E000000 		.4byte	.LVL761
 16586 24b7 0100     		.2byte	0x1
 16587 24b9 56       		.byte	0x56
 16588 24ba 74000000 		.4byte	.LVL763
 16589 24be 7C000000 		.4byte	.LVL764
 16590 24c2 0100     		.2byte	0x1
 16591 24c4 56       		.byte	0x56
 16592 24c5 82000000 		.4byte	.LVL766
 16593 24c9 B8000000 		.4byte	.LVL775
 16594 24cd 0100     		.2byte	0x1
 16595 24cf 56       		.byte	0x56
 16596 24d0 BE000000 		.4byte	.LVL777
 16597 24d4 CC000000 		.4byte	.LVL778
 16598 24d8 0100     		.2byte	0x1
 16599 24da 56       		.byte	0x56
 16600 24db D2000000 		.4byte	.LVL780
 16601 24df F2000000 		.4byte	.LVL785
 16602 24e3 0100     		.2byte	0x1
 16603 24e5 56       		.byte	0x56
 16604 24e6 F8000000 		.4byte	.LVL787
 16605 24ea 3C010000 		.4byte	.LVL794
 16606 24ee 0100     		.2byte	0x1
 16607 24f0 56       		.byte	0x56
 16608 24f1 42010000 		.4byte	.LVL795
 16609 24f5 5E010000 		.4byte	.LVL797
 16610 24f9 0100     		.2byte	0x1
 16611 24fb 56       		.byte	0x56
 16612 24fc 64010000 		.4byte	.LVL798
 16613 2500 6C010000 		.4byte	.LVL800
 16614 2504 0100     		.2byte	0x1
 16615 2506 56       		.byte	0x56
 16616 2507 00000000 		.4byte	0
 16617 250b 00000000 		.4byte	0
 16618              	.LLST175:
 16619 250f 5A000000 		.4byte	.LVL756
 16620 2513 5C000000 		.4byte	.LVL757
 16621 2517 0100     		.2byte	0x1
 16622 2519 51       		.byte	0x51
 16623 251a 5E000000 		.4byte	.LVL758
 16624 251e 65000000 		.4byte	.LVL759-1
 16625 2522 0100     		.2byte	0x1
 16626 2524 51       		.byte	0x51
 16627 2525 68000000 		.4byte	.LVL760
 16628 2529 72000000 		.4byte	.LVL762
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 395


 16629 252d 0100     		.2byte	0x1
 16630 252f 50       		.byte	0x50
 16631 2530 72000000 		.4byte	.LVL762
 16632 2534 74000000 		.4byte	.LVL763
 16633 2538 0100     		.2byte	0x1
 16634 253a 51       		.byte	0x51
 16635 253b 74000000 		.4byte	.LVL763
 16636 253f 80000000 		.4byte	.LVL765
 16637 2543 0100     		.2byte	0x1
 16638 2545 50       		.byte	0x50
 16639 2546 80000000 		.4byte	.LVL765
 16640 254a 82000000 		.4byte	.LVL766
 16641 254e 0100     		.2byte	0x1
 16642 2550 51       		.byte	0x51
 16643 2551 82000000 		.4byte	.LVL766
 16644 2555 84000000 		.4byte	.LVL767
 16645 2559 0100     		.2byte	0x1
 16646 255b 50       		.byte	0x50
 16647 255c 84000000 		.4byte	.LVL767
 16648 2560 A1000000 		.4byte	.LVL771-1
 16649 2564 0100     		.2byte	0x1
 16650 2566 51       		.byte	0x51
 16651 2567 A2000000 		.4byte	.LVL771
 16652 256b A8000000 		.4byte	.LVL772
 16653 256f 0100     		.2byte	0x1
 16654 2571 50       		.byte	0x50
 16655 2572 A8000000 		.4byte	.LVL772
 16656 2576 AD000000 		.4byte	.LVL773-1
 16657 257a 0100     		.2byte	0x1
 16658 257c 51       		.byte	0x51
 16659 257d B0000000 		.4byte	.LVL774
 16660 2581 BC000000 		.4byte	.LVL776
 16661 2585 0100     		.2byte	0x1
 16662 2587 50       		.byte	0x50
 16663 2588 BC000000 		.4byte	.LVL776
 16664 258c BE000000 		.4byte	.LVL777
 16665 2590 0100     		.2byte	0x1
 16666 2592 51       		.byte	0x51
 16667 2593 BE000000 		.4byte	.LVL777
 16668 2597 D0000000 		.4byte	.LVL779
 16669 259b 0100     		.2byte	0x1
 16670 259d 50       		.byte	0x50
 16671 259e D0000000 		.4byte	.LVL779
 16672 25a2 D2000000 		.4byte	.LVL780
 16673 25a6 0100     		.2byte	0x1
 16674 25a8 51       		.byte	0x51
 16675 25a9 D2000000 		.4byte	.LVL780
 16676 25ad D4000000 		.4byte	.LVL781
 16677 25b1 0100     		.2byte	0x1
 16678 25b3 50       		.byte	0x50
 16679 25b4 D4000000 		.4byte	.LVL781
 16680 25b8 DA000000 		.4byte	.LVL782
 16681 25bc 0100     		.2byte	0x1
 16682 25be 51       		.byte	0x51
 16683 25bf DA000000 		.4byte	.LVL782
 16684 25c3 DC000000 		.4byte	.LVL783
 16685 25c7 0100     		.2byte	0x1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 396


 16686 25c9 50       		.byte	0x50
 16687 25ca DC000000 		.4byte	.LVL783
 16688 25ce ED000000 		.4byte	.LVL784-1
 16689 25d2 0100     		.2byte	0x1
 16690 25d4 51       		.byte	0x51
 16691 25d5 02010000 		.4byte	.LVL791
 16692 25d9 04010000 		.4byte	.LVL792
 16693 25dd 0100     		.2byte	0x1
 16694 25df 51       		.byte	0x51
 16695 25e0 00000000 		.4byte	0
 16696 25e4 00000000 		.4byte	0
 16697              	.LLST176:
 16698 25e8 3E000000 		.4byte	.LVL752
 16699 25ec FE000000 		.4byte	.LVL789
 16700 25f0 0100     		.2byte	0x1
 16701 25f2 57       		.byte	0x57
 16702 25f3 02010000 		.4byte	.LVL791
 16703 25f7 04010000 		.4byte	.LVL792
 16704 25fb 0100     		.2byte	0x1
 16705 25fd 57       		.byte	0x57
 16706 25fe 00000000 		.4byte	0
 16707 2602 00000000 		.4byte	0
 16708              	.LLST177:
 16709 2606 30000000 		.4byte	.LVL751
 16710 260a EE000000 		.4byte	.LVL784
 16711 260e 0200     		.2byte	0x2
 16712 2610 30       		.byte	0x30
 16713 2611 9F       		.byte	0x9f
 16714 2612 EE000000 		.4byte	.LVL784
 16715 2616 F6000000 		.4byte	.LVL786
 16716 261a 0100     		.2byte	0x1
 16717 261c 50       		.byte	0x50
 16718 261d F8000000 		.4byte	.LVL787
 16719 2621 FC000000 		.4byte	.LVL788
 16720 2625 0100     		.2byte	0x1
 16721 2627 50       		.byte	0x50
 16722 2628 FC000000 		.4byte	.LVL788
 16723 262c FE000000 		.4byte	.LVL789
 16724 2630 0100     		.2byte	0x1
 16725 2632 55       		.byte	0x55
 16726 2633 FE000000 		.4byte	.LVL789
 16727 2637 04010000 		.4byte	.LVL792
 16728 263b 0200     		.2byte	0x2
 16729 263d 30       		.byte	0x30
 16730 263e 9F       		.byte	0x9f
 16731 263f 04010000 		.4byte	.LVL792
 16732 2643 6A010000 		.4byte	.LVL799
 16733 2647 0100     		.2byte	0x1
 16734 2649 55       		.byte	0x55
 16735 264a 00000000 		.4byte	0
 16736 264e 00000000 		.4byte	0
 16737              	.LLST178:
 16738 2652 30000000 		.4byte	.LVL751
 16739 2656 48000000 		.4byte	.LVL753
 16740 265a 0100     		.2byte	0x1
 16741 265c 53       		.byte	0x53
 16742 265d 48000000 		.4byte	.LVL753
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 397


 16743 2661 54000000 		.4byte	.LVL754
 16744 2665 0300     		.2byte	0x3
 16745 2667 73       		.byte	0x73
 16746 2668 01       		.sleb128 1
 16747 2669 9F       		.byte	0x9f
 16748 266a FE000000 		.4byte	.LVL789
 16749 266e 02010000 		.4byte	.LVL791
 16750 2672 0100     		.2byte	0x1
 16751 2674 53       		.byte	0x53
 16752 2675 00000000 		.4byte	0
 16753 2679 00000000 		.4byte	0
 16754              	.LLST179:
 16755 267d 00000000 		.4byte	.LVL801
 16756 2681 0C000000 		.4byte	.LVL802
 16757 2685 0100     		.2byte	0x1
 16758 2687 50       		.byte	0x50
 16759 2688 0C000000 		.4byte	.LVL802
 16760 268c 68000000 		.4byte	.LVL814
 16761 2690 0100     		.2byte	0x1
 16762 2692 55       		.byte	0x55
 16763 2693 68000000 		.4byte	.LVL814
 16764 2697 6A000000 		.4byte	.LVL815
 16765 269b 0100     		.2byte	0x1
 16766 269d 50       		.byte	0x50
 16767 269e 6A000000 		.4byte	.LVL815
 16768 26a2 6E000000 		.4byte	.LFE39
 16769 26a6 0400     		.2byte	0x4
 16770 26a8 F3       		.byte	0xf3
 16771 26a9 01       		.uleb128 0x1
 16772 26aa 50       		.byte	0x50
 16773 26ab 9F       		.byte	0x9f
 16774 26ac 00000000 		.4byte	0
 16775 26b0 00000000 		.4byte	0
 16776              	.LLST180:
 16777 26b4 00000000 		.4byte	.LVL801
 16778 26b8 0E000000 		.4byte	.LVL803
 16779 26bc 0100     		.2byte	0x1
 16780 26be 51       		.byte	0x51
 16781 26bf 0E000000 		.4byte	.LVL803
 16782 26c3 13000000 		.4byte	.LVL804-1
 16783 26c7 0200     		.2byte	0x2
 16784 26c9 70       		.byte	0x70
 16785 26ca 00       		.sleb128 0
 16786 26cb 13000000 		.4byte	.LVL804-1
 16787 26cf 68000000 		.4byte	.LVL814
 16788 26d3 0200     		.2byte	0x2
 16789 26d5 91       		.byte	0x91
 16790 26d6 64       		.sleb128 -28
 16791 26d7 68000000 		.4byte	.LVL814
 16792 26db 6A000000 		.4byte	.LVL815
 16793 26df 0100     		.2byte	0x1
 16794 26e1 51       		.byte	0x51
 16795 26e2 6A000000 		.4byte	.LVL815
 16796 26e6 6E000000 		.4byte	.LFE39
 16797 26ea 0200     		.2byte	0x2
 16798 26ec 91       		.byte	0x91
 16799 26ed 64       		.sleb128 -28
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 398


 16800 26ee 00000000 		.4byte	0
 16801 26f2 00000000 		.4byte	0
 16802              	.LLST181:
 16803 26f6 14000000 		.4byte	.LVL804
 16804 26fa 1E000000 		.4byte	.LVL805
 16805 26fe 0100     		.2byte	0x1
 16806 2700 50       		.byte	0x50
 16807 2701 24000000 		.4byte	.LVL806
 16808 2705 3A000000 		.4byte	.LVL807
 16809 2709 0100     		.2byte	0x1
 16810 270b 50       		.byte	0x50
 16811 270c 44000000 		.4byte	.LVL809
 16812 2710 46000000 		.4byte	.LVL810
 16813 2714 0100     		.2byte	0x1
 16814 2716 50       		.byte	0x50
 16815 2717 46000000 		.4byte	.LVL810
 16816 271b 68000000 		.4byte	.LVL814
 16817 271f 0100     		.2byte	0x1
 16818 2721 54       		.byte	0x54
 16819 2722 00000000 		.4byte	0
 16820 2726 00000000 		.4byte	0
 16821              	.LLST182:
 16822 272a 00000000 		.4byte	.LVL816
 16823 272e 0B000000 		.4byte	.LVL817-1
 16824 2732 0100     		.2byte	0x1
 16825 2734 50       		.byte	0x50
 16826 2735 0B000000 		.4byte	.LVL817-1
 16827 2739 1A000000 		.4byte	.LFE40
 16828 273d 0100     		.2byte	0x1
 16829 273f 54       		.byte	0x54
 16830 2740 00000000 		.4byte	0
 16831 2744 00000000 		.4byte	0
 16832              	.LLST183:
 16833 2748 0C000000 		.4byte	.LVL817
 16834 274c 16000000 		.4byte	.LVL818
 16835 2750 0100     		.2byte	0x1
 16836 2752 50       		.byte	0x50
 16837 2753 00000000 		.4byte	0
 16838 2757 00000000 		.4byte	0
 16839              	.LLST184:
 16840 275b 00000000 		.4byte	.LVL819
 16841 275f 0D000000 		.4byte	.LVL821-1
 16842 2763 0100     		.2byte	0x1
 16843 2765 50       		.byte	0x50
 16844 2766 0D000000 		.4byte	.LVL821-1
 16845 276a 4C000000 		.4byte	.LFE41
 16846 276e 0100     		.2byte	0x1
 16847 2770 55       		.byte	0x55
 16848 2771 00000000 		.4byte	0
 16849 2775 00000000 		.4byte	0
 16850              	.LLST185:
 16851 2779 00000000 		.4byte	.LVL819
 16852 277d 0A000000 		.4byte	.LVL820
 16853 2781 0100     		.2byte	0x1
 16854 2783 51       		.byte	0x51
 16855 2784 0A000000 		.4byte	.LVL820
 16856 2788 4C000000 		.4byte	.LFE41
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 399


 16857 278c 0100     		.2byte	0x1
 16858 278e 56       		.byte	0x56
 16859 278f 00000000 		.4byte	0
 16860 2793 00000000 		.4byte	0
 16861              	.LLST186:
 16862 2797 0E000000 		.4byte	.LVL821
 16863 279b 16000000 		.4byte	.LVL822
 16864 279f 0100     		.2byte	0x1
 16865 27a1 50       		.byte	0x50
 16866 27a2 1E000000 		.4byte	.LVL824
 16867 27a6 20000000 		.4byte	.LVL825
 16868 27aa 0100     		.2byte	0x1
 16869 27ac 54       		.byte	0x54
 16870 27ad 20000000 		.4byte	.LVL825
 16871 27b1 22000000 		.4byte	.LVL826
 16872 27b5 0100     		.2byte	0x1
 16873 27b7 50       		.byte	0x50
 16874 27b8 28000000 		.4byte	.LVL827
 16875 27bc 2E000000 		.4byte	.LVL828
 16876 27c0 0100     		.2byte	0x1
 16877 27c2 50       		.byte	0x50
 16878 27c3 2E000000 		.4byte	.LVL828
 16879 27c7 40000000 		.4byte	.LVL830
 16880 27cb 0100     		.2byte	0x1
 16881 27cd 54       		.byte	0x54
 16882 27ce 40000000 		.4byte	.LVL830
 16883 27d2 46000000 		.4byte	.LVL831
 16884 27d6 0100     		.2byte	0x1
 16885 27d8 50       		.byte	0x50
 16886 27d9 46000000 		.4byte	.LVL831
 16887 27dd 4C000000 		.4byte	.LFE41
 16888 27e1 0100     		.2byte	0x1
 16889 27e3 54       		.byte	0x54
 16890 27e4 00000000 		.4byte	0
 16891 27e8 00000000 		.4byte	0
 16892              	.LLST187:
 16893 27ec 00000000 		.4byte	.LVL832
 16894 27f0 0E000000 		.4byte	.LVL833
 16895 27f4 0100     		.2byte	0x1
 16896 27f6 50       		.byte	0x50
 16897 27f7 0E000000 		.4byte	.LVL833
 16898 27fb 15000000 		.4byte	.LVL835-1
 16899 27ff 0200     		.2byte	0x2
 16900 2801 70       		.byte	0x70
 16901 2802 00       		.sleb128 0
 16902 2803 15000000 		.4byte	.LVL835-1
 16903 2807 42000000 		.4byte	.LFE42
 16904 280b 0300     		.2byte	0x3
 16905 280d 91       		.byte	0x91
 16906 280e BC7F     		.sleb128 -68
 16907 2810 00000000 		.4byte	0
 16908 2814 00000000 		.4byte	0
 16909              	.LLST188:
 16910 2818 00000000 		.4byte	.LVL832
 16911 281c 10000000 		.4byte	.LVL834
 16912 2820 0100     		.2byte	0x1
 16913 2822 51       		.byte	0x51
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 400


 16914 2823 10000000 		.4byte	.LVL834
 16915 2827 42000000 		.4byte	.LFE42
 16916 282b 0100     		.2byte	0x1
 16917 282d 55       		.byte	0x55
 16918 282e 00000000 		.4byte	0
 16919 2832 00000000 		.4byte	0
 16920              	.LLST189:
 16921 2836 16000000 		.4byte	.LVL835
 16922 283a 1C000000 		.4byte	.LVL836
 16923 283e 0100     		.2byte	0x1
 16924 2840 50       		.byte	0x50
 16925 2841 22000000 		.4byte	.LVL837
 16926 2845 32000000 		.4byte	.LVL838
 16927 2849 0100     		.2byte	0x1
 16928 284b 50       		.byte	0x50
 16929 284c 3A000000 		.4byte	.LVL840
 16930 2850 3C000000 		.4byte	.LVL841
 16931 2854 0100     		.2byte	0x1
 16932 2856 50       		.byte	0x50
 16933 2857 3C000000 		.4byte	.LVL841
 16934 285b 42000000 		.4byte	.LFE42
 16935 285f 0100     		.2byte	0x1
 16936 2861 54       		.byte	0x54
 16937 2862 00000000 		.4byte	0
 16938 2866 00000000 		.4byte	0
 16939              	.LLST190:
 16940 286a 00000000 		.4byte	.LVL842
 16941 286e 12000000 		.4byte	.LVL843
 16942 2872 0100     		.2byte	0x1
 16943 2874 50       		.byte	0x50
 16944 2875 12000000 		.4byte	.LVL843
 16945 2879 19000000 		.4byte	.LVL846-1
 16946 287d 0200     		.2byte	0x2
 16947 287f 70       		.byte	0x70
 16948 2880 00       		.sleb128 0
 16949 2881 19000000 		.4byte	.LVL846-1
 16950 2885 D8000000 		.4byte	.LVL872
 16951 2889 0200     		.2byte	0x2
 16952 288b 91       		.byte	0x91
 16953 288c 44       		.sleb128 -60
 16954 288d D8000000 		.4byte	.LVL872
 16955 2891 DC000000 		.4byte	.LFE43
 16956 2895 0200     		.2byte	0x2
 16957 2897 7D       		.byte	0x7d
 16958 2898 64       		.sleb128 -28
 16959 2899 00000000 		.4byte	0
 16960 289d 00000000 		.4byte	0
 16961              	.LLST191:
 16962 28a1 00000000 		.4byte	.LVL842
 16963 28a5 14000000 		.4byte	.LVL844
 16964 28a9 0100     		.2byte	0x1
 16965 28ab 51       		.byte	0x51
 16966 28ac 14000000 		.4byte	.LVL844
 16967 28b0 DC000000 		.4byte	.LFE43
 16968 28b4 0100     		.2byte	0x1
 16969 28b6 59       		.byte	0x59
 16970 28b7 00000000 		.4byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 401


 16971 28bb 00000000 		.4byte	0
 16972              	.LLST192:
 16973 28bf 00000000 		.4byte	.LVL842
 16974 28c3 16000000 		.4byte	.LVL845
 16975 28c7 0100     		.2byte	0x1
 16976 28c9 52       		.byte	0x52
 16977 28ca 16000000 		.4byte	.LVL845
 16978 28ce 3E000000 		.4byte	.LVL849
 16979 28d2 0100     		.2byte	0x1
 16980 28d4 54       		.byte	0x54
 16981 28d5 3E000000 		.4byte	.LVL849
 16982 28d9 62000000 		.4byte	.LVL854
 16983 28dd 0400     		.2byte	0x4
 16984 28df F3       		.byte	0xf3
 16985 28e0 01       		.uleb128 0x1
 16986 28e1 52       		.byte	0x52
 16987 28e2 9F       		.byte	0x9f
 16988 28e3 62000000 		.4byte	.LVL854
 16989 28e7 66000000 		.4byte	.LVL856
 16990 28eb 0100     		.2byte	0x1
 16991 28ed 54       		.byte	0x54
 16992 28ee 66000000 		.4byte	.LVL856
 16993 28f2 DC000000 		.4byte	.LFE43
 16994 28f6 0400     		.2byte	0x4
 16995 28f8 F3       		.byte	0xf3
 16996 28f9 01       		.uleb128 0x1
 16997 28fa 52       		.byte	0x52
 16998 28fb 9F       		.byte	0x9f
 16999 28fc 00000000 		.4byte	0
 17000 2900 00000000 		.4byte	0
 17001              	.LLST193:
 17002 2904 1A000000 		.4byte	.LVL846
 17003 2908 40000000 		.4byte	.LVL850
 17004 290c 0100     		.2byte	0x1
 17005 290e 50       		.byte	0x50
 17006 290f 62000000 		.4byte	.LVL854
 17007 2913 68000000 		.4byte	.LVL857
 17008 2917 0100     		.2byte	0x1
 17009 2919 50       		.byte	0x50
 17010 291a 68000000 		.4byte	.LVL857
 17011 291e 76000000 		.4byte	.LVL859
 17012 2922 0100     		.2byte	0x1
 17013 2924 58       		.byte	0x58
 17014 2925 76000000 		.4byte	.LVL859
 17015 2929 7C000000 		.4byte	.LVL860
 17016 292d 0100     		.2byte	0x1
 17017 292f 50       		.byte	0x50
 17018 2930 7C000000 		.4byte	.LVL860
 17019 2934 B4000000 		.4byte	.LVL869
 17020 2938 0100     		.2byte	0x1
 17021 293a 58       		.byte	0x58
 17022 293b BE000000 		.4byte	.LVL870
 17023 293f DC000000 		.4byte	.LFE43
 17024 2943 0100     		.2byte	0x1
 17025 2945 58       		.byte	0x58
 17026 2946 00000000 		.4byte	0
 17027 294a 00000000 		.4byte	0
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 402


 17028              	.LLST194:
 17029 294e 34000000 		.4byte	.LVL847
 17030 2952 40000000 		.4byte	.LVL850
 17031 2956 0200     		.2byte	0x2
 17032 2958 30       		.byte	0x30
 17033 2959 9F       		.byte	0x9f
 17034 295a 40000000 		.4byte	.LVL850
 17035 295e 62000000 		.4byte	.LVL854
 17036 2962 0100     		.2byte	0x1
 17037 2964 56       		.byte	0x56
 17038 2965 62000000 		.4byte	.LVL854
 17039 2969 68000000 		.4byte	.LVL857
 17040 296d 0200     		.2byte	0x2
 17041 296f 30       		.byte	0x30
 17042 2970 9F       		.byte	0x9f
 17043 2971 68000000 		.4byte	.LVL857
 17044 2975 D4000000 		.4byte	.LVL871
 17045 2979 0100     		.2byte	0x1
 17046 297b 56       		.byte	0x56
 17047 297c 00000000 		.4byte	0
 17048 2980 00000000 		.4byte	0
 17049              	.LLST195:
 17050 2984 3A000000 		.4byte	.LVL848
 17051 2988 40000000 		.4byte	.LVL850
 17052 298c 0200     		.2byte	0x2
 17053 298e 32       		.byte	0x32
 17054 298f 9F       		.byte	0x9f
 17055 2990 40000000 		.4byte	.LVL850
 17056 2994 62000000 		.4byte	.LVL854
 17057 2998 0100     		.2byte	0x1
 17058 299a 54       		.byte	0x54
 17059 299b 62000000 		.4byte	.LVL854
 17060 299f AE000000 		.4byte	.LVL867
 17061 29a3 0100     		.2byte	0x1
 17062 29a5 55       		.byte	0x55
 17063 29a6 AE000000 		.4byte	.LVL867
 17064 29aa B0000000 		.4byte	.LVL868
 17065 29ae 0300     		.2byte	0x3
 17066 29b0 75       		.byte	0x75
 17067 29b1 7F       		.sleb128 -1
 17068 29b2 9F       		.byte	0x9f
 17069 29b3 B0000000 		.4byte	.LVL868
 17070 29b7 B4000000 		.4byte	.LVL869
 17071 29bb 0100     		.2byte	0x1
 17072 29bd 55       		.byte	0x55
 17073 29be B4000000 		.4byte	.LVL869
 17074 29c2 BE000000 		.4byte	.LVL870
 17075 29c6 0100     		.2byte	0x1
 17076 29c8 54       		.byte	0x54
 17077 29c9 00000000 		.4byte	0
 17078 29cd 00000000 		.4byte	0
 17079              	.LLST196:
 17080 29d1 48000000 		.4byte	.LVL851
 17081 29d5 62000000 		.4byte	.LVL854
 17082 29d9 0100     		.2byte	0x1
 17083 29db 50       		.byte	0x50
 17084 29dc B4000000 		.4byte	.LVL869
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 403


 17085 29e0 BE000000 		.4byte	.LVL870
 17086 29e4 0100     		.2byte	0x1
 17087 29e6 50       		.byte	0x50
 17088 29e7 00000000 		.4byte	0
 17089 29eb 00000000 		.4byte	0
 17090              	.LLST197:
 17091 29ef 64000000 		.4byte	.LVL855
 17092 29f3 6E000000 		.4byte	.LVL858
 17093 29f7 0100     		.2byte	0x1
 17094 29f9 57       		.byte	0x57
 17095 29fa 6E000000 		.4byte	.LVL858
 17096 29fe 7C000000 		.4byte	.LVL860
 17097 2a02 0100     		.2byte	0x1
 17098 2a04 5A       		.byte	0x5a
 17099 2a05 7C000000 		.4byte	.LVL860
 17100 2a09 B4000000 		.4byte	.LVL869
 17101 2a0d 0100     		.2byte	0x1
 17102 2a0f 57       		.byte	0x57
 17103 2a10 00000000 		.4byte	0
 17104 2a14 00000000 		.4byte	0
 17105              	.LLST198:
 17106 2a18 64000000 		.4byte	.LVL855
 17107 2a1c 68000000 		.4byte	.LVL857
 17108 2a20 0200     		.2byte	0x2
 17109 2a22 30       		.byte	0x30
 17110 2a23 9F       		.byte	0x9f
 17111 2a24 68000000 		.4byte	.LVL857
 17112 2a28 B4000000 		.4byte	.LVL869
 17113 2a2c 0100     		.2byte	0x1
 17114 2a2e 54       		.byte	0x54
 17115 2a2f 00000000 		.4byte	0
 17116 2a33 00000000 		.4byte	0
 17117              	.LLST199:
 17118 2a37 00000000 		.4byte	.LVL873
 17119 2a3b 0B000000 		.4byte	.LVL874-1
 17120 2a3f 0100     		.2byte	0x1
 17121 2a41 50       		.byte	0x50
 17122 2a42 0B000000 		.4byte	.LVL874-1
 17123 2a46 AC000000 		.4byte	.LFE44
 17124 2a4a 0100     		.2byte	0x1
 17125 2a4c 55       		.byte	0x55
 17126 2a4d 00000000 		.4byte	0
 17127 2a51 00000000 		.4byte	0
 17128              	.LLST200:
 17129 2a55 0C000000 		.4byte	.LVL874
 17130 2a59 12000000 		.4byte	.LVL875
 17131 2a5d 0100     		.2byte	0x1
 17132 2a5f 50       		.byte	0x50
 17133 2a60 12000000 		.4byte	.LVL875
 17134 2a64 46000000 		.4byte	.LVL880
 17135 2a68 0100     		.2byte	0x1
 17136 2a6a 54       		.byte	0x54
 17137 2a6b 46000000 		.4byte	.LVL880
 17138 2a6f 4E000000 		.4byte	.LVL881
 17139 2a73 0200     		.2byte	0x2
 17140 2a75 30       		.byte	0x30
 17141 2a76 9F       		.byte	0x9f
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 404


 17142 2a77 4E000000 		.4byte	.LVL881
 17143 2a7b AC000000 		.4byte	.LFE44
 17144 2a7f 0100     		.2byte	0x1
 17145 2a81 54       		.byte	0x54
 17146 2a82 00000000 		.4byte	0
 17147 2a86 00000000 		.4byte	0
 17148              	.LLST201:
 17149 2a8a 46000000 		.4byte	.LVL880
 17150 2a8e 60000000 		.4byte	.LVL883
 17151 2a92 0100     		.2byte	0x1
 17152 2a94 50       		.byte	0x50
 17153 2a95 60000000 		.4byte	.LVL883
 17154 2a99 65000000 		.4byte	.LVL884-1
 17155 2a9d 0100     		.2byte	0x1
 17156 2a9f 51       		.byte	0x51
 17157 2aa0 00000000 		.4byte	0
 17158 2aa4 00000000 		.4byte	0
 17159              	.LLST202:
 17160 2aa8 00000000 		.4byte	.LVL888
 17161 2aac 0C000000 		.4byte	.LVL890
 17162 2ab0 0100     		.2byte	0x1
 17163 2ab2 50       		.byte	0x50
 17164 2ab3 0C000000 		.4byte	.LVL890
 17165 2ab7 13000000 		.4byte	.LVL891-1
 17166 2abb 0200     		.2byte	0x2
 17167 2abd 70       		.byte	0x70
 17168 2abe 00       		.sleb128 0
 17169 2abf 13000000 		.4byte	.LVL891-1
 17170 2ac3 AE000000 		.4byte	.LVL910
 17171 2ac7 0300     		.2byte	0x3
 17172 2ac9 91       		.byte	0x91
 17173 2aca 8C7F     		.sleb128 -116
 17174 2acc AE000000 		.4byte	.LVL910
 17175 2ad0 B0000000 		.4byte	.LFE45
 17176 2ad4 0300     		.2byte	0x3
 17177 2ad6 7D       		.byte	0x7d
 17178 2ad7 9C7F     		.sleb128 -100
 17179 2ad9 00000000 		.4byte	0
 17180 2add 00000000 		.4byte	0
 17181              	.LLST203:
 17182 2ae1 14000000 		.4byte	.LVL891
 17183 2ae5 20000000 		.4byte	.LVL892
 17184 2ae9 0100     		.2byte	0x1
 17185 2aeb 50       		.byte	0x50
 17186 2aec 26000000 		.4byte	.LVL893
 17187 2af0 46000000 		.4byte	.LVL894
 17188 2af4 0100     		.2byte	0x1
 17189 2af6 50       		.byte	0x50
 17190 2af7 46000000 		.4byte	.LVL894
 17191 2afb 6A000000 		.4byte	.LVL898
 17192 2aff 0100     		.2byte	0x1
 17193 2b01 54       		.byte	0x54
 17194 2b02 6A000000 		.4byte	.LVL898
 17195 2b06 70000000 		.4byte	.LVL899
 17196 2b0a 0100     		.2byte	0x1
 17197 2b0c 50       		.byte	0x50
 17198 2b0d 76000000 		.4byte	.LVL900
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 405


 17199 2b11 7C000000 		.4byte	.LVL901
 17200 2b15 0100     		.2byte	0x1
 17201 2b17 50       		.byte	0x50
 17202 2b18 7C000000 		.4byte	.LVL901
 17203 2b1c 84000000 		.4byte	.LVL902
 17204 2b20 0100     		.2byte	0x1
 17205 2b22 53       		.byte	0x53
 17206 2b23 84000000 		.4byte	.LVL902
 17207 2b27 8E000000 		.4byte	.LVL904
 17208 2b2b 0100     		.2byte	0x1
 17209 2b2d 54       		.byte	0x54
 17210 2b2e 8E000000 		.4byte	.LVL904
 17211 2b32 96000000 		.4byte	.LVL905
 17212 2b36 0100     		.2byte	0x1
 17213 2b38 50       		.byte	0x50
 17214 2b39 A0000000 		.4byte	.LVL907
 17215 2b3d B0000000 		.4byte	.LFE45
 17216 2b41 0100     		.2byte	0x1
 17217 2b43 54       		.byte	0x54
 17218 2b44 00000000 		.4byte	0
 17219 2b48 00000000 		.4byte	0
 17220              	.LLST204:
 17221 2b4c 0A000000 		.4byte	.LVL889
 17222 2b50 54000000 		.4byte	.LVL896
 17223 2b54 0200     		.2byte	0x2
 17224 2b56 30       		.byte	0x30
 17225 2b57 9F       		.byte	0x9f
 17226 2b58 54000000 		.4byte	.LVL896
 17227 2b5c 64000000 		.4byte	.LVL897
 17228 2b60 0100     		.2byte	0x1
 17229 2b62 50       		.byte	0x50
 17230 2b63 64000000 		.4byte	.LVL897
 17231 2b67 84000000 		.4byte	.LVL902
 17232 2b6b 0100     		.2byte	0x1
 17233 2b6d 55       		.byte	0x55
 17234 2b6e 84000000 		.4byte	.LVL902
 17235 2b72 86000000 		.4byte	.LVL903
 17236 2b76 0200     		.2byte	0x2
 17237 2b78 30       		.byte	0x30
 17238 2b79 9F       		.byte	0x9f
 17239 2b7a 86000000 		.4byte	.LVL903
 17240 2b7e AA000000 		.4byte	.LVL909
 17241 2b82 0100     		.2byte	0x1
 17242 2b84 55       		.byte	0x55
 17243 2b85 00000000 		.4byte	0
 17244 2b89 00000000 		.4byte	0
 17245              	.LLST205:
 17246 2b8d 00000000 		.4byte	.LVL911
 17247 2b91 0C000000 		.4byte	.LVL912
 17248 2b95 0100     		.2byte	0x1
 17249 2b97 50       		.byte	0x50
 17250 2b98 0C000000 		.4byte	.LVL912
 17251 2b9c 13000000 		.4byte	.LVL913-1
 17252 2ba0 0200     		.2byte	0x2
 17253 2ba2 70       		.byte	0x70
 17254 2ba3 00       		.sleb128 0
 17255 2ba4 13000000 		.4byte	.LVL913-1
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 406


 17256 2ba8 34000000 		.4byte	.LVL917
 17257 2bac 0300     		.2byte	0x3
 17258 2bae 91       		.byte	0x91
 17259 2baf A47F     		.sleb128 -92
 17260 2bb1 34000000 		.4byte	.LVL917
 17261 2bb5 3A000000 		.4byte	.LVL919
 17262 2bb9 0300     		.2byte	0x3
 17263 2bbb 70       		.byte	0x70
 17264 2bbc BC7F     		.sleb128 -68
 17265 2bbe 3A000000 		.4byte	.LVL919
 17266 2bc2 3F000000 		.4byte	.LVL920-1
 17267 2bc6 0200     		.2byte	0x2
 17268 2bc8 70       		.byte	0x70
 17269 2bc9 7C       		.sleb128 -4
 17270 2bca 3F000000 		.4byte	.LVL920-1
 17271 2bce 2C010000 		.4byte	.LFE46
 17272 2bd2 0300     		.2byte	0x3
 17273 2bd4 91       		.byte	0x91
 17274 2bd5 A47F     		.sleb128 -92
 17275 2bd7 00000000 		.4byte	0
 17276 2bdb 00000000 		.4byte	0
 17277              	.LLST206:
 17278 2bdf 14000000 		.4byte	.LVL913
 17279 2be3 22000000 		.4byte	.LVL914
 17280 2be7 0100     		.2byte	0x1
 17281 2be9 50       		.byte	0x50
 17282 2bea 28000000 		.4byte	.LVL915
 17283 2bee 2E000000 		.4byte	.LVL916
 17284 2bf2 0100     		.2byte	0x1
 17285 2bf4 50       		.byte	0x50
 17286 2bf5 2E000000 		.4byte	.LVL916
 17287 2bf9 36000000 		.4byte	.LVL918
 17288 2bfd 0100     		.2byte	0x1
 17289 2bff 53       		.byte	0x53
 17290 2c00 40000000 		.4byte	.LVL920
 17291 2c04 46000000 		.4byte	.LVL921
 17292 2c08 0200     		.2byte	0x2
 17293 2c0a 30       		.byte	0x30
 17294 2c0b 9F       		.byte	0x9f
 17295 2c0c 46000000 		.4byte	.LVL921
 17296 2c10 66000000 		.4byte	.LVL927
 17297 2c14 0100     		.2byte	0x1
 17298 2c16 54       		.byte	0x54
 17299 2c17 66000000 		.4byte	.LVL927
 17300 2c1b 72000000 		.4byte	.LVL928
 17301 2c1f 0100     		.2byte	0x1
 17302 2c21 50       		.byte	0x50
 17303 2c22 EC000000 		.4byte	.LVL935
 17304 2c26 24010000 		.4byte	.LVL941
 17305 2c2a 0100     		.2byte	0x1
 17306 2c2c 54       		.byte	0x54
 17307 2c2d 24010000 		.4byte	.LVL941
 17308 2c31 26010000 		.4byte	.LVL942
 17309 2c35 0100     		.2byte	0x1
 17310 2c37 53       		.byte	0x53
 17311 2c38 26010000 		.4byte	.LVL942
 17312 2c3c 2C010000 		.4byte	.LFE46
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 407


 17313 2c40 0100     		.2byte	0x1
 17314 2c42 54       		.byte	0x54
 17315 2c43 00000000 		.4byte	0
 17316 2c47 00000000 		.4byte	0
 17317              	.LLST207:
 17318 2c4b 40000000 		.4byte	.LVL920
 17319 2c4f 57000000 		.4byte	.LVL924-1
 17320 2c53 0100     		.2byte	0x1
 17321 2c55 50       		.byte	0x50
 17322 2c56 57000000 		.4byte	.LVL924-1
 17323 2c5a 24010000 		.4byte	.LVL941
 17324 2c5e 0100     		.2byte	0x1
 17325 2c60 55       		.byte	0x55
 17326 2c61 00000000 		.4byte	0
 17327 2c65 00000000 		.4byte	0
 17328              	.LLST208:
 17329 2c69 D8000000 		.4byte	.LVL932
 17330 2c6d DD000000 		.4byte	.LVL933-1
 17331 2c71 0200     		.2byte	0x2
 17332 2c73 91       		.byte	0x91
 17333 2c74 40       		.sleb128 -64
 17334 2c75 00000000 		.4byte	0
 17335 2c79 00000000 		.4byte	0
 17336              	.LLST209:
 17337 2c7d 5A000000 		.4byte	.LVL925
 17338 2c81 60000000 		.4byte	.LVL926
 17339 2c85 0100     		.2byte	0x1
 17340 2c87 50       		.byte	0x50
 17341 2c88 60000000 		.4byte	.LVL926
 17342 2c8c 24010000 		.4byte	.LVL941
 17343 2c90 0100     		.2byte	0x1
 17344 2c92 56       		.byte	0x56
 17345 2c93 00000000 		.4byte	0
 17346 2c97 00000000 		.4byte	0
 17347              	.LLST210:
 17348 2c9b 00000000 		.4byte	.LVL943
 17349 2c9f 08000000 		.4byte	.LVL944
 17350 2ca3 0100     		.2byte	0x1
 17351 2ca5 50       		.byte	0x50
 17352 2ca6 08000000 		.4byte	.LVL944
 17353 2caa 12000000 		.4byte	.LVL946
 17354 2cae 0300     		.2byte	0x3
 17355 2cb0 91       		.byte	0x91
 17356 2cb1 E47E     		.sleb128 -156
 17357 2cb3 12000000 		.4byte	.LVL946
 17358 2cb7 19000000 		.4byte	.LVL947-1
 17359 2cbb 0200     		.2byte	0x2
 17360 2cbd 70       		.byte	0x70
 17361 2cbe 00       		.sleb128 0
 17362 2cbf 19000000 		.4byte	.LVL947-1
 17363 2cc3 4C010000 		.4byte	.LFE47
 17364 2cc7 0300     		.2byte	0x3
 17365 2cc9 91       		.byte	0x91
 17366 2cca E47E     		.sleb128 -156
 17367 2ccc 00000000 		.4byte	0
 17368 2cd0 00000000 		.4byte	0
 17369              	.LLST211:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 408


 17370 2cd4 00000000 		.4byte	.LVL943
 17371 2cd8 0F000000 		.4byte	.LVL945-1
 17372 2cdc 0100     		.2byte	0x1
 17373 2cde 51       		.byte	0x51
 17374 2cdf 0F000000 		.4byte	.LVL945-1
 17375 2ce3 AA000000 		.4byte	.LVL956
 17376 2ce7 0300     		.2byte	0x3
 17377 2ce9 91       		.byte	0x91
 17378 2cea E07E     		.sleb128 -160
 17379 2cec AA000000 		.4byte	.LVL956
 17380 2cf0 AE000000 		.4byte	.LVL957
 17381 2cf4 0300     		.2byte	0x3
 17382 2cf6 73       		.byte	0x73
 17383 2cf7 F87E     		.sleb128 -136
 17384 2cf9 AE000000 		.4byte	.LVL957
 17385 2cfd C8000000 		.4byte	.LVL959
 17386 2d01 0200     		.2byte	0x2
 17387 2d03 73       		.byte	0x73
 17388 2d04 67       		.sleb128 -25
 17389 2d05 C8000000 		.4byte	.LVL959
 17390 2d09 4C010000 		.4byte	.LFE47
 17391 2d0d 0300     		.2byte	0x3
 17392 2d0f 91       		.byte	0x91
 17393 2d10 E07E     		.sleb128 -160
 17394 2d12 00000000 		.4byte	0
 17395 2d16 00000000 		.4byte	0
 17396              	.LLST212:
 17397 2d1a 1A000000 		.4byte	.LVL947
 17398 2d1e 28000000 		.4byte	.LVL948
 17399 2d22 0100     		.2byte	0x1
 17400 2d24 50       		.byte	0x50
 17401 2d25 2E000000 		.4byte	.LVL949
 17402 2d29 3E000000 		.4byte	.LVL950
 17403 2d2d 0100     		.2byte	0x1
 17404 2d2f 50       		.byte	0x50
 17405 2d30 3E000000 		.4byte	.LVL950
 17406 2d34 48000000 		.4byte	.LVL951
 17407 2d38 0100     		.2byte	0x1
 17408 2d3a 54       		.byte	0x54
 17409 2d3b 78000000 		.4byte	.LVL952
 17410 2d3f 96000000 		.4byte	.LVL953
 17411 2d43 0100     		.2byte	0x1
 17412 2d45 50       		.byte	0x50
 17413 2d46 96000000 		.4byte	.LVL953
 17414 2d4a A0000000 		.4byte	.LVL954
 17415 2d4e 0100     		.2byte	0x1
 17416 2d50 54       		.byte	0x54
 17417 2d51 A0000000 		.4byte	.LVL954
 17418 2d55 B4000000 		.4byte	.LVL958
 17419 2d59 0100     		.2byte	0x1
 17420 2d5b 50       		.byte	0x50
 17421 2d5c 0E010000 		.4byte	.LVL963
 17422 2d60 22010000 		.4byte	.LVL965
 17423 2d64 0100     		.2byte	0x1
 17424 2d66 50       		.byte	0x50
 17425 2d67 32010000 		.4byte	.LVL968
 17426 2d6b 3A010000 		.4byte	.LVL969
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 409


 17427 2d6f 0100     		.2byte	0x1
 17428 2d71 54       		.byte	0x54
 17429 2d72 3A010000 		.4byte	.LVL969
 17430 2d76 40010000 		.4byte	.LVL970
 17431 2d7a 0100     		.2byte	0x1
 17432 2d7c 50       		.byte	0x50
 17433 2d7d 46010000 		.4byte	.LVL972
 17434 2d81 4C010000 		.4byte	.LFE47
 17435 2d85 0100     		.2byte	0x1
 17436 2d87 54       		.byte	0x54
 17437 2d88 00000000 		.4byte	0
 17438 2d8c 00000000 		.4byte	0
 17439              	.LLST213:
 17440 2d90 A8000000 		.4byte	.LVL955
 17441 2d94 FB000000 		.4byte	.LVL960-1
 17442 2d98 0100     		.2byte	0x1
 17443 2d9a 51       		.byte	0x51
 17444 2d9b 14010000 		.4byte	.LVL964
 17445 2d9f 27010000 		.4byte	.LVL966-1
 17446 2da3 0100     		.2byte	0x1
 17447 2da5 51       		.byte	0x51
 17448 2da6 00000000 		.4byte	0
 17449 2daa 00000000 		.4byte	0
 17450              	.LLST214:
 17451 2dae 04010000 		.4byte	.LVL961
 17452 2db2 0A010000 		.4byte	.LVL962
 17453 2db6 0100     		.2byte	0x1
 17454 2db8 50       		.byte	0x50
 17455 2db9 0A010000 		.4byte	.LVL962
 17456 2dbd 0D010000 		.4byte	.LVL963-1
 17457 2dc1 0100     		.2byte	0x1
 17458 2dc3 51       		.byte	0x51
 17459 2dc4 30010000 		.4byte	.LVL967
 17460 2dc8 32010000 		.4byte	.LVL968
 17461 2dcc 0100     		.2byte	0x1
 17462 2dce 50       		.byte	0x50
 17463 2dcf 00000000 		.4byte	0
 17464 2dd3 00000000 		.4byte	0
 17465              		.section	.debug_aranges,"",%progbits
 17466 0000 94010000 		.4byte	0x194
 17467 0004 0200     		.2byte	0x2
 17468 0006 00000000 		.4byte	.Ldebug_info0
 17469 000a 04       		.byte	0x4
 17470 000b 00       		.byte	0
 17471 000c 0000     		.2byte	0
 17472 000e 0000     		.2byte	0
 17473 0010 00000000 		.4byte	.LFB0
 17474 0014 0A000000 		.4byte	.LFE0-.LFB0
 17475 0018 00000000 		.4byte	.LFB1
 17476 001c 16000000 		.4byte	.LFE1-.LFB1
 17477 0020 00000000 		.4byte	.LFB2
 17478 0024 08000000 		.4byte	.LFE2-.LFB2
 17479 0028 00000000 		.4byte	.LFB3
 17480 002c 14000000 		.4byte	.LFE3-.LFB3
 17481 0030 00000000 		.4byte	.LFB4
 17482 0034 24000000 		.4byte	.LFE4-.LFB4
 17483 0038 00000000 		.4byte	.LFB5
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 410


 17484 003c 26000000 		.4byte	.LFE5-.LFB5
 17485 0040 00000000 		.4byte	.LFB9
 17486 0044 18000000 		.4byte	.LFE9-.LFB9
 17487 0048 00000000 		.4byte	.LFB18
 17488 004c 24000000 		.4byte	.LFE18-.LFB18
 17489 0050 00000000 		.4byte	.LFB19
 17490 0054 24000000 		.4byte	.LFE19-.LFB19
 17491 0058 00000000 		.4byte	.LFB24
 17492 005c 6E000000 		.4byte	.LFE24-.LFB24
 17493 0060 00000000 		.4byte	.LFB27
 17494 0064 54000000 		.4byte	.LFE27-.LFB27
 17495 0068 00000000 		.4byte	.LFB31
 17496 006c 46000000 		.4byte	.LFE31-.LFB31
 17497 0070 00000000 		.4byte	.LFB6
 17498 0074 50000000 		.4byte	.LFE6-.LFB6
 17499 0078 00000000 		.4byte	.LFB7
 17500 007c 34000000 		.4byte	.LFE7-.LFB7
 17501 0080 00000000 		.4byte	.LFB28
 17502 0084 CC000000 		.4byte	.LFE28-.LFB28
 17503 0088 00000000 		.4byte	.LFB29
 17504 008c 68000000 		.4byte	.LFE29-.LFB29
 17505 0090 00000000 		.4byte	.LFB30
 17506 0094 BC020000 		.4byte	.LFE30-.LFB30
 17507 0098 00000000 		.4byte	.LFB11
 17508 009c 0A010000 		.4byte	.LFE11-.LFB11
 17509 00a0 00000000 		.4byte	.LFB10
 17510 00a4 D0000000 		.4byte	.LFE10-.LFB10
 17511 00a8 00000000 		.4byte	.LFB15
 17512 00ac B0000000 		.4byte	.LFE15-.LFB15
 17513 00b0 00000000 		.4byte	.LFB13
 17514 00b4 10010000 		.4byte	.LFE13-.LFB13
 17515 00b8 00000000 		.4byte	.LFB12
 17516 00bc 7C000000 		.4byte	.LFE12-.LFB12
 17517 00c0 00000000 		.4byte	.LFB23
 17518 00c4 20000000 		.4byte	.LFE23-.LFB23
 17519 00c8 00000000 		.4byte	.LFB14
 17520 00cc 52000000 		.4byte	.LFE14-.LFB14
 17521 00d0 00000000 		.4byte	.LFB16
 17522 00d4 D6000000 		.4byte	.LFE16-.LFB16
 17523 00d8 00000000 		.4byte	.LFB21
 17524 00dc 54000000 		.4byte	.LFE21-.LFB21
 17525 00e0 00000000 		.4byte	.LFB17
 17526 00e4 4C000000 		.4byte	.LFE17-.LFB17
 17527 00e8 00000000 		.4byte	.LFB20
 17528 00ec 60000000 		.4byte	.LFE20-.LFB20
 17529 00f0 00000000 		.4byte	.LFB25
 17530 00f4 0C010000 		.4byte	.LFE25-.LFB25
 17531 00f8 00000000 		.4byte	.LFB26
 17532 00fc 8C000000 		.4byte	.LFE26-.LFB26
 17533 0100 00000000 		.4byte	.LFB22
 17534 0104 42000000 		.4byte	.LFE22-.LFB22
 17535 0108 00000000 		.4byte	.LFB8
 17536 010c 8C000000 		.4byte	.LFE8-.LFB8
 17537 0110 00000000 		.4byte	.LFB32
 17538 0114 5C000000 		.4byte	.LFE32-.LFB32
 17539 0118 00000000 		.4byte	.LFB33
 17540 011c EA010000 		.4byte	.LFE33-.LFB33
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 411


 17541 0120 00000000 		.4byte	.LFB34
 17542 0124 76010000 		.4byte	.LFE34-.LFB34
 17543 0128 00000000 		.4byte	.LFB35
 17544 012c AE010000 		.4byte	.LFE35-.LFB35
 17545 0130 00000000 		.4byte	.LFB36
 17546 0134 9C000000 		.4byte	.LFE36-.LFB36
 17547 0138 00000000 		.4byte	.LFB37
 17548 013c 24000000 		.4byte	.LFE37-.LFB37
 17549 0140 00000000 		.4byte	.LFB38
 17550 0144 72010000 		.4byte	.LFE38-.LFB38
 17551 0148 00000000 		.4byte	.LFB39
 17552 014c 6E000000 		.4byte	.LFE39-.LFB39
 17553 0150 00000000 		.4byte	.LFB40
 17554 0154 1A000000 		.4byte	.LFE40-.LFB40
 17555 0158 00000000 		.4byte	.LFB41
 17556 015c 4C000000 		.4byte	.LFE41-.LFB41
 17557 0160 00000000 		.4byte	.LFB42
 17558 0164 42000000 		.4byte	.LFE42-.LFB42
 17559 0168 00000000 		.4byte	.LFB43
 17560 016c DC000000 		.4byte	.LFE43-.LFB43
 17561 0170 00000000 		.4byte	.LFB44
 17562 0174 AC000000 		.4byte	.LFE44-.LFB44
 17563 0178 00000000 		.4byte	.LFB45
 17564 017c B0000000 		.4byte	.LFE45-.LFB45
 17565 0180 00000000 		.4byte	.LFB46
 17566 0184 2C010000 		.4byte	.LFE46-.LFB46
 17567 0188 00000000 		.4byte	.LFB47
 17568 018c 4C010000 		.4byte	.LFE47-.LFB47
 17569 0190 00000000 		.4byte	0
 17570 0194 00000000 		.4byte	0
 17571              		.section	.debug_ranges,"",%progbits
 17572              	.Ldebug_ranges0:
 17573 0000 00000000 		.4byte	.LFB0
 17574 0004 0A000000 		.4byte	.LFE0
 17575 0008 00000000 		.4byte	.LFB1
 17576 000c 16000000 		.4byte	.LFE1
 17577 0010 00000000 		.4byte	.LFB2
 17578 0014 08000000 		.4byte	.LFE2
 17579 0018 00000000 		.4byte	.LFB3
 17580 001c 14000000 		.4byte	.LFE3
 17581 0020 00000000 		.4byte	.LFB4
 17582 0024 24000000 		.4byte	.LFE4
 17583 0028 00000000 		.4byte	.LFB5
 17584 002c 26000000 		.4byte	.LFE5
 17585 0030 00000000 		.4byte	.LFB9
 17586 0034 18000000 		.4byte	.LFE9
 17587 0038 00000000 		.4byte	.LFB18
 17588 003c 24000000 		.4byte	.LFE18
 17589 0040 00000000 		.4byte	.LFB19
 17590 0044 24000000 		.4byte	.LFE19
 17591 0048 00000000 		.4byte	.LFB24
 17592 004c 6E000000 		.4byte	.LFE24
 17593 0050 00000000 		.4byte	.LFB27
 17594 0054 54000000 		.4byte	.LFE27
 17595 0058 00000000 		.4byte	.LFB31
 17596 005c 46000000 		.4byte	.LFE31
 17597 0060 00000000 		.4byte	.LFB6
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 412


 17598 0064 50000000 		.4byte	.LFE6
 17599 0068 00000000 		.4byte	.LFB7
 17600 006c 34000000 		.4byte	.LFE7
 17601 0070 00000000 		.4byte	.LFB28
 17602 0074 CC000000 		.4byte	.LFE28
 17603 0078 00000000 		.4byte	.LFB29
 17604 007c 68000000 		.4byte	.LFE29
 17605 0080 00000000 		.4byte	.LFB30
 17606 0084 BC020000 		.4byte	.LFE30
 17607 0088 00000000 		.4byte	.LFB11
 17608 008c 0A010000 		.4byte	.LFE11
 17609 0090 00000000 		.4byte	.LFB10
 17610 0094 D0000000 		.4byte	.LFE10
 17611 0098 00000000 		.4byte	.LFB15
 17612 009c B0000000 		.4byte	.LFE15
 17613 00a0 00000000 		.4byte	.LFB13
 17614 00a4 10010000 		.4byte	.LFE13
 17615 00a8 00000000 		.4byte	.LFB12
 17616 00ac 7C000000 		.4byte	.LFE12
 17617 00b0 00000000 		.4byte	.LFB23
 17618 00b4 20000000 		.4byte	.LFE23
 17619 00b8 00000000 		.4byte	.LFB14
 17620 00bc 52000000 		.4byte	.LFE14
 17621 00c0 00000000 		.4byte	.LFB16
 17622 00c4 D6000000 		.4byte	.LFE16
 17623 00c8 00000000 		.4byte	.LFB21
 17624 00cc 54000000 		.4byte	.LFE21
 17625 00d0 00000000 		.4byte	.LFB17
 17626 00d4 4C000000 		.4byte	.LFE17
 17627 00d8 00000000 		.4byte	.LFB20
 17628 00dc 60000000 		.4byte	.LFE20
 17629 00e0 00000000 		.4byte	.LFB25
 17630 00e4 0C010000 		.4byte	.LFE25
 17631 00e8 00000000 		.4byte	.LFB26
 17632 00ec 8C000000 		.4byte	.LFE26
 17633 00f0 00000000 		.4byte	.LFB22
 17634 00f4 42000000 		.4byte	.LFE22
 17635 00f8 00000000 		.4byte	.LFB8
 17636 00fc 8C000000 		.4byte	.LFE8
 17637 0100 00000000 		.4byte	.LFB32
 17638 0104 5C000000 		.4byte	.LFE32
 17639 0108 00000000 		.4byte	.LFB33
 17640 010c EA010000 		.4byte	.LFE33
 17641 0110 00000000 		.4byte	.LFB34
 17642 0114 76010000 		.4byte	.LFE34
 17643 0118 00000000 		.4byte	.LFB35
 17644 011c AE010000 		.4byte	.LFE35
 17645 0120 00000000 		.4byte	.LFB36
 17646 0124 9C000000 		.4byte	.LFE36
 17647 0128 00000000 		.4byte	.LFB37
 17648 012c 24000000 		.4byte	.LFE37
 17649 0130 00000000 		.4byte	.LFB38
 17650 0134 72010000 		.4byte	.LFE38
 17651 0138 00000000 		.4byte	.LFB39
 17652 013c 6E000000 		.4byte	.LFE39
 17653 0140 00000000 		.4byte	.LFB40
 17654 0144 1A000000 		.4byte	.LFE40
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 413


 17655 0148 00000000 		.4byte	.LFB41
 17656 014c 4C000000 		.4byte	.LFE41
 17657 0150 00000000 		.4byte	.LFB42
 17658 0154 42000000 		.4byte	.LFE42
 17659 0158 00000000 		.4byte	.LFB43
 17660 015c DC000000 		.4byte	.LFE43
 17661 0160 00000000 		.4byte	.LFB44
 17662 0164 AC000000 		.4byte	.LFE44
 17663 0168 00000000 		.4byte	.LFB45
 17664 016c B0000000 		.4byte	.LFE45
 17665 0170 00000000 		.4byte	.LFB46
 17666 0174 2C010000 		.4byte	.LFE46
 17667 0178 00000000 		.4byte	.LFB47
 17668 017c 4C010000 		.4byte	.LFE47
 17669 0180 00000000 		.4byte	0
 17670 0184 00000000 		.4byte	0
 17671              		.section	.debug_line,"",%progbits
 17672              	.Ldebug_line0:
 17673 0000 020D0000 		.section	.debug_str,"MS",%progbits,1
 17673      02002B01 
 17673      00000201 
 17673      FB0E0D00 
 17673      01010101 
 17674              	.LASF16:
 17675 0000 4653495A 		.ascii	"FSIZE_t\000"
 17675      455F7400 
 17676              	.LASF123:
 17677 0008 6469725F 		.ascii	"dir_find\000"
 17677      66696E64 
 17677      00
 17678              	.LASF118:
 17679 0011 6469725F 		.ascii	"dir_remove\000"
 17679      72656D6F 
 17679      766500
 17680              	.LASF87:
 17681 001c 6462635F 		.ascii	"dbc_2nd\000"
 17681      326E6400 
 17682              	.LASF116:
 17683 0024 72656D6F 		.ascii	"remove_chain\000"
 17683      76655F63 
 17683      6861696E 
 17683      00
 17684              	.LASF149:
 17685 0031 665F7265 		.ascii	"f_readdir\000"
 17685      61646469 
 17685      7200
 17686              	.LASF89:
 17687 003b 636C7374 		.ascii	"clst\000"
 17687      00
 17688              	.LASF84:
 17689 0040 73745F77 		.ascii	"st_word\000"
 17689      6F726400 
 17690              	.LASF47:
 17691 0048 6469725F 		.ascii	"dir_ptr\000"
 17691      70747200 
 17692              	.LASF57:
 17693 0050 46525F4E 		.ascii	"FR_NOT_READY\000"
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 414


 17693      4F545F52 
 17693      45414459 
 17693      00
 17694              	.LASF36:
 17695 005d 46415446 		.ascii	"FATFS\000"
 17695      5300
 17696              	.LASF27:
 17697 0063 6C617374 		.ascii	"last_clst\000"
 17697      5F636C73 
 17697      7400
 17698              	.LASF0:
 17699 006d 756E7369 		.ascii	"unsigned int\000"
 17699      676E6564 
 17699      20696E74 
 17699      00
 17700              	.LASF65:
 17701 007a 46525F49 		.ascii	"FR_INVALID_DRIVE\000"
 17701      4E56414C 
 17701      49445F44 
 17701      52495645 
 17701      00
 17702              	.LASF22:
 17703 008b 6E5F6661 		.ascii	"n_fats\000"
 17703      747300
 17704              	.LASF141:
 17705 0092 77627566 		.ascii	"wbuff\000"
 17705      6600
 17706              	.LASF68:
 17707 0098 46525F4D 		.ascii	"FR_MKFS_ABORTED\000"
 17707      4B46535F 
 17707      41424F52 
 17707      54454400 
 17708              	.LASF35:
 17709 00a8 77696E73 		.ascii	"winsect\000"
 17709      65637400 
 17710              	.LASF21:
 17711 00b0 6C647276 		.ascii	"ldrv\000"
 17711      00
 17712              	.LASF104:
 17713 00b5 6D6F6465 		.ascii	"mode\000"
 17713      00
 17714              	.LASF72:
 17715 00ba 46525F54 		.ascii	"FR_TOO_MANY_OPEN_FILES\000"
 17715      4F4F5F4D 
 17715      414E595F 
 17715      4F50454E 
 17715      5F46494C 
 17716              	.LASF165:
 17717 00d1 6469736B 		.ascii	"disk_status\000"
 17717      5F737461 
 17717      74757300 
 17718              	.LASF154:
 17719 00dd 665F7472 		.ascii	"f_truncate\000"
 17719      756E6361 
 17719      746500
 17720              	.LASF49:
 17721 00e8 66646174 		.ascii	"fdate\000"
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 415


 17721      6500
 17722              	.LASF152:
 17723 00ee 66617466 		.ascii	"fatfs\000"
 17723      7300
 17724              	.LASF24:
 17725 00f4 6673695F 		.ascii	"fsi_flag\000"
 17725      666C6167 
 17725      00
 17726              	.LASF46:
 17727 00fd 6469725F 		.ascii	"dir_sect\000"
 17727      73656374 
 17727      00
 17728              	.LASF120:
 17729 0106 69627566 		.ascii	"ibuf\000"
 17729      00
 17730              	.LASF50:
 17731 010b 6674696D 		.ascii	"ftime\000"
 17731      6500
 17732              	.LASF109:
 17733 0111 6E636C73 		.ascii	"nclst\000"
 17733      7400
 17734              	.LASF15:
 17735 0117 44574F52 		.ascii	"DWORD\000"
 17735      4400
 17736              	.LASF18:
 17737 011d 54434841 		.ascii	"TCHAR\000"
 17737      5200
 17738              	.LASF160:
 17739 0123 70617468 		.ascii	"path_old\000"
 17739      5F6F6C64 
 17739      00
 17740              	.LASF8:
 17741 012c 6C6F6E67 		.ascii	"long long unsigned int\000"
 17741      206C6F6E 
 17741      6720756E 
 17741      7369676E 
 17741      65642069 
 17742              	.LASF56:
 17743 0143 46525F49 		.ascii	"FR_INT_ERR\000"
 17743      4E545F45 
 17743      525200
 17744              	.LASF101:
 17745 014e 70617274 		.ascii	"part\000"
 17745      00
 17746              	.LASF169:
 17747 0153 6469736B 		.ascii	"disk_initialize\000"
 17747      5F696E69 
 17747      7469616C 
 17747      697A6500 
 17748              	.LASF102:
 17749 0163 6D62725F 		.ascii	"mbr_pt\000"
 17749      707400
 17750              	.LASF37:
 17751 016a 61747472 		.ascii	"attr\000"
 17751      00
 17752              	.LASF119:
 17753 016f 6469725F 		.ascii	"dir_clear\000"
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 416


 17753      636C6561 
 17753      7200
 17754              	.LASF155:
 17755 0179 665F756E 		.ascii	"f_unlink\000"
 17755      6C696E6B 
 17755      00
 17756              	.LASF19:
 17757 0182 66735F74 		.ascii	"fs_type\000"
 17757      79706500 
 17758              	.LASF32:
 17759 018a 66617462 		.ascii	"fatbase\000"
 17759      61736500 
 17760              	.LASF125:
 17761 0192 6E5F656E 		.ascii	"n_ent\000"
 17761      7400
 17762              	.LASF157:
 17763 0198 665F6D6B 		.ascii	"f_mkdir\000"
 17763      64697200 
 17764              	.LASF38:
 17765 01a0 73746174 		.ascii	"stat\000"
 17765      00
 17766              	.LASF91:
 17767 01a5 73745F63 		.ascii	"st_clust\000"
 17767      6C757374 
 17767      00
 17768              	.LASF175:
 17769 01ae 443A5C46 		.ascii	"D:\\FP\\LiamKovid\\KovidKonsole.cydsn\000"
 17769      505C4C69 
 17769      616D4B6F 
 17769      7669645C 
 17769      4B6F7669 
 17770              	.LASF103:
 17771 01d1 6D6F756E 		.ascii	"mount_volume\000"
 17771      745F766F 
 17771      6C756D65 
 17771      00
 17772              	.LASF134:
 17773 01de 62756666 		.ascii	"buff\000"
 17773      00
 17774              	.LASF98:
 17775 01e3 63686563 		.ascii	"check_fs\000"
 17775      6B5F6673 
 17775      00
 17776              	.LASF62:
 17777 01ec 46525F45 		.ascii	"FR_EXIST\000"
 17777      58495354 
 17777      00
 17778              	.LASF11:
 17779 01f5 73697A65 		.ascii	"size_t\000"
 17779      5F7400
 17780              	.LASF168:
 17781 01fc 6D656D63 		.ascii	"memcmp\000"
 17781      6D7000
 17782              	.LASF132:
 17783 0203 665F6F70 		.ascii	"f_open\000"
 17783      656E00
 17784              	.LASF63:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 417


 17785 020a 46525F49 		.ascii	"FR_INVALID_OBJECT\000"
 17785      4E56414C 
 17785      49445F4F 
 17785      424A4543 
 17785      5400
 17786              	.LASF128:
 17787 021c 666F6C6C 		.ascii	"follow_path\000"
 17787      6F775F70 
 17787      61746800 
 17788              	.LASF146:
 17789 0228 69667074 		.ascii	"ifptr\000"
 17789      7200
 17790              	.LASF70:
 17791 022e 46525F4C 		.ascii	"FR_LOCKED\000"
 17791      4F434B45 
 17791      4400
 17792              	.LASF143:
 17793 0238 665F636C 		.ascii	"f_close\000"
 17793      6F736500 
 17794              	.LASF94:
 17795 0240 70617468 		.ascii	"path\000"
 17795      00
 17796              	.LASF176:
 17797 0245 6765745F 		.ascii	"get_fattime\000"
 17797      66617474 
 17797      696D6500 
 17798              	.LASF92:
 17799 0251 6765745F 		.ascii	"get_fileinfo\000"
 17799      66696C65 
 17799      696E666F 
 17799      00
 17800              	.LASF112:
 17801 025e 7075745F 		.ascii	"put_fat\000"
 17801      66617400 
 17802              	.LASF113:
 17803 0266 6765745F 		.ascii	"get_fat\000"
 17803      66617400 
 17804              	.LASF83:
 17805 026e 6C645F64 		.ascii	"ld_dword\000"
 17805      776F7264 
 17805      00
 17806              	.LASF161:
 17807 0277 70617468 		.ascii	"path_new\000"
 17807      5F6E6577 
 17807      00
 17808              	.LASF82:
 17809 0280 6C645F77 		.ascii	"ld_word\000"
 17809      6F726400 
 17810              	.LASF10:
 17811 0288 63686172 		.ascii	"char\000"
 17811      00
 17812              	.LASF147:
 17813 028d 665F6F70 		.ascii	"f_opendir\000"
 17813      656E6469 
 17813      7200
 17814              	.LASF172:
 17815 0297 6469736B 		.ascii	"disk_ioctl\000"
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 418


 17815      5F696F63 
 17815      746C00
 17816              	.LASF133:
 17817 02a2 665F7265 		.ascii	"f_read\000"
 17817      616400
 17818              	.LASF106:
 17819 02a9 74736563 		.ascii	"tsect\000"
 17819      7400
 17820              	.LASF20:
 17821 02af 70647276 		.ascii	"pdrv\000"
 17821      00
 17822              	.LASF77:
 17823 02b4 5245535F 		.ascii	"RES_ERROR\000"
 17823      4552524F 
 17823      5200
 17824              	.LASF121:
 17825 02be 6469725F 		.ascii	"dir_next\000"
 17825      6E657874 
 17825      00
 17826              	.LASF137:
 17827 02c7 63736563 		.ascii	"csect\000"
 17827      7400
 17828              	.LASF45:
 17829 02cd 73656374 		.ascii	"sect\000"
 17829      00
 17830              	.LASF130:
 17831 02d2 73796E63 		.ascii	"sync_fs\000"
 17831      5F667300 
 17832              	.LASF126:
 17833 02da 6469725F 		.ascii	"dir_read\000"
 17833      72656164 
 17833      00
 17834              	.LASF67:
 17835 02e3 46525F4E 		.ascii	"FR_NO_FILESYSTEM\000"
 17835      4F5F4649 
 17835      4C455359 
 17835      5354454D 
 17835      00
 17836              	.LASF7:
 17837 02f4 6C6F6E67 		.ascii	"long long int\000"
 17837      206C6F6E 
 17837      6720696E 
 17837      7400
 17838              	.LASF30:
 17839 0302 6673697A 		.ascii	"fsize\000"
 17839      6500
 17840              	.LASF159:
 17841 0308 665F7265 		.ascii	"f_rename\000"
 17841      6E616D65 
 17841      00
 17842              	.LASF164:
 17843 0311 44626354 		.ascii	"DbcTbl\000"
 17843      626C00
 17844              	.LASF31:
 17845 0318 766F6C62 		.ascii	"volbase\000"
 17845      61736500 
 17846              	.LASF73:
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 419


 17847 0320 46525F49 		.ascii	"FR_INVALID_PARAMETER\000"
 17847      4E56414C 
 17847      49445F50 
 17847      4152414D 
 17847      45544552 
 17848              	.LASF23:
 17849 0335 77666C61 		.ascii	"wflag\000"
 17849      6700
 17850              	.LASF58:
 17851 033b 46525F4E 		.ascii	"FR_NO_FILE\000"
 17851      4F5F4649 
 17851      4C4500
 17852              	.LASF13:
 17853 0346 42595445 		.ascii	"BYTE\000"
 17853      00
 17854              	.LASF117:
 17855 034b 70636C73 		.ascii	"pclst\000"
 17855      7400
 17856              	.LASF108:
 17857 0351 66617369 		.ascii	"fasize\000"
 17857      7A6500
 17858              	.LASF14:
 17859 0358 574F5244 		.ascii	"WORD\000"
 17859      00
 17860              	.LASF170:
 17861 035d 6D656D73 		.ascii	"memset\000"
 17861      657400
 17862              	.LASF26:
 17863 0364 6373697A 		.ascii	"csize\000"
 17863      6500
 17864              	.LASF110:
 17865 036a 737A6266 		.ascii	"szbfat\000"
 17865      617400
 17866              	.LASF177:
 17867 0371 6D656D63 		.ascii	"memcpy\000"
 17867      707900
 17868              	.LASF163:
 17869 0378 46736964 		.ascii	"Fsid\000"
 17869      00
 17870              	.LASF80:
 17871 037d 5245535F 		.ascii	"RES_PARERR\000"
 17871      50415245 
 17871      525200
 17872              	.LASF43:
 17873 0388 66707472 		.ascii	"fptr\000"
 17873      00
 17874              	.LASF29:
 17875 038d 6E5F6661 		.ascii	"n_fatent\000"
 17875      74656E74 
 17875      00
 17876              	.LASF100:
 17877 0396 66696E64 		.ascii	"find_volume\000"
 17877      5F766F6C 
 17877      756D6500 
 17878              	.LASF78:
 17879 03a2 5245535F 		.ascii	"RES_WRPRT\000"
 17879      57525052 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 420


 17879      5400
 17880              	.LASF33:
 17881 03ac 64697262 		.ascii	"dirbase\000"
 17881      61736500 
 17882              	.LASF52:
 17883 03b4 666E616D 		.ascii	"fname\000"
 17883      6500
 17884              	.LASF139:
 17885 03ba 665F7772 		.ascii	"f_write\000"
 17885      69746500 
 17886              	.LASF88:
 17887 03c2 636C7374 		.ascii	"clst2sect\000"
 17887      32736563 
 17887      7400
 17888              	.LASF61:
 17889 03cc 46525F44 		.ascii	"FR_DENIED\000"
 17889      454E4945 
 17889      4400
 17890              	.LASF162:
 17891 03d6 46617446 		.ascii	"FatFs\000"
 17891      7300
 17892              	.LASF153:
 17893 03dc 6E667265 		.ascii	"nfree\000"
 17893      6500
 17894              	.LASF145:
 17895 03e2 6E736563 		.ascii	"nsect\000"
 17895      7400
 17896              	.LASF135:
 17897 03e8 72656D61 		.ascii	"remain\000"
 17897      696E00
 17898              	.LASF124:
 17899 03ef 6469725F 		.ascii	"dir_alloc\000"
 17899      616C6C6F 
 17899      6300
 17900              	.LASF166:
 17901 03f9 6469736B 		.ascii	"disk_write\000"
 17901      5F777269 
 17901      746500
 17902              	.LASF59:
 17903 0404 46525F4E 		.ascii	"FR_NO_PATH\000"
 17903      4F5F5041 
 17903      544800
 17904              	.LASF66:
 17905 040f 46525F4E 		.ascii	"FR_NOT_ENABLED\000"
 17905      4F545F45 
 17905      4E41424C 
 17905      454400
 17906              	.LASF81:
 17907 041e 44524553 		.ascii	"DRESULT\000"
 17907      554C5400 
 17908              	.LASF28:
 17909 0426 66726565 		.ascii	"free_clst\000"
 17909      5F636C73 
 17909      7400
 17910              	.LASF55:
 17911 0430 46525F44 		.ascii	"FR_DISK_ERR\000"
 17911      49534B5F 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 421


 17911      45525200 
 17912              	.LASF3:
 17913 043c 73686F72 		.ascii	"short int\000"
 17913      7420696E 
 17913      7400
 17914              	.LASF131:
 17915 0446 665F6D6F 		.ascii	"f_mount\000"
 17915      756E7400 
 17916              	.LASF17:
 17917 044e 4C42415F 		.ascii	"LBA_t\000"
 17917      7400
 17918              	.LASF48:
 17919 0454 64707472 		.ascii	"dptr\000"
 17919      00
 17920              	.LASF71:
 17921 0459 46525F4E 		.ascii	"FR_NOT_ENOUGH_CORE\000"
 17921      4F545F45 
 17921      4E4F5547 
 17921      485F434F 
 17921      524500
 17922              	.LASF41:
 17923 046c 46464F42 		.ascii	"FFOBJID\000"
 17923      4A494400 
 17924              	.LASF5:
 17925 0474 6C6F6E67 		.ascii	"long int\000"
 17925      20696E74 
 17925      00
 17926              	.LASF97:
 17927 047d 6D6F7665 		.ascii	"move_window\000"
 17927      5F77696E 
 17927      646F7700 
 17928              	.LASF156:
 17929 0489 64636C73 		.ascii	"dclst\000"
 17929      7400
 17930              	.LASF140:
 17931 048f 77636E74 		.ascii	"wcnt\000"
 17931      00
 17932              	.LASF60:
 17933 0494 46525F49 		.ascii	"FR_INVALID_NAME\000"
 17933      4E56414C 
 17933      49445F4E 
 17933      414D4500 
 17934              	.LASF42:
 17935 04a4 666C6167 		.ascii	"flag\000"
 17935      00
 17936              	.LASF144:
 17937 04a9 665F6C73 		.ascii	"f_lseek\000"
 17937      65656B00 
 17938              	.LASF99:
 17939 04b1 7369676E 		.ascii	"sign\000"
 17939      00
 17940              	.LASF151:
 17941 04b6 665F6765 		.ascii	"f_getfree\000"
 17941      74667265 
 17941      6500
 17942              	.LASF174:
 17943 04c0 2E5C6666 		.ascii	".\\ff.c\000"
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 422


 17943      2E6300
 17944              	.LASF25:
 17945 04c7 6E5F726F 		.ascii	"n_rootdir\000"
 17945      6F746469 
 17945      7200
 17946              	.LASF51:
 17947 04d1 66617474 		.ascii	"fattrib\000"
 17947      72696200 
 17948              	.LASF12:
 17949 04d9 55494E54 		.ascii	"UINT\000"
 17949      00
 17950              	.LASF127:
 17951 04de 63726561 		.ascii	"create_name\000"
 17951      74655F6E 
 17951      616D6500 
 17952              	.LASF9:
 17953 04ea 73697A65 		.ascii	"sizetype\000"
 17953      74797065 
 17953      00
 17954              	.LASF6:
 17955 04f3 6C6F6E67 		.ascii	"long unsigned int\000"
 17955      20756E73 
 17955      69676E65 
 17955      6420696E 
 17955      7400
 17956              	.LASF142:
 17957 0505 665F7379 		.ascii	"f_sync\000"
 17957      6E6300
 17958              	.LASF74:
 17959 050c 46524553 		.ascii	"FRESULT\000"
 17959      554C5400 
 17960              	.LASF171:
 17961 0514 73747263 		.ascii	"strchr\000"
 17961      687200
 17962              	.LASF138:
 17963 051b 72627566 		.ascii	"rbuff\000"
 17963      6600
 17964              	.LASF54:
 17965 0521 46525F4F 		.ascii	"FR_OK\000"
 17965      4B00
 17966              	.LASF105:
 17967 0527 62736563 		.ascii	"bsect\000"
 17967      7400
 17968              	.LASF115:
 17969 052d 63726561 		.ascii	"create_chain\000"
 17969      74655F63 
 17969      6861696E 
 17969      00
 17970              	.LASF40:
 17971 053a 6F626A73 		.ascii	"objsize\000"
 17971      697A6500 
 17972              	.LASF44:
 17973 0542 636C7573 		.ascii	"clust\000"
 17973      7400
 17974              	.LASF136:
 17975 0548 72636E74 		.ascii	"rcnt\000"
 17975      00
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 423


 17976              	.LASF2:
 17977 054d 756E7369 		.ascii	"unsigned char\000"
 17977      676E6564 
 17977      20636861 
 17977      7200
 17978              	.LASF173:
 17979 055b 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 17979      4320342E 
 17979      392E3320 
 17979      32303135 
 17979      30333033 
 17980 058e 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 17980      20726576 
 17980      6973696F 
 17980      6E203232 
 17980      31323230 
 17981 05c1 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 17981      66756E63 
 17981      74696F6E 
 17981      2D736563 
 17981      74696F6E 
 17982              	.LASF85:
 17983 05e9 73745F64 		.ascii	"st_dword\000"
 17983      776F7264 
 17983      00
 17984              	.LASF90:
 17985 05f2 6C645F63 		.ascii	"ld_clust\000"
 17985      6C757374 
 17985      00
 17986              	.LASF114:
 17987 05fb 6469725F 		.ascii	"dir_sdi\000"
 17987      73646900 
 17988              	.LASF69:
 17989 0603 46525F54 		.ascii	"FR_TIMEOUT\000"
 17989      494D454F 
 17989      555400
 17990              	.LASF158:
 17991 060e 736F626A 		.ascii	"sobj\000"
 17991      00
 17992              	.LASF75:
 17993 0613 44535441 		.ascii	"DSTATUS\000"
 17993      54555300 
 17994              	.LASF93:
 17995 061b 6765745F 		.ascii	"get_ldnumber\000"
 17995      6C646E75 
 17995      6D626572 
 17995      00
 17996              	.LASF76:
 17997 0628 5245535F 		.ascii	"RES_OK\000"
 17997      4F4B00
 17998              	.LASF148:
 17999 062f 665F636C 		.ascii	"f_closedir\000"
 17999      6F736564 
 17999      697200
 18000              	.LASF79:
 18001 063a 5245535F 		.ascii	"RES_NOTRDY\000"
 18001      4E4F5452 
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 424


 18001      445900
 18002              	.LASF111:
 18003 0645 6E727376 		.ascii	"nrsv\000"
 18003      00
 18004              	.LASF1:
 18005 064a 7369676E 		.ascii	"signed char\000"
 18005      65642063 
 18005      68617200 
 18006              	.LASF167:
 18007 0656 6469736B 		.ascii	"disk_read\000"
 18007      5F726561 
 18007      6400
 18008              	.LASF4:
 18009 0660 73686F72 		.ascii	"short unsigned int\000"
 18009      7420756E 
 18009      7369676E 
 18009      65642069 
 18009      6E7400
 18010              	.LASF34:
 18011 0673 64617461 		.ascii	"database\000"
 18011      62617365 
 18011      00
 18012              	.LASF122:
 18013 067c 73747265 		.ascii	"stretch\000"
 18013      74636800 
 18014              	.LASF107:
 18015 0684 73797365 		.ascii	"sysect\000"
 18015      637400
 18016              	.LASF86:
 18017 068b 6462635F 		.ascii	"dbc_1st\000"
 18017      31737400 
 18018              	.LASF150:
 18019 0693 665F7374 		.ascii	"f_stat\000"
 18019      617400
 18020              	.LASF64:
 18021 069a 46525F57 		.ascii	"FR_WRITE_PROTECTED\000"
 18021      52495445 
 18021      5F50524F 
 18021      54454354 
 18021      454400
 18022              	.LASF53:
 18023 06ad 46494C49 		.ascii	"FILINFO\000"
 18023      4E464F00 
 18024              	.LASF129:
 18025 06b5 6469725F 		.ascii	"dir_register\000"
 18025      72656769 
 18025      73746572 
 18025      00
 18026              	.LASF96:
 18027 06c2 73796E63 		.ascii	"sync_window\000"
 18027      5F77696E 
 18027      646F7700 
 18028              	.LASF39:
 18029 06ce 73636C75 		.ascii	"sclust\000"
 18029      737400
 18030              	.LASF95:
 18031 06d5 76616C69 		.ascii	"validate\000"
ARM GAS  C:\Users\student\AppData\Local\Temp\ccNQwI6t.s 			page 425


 18031      64617465 
 18031      00
 18032              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
